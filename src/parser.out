Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    OR
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     inner_statement -> function_declaration_statement
Rule 4     inner_statement -> statement
Rule 5     statement -> expr SEMICOLON
Rule 6     statement -> statement_if statement_elseif statement_else
Rule 7     statement -> WHILE expr_paren statement_BLOCK_OPT
Rule 8     statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
Rule 9     statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
Rule 10    statement -> statement_foreach
Rule 11    statement -> BREAK expr_OPT SEMICOLON
Rule 12    statement -> CONTINUE expr_OPT SEMICOLON
Rule 13    statement -> RETURN expr_return_OPT SEMICOLON
Rule 14    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 15    ampersand_variable -> AMPERSAND VARIABLE
Rule 16    AMPERSAND_OPT -> AMPERSAND
Rule 17    AMPERSAND_OPT -> <empty>
Rule 18    global_var -> VARIABLE
Rule 19    global_var -> DOLAR VARIABLE
Rule 20    global_var -> DOLAR LKEY expr RKEY
Rule 21    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 22    statement_COLON_GLOBAL -> <empty>
Rule 23    expr_paren -> LPAREN expr RPAREN
Rule 24    expr_return_OPT -> expr
Rule 25    expr_return_OPT -> <empty>
Rule 26    statement_if -> IF expr_paren statement_BLOCK_OPT
Rule 27    statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT
Rule 28    statement_elseif -> <empty>
Rule 29    statement_else -> ELSE statement_BLOCK_OPT
Rule 30    statement_else -> <empty>
Rule 31    statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
Rule 32    foreach_first_param -> variable
Rule 33    foreach_first_param -> expr
Rule 34    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 35    for_expr_OPT -> <empty>
Rule 36    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 37    function_call -> base_variable
Rule 38    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 39    function_call_parameter_list -> <empty>
Rule 40    function_call_parameter -> variable
Rule 41    function_call_parameter -> AMPERSAND VARIABLE
Rule 42    assignment_list_element -> variable
Rule 43    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 44    unary_operator -> EXC_DOT
Rule 45    unary_operator -> PLUS
Rule 46    unary_operator -> MINUS
Rule 47    type_cast_operator -> INT_TYPE
Rule 48    type_cast_operator -> DOUBLE_TYPE
Rule 49    type_cast_operator -> FLOAT_TYPE
Rule 50    type_cast_operator -> REAL_TYPE
Rule 51    type_cast_operator -> STRING_TYPE
Rule 52    type_cast_operator -> ARRAY_TYPE
Rule 53    type_cast_operator -> BOOLEAN_TYPE
Rule 54    type_cast_operator -> BOOL_TYPE
Rule 55    type_cast_operator -> UNSET
Rule 56    arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr
Rule 57    arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr
Rule 58    arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr
Rule 59    arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr
Rule 60    arithmetic_expr -> LPAREN arithmetic_expr RPAREN
Rule 61    arithmetic_expr -> NUMBER_INTEGER
Rule 62    arithmetic_expr -> NUMBER_REAL
Rule 63    assign_operator -> ADD_ASSIGN
Rule 64    assign_operator -> SUB_ASSIGN
Rule 65    assign_operator -> MOD_ASSIGN
Rule 66    assign_operator -> PLUS_ASSIGN
Rule 67    assign_operator -> DIVIDE_ASSIGN
Rule 68    assign_operator -> ASSIGN
Rule 69    arithmetic_operator -> PLUS
Rule 70    arithmetic_operator -> DIVIDE
Rule 71    arithmetic_operator -> PERCENT
Rule 72    arithmetic_operator -> TIMES
Rule 73    arithmetic_operator -> MINUS
Rule 74    comparission_operator -> EQUALS
Rule 75    comparission_operator -> GREAT_THAN
Rule 76    comparission_operator -> LESS_THAN
Rule 77    comparission_operator -> LESS_EQUAL
Rule 78    comparission_operator -> GREAT_EQUAL
Rule 79    comparission_operator -> NOT_EQUAL
Rule 80    comparission_operator -> LEFT_LOGICAL
Rule 81    comparission_operator -> RIGHT_LOGICAL
Rule 82    expr -> INCREMENT variable
Rule 83    expr -> variable INCREMENT
Rule 84    expr -> DECREMENT variable
Rule 85    expr -> variable DECREMENT
Rule 86    expr -> variable LBRACKET expr RBRACKET
Rule 87    expr -> LPAREN expr RPAREN
Rule 88    expr -> unary_operator expr
Rule 89    expr -> expr INTE_DOT expr DDOT expr
Rule 90    expr -> expr comparission_operator expr
Rule 91    expr -> variable assign_operator expr
Rule 92    expr -> variable assign_operator AMPERSAND expr
Rule 93    expr -> expr arithmetic_operator expr
Rule 94    expr -> LPAREN type_cast_operator RPAREN expr
Rule 95    expr -> EXIT expr_EXIT
Rule 96    expr -> DIE expr_EXIT
Rule 97    expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 98    expr -> function_call
Rule 99    expr -> variable
Rule 100   expr -> NUMBER_REAL
Rule 101   expr -> NUMBER_INTEGER
Rule 102   expr -> CONSTANT_ENCAPSED_STRING
Rule 103   expr -> TRUE
Rule 104   expr -> FALSE
Rule 105   encaps -> encaps_var
Rule 106   encaps -> VARIABLE
Rule 107   encaps -> LPAREN
Rule 108   encaps -> RPAREN
Rule 109   encaps -> LKEY
Rule 110   encaps -> RKEY
Rule 111   encaps_var -> VARIABLE encaps_var_OPT
Rule 112   encaps_var -> DOLAR LBRACKET expr RBRACKET
Rule 113   encaps_var -> DOLAR LKEY ID LBRACKET expr RBRACKET RKEY
Rule 114   encaps_var -> LKEY variable RKEY
Rule 115   encaps_var_OPT -> LBRACKET encaps_var_offset RBRACKET
Rule 116   encaps_var_OPT -> <empty>
Rule 117   encaps_var_offset -> STRING
Rule 118   encaps_var_offset -> VARIABLE
Rule 119   expr_EXIT -> exit_expr
Rule 120   expr_EXIT -> <empty>
Rule 121   exit_expr -> LPAREN expr_OPT RPAREN
Rule 122   variable -> base_variable
Rule 123   variable -> function_call
Rule 124   base_variable -> reference_variable
Rule 125   base_variable -> simple_indirect_reference_DOLAR reference_variable
Rule 126   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 127   compound_variable -> VARIABLE
Rule 128   compound_variable -> DOLAR LKEY expr RKEY
Rule 129   selector -> LBRACKET selector_EXPR RBRACKET
Rule 130   function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY
Rule 131   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
Rule 132   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
Rule 133   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
Rule 134   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 135   function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
Rule 136   function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
Rule 137   function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 138   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 139   parameter_list -> parameter
Rule 140   parameter -> VARIABLE
Rule 141   parameter -> VARIABLE ASSIGN static_scalar
Rule 142   parameter -> parameter_type VARIABLE
Rule 143   parameter -> parameter_type AMPERSAND VARIABLE
Rule 144   parameter -> AMPERSAND VARIABLE
Rule 145   parameter -> AMPERSAND VARIABLE ASSIGN static_scalar
Rule 146   parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
Rule 147   parameter_type -> INT_TYPE
Rule 148   parameter_type -> BOOLEAN_TYPE
Rule 149   parameter_type -> STRING_TYPE
Rule 150   parameter_type -> FLOAT_TYPE
Rule 151   parameter_type -> ARRAY_TYPE
Rule 152   parameter_type -> BOOL_TYPE
Rule 153   parameter_type -> REAL_TYPE
Rule 154   parameter_type -> DOUBLE_TYPE
Rule 155   static_scalar -> common_scalar
Rule 156   static_scalar -> PLUS static_scalar
Rule 157   static_scalar -> MINUS static_scalar
Rule 158   common_scalar -> NUMBER_REAL
Rule 159   common_scalar -> NUMBER_INTEGER
Rule 160   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 161   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 162   array_pair_list -> <empty>
Rule 163   array_pair -> expr array_pair_ATTR_EXPR_OPT
Rule 164   array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable
Rule 165   main_INNER -> inner_statement main_INNER
Rule 166   main_INNER -> inner_statement
Rule 167   statement_MUL -> statement statement_MUL
Rule 168   statement_MUL -> <empty>
Rule 169   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 170   inner_statement_MUL -> inner_statement
Rule 171   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 172   for_expr_COLON_EXPR -> <empty>
Rule 173   statement_BLOCK_OPT -> statement
Rule 174   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 175   statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable
Rule 176   statement_attr_variable_OPT -> <empty>
Rule 177   function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 178   function_call_list_COLON_FUNCTION -> <empty>
Rule 179   expr_without_variable_COLON_ASSIGNMENT -> COLON assignment_list_element expr_without_variable_COLON_ASSIGNMENT
Rule 180   expr_without_variable_COLON_ASSIGNMENT -> <empty>
Rule 181   assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 182   assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 183   expr_OPT -> expr
Rule 184   expr_OPT -> <empty>
Rule 185   expr_without_variable_ENCAPS -> encaps expr_without_variable_ENCAPS
Rule 186   expr_without_variable_ENCAPS -> <empty>
Rule 187   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 188   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 189   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 190   reference_variable_SELECTOR -> <empty>
Rule 191   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 192   simple_indirect_reference_DOLAR -> <empty>
Rule 193   selector_EXPR -> expr
Rule 194   selector_EXPR -> <empty>
Rule 195   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 196   array_pair_list_ARR_PAIR -> <empty>
Rule 197   array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr
Rule 198   array_pair_ATTR_EXPR_OPT -> <empty>
Rule 199   array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC
Rule 200   array_pair_EXPR_ATTR_OPT -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 63
AMPERSAND            : 15 16 41 92 131 132 133 134 143 144 145 146 164
AND                  : 
APOSTROFE            : 
ARRAY_TYPE           : 52 97 151
ARROBA               : 
AS                   : 31
ASPAS                : 
ASSIGN               : 68 141 145 146
ATTR_ASSOC           : 175 197 199
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 53 148
BOOL_TYPE            : 54 152
BREAK                : 11
CASE                 : 
CLONE                : 
COLON                : 21 171 177 179 181 187 188 195
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 102 160
CONTINUE             : 12
CRASE                : 
DDOT                 : 89
DECLARE              : 
DECREMENT            : 84 85
DIE                  : 96
DIVIDE               : 59 70
DIVIDE_ASSIGN        : 67
DO                   : 8
DOLAR                : 19 20 112 113 128 191
DOUBLE_TYPE          : 48 154
ELSE                 : 29
ELSEIF               : 27
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 74
EXC_DOT              : 44
EXIT                 : 95
FALSE                : 104
FLOAT_TYPE           : 49 150
FOR                  : 9
FOREACH              : 31
FUNCTION             : 130 131 132 133 134 135 136 137
GLOBAL               : 14
GREAT_EQUAL          : 78
GREAT_THAN           : 75
ID                   : 36 113 130 131 132 133 134 135 136 137
IDENTATION           : 
IF                   : 26
INCREMENT            : 82 83
INTE_DOT             : 89
INT_TYPE             : 47 147
LBRACKET             : 86 112 113 115 129
LEFT_LOGICAL         : 80
LESS_EQUAL           : 77
LESS_THAN            : 76
LIST                 : 43
LKEY                 : 20 109 113 114 128 130 131 132 133 134 135 136 137 174
LPAREN               : 9 23 31 36 43 60 87 94 97 107 121 130 131 132 133 134 135 136 137
MINUS                : 46 57 73 157
MOD_ASSIGN           : 65
NOT_EQUAL            : 79
NUMBER_INTEGER       : 61 101 159
NUMBER_REAL          : 62 100 158
OR                   : 
PERCENT              : 71
PLUS                 : 45 56 69 156
PLUS_ASSIGN          : 66
RBRACKET             : 86 112 113 115 129
REAL_TYPE            : 50 153
RETURN               : 13
RIGHT_LOGICAL        : 81
RKEY                 : 20 110 113 114 128 130 131 132 133 134 135 136 137 174
RPAREN               : 9 23 31 36 43 60 87 94 97 108 121 130 131 132 133 134 135 136 137
SEMICOLON            : 5 8 9 9 11 12 13 14
STRING               : 117
STRING_TYPE          : 51 149
SUB_ASSIGN           : 64
TIMES                : 58 72
TRUE                 : 103
UNSET                : 55
VAR                  : 
VARIABLE             : 15 18 19 41 106 111 118 127 140 141 142 143 144 145 146
WHILE                : 7 8
error                : 

Nonterminals, with rules where they appear

AMPERSAND_OPT        : 
ampersand_variable   : 31 175
arithmetic_expr      : 56 56 57 57 58 58 59 59 60
arithmetic_operator  : 93
array_pair           : 161 195
array_pair_ATTR_EXPR_OPT : 163
array_pair_EXPR_ATTR_OPT : 164
array_pair_list      : 97
array_pair_list_ARR_PAIR : 161 195
assign_operator      : 91 92
assignment_list_element : 43 179 181
assignment_list_element_COLON_ASSIGNMENT : 43 181
base_variable        : 37 122
common_scalar        : 155
comparission_operator : 90
compound_variable    : 126
encaps               : 185
encaps_var           : 105
encaps_var_OPT       : 111
encaps_var_offset    : 115
exit_expr            : 119
expr                 : 5 20 23 24 33 34 86 87 88 89 89 89 90 90 91 92 93 93 94 112 113 128 163 171 183 193 197 199
expr_EXIT            : 95 96
expr_OPT             : 11 12 121
expr_paren           : 7 8 26 27
expr_return_OPT      : 13
expr_without_variable_COLON_ASSIGNMENT : 179
expr_without_variable_ENCAPS : 185
for_expr_COLON_EXPR  : 34 171
for_expr_OPT         : 9 9 9
foreach_first_param  : 31
function_call        : 98 123
function_call_list_COLON_FUNCTION : 38 177
function_call_parameter : 38 177
function_call_parameter_list : 36
function_declaration_statement : 3
global_var           : 14 21
inner_statement      : 165 166 169 170
inner_statement_MUL  : 133 134 136 137 169
main                 : 0
main_INNER           : 1 165
parameter            : 138 139 187 188
parameter_list       : 132 134 135 137
parameter_list_COLON_PARAMETER : 138 187
parameter_type       : 142 143 146
reference_variable   : 124 125
reference_variable_SELECTOR : 126 189
selector             : 189
selector_EXPR        : 129
simple_indirect_reference_DOLAR : 125 191
statement            : 4 167 173
statement_BLOCK_OPT  : 7 8 9 26 27 29 31
statement_COLON_GLOBAL : 14 21
statement_MUL        : 167 174
statement_attr_variable_OPT : 31
statement_else       : 6
statement_elseif     : 6
statement_foreach    : 10
statement_if         : 6
static_scalar        : 141 145 146 156 157
type_cast_operator   : 94
unary_operator       : 88
variable             : 32 40 42 82 83 84 85 86 91 92 99 114 164

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (165) main_INNER -> . inner_statement main_INNER
    (166) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (130) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (131) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 45


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (165) main_INNER -> inner_statement . main_INNER
    (166) main_INNER -> inner_statement .
    (165) main_INNER -> . inner_statement main_INNER
    (166) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (130) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (131) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     reduce using rule 166 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 46
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 6

    (3) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 3 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 3 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 3 (inner_statement -> function_declaration_statement .)


state 7

    (4) inner_statement -> statement .

    FUNCTION        reduce using rule 4 (inner_statement -> statement .)
    WHILE           reduce using rule 4 (inner_statement -> statement .)
    DO              reduce using rule 4 (inner_statement -> statement .)
    FOR             reduce using rule 4 (inner_statement -> statement .)
    BREAK           reduce using rule 4 (inner_statement -> statement .)
    CONTINUE        reduce using rule 4 (inner_statement -> statement .)
    RETURN          reduce using rule 4 (inner_statement -> statement .)
    GLOBAL          reduce using rule 4 (inner_statement -> statement .)
    INCREMENT       reduce using rule 4 (inner_statement -> statement .)
    DECREMENT       reduce using rule 4 (inner_statement -> statement .)
    LPAREN          reduce using rule 4 (inner_statement -> statement .)
    EXIT            reduce using rule 4 (inner_statement -> statement .)
    DIE             reduce using rule 4 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 4 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 4 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 4 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (inner_statement -> statement .)
    TRUE            reduce using rule 4 (inner_statement -> statement .)
    FALSE           reduce using rule 4 (inner_statement -> statement .)
    IF              reduce using rule 4 (inner_statement -> statement .)
    FOREACH         reduce using rule 4 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 4 (inner_statement -> statement .)
    PLUS            reduce using rule 4 (inner_statement -> statement .)
    MINUS           reduce using rule 4 (inner_statement -> statement .)
    ID              reduce using rule 4 (inner_statement -> statement .)
    DOLAR           reduce using rule 4 (inner_statement -> statement .)
    VARIABLE        reduce using rule 4 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 4 (inner_statement -> statement .)
    RKEY            reduce using rule 4 (inner_statement -> statement .)


state 8

    (130) function_declaration_statement -> FUNCTION . ID LPAREN RPAREN LKEY RKEY
    (131) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> FUNCTION . ID LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> FUNCTION . ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> FUNCTION . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 47
    AMPERSAND       shift and go to state 48


state 9

    (36) function_call -> ID . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 49


state 10

    (87) expr -> LPAREN . expr RPAREN
    (94) expr -> LPAREN . type_cast_operator RPAREN expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (47) type_cast_operator -> . INT_TYPE
    (48) type_cast_operator -> . DOUBLE_TYPE
    (49) type_cast_operator -> . FLOAT_TYPE
    (50) type_cast_operator -> . REAL_TYPE
    (51) type_cast_operator -> . STRING_TYPE
    (52) type_cast_operator -> . ARRAY_TYPE
    (53) type_cast_operator -> . BOOLEAN_TYPE
    (54) type_cast_operator -> . BOOL_TYPE
    (55) type_cast_operator -> . UNSET
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 52
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    INT_TYPE        shift and go to state 53
    DOUBLE_TYPE     shift and go to state 54
    FLOAT_TYPE      shift and go to state 55
    REAL_TYPE       shift and go to state 56
    STRING_TYPE     shift and go to state 57
    BOOLEAN_TYPE    shift and go to state 58
    BOOL_TYPE       shift and go to state 59
    UNSET           shift and go to state 60
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 50
    type_cast_operator             shift and go to state 51
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 11

    (5) statement -> expr . SEMICOLON
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 61
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 12

    (6) statement -> statement_if . statement_elseif statement_else
    (27) statement_elseif -> . ELSEIF expr_paren statement_BLOCK_OPT
    (28) statement_elseif -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 79
    ELSE            reduce using rule 28 (statement_elseif -> .)
    FUNCTION        reduce using rule 28 (statement_elseif -> .)
    WHILE           reduce using rule 28 (statement_elseif -> .)
    DO              reduce using rule 28 (statement_elseif -> .)
    FOR             reduce using rule 28 (statement_elseif -> .)
    BREAK           reduce using rule 28 (statement_elseif -> .)
    CONTINUE        reduce using rule 28 (statement_elseif -> .)
    RETURN          reduce using rule 28 (statement_elseif -> .)
    GLOBAL          reduce using rule 28 (statement_elseif -> .)
    INCREMENT       reduce using rule 28 (statement_elseif -> .)
    DECREMENT       reduce using rule 28 (statement_elseif -> .)
    LPAREN          reduce using rule 28 (statement_elseif -> .)
    EXIT            reduce using rule 28 (statement_elseif -> .)
    DIE             reduce using rule 28 (statement_elseif -> .)
    ARRAY_TYPE      reduce using rule 28 (statement_elseif -> .)
    NUMBER_REAL     reduce using rule 28 (statement_elseif -> .)
    NUMBER_INTEGER  reduce using rule 28 (statement_elseif -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 28 (statement_elseif -> .)
    TRUE            reduce using rule 28 (statement_elseif -> .)
    FALSE           reduce using rule 28 (statement_elseif -> .)
    IF              reduce using rule 28 (statement_elseif -> .)
    FOREACH         reduce using rule 28 (statement_elseif -> .)
    EXC_DOT         reduce using rule 28 (statement_elseif -> .)
    PLUS            reduce using rule 28 (statement_elseif -> .)
    MINUS           reduce using rule 28 (statement_elseif -> .)
    ID              reduce using rule 28 (statement_elseif -> .)
    DOLAR           reduce using rule 28 (statement_elseif -> .)
    VARIABLE        reduce using rule 28 (statement_elseif -> .)
    END_PROGRAM     reduce using rule 28 (statement_elseif -> .)
    RKEY            reduce using rule 28 (statement_elseif -> .)

  ! ELSEIF          [ reduce using rule 28 (statement_elseif -> .) ]

    statement_elseif               shift and go to state 78

state 13

    (7) statement -> WHILE . expr_paren statement_BLOCK_OPT
    (23) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 81

    expr_paren                     shift and go to state 80

state 14

    (8) statement -> DO . statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (173) statement_BLOCK_OPT -> . statement
    (174) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 82
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 15

    (9) statement -> FOR . LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 85


state 16

    (10) statement -> statement_foreach .

    FUNCTION        reduce using rule 10 (statement -> statement_foreach .)
    WHILE           reduce using rule 10 (statement -> statement_foreach .)
    DO              reduce using rule 10 (statement -> statement_foreach .)
    FOR             reduce using rule 10 (statement -> statement_foreach .)
    BREAK           reduce using rule 10 (statement -> statement_foreach .)
    CONTINUE        reduce using rule 10 (statement -> statement_foreach .)
    RETURN          reduce using rule 10 (statement -> statement_foreach .)
    GLOBAL          reduce using rule 10 (statement -> statement_foreach .)
    INCREMENT       reduce using rule 10 (statement -> statement_foreach .)
    DECREMENT       reduce using rule 10 (statement -> statement_foreach .)
    LPAREN          reduce using rule 10 (statement -> statement_foreach .)
    EXIT            reduce using rule 10 (statement -> statement_foreach .)
    DIE             reduce using rule 10 (statement -> statement_foreach .)
    ARRAY_TYPE      reduce using rule 10 (statement -> statement_foreach .)
    NUMBER_REAL     reduce using rule 10 (statement -> statement_foreach .)
    NUMBER_INTEGER  reduce using rule 10 (statement -> statement_foreach .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (statement -> statement_foreach .)
    TRUE            reduce using rule 10 (statement -> statement_foreach .)
    FALSE           reduce using rule 10 (statement -> statement_foreach .)
    IF              reduce using rule 10 (statement -> statement_foreach .)
    FOREACH         reduce using rule 10 (statement -> statement_foreach .)
    EXC_DOT         reduce using rule 10 (statement -> statement_foreach .)
    PLUS            reduce using rule 10 (statement -> statement_foreach .)
    MINUS           reduce using rule 10 (statement -> statement_foreach .)
    ID              reduce using rule 10 (statement -> statement_foreach .)
    DOLAR           reduce using rule 10 (statement -> statement_foreach .)
    VARIABLE        reduce using rule 10 (statement -> statement_foreach .)
    END_PROGRAM     reduce using rule 10 (statement -> statement_foreach .)
    ELSE            reduce using rule 10 (statement -> statement_foreach .)
    RKEY            reduce using rule 10 (statement -> statement_foreach .)
    ELSEIF          reduce using rule 10 (statement -> statement_foreach .)


state 17

    (11) statement -> BREAK . expr_OPT SEMICOLON
    (183) expr_OPT -> . expr
    (184) expr_OPT -> .
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 184 (expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 86
    expr                           shift and go to state 87
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 18

    (12) statement -> CONTINUE . expr_OPT SEMICOLON
    (183) expr_OPT -> . expr
    (184) expr_OPT -> .
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 184 (expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 88
    expr                           shift and go to state 87
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 19

    (13) statement -> RETURN . expr_return_OPT SEMICOLON
    (24) expr_return_OPT -> . expr
    (25) expr_return_OPT -> .
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 25 (expr_return_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr_return_OPT                shift and go to state 89
    expr                           shift and go to state 90
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 20

    (14) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (18) global_var -> . VARIABLE
    (19) global_var -> . DOLAR VARIABLE
    (20) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 92
    DOLAR           shift and go to state 93

    global_var                     shift and go to state 91

state 21

    (82) expr -> INCREMENT . variable
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 94
    base_variable                  shift and go to state 36
    function_call                  shift and go to state 95
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 22

    (83) expr -> variable . INCREMENT
    (85) expr -> variable . DECREMENT
    (86) expr -> variable . LBRACKET expr RBRACKET
    (91) expr -> variable . assign_operator expr
    (92) expr -> variable . assign_operator AMPERSAND expr
    (99) expr -> variable .
    (63) assign_operator -> . ADD_ASSIGN
    (64) assign_operator -> . SUB_ASSIGN
    (65) assign_operator -> . MOD_ASSIGN
    (66) assign_operator -> . PLUS_ASSIGN
    (67) assign_operator -> . DIVIDE_ASSIGN
    (68) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 96
    DECREMENT       shift and go to state 97
    LBRACKET        shift and go to state 98
    SEMICOLON       reduce using rule 99 (expr -> variable .)
    INTE_DOT        reduce using rule 99 (expr -> variable .)
    EQUALS          reduce using rule 99 (expr -> variable .)
    GREAT_THAN      reduce using rule 99 (expr -> variable .)
    LESS_THAN       reduce using rule 99 (expr -> variable .)
    LESS_EQUAL      reduce using rule 99 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 99 (expr -> variable .)
    NOT_EQUAL       reduce using rule 99 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 99 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 99 (expr -> variable .)
    PLUS            reduce using rule 99 (expr -> variable .)
    DIVIDE          reduce using rule 99 (expr -> variable .)
    PERCENT         reduce using rule 99 (expr -> variable .)
    TIMES           reduce using rule 99 (expr -> variable .)
    MINUS           reduce using rule 99 (expr -> variable .)
    RPAREN          reduce using rule 99 (expr -> variable .)
    DDOT            reduce using rule 99 (expr -> variable .)
    COLON           reduce using rule 99 (expr -> variable .)
    RBRACKET        reduce using rule 99 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 99 (expr -> variable .)
    AS              reduce using rule 99 (expr -> variable .)
    RKEY            reduce using rule 99 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 100
    SUB_ASSIGN      shift and go to state 101
    MOD_ASSIGN      shift and go to state 102
    PLUS_ASSIGN     shift and go to state 103
    DIVIDE_ASSIGN   shift and go to state 104
    ASSIGN          shift and go to state 105

    assign_operator                shift and go to state 99

state 23

    (84) expr -> DECREMENT . variable
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 106
    base_variable                  shift and go to state 36
    function_call                  shift and go to state 95
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 24

    (88) expr -> unary_operator . expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    unary_operator                 shift and go to state 24
    expr                           shift and go to state 107
    variable                       shift and go to state 22
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 25

    (95) expr -> EXIT . expr_EXIT
    (119) expr_EXIT -> . exit_expr
    (120) expr_EXIT -> .
    (121) exit_expr -> . LPAREN expr_OPT RPAREN

    SEMICOLON       reduce using rule 120 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 120 (expr_EXIT -> .)
    EQUALS          reduce using rule 120 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 120 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 120 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 120 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 120 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 120 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 120 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 120 (expr_EXIT -> .)
    PLUS            reduce using rule 120 (expr_EXIT -> .)
    DIVIDE          reduce using rule 120 (expr_EXIT -> .)
    PERCENT         reduce using rule 120 (expr_EXIT -> .)
    TIMES           reduce using rule 120 (expr_EXIT -> .)
    MINUS           reduce using rule 120 (expr_EXIT -> .)
    RPAREN          reduce using rule 120 (expr_EXIT -> .)
    DDOT            reduce using rule 120 (expr_EXIT -> .)
    COLON           reduce using rule 120 (expr_EXIT -> .)
    RBRACKET        reduce using rule 120 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 120 (expr_EXIT -> .)
    AS              reduce using rule 120 (expr_EXIT -> .)
    RKEY            reduce using rule 120 (expr_EXIT -> .)
    LPAREN          shift and go to state 110

    expr_EXIT                      shift and go to state 108
    exit_expr                      shift and go to state 109

state 26

    (96) expr -> DIE . expr_EXIT
    (119) expr_EXIT -> . exit_expr
    (120) expr_EXIT -> .
    (121) exit_expr -> . LPAREN expr_OPT RPAREN

    SEMICOLON       reduce using rule 120 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 120 (expr_EXIT -> .)
    EQUALS          reduce using rule 120 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 120 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 120 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 120 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 120 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 120 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 120 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 120 (expr_EXIT -> .)
    PLUS            reduce using rule 120 (expr_EXIT -> .)
    DIVIDE          reduce using rule 120 (expr_EXIT -> .)
    PERCENT         reduce using rule 120 (expr_EXIT -> .)
    TIMES           reduce using rule 120 (expr_EXIT -> .)
    MINUS           reduce using rule 120 (expr_EXIT -> .)
    RPAREN          reduce using rule 120 (expr_EXIT -> .)
    DDOT            reduce using rule 120 (expr_EXIT -> .)
    COLON           reduce using rule 120 (expr_EXIT -> .)
    RBRACKET        reduce using rule 120 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 120 (expr_EXIT -> .)
    AS              reduce using rule 120 (expr_EXIT -> .)
    RKEY            reduce using rule 120 (expr_EXIT -> .)
    LPAREN          shift and go to state 110

    expr_EXIT                      shift and go to state 111
    exit_expr                      shift and go to state 109

state 27

    (97) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN

    LPAREN          shift and go to state 112


state 28

    (98) expr -> function_call .
    (123) variable -> function_call .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for PERCENT resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for DDOT resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for COLON resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for AS resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for RKEY resolved using rule 98 (expr -> function_call .)
    SEMICOLON       reduce using rule 98 (expr -> function_call .)
    INTE_DOT        reduce using rule 98 (expr -> function_call .)
    EQUALS          reduce using rule 98 (expr -> function_call .)
    GREAT_THAN      reduce using rule 98 (expr -> function_call .)
    LESS_THAN       reduce using rule 98 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 98 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 98 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 98 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 98 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 98 (expr -> function_call .)
    PLUS            reduce using rule 98 (expr -> function_call .)
    DIVIDE          reduce using rule 98 (expr -> function_call .)
    PERCENT         reduce using rule 98 (expr -> function_call .)
    TIMES           reduce using rule 98 (expr -> function_call .)
    MINUS           reduce using rule 98 (expr -> function_call .)
    RPAREN          reduce using rule 98 (expr -> function_call .)
    DDOT            reduce using rule 98 (expr -> function_call .)
    COLON           reduce using rule 98 (expr -> function_call .)
    RBRACKET        reduce using rule 98 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 98 (expr -> function_call .)
    AS              reduce using rule 98 (expr -> function_call .)
    RKEY            reduce using rule 98 (expr -> function_call .)
    INCREMENT       reduce using rule 123 (variable -> function_call .)
    DECREMENT       reduce using rule 123 (variable -> function_call .)
    LBRACKET        reduce using rule 123 (variable -> function_call .)
    ADD_ASSIGN      reduce using rule 123 (variable -> function_call .)
    SUB_ASSIGN      reduce using rule 123 (variable -> function_call .)
    MOD_ASSIGN      reduce using rule 123 (variable -> function_call .)
    PLUS_ASSIGN     reduce using rule 123 (variable -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 123 (variable -> function_call .)
    ASSIGN          reduce using rule 123 (variable -> function_call .)

  ! SEMICOLON       [ reduce using rule 123 (variable -> function_call .) ]
  ! INTE_DOT        [ reduce using rule 123 (variable -> function_call .) ]
  ! EQUALS          [ reduce using rule 123 (variable -> function_call .) ]
  ! GREAT_THAN      [ reduce using rule 123 (variable -> function_call .) ]
  ! LESS_THAN       [ reduce using rule 123 (variable -> function_call .) ]
  ! LESS_EQUAL      [ reduce using rule 123 (variable -> function_call .) ]
  ! GREAT_EQUAL     [ reduce using rule 123 (variable -> function_call .) ]
  ! NOT_EQUAL       [ reduce using rule 123 (variable -> function_call .) ]
  ! LEFT_LOGICAL    [ reduce using rule 123 (variable -> function_call .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 123 (variable -> function_call .) ]
  ! PLUS            [ reduce using rule 123 (variable -> function_call .) ]
  ! DIVIDE          [ reduce using rule 123 (variable -> function_call .) ]
  ! PERCENT         [ reduce using rule 123 (variable -> function_call .) ]
  ! TIMES           [ reduce using rule 123 (variable -> function_call .) ]
  ! MINUS           [ reduce using rule 123 (variable -> function_call .) ]
  ! RPAREN          [ reduce using rule 123 (variable -> function_call .) ]
  ! DDOT            [ reduce using rule 123 (variable -> function_call .) ]
  ! COLON           [ reduce using rule 123 (variable -> function_call .) ]
  ! RBRACKET        [ reduce using rule 123 (variable -> function_call .) ]
  ! ATTR_ASSOC      [ reduce using rule 123 (variable -> function_call .) ]
  ! AS              [ reduce using rule 123 (variable -> function_call .) ]
  ! RKEY            [ reduce using rule 123 (variable -> function_call .) ]


state 29

    (100) expr -> NUMBER_REAL .

    SEMICOLON       reduce using rule 100 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 100 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 100 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 100 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 100 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 100 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 100 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 100 (expr -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 100 (expr -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 100 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 100 (expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 100 (expr -> NUMBER_REAL .)
    PERCENT         reduce using rule 100 (expr -> NUMBER_REAL .)
    TIMES           reduce using rule 100 (expr -> NUMBER_REAL .)
    MINUS           reduce using rule 100 (expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 100 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 100 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 100 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 100 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 100 (expr -> NUMBER_REAL .)
    AS              reduce using rule 100 (expr -> NUMBER_REAL .)
    RKEY            reduce using rule 100 (expr -> NUMBER_REAL .)


state 30

    (101) expr -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 101 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 101 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 101 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 101 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 101 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 101 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 101 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 101 (expr -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 101 (expr -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 101 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 101 (expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 101 (expr -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 101 (expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 101 (expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 101 (expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 101 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 101 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 101 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 101 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 101 (expr -> NUMBER_INTEGER .)
    AS              reduce using rule 101 (expr -> NUMBER_INTEGER .)
    RKEY            reduce using rule 101 (expr -> NUMBER_INTEGER .)


state 31

    (102) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 102 (expr -> CONSTANT_ENCAPSED_STRING .)


state 32

    (103) expr -> TRUE .

    SEMICOLON       reduce using rule 103 (expr -> TRUE .)
    INTE_DOT        reduce using rule 103 (expr -> TRUE .)
    EQUALS          reduce using rule 103 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 103 (expr -> TRUE .)
    LESS_THAN       reduce using rule 103 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 103 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 103 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 103 (expr -> TRUE .)
    LEFT_LOGICAL    reduce using rule 103 (expr -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 103 (expr -> TRUE .)
    PLUS            reduce using rule 103 (expr -> TRUE .)
    DIVIDE          reduce using rule 103 (expr -> TRUE .)
    PERCENT         reduce using rule 103 (expr -> TRUE .)
    TIMES           reduce using rule 103 (expr -> TRUE .)
    MINUS           reduce using rule 103 (expr -> TRUE .)
    RPAREN          reduce using rule 103 (expr -> TRUE .)
    DDOT            reduce using rule 103 (expr -> TRUE .)
    COLON           reduce using rule 103 (expr -> TRUE .)
    RBRACKET        reduce using rule 103 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 103 (expr -> TRUE .)
    AS              reduce using rule 103 (expr -> TRUE .)
    RKEY            reduce using rule 103 (expr -> TRUE .)


state 33

    (104) expr -> FALSE .

    SEMICOLON       reduce using rule 104 (expr -> FALSE .)
    INTE_DOT        reduce using rule 104 (expr -> FALSE .)
    EQUALS          reduce using rule 104 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 104 (expr -> FALSE .)
    LESS_THAN       reduce using rule 104 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 104 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 104 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 104 (expr -> FALSE .)
    LEFT_LOGICAL    reduce using rule 104 (expr -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 104 (expr -> FALSE .)
    PLUS            reduce using rule 104 (expr -> FALSE .)
    DIVIDE          reduce using rule 104 (expr -> FALSE .)
    PERCENT         reduce using rule 104 (expr -> FALSE .)
    TIMES           reduce using rule 104 (expr -> FALSE .)
    MINUS           reduce using rule 104 (expr -> FALSE .)
    RPAREN          reduce using rule 104 (expr -> FALSE .)
    DDOT            reduce using rule 104 (expr -> FALSE .)
    COLON           reduce using rule 104 (expr -> FALSE .)
    RBRACKET        reduce using rule 104 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 104 (expr -> FALSE .)
    AS              reduce using rule 104 (expr -> FALSE .)
    RKEY            reduce using rule 104 (expr -> FALSE .)


state 34

    (26) statement_if -> IF . expr_paren statement_BLOCK_OPT
    (23) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 81

    expr_paren                     shift and go to state 113

state 35

    (31) statement_foreach -> FOREACH . LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 114


state 36

    (122) variable -> base_variable .
    (37) function_call -> base_variable .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for EQUALS resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for PERCENT resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for ADD_ASSIGN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for SUB_ASSIGN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for MOD_ASSIGN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS_ASSIGN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE_ASSIGN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for DDOT resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for COLON resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for AS resolved using rule 37 (function_call -> base_variable .)
  ! reduce/reduce conflict for RKEY resolved using rule 37 (function_call -> base_variable .)
    SEMICOLON       reduce using rule 37 (function_call -> base_variable .)
    INTE_DOT        reduce using rule 37 (function_call -> base_variable .)
    EQUALS          reduce using rule 37 (function_call -> base_variable .)
    GREAT_THAN      reduce using rule 37 (function_call -> base_variable .)
    LESS_THAN       reduce using rule 37 (function_call -> base_variable .)
    LESS_EQUAL      reduce using rule 37 (function_call -> base_variable .)
    GREAT_EQUAL     reduce using rule 37 (function_call -> base_variable .)
    NOT_EQUAL       reduce using rule 37 (function_call -> base_variable .)
    LEFT_LOGICAL    reduce using rule 37 (function_call -> base_variable .)
    RIGHT_LOGICAL   reduce using rule 37 (function_call -> base_variable .)
    PLUS            reduce using rule 37 (function_call -> base_variable .)
    DIVIDE          reduce using rule 37 (function_call -> base_variable .)
    PERCENT         reduce using rule 37 (function_call -> base_variable .)
    TIMES           reduce using rule 37 (function_call -> base_variable .)
    MINUS           reduce using rule 37 (function_call -> base_variable .)
    INCREMENT       reduce using rule 37 (function_call -> base_variable .)
    DECREMENT       reduce using rule 37 (function_call -> base_variable .)
    LBRACKET        reduce using rule 37 (function_call -> base_variable .)
    ADD_ASSIGN      reduce using rule 37 (function_call -> base_variable .)
    SUB_ASSIGN      reduce using rule 37 (function_call -> base_variable .)
    MOD_ASSIGN      reduce using rule 37 (function_call -> base_variable .)
    PLUS_ASSIGN     reduce using rule 37 (function_call -> base_variable .)
    DIVIDE_ASSIGN   reduce using rule 37 (function_call -> base_variable .)
    ASSIGN          reduce using rule 37 (function_call -> base_variable .)
    RPAREN          reduce using rule 37 (function_call -> base_variable .)
    DDOT            reduce using rule 37 (function_call -> base_variable .)
    COLON           reduce using rule 37 (function_call -> base_variable .)
    RBRACKET        reduce using rule 37 (function_call -> base_variable .)
    ATTR_ASSOC      reduce using rule 37 (function_call -> base_variable .)
    AS              reduce using rule 37 (function_call -> base_variable .)
    RKEY            reduce using rule 37 (function_call -> base_variable .)

  ! INCREMENT       [ reduce using rule 122 (variable -> base_variable .) ]
  ! DECREMENT       [ reduce using rule 122 (variable -> base_variable .) ]
  ! LBRACKET        [ reduce using rule 122 (variable -> base_variable .) ]
  ! ADD_ASSIGN      [ reduce using rule 122 (variable -> base_variable .) ]
  ! SUB_ASSIGN      [ reduce using rule 122 (variable -> base_variable .) ]
  ! MOD_ASSIGN      [ reduce using rule 122 (variable -> base_variable .) ]
  ! PLUS_ASSIGN     [ reduce using rule 122 (variable -> base_variable .) ]
  ! DIVIDE_ASSIGN   [ reduce using rule 122 (variable -> base_variable .) ]
  ! ASSIGN          [ reduce using rule 122 (variable -> base_variable .) ]
  ! SEMICOLON       [ reduce using rule 122 (variable -> base_variable .) ]
  ! INTE_DOT        [ reduce using rule 122 (variable -> base_variable .) ]
  ! EQUALS          [ reduce using rule 122 (variable -> base_variable .) ]
  ! GREAT_THAN      [ reduce using rule 122 (variable -> base_variable .) ]
  ! LESS_THAN       [ reduce using rule 122 (variable -> base_variable .) ]
  ! LESS_EQUAL      [ reduce using rule 122 (variable -> base_variable .) ]
  ! GREAT_EQUAL     [ reduce using rule 122 (variable -> base_variable .) ]
  ! NOT_EQUAL       [ reduce using rule 122 (variable -> base_variable .) ]
  ! LEFT_LOGICAL    [ reduce using rule 122 (variable -> base_variable .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 122 (variable -> base_variable .) ]
  ! PLUS            [ reduce using rule 122 (variable -> base_variable .) ]
  ! DIVIDE          [ reduce using rule 122 (variable -> base_variable .) ]
  ! PERCENT         [ reduce using rule 122 (variable -> base_variable .) ]
  ! TIMES           [ reduce using rule 122 (variable -> base_variable .) ]
  ! MINUS           [ reduce using rule 122 (variable -> base_variable .) ]
  ! RPAREN          [ reduce using rule 122 (variable -> base_variable .) ]
  ! DDOT            [ reduce using rule 122 (variable -> base_variable .) ]
  ! COLON           [ reduce using rule 122 (variable -> base_variable .) ]
  ! RBRACKET        [ reduce using rule 122 (variable -> base_variable .) ]
  ! ATTR_ASSOC      [ reduce using rule 122 (variable -> base_variable .) ]
  ! AS              [ reduce using rule 122 (variable -> base_variable .) ]
  ! RKEY            [ reduce using rule 122 (variable -> base_variable .) ]


state 37

    (44) unary_operator -> EXC_DOT .

    INCREMENT       reduce using rule 44 (unary_operator -> EXC_DOT .)
    DECREMENT       reduce using rule 44 (unary_operator -> EXC_DOT .)
    LPAREN          reduce using rule 44 (unary_operator -> EXC_DOT .)
    EXIT            reduce using rule 44 (unary_operator -> EXC_DOT .)
    DIE             reduce using rule 44 (unary_operator -> EXC_DOT .)
    ARRAY_TYPE      reduce using rule 44 (unary_operator -> EXC_DOT .)
    NUMBER_REAL     reduce using rule 44 (unary_operator -> EXC_DOT .)
    NUMBER_INTEGER  reduce using rule 44 (unary_operator -> EXC_DOT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (unary_operator -> EXC_DOT .)
    TRUE            reduce using rule 44 (unary_operator -> EXC_DOT .)
    FALSE           reduce using rule 44 (unary_operator -> EXC_DOT .)
    EXC_DOT         reduce using rule 44 (unary_operator -> EXC_DOT .)
    PLUS            reduce using rule 44 (unary_operator -> EXC_DOT .)
    MINUS           reduce using rule 44 (unary_operator -> EXC_DOT .)
    ID              reduce using rule 44 (unary_operator -> EXC_DOT .)
    DOLAR           reduce using rule 44 (unary_operator -> EXC_DOT .)
    VARIABLE        reduce using rule 44 (unary_operator -> EXC_DOT .)


state 38

    (45) unary_operator -> PLUS .

    INCREMENT       reduce using rule 45 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 45 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 45 (unary_operator -> PLUS .)
    EXIT            reduce using rule 45 (unary_operator -> PLUS .)
    DIE             reduce using rule 45 (unary_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 45 (unary_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 45 (unary_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 45 (unary_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 45 (unary_operator -> PLUS .)
    TRUE            reduce using rule 45 (unary_operator -> PLUS .)
    FALSE           reduce using rule 45 (unary_operator -> PLUS .)
    EXC_DOT         reduce using rule 45 (unary_operator -> PLUS .)
    PLUS            reduce using rule 45 (unary_operator -> PLUS .)
    MINUS           reduce using rule 45 (unary_operator -> PLUS .)
    ID              reduce using rule 45 (unary_operator -> PLUS .)
    DOLAR           reduce using rule 45 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 45 (unary_operator -> PLUS .)


state 39

    (46) unary_operator -> MINUS .

    INCREMENT       reduce using rule 46 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 46 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 46 (unary_operator -> MINUS .)
    EXIT            reduce using rule 46 (unary_operator -> MINUS .)
    DIE             reduce using rule 46 (unary_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 46 (unary_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 46 (unary_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 46 (unary_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (unary_operator -> MINUS .)
    TRUE            reduce using rule 46 (unary_operator -> MINUS .)
    FALSE           reduce using rule 46 (unary_operator -> MINUS .)
    EXC_DOT         reduce using rule 46 (unary_operator -> MINUS .)
    PLUS            reduce using rule 46 (unary_operator -> MINUS .)
    MINUS           reduce using rule 46 (unary_operator -> MINUS .)
    ID              reduce using rule 46 (unary_operator -> MINUS .)
    DOLAR           reduce using rule 46 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 46 (unary_operator -> MINUS .)


state 40

    (124) base_variable -> reference_variable .

    INCREMENT       reduce using rule 124 (base_variable -> reference_variable .)
    DECREMENT       reduce using rule 124 (base_variable -> reference_variable .)
    LBRACKET        reduce using rule 124 (base_variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 124 (base_variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 124 (base_variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 124 (base_variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 124 (base_variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 124 (base_variable -> reference_variable .)
    ASSIGN          reduce using rule 124 (base_variable -> reference_variable .)
    SEMICOLON       reduce using rule 124 (base_variable -> reference_variable .)
    INTE_DOT        reduce using rule 124 (base_variable -> reference_variable .)
    EQUALS          reduce using rule 124 (base_variable -> reference_variable .)
    GREAT_THAN      reduce using rule 124 (base_variable -> reference_variable .)
    LESS_THAN       reduce using rule 124 (base_variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 124 (base_variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 124 (base_variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 124 (base_variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 124 (base_variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 124 (base_variable -> reference_variable .)
    PLUS            reduce using rule 124 (base_variable -> reference_variable .)
    DIVIDE          reduce using rule 124 (base_variable -> reference_variable .)
    PERCENT         reduce using rule 124 (base_variable -> reference_variable .)
    TIMES           reduce using rule 124 (base_variable -> reference_variable .)
    MINUS           reduce using rule 124 (base_variable -> reference_variable .)
    RPAREN          reduce using rule 124 (base_variable -> reference_variable .)
    DDOT            reduce using rule 124 (base_variable -> reference_variable .)
    COLON           reduce using rule 124 (base_variable -> reference_variable .)
    RBRACKET        reduce using rule 124 (base_variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 124 (base_variable -> reference_variable .)
    AS              reduce using rule 124 (base_variable -> reference_variable .)
    RKEY            reduce using rule 124 (base_variable -> reference_variable .)


state 41

    (125) base_variable -> simple_indirect_reference_DOLAR . reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 44
    DOLAR           shift and go to state 116

    reference_variable             shift and go to state 115
    compound_variable              shift and go to state 42

state 42

    (126) reference_variable -> compound_variable . reference_variable_SELECTOR
    (189) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (190) reference_variable_SELECTOR -> .
    (129) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 190 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 190 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 190 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 190 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 190 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 190 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 190 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 190 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 190 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 190 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 190 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 190 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 190 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 190 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 190 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 190 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 190 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 190 (reference_variable_SELECTOR -> .)
    PLUS            reduce using rule 190 (reference_variable_SELECTOR -> .)
    DIVIDE          reduce using rule 190 (reference_variable_SELECTOR -> .)
    PERCENT         reduce using rule 190 (reference_variable_SELECTOR -> .)
    TIMES           reduce using rule 190 (reference_variable_SELECTOR -> .)
    MINUS           reduce using rule 190 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 190 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 190 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 190 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 190 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 190 (reference_variable_SELECTOR -> .)
    AS              reduce using rule 190 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 190 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 119

  ! LBRACKET        [ reduce using rule 190 (reference_variable_SELECTOR -> .) ]

    reference_variable_SELECTOR    shift and go to state 117
    selector                       shift and go to state 118

state 43

    (191) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (128) compound_variable -> DOLAR . LKEY expr RKEY
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    LKEY            shift and go to state 122
    DOLAR           shift and go to state 120
    VARIABLE        reduce using rule 192 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 121

state 44

    (127) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 127 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 127 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 127 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 127 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 127 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 127 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 127 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 127 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 127 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 127 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 127 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 127 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 127 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 127 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 127 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 127 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 127 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 127 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 127 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 127 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 127 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 127 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 127 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 127 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 127 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 127 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 127 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 127 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 127 (compound_variable -> VARIABLE .)
    AS              reduce using rule 127 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 127 (compound_variable -> VARIABLE .)


state 45

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 46

    (165) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 165 (main_INNER -> inner_statement main_INNER .)


state 47

    (130) function_declaration_statement -> FUNCTION ID . LPAREN RPAREN LKEY RKEY
    (135) function_declaration_statement -> FUNCTION ID . LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> FUNCTION ID . LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> FUNCTION ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 123


state 48

    (131) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 124


state 49

    (36) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (38) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (39) function_call_parameter_list -> .
    (40) function_call_parameter -> . variable
    (41) function_call_parameter -> . AMPERSAND VARIABLE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 39 (function_call_parameter_list -> .)
    AMPERSAND       shift and go to state 128
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter_list   shift and go to state 125
    function_call_parameter        shift and go to state 126
    variable                       shift and go to state 127
    base_variable                  shift and go to state 36
    function_call                  shift and go to state 95
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 50

    (87) expr -> LPAREN expr . RPAREN
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 129
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 51

    (94) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 130


state 52

    (97) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (52) type_cast_operator -> ARRAY_TYPE .

    LPAREN          shift and go to state 112
    RPAREN          reduce using rule 52 (type_cast_operator -> ARRAY_TYPE .)


state 53

    (47) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 47 (type_cast_operator -> INT_TYPE .)


state 54

    (48) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 48 (type_cast_operator -> DOUBLE_TYPE .)


state 55

    (49) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 49 (type_cast_operator -> FLOAT_TYPE .)


state 56

    (50) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 50 (type_cast_operator -> REAL_TYPE .)


state 57

    (51) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 51 (type_cast_operator -> STRING_TYPE .)


state 58

    (53) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 53 (type_cast_operator -> BOOLEAN_TYPE .)


state 59

    (54) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 54 (type_cast_operator -> BOOL_TYPE .)


state 60

    (55) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 55 (type_cast_operator -> UNSET .)


state 61

    (5) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 5 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expr SEMICOLON .)
    DO              reduce using rule 5 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 5 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 5 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 5 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 5 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 5 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 5 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 5 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 5 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 5 (statement -> expr SEMICOLON .)
    IF              reduce using rule 5 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 5 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 5 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 5 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 5 (statement -> expr SEMICOLON .)
    ID              reduce using rule 5 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 5 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 5 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 5 (statement -> expr SEMICOLON .)


state 62

    (89) expr -> expr INTE_DOT . expr DDOT expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 131
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 63

    (90) expr -> expr comparission_operator . expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 132
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 64

    (93) expr -> expr arithmetic_operator . expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 133
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 65

    (74) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 74 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 74 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 74 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 74 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 74 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 74 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 74 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 74 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 74 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 74 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 74 (comparission_operator -> EQUALS .)
    EXC_DOT         reduce using rule 74 (comparission_operator -> EQUALS .)
    PLUS            reduce using rule 74 (comparission_operator -> EQUALS .)
    MINUS           reduce using rule 74 (comparission_operator -> EQUALS .)
    ID              reduce using rule 74 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 74 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 74 (comparission_operator -> EQUALS .)


state 66

    (75) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    EXC_DOT         reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    PLUS            reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    MINUS           reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 75 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 75 (comparission_operator -> GREAT_THAN .)


state 67

    (76) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 76 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 76 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 76 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 76 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 76 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 76 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 76 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 76 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 76 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 76 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 76 (comparission_operator -> LESS_THAN .)
    EXC_DOT         reduce using rule 76 (comparission_operator -> LESS_THAN .)
    PLUS            reduce using rule 76 (comparission_operator -> LESS_THAN .)
    MINUS           reduce using rule 76 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 76 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 76 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 76 (comparission_operator -> LESS_THAN .)


state 68

    (77) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    EXC_DOT         reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    PLUS            reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    MINUS           reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 77 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 77 (comparission_operator -> LESS_EQUAL .)


state 69

    (78) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    EXC_DOT         reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    PLUS            reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    MINUS           reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 78 (comparission_operator -> GREAT_EQUAL .)


state 70

    (79) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    EXC_DOT         reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    PLUS            reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    MINUS           reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 79 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 79 (comparission_operator -> NOT_EQUAL .)


state 71

    (80) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    EXC_DOT         reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    PLUS            reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    MINUS           reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 80 (comparission_operator -> LEFT_LOGICAL .)


state 72

    (81) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    EXC_DOT         reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    PLUS            reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    MINUS           reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 81 (comparission_operator -> RIGHT_LOGICAL .)


state 73

    (69) arithmetic_operator -> PLUS .

    INCREMENT       reduce using rule 69 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 69 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 69 (arithmetic_operator -> PLUS .)
    EXIT            reduce using rule 69 (arithmetic_operator -> PLUS .)
    DIE             reduce using rule 69 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 69 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 69 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 69 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 69 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 69 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 69 (arithmetic_operator -> PLUS .)
    EXC_DOT         reduce using rule 69 (arithmetic_operator -> PLUS .)
    PLUS            reduce using rule 69 (arithmetic_operator -> PLUS .)
    MINUS           reduce using rule 69 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 69 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 69 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 69 (arithmetic_operator -> PLUS .)


state 74

    (70) arithmetic_operator -> DIVIDE .

    INCREMENT       reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    EXIT            reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    DIE             reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    EXC_DOT         reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    PLUS            reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    MINUS           reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 70 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 70 (arithmetic_operator -> DIVIDE .)


state 75

    (71) arithmetic_operator -> PERCENT .

    INCREMENT       reduce using rule 71 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 71 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 71 (arithmetic_operator -> PERCENT .)
    EXIT            reduce using rule 71 (arithmetic_operator -> PERCENT .)
    DIE             reduce using rule 71 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 71 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 71 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 71 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 71 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 71 (arithmetic_operator -> PERCENT .)
    EXC_DOT         reduce using rule 71 (arithmetic_operator -> PERCENT .)
    PLUS            reduce using rule 71 (arithmetic_operator -> PERCENT .)
    MINUS           reduce using rule 71 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 71 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 71 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 71 (arithmetic_operator -> PERCENT .)


state 76

    (72) arithmetic_operator -> TIMES .

    INCREMENT       reduce using rule 72 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 72 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 72 (arithmetic_operator -> TIMES .)
    EXIT            reduce using rule 72 (arithmetic_operator -> TIMES .)
    DIE             reduce using rule 72 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 72 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 72 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 72 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 72 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 72 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 72 (arithmetic_operator -> TIMES .)
    EXC_DOT         reduce using rule 72 (arithmetic_operator -> TIMES .)
    PLUS            reduce using rule 72 (arithmetic_operator -> TIMES .)
    MINUS           reduce using rule 72 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 72 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 72 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 72 (arithmetic_operator -> TIMES .)


state 77

    (73) arithmetic_operator -> MINUS .

    INCREMENT       reduce using rule 73 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 73 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 73 (arithmetic_operator -> MINUS .)
    EXIT            reduce using rule 73 (arithmetic_operator -> MINUS .)
    DIE             reduce using rule 73 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 73 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 73 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 73 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 73 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 73 (arithmetic_operator -> MINUS .)
    EXC_DOT         reduce using rule 73 (arithmetic_operator -> MINUS .)
    PLUS            reduce using rule 73 (arithmetic_operator -> MINUS .)
    MINUS           reduce using rule 73 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 73 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 73 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 73 (arithmetic_operator -> MINUS .)


state 78

    (6) statement -> statement_if statement_elseif . statement_else
    (29) statement_else -> . ELSE statement_BLOCK_OPT
    (30) statement_else -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 135
    FUNCTION        reduce using rule 30 (statement_else -> .)
    WHILE           reduce using rule 30 (statement_else -> .)
    DO              reduce using rule 30 (statement_else -> .)
    FOR             reduce using rule 30 (statement_else -> .)
    BREAK           reduce using rule 30 (statement_else -> .)
    CONTINUE        reduce using rule 30 (statement_else -> .)
    RETURN          reduce using rule 30 (statement_else -> .)
    GLOBAL          reduce using rule 30 (statement_else -> .)
    INCREMENT       reduce using rule 30 (statement_else -> .)
    DECREMENT       reduce using rule 30 (statement_else -> .)
    LPAREN          reduce using rule 30 (statement_else -> .)
    EXIT            reduce using rule 30 (statement_else -> .)
    DIE             reduce using rule 30 (statement_else -> .)
    ARRAY_TYPE      reduce using rule 30 (statement_else -> .)
    NUMBER_REAL     reduce using rule 30 (statement_else -> .)
    NUMBER_INTEGER  reduce using rule 30 (statement_else -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 30 (statement_else -> .)
    TRUE            reduce using rule 30 (statement_else -> .)
    FALSE           reduce using rule 30 (statement_else -> .)
    IF              reduce using rule 30 (statement_else -> .)
    FOREACH         reduce using rule 30 (statement_else -> .)
    EXC_DOT         reduce using rule 30 (statement_else -> .)
    PLUS            reduce using rule 30 (statement_else -> .)
    MINUS           reduce using rule 30 (statement_else -> .)
    ID              reduce using rule 30 (statement_else -> .)
    DOLAR           reduce using rule 30 (statement_else -> .)
    VARIABLE        reduce using rule 30 (statement_else -> .)
    END_PROGRAM     reduce using rule 30 (statement_else -> .)
    RKEY            reduce using rule 30 (statement_else -> .)
    ELSEIF          reduce using rule 30 (statement_else -> .)

  ! ELSE            [ reduce using rule 30 (statement_else -> .) ]

    statement_else                 shift and go to state 134

state 79

    (27) statement_elseif -> ELSEIF . expr_paren statement_BLOCK_OPT
    (23) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 81

    expr_paren                     shift and go to state 136

state 80

    (7) statement -> WHILE expr_paren . statement_BLOCK_OPT
    (173) statement_BLOCK_OPT -> . statement
    (174) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 137
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 81

    (23) expr_paren -> LPAREN . expr RPAREN
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 138
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 82

    (8) statement -> DO statement_BLOCK_OPT . WHILE expr_paren SEMICOLON

    WHILE           shift and go to state 139


state 83

    (173) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    EXC_DOT         reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    PLUS            reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 173 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 173 (statement_BLOCK_OPT -> statement .)


state 84

    (174) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (167) statement_MUL -> . statement statement_MUL
    (168) statement_MUL -> .
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 168 (statement_MUL -> .)
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement_MUL                  shift and go to state 140
    statement                      shift and go to state 141
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 85

    (9) statement -> FOR LPAREN . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (34) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (35) for_expr_OPT -> .
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 35 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 142
    expr                           shift and go to state 143
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 86

    (11) statement -> BREAK expr_OPT . SEMICOLON

    SEMICOLON       shift and go to state 144


state 87

    (183) expr_OPT -> expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 183 (expr_OPT -> expr .)
    RPAREN          reduce using rule 183 (expr_OPT -> expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 88

    (12) statement -> CONTINUE expr_OPT . SEMICOLON

    SEMICOLON       shift and go to state 145


state 89

    (13) statement -> RETURN expr_return_OPT . SEMICOLON

    SEMICOLON       shift and go to state 146


state 90

    (24) expr_return_OPT -> expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 24 (expr_return_OPT -> expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 91

    (14) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (21) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (22) statement_COLON_GLOBAL -> .

    COLON           shift and go to state 148
    SEMICOLON       reduce using rule 22 (statement_COLON_GLOBAL -> .)

    statement_COLON_GLOBAL         shift and go to state 147

state 92

    (18) global_var -> VARIABLE .

    COLON           reduce using rule 18 (global_var -> VARIABLE .)
    SEMICOLON       reduce using rule 18 (global_var -> VARIABLE .)


state 93

    (19) global_var -> DOLAR . VARIABLE
    (20) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 149
    LKEY            shift and go to state 150


state 94

    (82) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 82 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 82 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 82 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 82 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 82 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 82 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 82 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 82 (expr -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 82 (expr -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 82 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 82 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 82 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 82 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 82 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 82 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 82 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 82 (expr -> INCREMENT variable .)
    COLON           reduce using rule 82 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 82 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 82 (expr -> INCREMENT variable .)
    AS              reduce using rule 82 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 82 (expr -> INCREMENT variable .)


state 95

    (123) variable -> function_call .

    SEMICOLON       reduce using rule 123 (variable -> function_call .)
    INTE_DOT        reduce using rule 123 (variable -> function_call .)
    EQUALS          reduce using rule 123 (variable -> function_call .)
    GREAT_THAN      reduce using rule 123 (variable -> function_call .)
    LESS_THAN       reduce using rule 123 (variable -> function_call .)
    LESS_EQUAL      reduce using rule 123 (variable -> function_call .)
    GREAT_EQUAL     reduce using rule 123 (variable -> function_call .)
    NOT_EQUAL       reduce using rule 123 (variable -> function_call .)
    LEFT_LOGICAL    reduce using rule 123 (variable -> function_call .)
    RIGHT_LOGICAL   reduce using rule 123 (variable -> function_call .)
    PLUS            reduce using rule 123 (variable -> function_call .)
    DIVIDE          reduce using rule 123 (variable -> function_call .)
    PERCENT         reduce using rule 123 (variable -> function_call .)
    TIMES           reduce using rule 123 (variable -> function_call .)
    MINUS           reduce using rule 123 (variable -> function_call .)
    RPAREN          reduce using rule 123 (variable -> function_call .)
    DDOT            reduce using rule 123 (variable -> function_call .)
    COLON           reduce using rule 123 (variable -> function_call .)
    RBRACKET        reduce using rule 123 (variable -> function_call .)
    ATTR_ASSOC      reduce using rule 123 (variable -> function_call .)
    AS              reduce using rule 123 (variable -> function_call .)
    RKEY            reduce using rule 123 (variable -> function_call .)


state 96

    (83) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 83 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 83 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 83 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 83 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 83 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 83 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 83 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 83 (expr -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 83 (expr -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 83 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 83 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 83 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 83 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 83 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 83 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 83 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 83 (expr -> variable INCREMENT .)
    COLON           reduce using rule 83 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 83 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 83 (expr -> variable INCREMENT .)
    AS              reduce using rule 83 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 83 (expr -> variable INCREMENT .)


state 97

    (85) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 85 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 85 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 85 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 85 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 85 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 85 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 85 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 85 (expr -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 85 (expr -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 85 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 85 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 85 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 85 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 85 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 85 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 85 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 85 (expr -> variable DECREMENT .)
    COLON           reduce using rule 85 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 85 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 85 (expr -> variable DECREMENT .)
    AS              reduce using rule 85 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 85 (expr -> variable DECREMENT .)


state 98

    (86) expr -> variable LBRACKET . expr RBRACKET
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 22
    expr                           shift and go to state 151
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 99

    (91) expr -> variable assign_operator . expr
    (92) expr -> variable assign_operator . AMPERSAND expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 153
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 22
    expr                           shift and go to state 152
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 100

    (63) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    EXC_DOT         reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 63 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 63 (assign_operator -> ADD_ASSIGN .)


state 101

    (64) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    EXC_DOT         reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 64 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 64 (assign_operator -> SUB_ASSIGN .)


state 102

    (65) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    EXC_DOT         reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 65 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 65 (assign_operator -> MOD_ASSIGN .)


state 103

    (66) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    EXC_DOT         reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 66 (assign_operator -> PLUS_ASSIGN .)


state 104

    (67) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    EXC_DOT         reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 67 (assign_operator -> DIVIDE_ASSIGN .)


state 105

    (68) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 68 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 68 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 68 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 68 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 68 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 68 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 68 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 68 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 68 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 68 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 68 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 68 (assign_operator -> ASSIGN .)
    EXC_DOT         reduce using rule 68 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 68 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 68 (assign_operator -> ASSIGN .)
    ID              reduce using rule 68 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 68 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 68 (assign_operator -> ASSIGN .)


state 106

    (84) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 84 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 84 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 84 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 84 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 84 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 84 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 84 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 84 (expr -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 84 (expr -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 84 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 84 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 84 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 84 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 84 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 84 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 84 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 84 (expr -> DECREMENT variable .)
    COLON           reduce using rule 84 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 84 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 84 (expr -> DECREMENT variable .)
    AS              reduce using rule 84 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 84 (expr -> DECREMENT variable .)


state 107

    (88) expr -> unary_operator expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 88 (expr -> unary_operator expr .)
    RPAREN          reduce using rule 88 (expr -> unary_operator expr .)
    DDOT            reduce using rule 88 (expr -> unary_operator expr .)
    COLON           reduce using rule 88 (expr -> unary_operator expr .)
    RBRACKET        reduce using rule 88 (expr -> unary_operator expr .)
    ATTR_ASSOC      reduce using rule 88 (expr -> unary_operator expr .)
    AS              reduce using rule 88 (expr -> unary_operator expr .)
    RKEY            reduce using rule 88 (expr -> unary_operator expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

  ! INTE_DOT        [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! EQUALS          [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! PLUS            [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! DIVIDE          [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! PERCENT         [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! TIMES           [ reduce using rule 88 (expr -> unary_operator expr .) ]
  ! MINUS           [ reduce using rule 88 (expr -> unary_operator expr .) ]

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 108

    (95) expr -> EXIT expr_EXIT .

    SEMICOLON       reduce using rule 95 (expr -> EXIT expr_EXIT .)
    INTE_DOT        reduce using rule 95 (expr -> EXIT expr_EXIT .)
    EQUALS          reduce using rule 95 (expr -> EXIT expr_EXIT .)
    GREAT_THAN      reduce using rule 95 (expr -> EXIT expr_EXIT .)
    LESS_THAN       reduce using rule 95 (expr -> EXIT expr_EXIT .)
    LESS_EQUAL      reduce using rule 95 (expr -> EXIT expr_EXIT .)
    GREAT_EQUAL     reduce using rule 95 (expr -> EXIT expr_EXIT .)
    NOT_EQUAL       reduce using rule 95 (expr -> EXIT expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 95 (expr -> EXIT expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 95 (expr -> EXIT expr_EXIT .)
    PLUS            reduce using rule 95 (expr -> EXIT expr_EXIT .)
    DIVIDE          reduce using rule 95 (expr -> EXIT expr_EXIT .)
    PERCENT         reduce using rule 95 (expr -> EXIT expr_EXIT .)
    TIMES           reduce using rule 95 (expr -> EXIT expr_EXIT .)
    MINUS           reduce using rule 95 (expr -> EXIT expr_EXIT .)
    RPAREN          reduce using rule 95 (expr -> EXIT expr_EXIT .)
    DDOT            reduce using rule 95 (expr -> EXIT expr_EXIT .)
    COLON           reduce using rule 95 (expr -> EXIT expr_EXIT .)
    RBRACKET        reduce using rule 95 (expr -> EXIT expr_EXIT .)
    ATTR_ASSOC      reduce using rule 95 (expr -> EXIT expr_EXIT .)
    AS              reduce using rule 95 (expr -> EXIT expr_EXIT .)
    RKEY            reduce using rule 95 (expr -> EXIT expr_EXIT .)


state 109

    (119) expr_EXIT -> exit_expr .

    SEMICOLON       reduce using rule 119 (expr_EXIT -> exit_expr .)
    INTE_DOT        reduce using rule 119 (expr_EXIT -> exit_expr .)
    EQUALS          reduce using rule 119 (expr_EXIT -> exit_expr .)
    GREAT_THAN      reduce using rule 119 (expr_EXIT -> exit_expr .)
    LESS_THAN       reduce using rule 119 (expr_EXIT -> exit_expr .)
    LESS_EQUAL      reduce using rule 119 (expr_EXIT -> exit_expr .)
    GREAT_EQUAL     reduce using rule 119 (expr_EXIT -> exit_expr .)
    NOT_EQUAL       reduce using rule 119 (expr_EXIT -> exit_expr .)
    LEFT_LOGICAL    reduce using rule 119 (expr_EXIT -> exit_expr .)
    RIGHT_LOGICAL   reduce using rule 119 (expr_EXIT -> exit_expr .)
    PLUS            reduce using rule 119 (expr_EXIT -> exit_expr .)
    DIVIDE          reduce using rule 119 (expr_EXIT -> exit_expr .)
    PERCENT         reduce using rule 119 (expr_EXIT -> exit_expr .)
    TIMES           reduce using rule 119 (expr_EXIT -> exit_expr .)
    MINUS           reduce using rule 119 (expr_EXIT -> exit_expr .)
    RPAREN          reduce using rule 119 (expr_EXIT -> exit_expr .)
    DDOT            reduce using rule 119 (expr_EXIT -> exit_expr .)
    COLON           reduce using rule 119 (expr_EXIT -> exit_expr .)
    RBRACKET        reduce using rule 119 (expr_EXIT -> exit_expr .)
    ATTR_ASSOC      reduce using rule 119 (expr_EXIT -> exit_expr .)
    AS              reduce using rule 119 (expr_EXIT -> exit_expr .)
    RKEY            reduce using rule 119 (expr_EXIT -> exit_expr .)


state 110

    (121) exit_expr -> LPAREN . expr_OPT RPAREN
    (183) expr_OPT -> . expr
    (184) expr_OPT -> .
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 184 (expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 154
    expr                           shift and go to state 87
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 111

    (96) expr -> DIE expr_EXIT .

    SEMICOLON       reduce using rule 96 (expr -> DIE expr_EXIT .)
    INTE_DOT        reduce using rule 96 (expr -> DIE expr_EXIT .)
    EQUALS          reduce using rule 96 (expr -> DIE expr_EXIT .)
    GREAT_THAN      reduce using rule 96 (expr -> DIE expr_EXIT .)
    LESS_THAN       reduce using rule 96 (expr -> DIE expr_EXIT .)
    LESS_EQUAL      reduce using rule 96 (expr -> DIE expr_EXIT .)
    GREAT_EQUAL     reduce using rule 96 (expr -> DIE expr_EXIT .)
    NOT_EQUAL       reduce using rule 96 (expr -> DIE expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 96 (expr -> DIE expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 96 (expr -> DIE expr_EXIT .)
    PLUS            reduce using rule 96 (expr -> DIE expr_EXIT .)
    DIVIDE          reduce using rule 96 (expr -> DIE expr_EXIT .)
    PERCENT         reduce using rule 96 (expr -> DIE expr_EXIT .)
    TIMES           reduce using rule 96 (expr -> DIE expr_EXIT .)
    MINUS           reduce using rule 96 (expr -> DIE expr_EXIT .)
    RPAREN          reduce using rule 96 (expr -> DIE expr_EXIT .)
    DDOT            reduce using rule 96 (expr -> DIE expr_EXIT .)
    COLON           reduce using rule 96 (expr -> DIE expr_EXIT .)
    RBRACKET        reduce using rule 96 (expr -> DIE expr_EXIT .)
    ATTR_ASSOC      reduce using rule 96 (expr -> DIE expr_EXIT .)
    AS              reduce using rule 96 (expr -> DIE expr_EXIT .)
    RKEY            reduce using rule 96 (expr -> DIE expr_EXIT .)


state 112

    (97) expr -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (161) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (162) array_pair_list -> .
    (163) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (164) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (199) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (200) array_pair_EXPR_ATTR_OPT -> .
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 162 (array_pair_list -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    AMPERSAND       reduce using rule 200 (array_pair_EXPR_ATTR_OPT -> .)
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    array_pair_list                shift and go to state 155
    array_pair                     shift and go to state 156
    expr                           shift and go to state 157
    array_pair_EXPR_ATTR_OPT       shift and go to state 158
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 113

    (26) statement_if -> IF expr_paren . statement_BLOCK_OPT
    (173) statement_BLOCK_OPT -> . statement
    (174) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 159
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 114

    (31) statement_foreach -> FOREACH LPAREN . foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (32) foreach_first_param -> . variable
    (33) foreach_first_param -> . expr
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 9
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    foreach_first_param            shift and go to state 160
    variable                       shift and go to state 161
    expr                           shift and go to state 162
    base_variable                  shift and go to state 36
    function_call                  shift and go to state 163
    unary_operator                 shift and go to state 24
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 115

    (125) base_variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LBRACKET        reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    AS              reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 125 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)


state 116

    (128) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 122


state 117

    (126) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AS              reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 118

    (189) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (189) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (190) reference_variable_SELECTOR -> .
    (129) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 190 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 190 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 190 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 190 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 190 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 190 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 190 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 190 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 190 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 190 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 190 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 190 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 190 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 190 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 190 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 190 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 190 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 190 (reference_variable_SELECTOR -> .)
    PLUS            reduce using rule 190 (reference_variable_SELECTOR -> .)
    DIVIDE          reduce using rule 190 (reference_variable_SELECTOR -> .)
    PERCENT         reduce using rule 190 (reference_variable_SELECTOR -> .)
    TIMES           reduce using rule 190 (reference_variable_SELECTOR -> .)
    MINUS           reduce using rule 190 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 190 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 190 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 190 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 190 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 190 (reference_variable_SELECTOR -> .)
    AS              reduce using rule 190 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 190 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 119

  ! LBRACKET        [ reduce using rule 190 (reference_variable_SELECTOR -> .) ]

    selector                       shift and go to state 118
    reference_variable_SELECTOR    shift and go to state 164

state 119

    (129) selector -> LBRACKET . selector_EXPR RBRACKET
    (193) selector_EXPR -> . expr
    (194) selector_EXPR -> .
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RBRACKET        reduce using rule 194 (selector_EXPR -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    selector_EXPR                  shift and go to state 165
    expr                           shift and go to state 166
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 120

    (191) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    DOLAR           shift and go to state 120
    VARIABLE        reduce using rule 192 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 121

state 121

    (191) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 191 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 191 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 122

    (128) compound_variable -> DOLAR LKEY . expr RKEY
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 167
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 123

    (130) function_declaration_statement -> FUNCTION ID LPAREN . RPAREN LKEY RKEY
    (135) function_declaration_statement -> FUNCTION ID LPAREN . parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> FUNCTION ID LPAREN . RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> FUNCTION ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (138) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (139) parameter_list -> . parameter
    (140) parameter -> . VARIABLE
    (141) parameter -> . VARIABLE ASSIGN static_scalar
    (142) parameter -> . parameter_type VARIABLE
    (143) parameter -> . parameter_type AMPERSAND VARIABLE
    (144) parameter -> . AMPERSAND VARIABLE
    (145) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (146) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (147) parameter_type -> . INT_TYPE
    (148) parameter_type -> . BOOLEAN_TYPE
    (149) parameter_type -> . STRING_TYPE
    (150) parameter_type -> . FLOAT_TYPE
    (151) parameter_type -> . ARRAY_TYPE
    (152) parameter_type -> . BOOL_TYPE
    (153) parameter_type -> . REAL_TYPE
    (154) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 168
    VARIABLE        shift and go to state 171
    AMPERSAND       shift and go to state 173
    INT_TYPE        shift and go to state 174
    BOOLEAN_TYPE    shift and go to state 175
    STRING_TYPE     shift and go to state 176
    FLOAT_TYPE      shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    BOOL_TYPE       shift and go to state 179
    REAL_TYPE       shift and go to state 180
    DOUBLE_TYPE     shift and go to state 181

    parameter_list                 shift and go to state 169
    parameter                      shift and go to state 170
    parameter_type                 shift and go to state 172

state 124

    (131) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 182


state 125

    (36) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 183


state 126

    (38) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (177) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (178) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 185
    RPAREN          reduce using rule 178 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 184

state 127

    (40) function_call_parameter -> variable .

    COLON           reduce using rule 40 (function_call_parameter -> variable .)
    RPAREN          reduce using rule 40 (function_call_parameter -> variable .)


state 128

    (41) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 186


state 129

    (87) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 87 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 87 (expr -> LPAREN expr RPAREN .)


state 130

    (94) expr -> LPAREN type_cast_operator RPAREN . expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 187
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 131

    (89) expr -> expr INTE_DOT expr . DDOT expr
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    DDOT            shift and go to state 188
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 132

    (90) expr -> expr comparission_operator expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 90 (expr -> expr comparission_operator expr .)
    RPAREN          reduce using rule 90 (expr -> expr comparission_operator expr .)
    DDOT            reduce using rule 90 (expr -> expr comparission_operator expr .)
    COLON           reduce using rule 90 (expr -> expr comparission_operator expr .)
    RBRACKET        reduce using rule 90 (expr -> expr comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 90 (expr -> expr comparission_operator expr .)
    AS              reduce using rule 90 (expr -> expr comparission_operator expr .)
    RKEY            reduce using rule 90 (expr -> expr comparission_operator expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

  ! INTE_DOT        [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! EQUALS          [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! PLUS            [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! DIVIDE          [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! PERCENT         [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! TIMES           [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]
  ! MINUS           [ reduce using rule 90 (expr -> expr comparission_operator expr .) ]

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 133

    (93) expr -> expr arithmetic_operator expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 93 (expr -> expr arithmetic_operator expr .)
    RPAREN          reduce using rule 93 (expr -> expr arithmetic_operator expr .)
    DDOT            reduce using rule 93 (expr -> expr arithmetic_operator expr .)
    COLON           reduce using rule 93 (expr -> expr arithmetic_operator expr .)
    RBRACKET        reduce using rule 93 (expr -> expr arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 93 (expr -> expr arithmetic_operator expr .)
    AS              reduce using rule 93 (expr -> expr arithmetic_operator expr .)
    RKEY            reduce using rule 93 (expr -> expr arithmetic_operator expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

  ! INTE_DOT        [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! EQUALS          [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! PLUS            [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! DIVIDE          [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! PERCENT         [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! TIMES           [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]
  ! MINUS           [ reduce using rule 93 (expr -> expr arithmetic_operator expr .) ]

    arithmetic_operator            shift and go to state 64
    comparission_operator          shift and go to state 63

state 134

    (6) statement -> statement_if statement_elseif statement_else .

    FUNCTION        reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    WHILE           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    DO              reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    FOR             reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    BREAK           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    CONTINUE        reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    RETURN          reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    GLOBAL          reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    INCREMENT       reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    DECREMENT       reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    LPAREN          reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    EXIT            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    DIE             reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    TRUE            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    FALSE           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    IF              reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    FOREACH         reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    EXC_DOT         reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    PLUS            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    MINUS           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    ID              reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    DOLAR           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    VARIABLE        reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    ELSE            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    RKEY            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    ELSEIF          reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)


state 135

    (29) statement_else -> ELSE . statement_BLOCK_OPT
    (173) statement_BLOCK_OPT -> . statement
    (174) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 189
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 136

    (27) statement_elseif -> ELSEIF expr_paren . statement_BLOCK_OPT
    (173) statement_BLOCK_OPT -> . statement
    (174) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 190
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 137

    (7) statement -> WHILE expr_paren statement_BLOCK_OPT .

    FUNCTION        reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ELSE            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)


state 138

    (23) expr_paren -> LPAREN expr . RPAREN
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 191
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 139

    (8) statement -> DO statement_BLOCK_OPT WHILE . expr_paren SEMICOLON
    (23) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 81

    expr_paren                     shift and go to state 192

state 140

    (174) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 193


state 141

    (167) statement_MUL -> statement . statement_MUL
    (167) statement_MUL -> . statement statement_MUL
    (168) statement_MUL -> .
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 168 (statement_MUL -> .)
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement                      shift and go to state 141
    statement_MUL                  shift and go to state 194
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 142

    (9) statement -> FOR LPAREN for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    SEMICOLON       shift and go to state 195


state 143

    (34) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (171) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (172) for_expr_COLON_EXPR -> .
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    INTE_DOT        shift and go to state 62
    COLON           shift and go to state 197
    SEMICOLON       reduce using rule 172 (for_expr_COLON_EXPR -> .)
    RPAREN          reduce using rule 172 (for_expr_COLON_EXPR -> .)
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    for_expr_COLON_EXPR            shift and go to state 196
    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 144

    (11) statement -> BREAK expr_OPT SEMICOLON .

    FUNCTION        reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    DO              reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    FOR             reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    CONTINUE        reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    GLOBAL          reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    INCREMENT       reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    DECREMENT       reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    LPAREN          reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    EXIT            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    DIE             reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    TRUE            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    FALSE           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    IF              reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    FOREACH         reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    PLUS            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    MINUS           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    ID              reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    DOLAR           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    VARIABLE        reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    RKEY            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    ELSEIF          reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)


state 145

    (12) statement -> CONTINUE expr_OPT SEMICOLON .

    FUNCTION        reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DO              reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FOR             reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    BREAK           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    CONTINUE        reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    GLOBAL          reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    INCREMENT       reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DECREMENT       reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    LPAREN          reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    EXIT            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DIE             reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    TRUE            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FALSE           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    IF              reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FOREACH         reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    PLUS            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    MINUS           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ID              reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DOLAR           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    VARIABLE        reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    RKEY            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ELSEIF          reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)


state 146

    (13) statement -> RETURN expr_return_OPT SEMICOLON .

    FUNCTION        reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DO              reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FOR             reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    CONTINUE        reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    GLOBAL          reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    INCREMENT       reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DECREMENT       reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    LPAREN          reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    EXIT            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DIE             reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    TRUE            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FALSE           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    IF              reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FOREACH         reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    PLUS            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    MINUS           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ID              reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DOLAR           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    VARIABLE        reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    RKEY            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ELSEIF          reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)


state 147

    (14) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 198


state 148

    (21) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (18) global_var -> . VARIABLE
    (19) global_var -> . DOLAR VARIABLE
    (20) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 92
    DOLAR           shift and go to state 93

    global_var                     shift and go to state 199

state 149

    (19) global_var -> DOLAR VARIABLE .

    COLON           reduce using rule 19 (global_var -> DOLAR VARIABLE .)
    SEMICOLON       reduce using rule 19 (global_var -> DOLAR VARIABLE .)


state 150

    (20) global_var -> DOLAR LKEY . expr RKEY
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 200
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 151

    (86) expr -> variable LBRACKET expr . RBRACKET
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    RBRACKET        shift and go to state 201
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 152

    (91) expr -> variable assign_operator expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 91 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 91 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 91 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 91 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 91 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 91 (expr -> variable assign_operator expr .)
    AS              reduce using rule 91 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 91 (expr -> variable assign_operator expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

  ! INTE_DOT        [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! PLUS            [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! DIVIDE          [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! PERCENT         [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! TIMES           [ reduce using rule 91 (expr -> variable assign_operator expr .) ]
  ! MINUS           [ reduce using rule 91 (expr -> variable assign_operator expr .) ]

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 153

    (92) expr -> variable assign_operator AMPERSAND . expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 22
    expr                           shift and go to state 202
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 154

    (121) exit_expr -> LPAREN expr_OPT . RPAREN

    RPAREN          shift and go to state 203


state 155

    (97) expr -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 204


state 156

    (161) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (195) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (196) array_pair_list_ARR_PAIR -> .

    COLON           shift and go to state 206
    RPAREN          reduce using rule 196 (array_pair_list_ARR_PAIR -> .)

    array_pair_list_ARR_PAIR       shift and go to state 205

state 157

    (163) array_pair -> expr . array_pair_ATTR_EXPR_OPT
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (199) array_pair_EXPR_ATTR_OPT -> expr . ATTR_ASSOC
    (197) array_pair_ATTR_EXPR_OPT -> . ATTR_ASSOC expr
    (198) array_pair_ATTR_EXPR_OPT -> .
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    INTE_DOT        shift and go to state 62
    ATTR_ASSOC      shift and go to state 208
    COLON           reduce using rule 198 (array_pair_ATTR_EXPR_OPT -> .)
    RPAREN          reduce using rule 198 (array_pair_ATTR_EXPR_OPT -> .)
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    array_pair_ATTR_EXPR_OPT       shift and go to state 207
    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 158

    (164) array_pair -> array_pair_EXPR_ATTR_OPT . AMPERSAND variable

    AMPERSAND       shift and go to state 209


state 159

    (26) statement_if -> IF expr_paren statement_BLOCK_OPT .

    ELSEIF          reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ELSE            reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 26 (statement_if -> IF expr_paren statement_BLOCK_OPT .)


state 160

    (31) statement_foreach -> FOREACH LPAREN foreach_first_param . AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT

    AS              shift and go to state 210


state 161

    (32) foreach_first_param -> variable .
    (83) expr -> variable . INCREMENT
    (85) expr -> variable . DECREMENT
    (86) expr -> variable . LBRACKET expr RBRACKET
    (91) expr -> variable . assign_operator expr
    (92) expr -> variable . assign_operator AMPERSAND expr
    (99) expr -> variable .
    (63) assign_operator -> . ADD_ASSIGN
    (64) assign_operator -> . SUB_ASSIGN
    (65) assign_operator -> . MOD_ASSIGN
    (66) assign_operator -> . PLUS_ASSIGN
    (67) assign_operator -> . DIVIDE_ASSIGN
    (68) assign_operator -> . ASSIGN

  ! reduce/reduce conflict for AS resolved using rule 32 (foreach_first_param -> variable .)
    AS              reduce using rule 32 (foreach_first_param -> variable .)
    INCREMENT       shift and go to state 96
    DECREMENT       shift and go to state 97
    LBRACKET        shift and go to state 98
    INTE_DOT        reduce using rule 99 (expr -> variable .)
    EQUALS          reduce using rule 99 (expr -> variable .)
    GREAT_THAN      reduce using rule 99 (expr -> variable .)
    LESS_THAN       reduce using rule 99 (expr -> variable .)
    LESS_EQUAL      reduce using rule 99 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 99 (expr -> variable .)
    NOT_EQUAL       reduce using rule 99 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 99 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 99 (expr -> variable .)
    PLUS            reduce using rule 99 (expr -> variable .)
    DIVIDE          reduce using rule 99 (expr -> variable .)
    PERCENT         reduce using rule 99 (expr -> variable .)
    TIMES           reduce using rule 99 (expr -> variable .)
    MINUS           reduce using rule 99 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 100
    SUB_ASSIGN      shift and go to state 101
    MOD_ASSIGN      shift and go to state 102
    PLUS_ASSIGN     shift and go to state 103
    DIVIDE_ASSIGN   shift and go to state 104
    ASSIGN          shift and go to state 105

  ! AS              [ reduce using rule 99 (expr -> variable .) ]

    assign_operator                shift and go to state 99

state 162

    (33) foreach_first_param -> expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    AS              reduce using rule 33 (foreach_first_param -> expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 163

    (123) variable -> function_call .
    (98) expr -> function_call .

  ! reduce/reduce conflict for INTE_DOT resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for PERCENT resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 98 (expr -> function_call .)
  ! reduce/reduce conflict for AS resolved using rule 98 (expr -> function_call .)
    INCREMENT       reduce using rule 123 (variable -> function_call .)
    DECREMENT       reduce using rule 123 (variable -> function_call .)
    LBRACKET        reduce using rule 123 (variable -> function_call .)
    ADD_ASSIGN      reduce using rule 123 (variable -> function_call .)
    SUB_ASSIGN      reduce using rule 123 (variable -> function_call .)
    MOD_ASSIGN      reduce using rule 123 (variable -> function_call .)
    PLUS_ASSIGN     reduce using rule 123 (variable -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 123 (variable -> function_call .)
    ASSIGN          reduce using rule 123 (variable -> function_call .)
    INTE_DOT        reduce using rule 98 (expr -> function_call .)
    EQUALS          reduce using rule 98 (expr -> function_call .)
    GREAT_THAN      reduce using rule 98 (expr -> function_call .)
    LESS_THAN       reduce using rule 98 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 98 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 98 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 98 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 98 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 98 (expr -> function_call .)
    PLUS            reduce using rule 98 (expr -> function_call .)
    DIVIDE          reduce using rule 98 (expr -> function_call .)
    PERCENT         reduce using rule 98 (expr -> function_call .)
    TIMES           reduce using rule 98 (expr -> function_call .)
    MINUS           reduce using rule 98 (expr -> function_call .)
    AS              reduce using rule 98 (expr -> function_call .)

  ! AS              [ reduce using rule 123 (variable -> function_call .) ]
  ! INTE_DOT        [ reduce using rule 123 (variable -> function_call .) ]
  ! EQUALS          [ reduce using rule 123 (variable -> function_call .) ]
  ! GREAT_THAN      [ reduce using rule 123 (variable -> function_call .) ]
  ! LESS_THAN       [ reduce using rule 123 (variable -> function_call .) ]
  ! LESS_EQUAL      [ reduce using rule 123 (variable -> function_call .) ]
  ! GREAT_EQUAL     [ reduce using rule 123 (variable -> function_call .) ]
  ! NOT_EQUAL       [ reduce using rule 123 (variable -> function_call .) ]
  ! LEFT_LOGICAL    [ reduce using rule 123 (variable -> function_call .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 123 (variable -> function_call .) ]
  ! PLUS            [ reduce using rule 123 (variable -> function_call .) ]
  ! DIVIDE          [ reduce using rule 123 (variable -> function_call .) ]
  ! PERCENT         [ reduce using rule 123 (variable -> function_call .) ]
  ! TIMES           [ reduce using rule 123 (variable -> function_call .) ]
  ! MINUS           [ reduce using rule 123 (variable -> function_call .) ]


state 164

    (189) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 189 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 165

    (129) selector -> LBRACKET selector_EXPR . RBRACKET

    RBRACKET        shift and go to state 211


state 166

    (193) selector_EXPR -> expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    RBRACKET        reduce using rule 193 (selector_EXPR -> expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 167

    (128) compound_variable -> DOLAR LKEY expr . RKEY
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 212
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 168

    (130) function_declaration_statement -> FUNCTION ID LPAREN RPAREN . LKEY RKEY
    (136) function_declaration_statement -> FUNCTION ID LPAREN RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 213


state 169

    (135) function_declaration_statement -> FUNCTION ID LPAREN parameter_list . RPAREN LKEY RKEY
    (137) function_declaration_statement -> FUNCTION ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 214


state 170

    (138) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (139) parameter_list -> parameter .
    (187) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (188) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 139 (parameter_list -> parameter .)
    COLON           shift and go to state 216

    parameter_list_COLON_PARAMETER shift and go to state 215

state 171

    (140) parameter -> VARIABLE .
    (141) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 140 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 140 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 217


state 172

    (142) parameter -> parameter_type . VARIABLE
    (143) parameter -> parameter_type . AMPERSAND VARIABLE
    (146) parameter -> parameter_type . AMPERSAND VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 218
    AMPERSAND       shift and go to state 219


state 173

    (144) parameter -> AMPERSAND . VARIABLE
    (145) parameter -> AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 220


state 174

    (147) parameter_type -> INT_TYPE .

    VARIABLE        reduce using rule 147 (parameter_type -> INT_TYPE .)
    AMPERSAND       reduce using rule 147 (parameter_type -> INT_TYPE .)


state 175

    (148) parameter_type -> BOOLEAN_TYPE .

    VARIABLE        reduce using rule 148 (parameter_type -> BOOLEAN_TYPE .)
    AMPERSAND       reduce using rule 148 (parameter_type -> BOOLEAN_TYPE .)


state 176

    (149) parameter_type -> STRING_TYPE .

    VARIABLE        reduce using rule 149 (parameter_type -> STRING_TYPE .)
    AMPERSAND       reduce using rule 149 (parameter_type -> STRING_TYPE .)


state 177

    (150) parameter_type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 150 (parameter_type -> FLOAT_TYPE .)
    AMPERSAND       reduce using rule 150 (parameter_type -> FLOAT_TYPE .)


state 178

    (151) parameter_type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 151 (parameter_type -> ARRAY_TYPE .)
    AMPERSAND       reduce using rule 151 (parameter_type -> ARRAY_TYPE .)


state 179

    (152) parameter_type -> BOOL_TYPE .

    VARIABLE        reduce using rule 152 (parameter_type -> BOOL_TYPE .)
    AMPERSAND       reduce using rule 152 (parameter_type -> BOOL_TYPE .)


state 180

    (153) parameter_type -> REAL_TYPE .

    VARIABLE        reduce using rule 153 (parameter_type -> REAL_TYPE .)
    AMPERSAND       reduce using rule 153 (parameter_type -> REAL_TYPE .)


state 181

    (154) parameter_type -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 154 (parameter_type -> DOUBLE_TYPE .)
    AMPERSAND       reduce using rule 154 (parameter_type -> DOUBLE_TYPE .)


state 182

    (131) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . RPAREN LKEY RKEY
    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (138) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (139) parameter_list -> . parameter
    (140) parameter -> . VARIABLE
    (141) parameter -> . VARIABLE ASSIGN static_scalar
    (142) parameter -> . parameter_type VARIABLE
    (143) parameter -> . parameter_type AMPERSAND VARIABLE
    (144) parameter -> . AMPERSAND VARIABLE
    (145) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (146) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (147) parameter_type -> . INT_TYPE
    (148) parameter_type -> . BOOLEAN_TYPE
    (149) parameter_type -> . STRING_TYPE
    (150) parameter_type -> . FLOAT_TYPE
    (151) parameter_type -> . ARRAY_TYPE
    (152) parameter_type -> . BOOL_TYPE
    (153) parameter_type -> . REAL_TYPE
    (154) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 221
    VARIABLE        shift and go to state 171
    AMPERSAND       shift and go to state 173
    INT_TYPE        shift and go to state 174
    BOOLEAN_TYPE    shift and go to state 175
    STRING_TYPE     shift and go to state 176
    FLOAT_TYPE      shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    BOOL_TYPE       shift and go to state 179
    REAL_TYPE       shift and go to state 180
    DOUBLE_TYPE     shift and go to state 181

    parameter_list                 shift and go to state 222
    parameter                      shift and go to state 170
    parameter_type                 shift and go to state 172

state 183

    (36) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INCREMENT       reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DECREMENT       reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ADD_ASSIGN      reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    SUB_ASSIGN      reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MOD_ASSIGN      reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS_ASSIGN     reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ASSIGN          reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 36 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 184

    (38) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 38 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 185

    (177) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (40) function_call_parameter -> . variable
    (41) function_call_parameter -> . AMPERSAND VARIABLE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 128
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter        shift and go to state 223
    variable                       shift and go to state 127
    base_variable                  shift and go to state 36
    function_call                  shift and go to state 95
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 186

    (41) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 41 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 41 (function_call_parameter -> AMPERSAND VARIABLE .)


state 187

    (94) expr -> LPAREN type_cast_operator RPAREN expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

  ! INTE_DOT        [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PLUS            [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! TIMES           [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! MINUS           [ reduce using rule 94 (expr -> LPAREN type_cast_operator RPAREN expr .) ]

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 188

    (89) expr -> expr INTE_DOT expr DDOT . expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 224
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 189

    (29) statement_else -> ELSE statement_BLOCK_OPT .

    ELSE            reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    PLUS            reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 29 (statement_else -> ELSE statement_BLOCK_OPT .)


state 190

    (27) statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .

    ELSE            reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 27 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)


state 191

    (23) expr_paren -> LPAREN expr RPAREN .

    LKEY            reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    DO              reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    FOR             reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    DIE             reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    IF              reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    EXC_DOT         reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    ID              reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 23 (expr_paren -> LPAREN expr RPAREN .)


state 192

    (8) statement -> DO statement_BLOCK_OPT WHILE expr_paren . SEMICOLON

    SEMICOLON       shift and go to state 225


state 193

    (174) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PLUS            reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 174 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 194

    (167) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 167 (statement_MUL -> statement statement_MUL .)


state 195

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (34) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (35) for_expr_OPT -> .
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 35 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 226
    expr                           shift and go to state 143
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 196

    (34) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 34 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 34 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 197

    (171) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 227
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 198

    (14) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOREACH         reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXC_DOT         reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    PLUS            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 199

    (21) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (21) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (22) statement_COLON_GLOBAL -> .

    COLON           shift and go to state 148
    SEMICOLON       reduce using rule 22 (statement_COLON_GLOBAL -> .)

    statement_COLON_GLOBAL         shift and go to state 228

state 200

    (20) global_var -> DOLAR LKEY expr . RKEY
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 229
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 201

    (86) expr -> variable LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    COLON           reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    AS              reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 86 (expr -> variable LBRACKET expr RBRACKET .)


state 202

    (92) expr -> variable assign_operator AMPERSAND expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

  ! INTE_DOT        [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PLUS            [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! DIVIDE          [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PERCENT         [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 92 (expr -> variable assign_operator AMPERSAND expr .) ]

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 203

    (121) exit_expr -> LPAREN expr_OPT RPAREN .

    SEMICOLON       reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    INTE_DOT        reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    EQUALS          reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    GREAT_THAN      reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LESS_THAN       reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LESS_EQUAL      reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    GREAT_EQUAL     reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    NOT_EQUAL       reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LEFT_LOGICAL    reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RIGHT_LOGICAL   reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    PLUS            reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    DIVIDE          reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    PERCENT         reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    TIMES           reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    MINUS           reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RPAREN          reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    DDOT            reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    COLON           reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RBRACKET        reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    ATTR_ASSOC      reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    AS              reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RKEY            reduce using rule 121 (exit_expr -> LPAREN expr_OPT RPAREN .)


state 204

    (97) expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 97 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 205

    (161) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 161 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 206

    (195) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (163) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (164) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (199) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (200) array_pair_EXPR_ATTR_OPT -> .
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    AMPERSAND       reduce using rule 200 (array_pair_EXPR_ATTR_OPT -> .)
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    array_pair                     shift and go to state 230
    expr                           shift and go to state 157
    array_pair_EXPR_ATTR_OPT       shift and go to state 158
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 207

    (163) array_pair -> expr array_pair_ATTR_EXPR_OPT .

    COLON           reduce using rule 163 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)
    RPAREN          reduce using rule 163 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)


state 208

    (199) array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .
    (197) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC . expr
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       reduce using rule 199 (array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 231
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 209

    (164) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND . variable
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 232
    base_variable                  shift and go to state 36
    function_call                  shift and go to state 95
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 210

    (31) statement_foreach -> FOREACH LPAREN foreach_first_param AS . ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (15) ampersand_variable -> . AMPERSAND VARIABLE

    AMPERSAND       shift and go to state 234

    ampersand_variable             shift and go to state 233

state 211

    (129) selector -> LBRACKET selector_EXPR RBRACKET .

    LBRACKET        reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INCREMENT       reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DECREMENT       reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ADD_ASSIGN      reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SUB_ASSIGN      reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MOD_ASSIGN      reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS_ASSIGN     reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ASSIGN          reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SEMICOLON       reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INTE_DOT        reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    EQUALS          reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_THAN      reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_THAN       reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_EQUAL      reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_EQUAL     reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    NOT_EQUAL       reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LEFT_LOGICAL    reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS            reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE          reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PERCENT         reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    TIMES           reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MINUS           reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RPAREN          reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DDOT            reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    COLON           reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RBRACKET        reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ATTR_ASSOC      reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    AS              reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RKEY            reduce using rule 129 (selector -> LBRACKET selector_EXPR RBRACKET .)


state 212

    (128) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    AS              reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)


state 213

    (130) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY . RKEY
    (136) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY . inner_statement_MUL RKEY
    (169) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (170) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (130) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (131) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 235
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 236
    inner_statement                shift and go to state 237
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 214

    (135) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN . LKEY RKEY
    (137) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 238


state 215

    (138) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 138 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 216

    (187) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (188) parameter_list_COLON_PARAMETER -> COLON . parameter
    (140) parameter -> . VARIABLE
    (141) parameter -> . VARIABLE ASSIGN static_scalar
    (142) parameter -> . parameter_type VARIABLE
    (143) parameter -> . parameter_type AMPERSAND VARIABLE
    (144) parameter -> . AMPERSAND VARIABLE
    (145) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (146) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (147) parameter_type -> . INT_TYPE
    (148) parameter_type -> . BOOLEAN_TYPE
    (149) parameter_type -> . STRING_TYPE
    (150) parameter_type -> . FLOAT_TYPE
    (151) parameter_type -> . ARRAY_TYPE
    (152) parameter_type -> . BOOL_TYPE
    (153) parameter_type -> . REAL_TYPE
    (154) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 171
    AMPERSAND       shift and go to state 173
    INT_TYPE        shift and go to state 174
    BOOLEAN_TYPE    shift and go to state 175
    STRING_TYPE     shift and go to state 176
    FLOAT_TYPE      shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    BOOL_TYPE       shift and go to state 179
    REAL_TYPE       shift and go to state 180
    DOUBLE_TYPE     shift and go to state 181

    parameter                      shift and go to state 239
    parameter_type                 shift and go to state 172

state 217

    (141) parameter -> VARIABLE ASSIGN . static_scalar
    (155) static_scalar -> . common_scalar
    (156) static_scalar -> . PLUS static_scalar
    (157) static_scalar -> . MINUS static_scalar
    (158) common_scalar -> . NUMBER_REAL
    (159) common_scalar -> . NUMBER_INTEGER
    (160) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 242
    MINUS           shift and go to state 243
    NUMBER_REAL     shift and go to state 244
    NUMBER_INTEGER  shift and go to state 245
    CONSTANT_ENCAPSED_STRING shift and go to state 246

    static_scalar                  shift and go to state 240
    common_scalar                  shift and go to state 241

state 218

    (142) parameter -> parameter_type VARIABLE .

    COLON           reduce using rule 142 (parameter -> parameter_type VARIABLE .)
    RPAREN          reduce using rule 142 (parameter -> parameter_type VARIABLE .)


state 219

    (143) parameter -> parameter_type AMPERSAND . VARIABLE
    (146) parameter -> parameter_type AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 247


state 220

    (144) parameter -> AMPERSAND VARIABLE .
    (145) parameter -> AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 144 (parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 144 (parameter -> AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 248


state 221

    (131) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN . LKEY RKEY
    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 249


state 222

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list . RPAREN LKEY RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 250


state 223

    (177) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (177) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (178) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 185
    RPAREN          reduce using rule 178 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 251

state 224

    (89) expr -> expr INTE_DOT expr DDOT expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .)
    AS              reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

  ! INTE_DOT        [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PLUS            [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 89 (expr -> expr INTE_DOT expr DDOT expr .) ]

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 225

    (8) statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .

    FUNCTION        reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DO              reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FOR             reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    CONTINUE        reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    GLOBAL          reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    INCREMENT       reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DECREMENT       reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    LPAREN          reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    EXIT            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DIE             reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ARRAY_TYPE      reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    NUMBER_REAL     reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    TRUE            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FALSE           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    IF              reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FOREACH         reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    EXC_DOT         reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    PLUS            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    MINUS           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ID              reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DOLAR           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    VARIABLE        reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    END_PROGRAM     reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    RKEY            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ELSEIF          reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)


state 226

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    SEMICOLON       shift and go to state 252


state 227

    (171) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (171) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (172) for_expr_COLON_EXPR -> .
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    INTE_DOT        shift and go to state 62
    COLON           shift and go to state 197
    SEMICOLON       reduce using rule 172 (for_expr_COLON_EXPR -> .)
    RPAREN          reduce using rule 172 (for_expr_COLON_EXPR -> .)
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    for_expr_COLON_EXPR            shift and go to state 253
    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 228

    (21) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 21 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 229

    (20) global_var -> DOLAR LKEY expr RKEY .

    COLON           reduce using rule 20 (global_var -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 20 (global_var -> DOLAR LKEY expr RKEY .)


state 230

    (195) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (195) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (196) array_pair_list_ARR_PAIR -> .

    COLON           shift and go to state 206
    RPAREN          reduce using rule 196 (array_pair_list_ARR_PAIR -> .)

    array_pair_list_ARR_PAIR       shift and go to state 254

state 231

    (197) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .
    (89) expr -> expr . INTE_DOT expr DDOT expr
    (90) expr -> expr . comparission_operator expr
    (93) expr -> expr . arithmetic_operator expr
    (74) comparission_operator -> . EQUALS
    (75) comparission_operator -> . GREAT_THAN
    (76) comparission_operator -> . LESS_THAN
    (77) comparission_operator -> . LESS_EQUAL
    (78) comparission_operator -> . GREAT_EQUAL
    (79) comparission_operator -> . NOT_EQUAL
    (80) comparission_operator -> . LEFT_LOGICAL
    (81) comparission_operator -> . RIGHT_LOGICAL
    (69) arithmetic_operator -> . PLUS
    (70) arithmetic_operator -> . DIVIDE
    (71) arithmetic_operator -> . PERCENT
    (72) arithmetic_operator -> . TIMES
    (73) arithmetic_operator -> . MINUS

    COLON           reduce using rule 197 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    RPAREN          reduce using rule 197 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    INTE_DOT        shift and go to state 62
    EQUALS          shift and go to state 65
    GREAT_THAN      shift and go to state 66
    LESS_THAN       shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREAT_EQUAL     shift and go to state 69
    NOT_EQUAL       shift and go to state 70
    LEFT_LOGICAL    shift and go to state 71
    RIGHT_LOGICAL   shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    comparission_operator          shift and go to state 63
    arithmetic_operator            shift and go to state 64

state 232

    (164) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .

    COLON           reduce using rule 164 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)
    RPAREN          reduce using rule 164 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)


state 233

    (31) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable . statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (175) statement_attr_variable_OPT -> . ATTR_ASSOC ampersand_variable
    (176) statement_attr_variable_OPT -> .

    ATTR_ASSOC      shift and go to state 256
    RPAREN          reduce using rule 176 (statement_attr_variable_OPT -> .)

    statement_attr_variable_OPT    shift and go to state 255

state 234

    (15) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 257


state 235

    (130) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    WHILE           reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DO              reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FOR             reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    BREAK           reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    RETURN          reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    EXIT            reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DIE             reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    TRUE            reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FALSE           reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    IF              reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FOREACH         reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    PLUS            reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    MINUS           reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    ID              reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    RKEY            reduce using rule 130 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)


state 236

    (136) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 258


state 237

    (169) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (170) inner_statement_MUL -> inner_statement .
    (169) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (170) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (130) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (131) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 170 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 237
    inner_statement_MUL            shift and go to state 259
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 238

    (135) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY . RKEY
    (137) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (169) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (170) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (130) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (131) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 260
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 261
    inner_statement                shift and go to state 237
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 239

    (187) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (188) parameter_list_COLON_PARAMETER -> COLON parameter .
    (187) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (188) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 188 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 216

    parameter_list_COLON_PARAMETER shift and go to state 262

state 240

    (141) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 141 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 141 (parameter -> VARIABLE ASSIGN static_scalar .)


state 241

    (155) static_scalar -> common_scalar .

    COLON           reduce using rule 155 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 155 (static_scalar -> common_scalar .)


state 242

    (156) static_scalar -> PLUS . static_scalar
    (155) static_scalar -> . common_scalar
    (156) static_scalar -> . PLUS static_scalar
    (157) static_scalar -> . MINUS static_scalar
    (158) common_scalar -> . NUMBER_REAL
    (159) common_scalar -> . NUMBER_INTEGER
    (160) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 242
    MINUS           shift and go to state 243
    NUMBER_REAL     shift and go to state 244
    NUMBER_INTEGER  shift and go to state 245
    CONSTANT_ENCAPSED_STRING shift and go to state 246

    static_scalar                  shift and go to state 263
    common_scalar                  shift and go to state 241

state 243

    (157) static_scalar -> MINUS . static_scalar
    (155) static_scalar -> . common_scalar
    (156) static_scalar -> . PLUS static_scalar
    (157) static_scalar -> . MINUS static_scalar
    (158) common_scalar -> . NUMBER_REAL
    (159) common_scalar -> . NUMBER_INTEGER
    (160) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 242
    MINUS           shift and go to state 243
    NUMBER_REAL     shift and go to state 244
    NUMBER_INTEGER  shift and go to state 245
    CONSTANT_ENCAPSED_STRING shift and go to state 246

    static_scalar                  shift and go to state 264
    common_scalar                  shift and go to state 241

state 244

    (158) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 158 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 158 (common_scalar -> NUMBER_REAL .)


state 245

    (159) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 159 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 159 (common_scalar -> NUMBER_INTEGER .)


state 246

    (160) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 160 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 160 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 247

    (143) parameter -> parameter_type AMPERSAND VARIABLE .
    (146) parameter -> parameter_type AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 143 (parameter -> parameter_type AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 143 (parameter -> parameter_type AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 265


state 248

    (145) parameter -> AMPERSAND VARIABLE ASSIGN . static_scalar
    (155) static_scalar -> . common_scalar
    (156) static_scalar -> . PLUS static_scalar
    (157) static_scalar -> . MINUS static_scalar
    (158) common_scalar -> . NUMBER_REAL
    (159) common_scalar -> . NUMBER_INTEGER
    (160) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 242
    MINUS           shift and go to state 243
    NUMBER_REAL     shift and go to state 244
    NUMBER_INTEGER  shift and go to state 245
    CONSTANT_ENCAPSED_STRING shift and go to state 246

    static_scalar                  shift and go to state 266
    common_scalar                  shift and go to state 241

state 249

    (131) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY . RKEY
    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY . inner_statement_MUL RKEY
    (169) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (170) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (130) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (131) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 267
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 268
    inner_statement                shift and go to state 237
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 250

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN . LKEY RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 269


state 251

    (177) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 177 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 252

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT RPAREN statement_BLOCK_OPT
    (34) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (35) for_expr_OPT -> .
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 35 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 270
    expr                           shift and go to state 143
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 253

    (171) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 171 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 171 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 254

    (195) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 195 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 255

    (31) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 271


state 256

    (175) statement_attr_variable_OPT -> ATTR_ASSOC . ampersand_variable
    (15) ampersand_variable -> . AMPERSAND VARIABLE

    AMPERSAND       shift and go to state 234

    ampersand_variable             shift and go to state 272

state 257

    (15) ampersand_variable -> AMPERSAND VARIABLE .

    ATTR_ASSOC      reduce using rule 15 (ampersand_variable -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 15 (ampersand_variable -> AMPERSAND VARIABLE .)


state 258

    (136) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)


state 259

    (169) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 169 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 260

    (135) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    WHILE           reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DO              reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOR             reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    BREAK           reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RETURN          reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXIT            reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DIE             reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    TRUE            reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FALSE           reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    IF              reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOREACH         reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    PLUS            reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    MINUS           reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ID              reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RKEY            reduce using rule 135 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)


state 261

    (137) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 273


state 262

    (187) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 187 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 263

    (156) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 156 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 156 (static_scalar -> PLUS static_scalar .)


state 264

    (157) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 157 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 157 (static_scalar -> MINUS static_scalar .)


state 265

    (146) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN . static_scalar
    (155) static_scalar -> . common_scalar
    (156) static_scalar -> . PLUS static_scalar
    (157) static_scalar -> . MINUS static_scalar
    (158) common_scalar -> . NUMBER_REAL
    (159) common_scalar -> . NUMBER_INTEGER
    (160) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 242
    MINUS           shift and go to state 243
    NUMBER_REAL     shift and go to state 244
    NUMBER_INTEGER  shift and go to state 245
    CONSTANT_ENCAPSED_STRING shift and go to state 246

    static_scalar                  shift and go to state 274
    common_scalar                  shift and go to state 241

state 266

    (145) parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 145 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 145 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)


state 267

    (131) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    WHILE           reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DO              reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FOR             reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    BREAK           reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    RETURN          reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    EXIT            reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DIE             reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    TRUE            reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FALSE           reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    IF              reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FOREACH         reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    PLUS            reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    MINUS           reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    ID              reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    RKEY            reduce using rule 131 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)


state 268

    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 275


state 269

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY . RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (169) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (170) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (130) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (131) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 276
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 277
    inner_statement                shift and go to state 237
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 270

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 278


state 271

    (31) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN . statement_BLOCK_OPT
    (173) statement_BLOCK_OPT -> . statement
    (174) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 279
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 272

    (175) statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable .

    RPAREN          reduce using rule 175 (statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable .)


state 273

    (137) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 274

    (146) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 146 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 146 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)


state 275

    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)


state 276

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    WHILE           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DO              reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOR             reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    BREAK           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RETURN          reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXIT            reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DIE             reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    TRUE            reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FALSE           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    IF              reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOREACH         reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    PLUS            reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    MINUS           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ID              reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RKEY            reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)


state 277

    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 280


state 278

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN . statement_BLOCK_OPT
    (173) statement_BLOCK_OPT -> . statement
    (174) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (82) expr -> . INCREMENT variable
    (83) expr -> . variable INCREMENT
    (84) expr -> . DECREMENT variable
    (85) expr -> . variable DECREMENT
    (86) expr -> . variable LBRACKET expr RBRACKET
    (87) expr -> . LPAREN expr RPAREN
    (88) expr -> . unary_operator expr
    (89) expr -> . expr INTE_DOT expr DDOT expr
    (90) expr -> . expr comparission_operator expr
    (91) expr -> . variable assign_operator expr
    (92) expr -> . variable assign_operator AMPERSAND expr
    (93) expr -> . expr arithmetic_operator expr
    (94) expr -> . LPAREN type_cast_operator RPAREN expr
    (95) expr -> . EXIT expr_EXIT
    (96) expr -> . DIE expr_EXIT
    (97) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (98) expr -> . function_call
    (99) expr -> . variable
    (100) expr -> . NUMBER_REAL
    (101) expr -> . NUMBER_INTEGER
    (102) expr -> . CONSTANT_ENCAPSED_STRING
    (103) expr -> . TRUE
    (104) expr -> . FALSE
    (26) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (31) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (122) variable -> . base_variable
    (123) variable -> . function_call
    (44) unary_operator -> . EXC_DOT
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (36) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (37) function_call -> . base_variable
    (124) base_variable -> . reference_variable
    (125) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (191) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (192) simple_indirect_reference_DOLAR -> .
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 25
    DIE             shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_REAL     shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    IF              shift and go to state 34
    FOREACH         shift and go to state 35
    EXC_DOT         shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    ID              shift and go to state 9
    DOLAR           shift and go to state 43
    VARIABLE        shift and go to state 44

  ! VARIABLE        [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 192 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 281
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 28
    base_variable                  shift and go to state 36
    reference_variable             shift and go to state 40
    simple_indirect_reference_DOLAR shift and go to state 41
    compound_variable              shift and go to state 42

state 279

    (31) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 31 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)


state 280

    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 281

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOLAR in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 5 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 5 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 10 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 10 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 12 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 14 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 14 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 17 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 17 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 18 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 18 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 19 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 19 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 21 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 21 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 23 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 23 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 24 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 24 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 42 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 43 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 49 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 49 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 62 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 62 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 63 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 63 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 64 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 64 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 78 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 80 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 80 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 81 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 81 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 84 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 84 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 85 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 85 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 98 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 98 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 99 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 99 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 107 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 110 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 110 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 112 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 112 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 113 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 113 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 114 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 114 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 118 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 119 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 119 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 120 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 122 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 122 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 130 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 130 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 132 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 132 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 132 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 132 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 133 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 135 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 135 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 136 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 136 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 141 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 141 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 150 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 150 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 152 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 152 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 152 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 152 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 152 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 152 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 152 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 153 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 153 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 185 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 185 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 187 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 187 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 187 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 187 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 187 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 187 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 187 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 187 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 187 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 187 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 188 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 188 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 195 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 195 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 197 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 197 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 202 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 202 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 202 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 202 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 202 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 202 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 202 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 202 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 202 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 202 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 202 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 206 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 206 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 208 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 208 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 209 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 209 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 213 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 213 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 224 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 224 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 224 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 224 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 224 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 224 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 224 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 224 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 224 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 224 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 224 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 224 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 224 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 224 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 237 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 237 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 238 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 238 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 249 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 249 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 252 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 252 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 269 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 269 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 271 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 271 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 278 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 278 resolved as shift
WARNING: reduce/reduce conflict in state 28 resolved using rule (expr -> function_call)
WARNING: rejected rule (variable -> function_call) in state 28
WARNING: reduce/reduce conflict in state 36 resolved using rule (function_call -> base_variable)
WARNING: rejected rule (variable -> base_variable) in state 36
WARNING: reduce/reduce conflict in state 161 resolved using rule (foreach_first_param -> variable)
WARNING: rejected rule (expr -> variable) in state 161
WARNING: reduce/reduce conflict in state 163 resolved using rule (expr -> function_call)
WARNING: rejected rule (variable -> function_call) in state 163
WARNING: Rule (variable -> base_variable) is never reduced

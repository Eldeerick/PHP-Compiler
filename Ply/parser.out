Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    APOSTROFE
    ARROBA
    AS
    ASPAS
    BREAK
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CONTINUE
    CRASE
    DECLARE
    DO
    ENDDECLARE
    FOR
    FOREACH
    GLOBAL
    IDENTATION
    OR
    RETURN
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main_INNER -> inner_statement main_INNER
Rule 3     main_INNER -> <empty>
Rule 4     inner_statement -> function_declaration_statement
Rule 5     inner_statement -> statement
Rule 6     statement -> expr SEMICOLON
Rule 7     statement -> statement_IF statement_elseif statement_else
Rule 8     statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
Rule 9     statement -> SEMICOLON
Rule 10    statement_MUL -> statement statement_MUL
Rule 11    statement_MUL -> <empty>
Rule 12    statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT
Rule 13    statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT
Rule 14    statement_elseif -> <empty>
Rule 15    statement_else -> ELSE statement_BLOCK_OPT
Rule 16    statement_else -> <empty>
Rule 17    statement_BLOCK_OPT -> statement
Rule 18    statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 19    AMPERSAND_OPT -> AMPERSAND
Rule 20    AMPERSAND_OPT -> <empty>
Rule 21    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 22    function_call -> base_variable
Rule 23    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 24    function_call_parameter_list -> <empty>
Rule 25    function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 26    function_call_list_COLON_FUNCTION -> <empty>
Rule 27    expr_without_variable_COLON_ASSIGNMENT -> COLON assignment_list_element expr_without_variable_COLON_ASSIGNMENT
Rule 28    expr_without_variable_COLON_ASSIGNMENT -> <empty>
Rule 29    function_call_parameter -> variable
Rule 30    function_call_parameter -> AMPERSAND VARIABLE
Rule 31    assignment_list_element -> variable
Rule 32    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 33    assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 34    assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 35    unary_operator -> EXC_DOT
Rule 36    unary_operator -> PLUS
Rule 37    unary_operator -> MINUS
Rule 38    type_cast_operator -> INT_TYPE
Rule 39    type_cast_operator -> DOUBLE_TYPE
Rule 40    type_cast_operator -> FLOAT_TYPE
Rule 41    type_cast_operator -> REAL_TYPE
Rule 42    type_cast_operator -> STRING_TYPE
Rule 43    type_cast_operator -> ARRAY_TYPE
Rule 44    type_cast_operator -> BOOLEAN_TYPE
Rule 45    type_cast_operator -> BOOL_TYPE
Rule 46    type_cast_operator -> UNSET
Rule 47    arithmetic_operator -> PLUS
Rule 48    arithmetic_operator -> DIVIDE
Rule 49    arithmetic_operator -> PERCENT
Rule 50    arithmetic_operator -> TIMES
Rule 51    arithmetic_operator -> MINUS
Rule 52    assign_operator -> ADD_ASSIGN
Rule 53    assign_operator -> SUB_ASSIGN
Rule 54    assign_operator -> MOD_ASSIGN
Rule 55    assign_operator -> PLUS_ASSIGN
Rule 56    assign_operator -> DIVIDE_ASSIGN
Rule 57    assign_operator -> ASSIGN
Rule 58    comparission_operator -> EQUALS
Rule 59    comparission_operator -> GREAT_THAN
Rule 60    comparission_operator -> LESS_THAN
Rule 61    comparission_operator -> LESS_EQUAL
Rule 62    comparission_operator -> GREAT_EQUAL
Rule 63    comparission_operator -> NOT_EQUAL
Rule 64    comparission_operator -> LEFT_LOGICAL
Rule 65    comparission_operator -> RIGHT_LOGICAL
Rule 66    expr -> INCREMENT variable
Rule 67    expr -> variable INCREMENT
Rule 68    expr -> DECREMENT variable
Rule 69    expr -> variable DECREMENT
Rule 70    expr -> variable LBRACKET expr RBRACKET
Rule 71    expr -> LPAREN expr RPAREN
Rule 72    expr -> unary_operator expr
Rule 73    expr -> expr INTE_DOT expr DDOT expr
Rule 74    expr -> expr comparission_operator expr
Rule 75    expr -> variable assign_operator expr
Rule 76    expr -> variable assign_operator AMPERSAND expr
Rule 77    expr -> expr arithmetic_operator expr
Rule 78    expr -> LPAREN type_cast_operator RPAREN expr
Rule 79    expr -> EXIT expr_without_variable_EXIT
Rule 80    expr -> DIE expr_without_variable_EXIT
Rule 81    expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 82    expr -> function_call
Rule 83    expr -> variable
Rule 84    expr -> NUMBER_REAL
Rule 85    expr -> NUMBER_INTEGER
Rule 86    expr -> CONSTANT_ENCAPSED_STRING
Rule 87    expr -> TRUE
Rule 88    expr -> FALSE
Rule 89    expr_without_variable_ENCAPS -> encaps expr_without_variable_ENCAPS
Rule 90    expr_without_variable_ENCAPS -> <empty>
Rule 91    encaps -> encaps_var
Rule 92    encaps -> VARIABLE
Rule 93    encaps -> LPAREN
Rule 94    encaps -> RPAREN
Rule 95    encaps -> LKEY
Rule 96    encaps -> RKEY
Rule 97    encaps_var -> VARIABLE encaps_var_1
Rule 98    encaps_var -> DOLAR LBRACKET expr RBRACKET
Rule 99    encaps_var -> DOLAR LKEY ID LBRACKET expr RBRACKET RKEY
Rule 100   encaps_var -> LKEY variable RKEY
Rule 101   encaps_var_1 -> LBRACKET encaps_var_offset RBRACKET
Rule 102   encaps_var_1 -> <empty>
Rule 103   encaps_var_offset -> STRING
Rule 104   encaps_var_offset -> VARIABLE
Rule 105   expr_without_variable_EXIT -> exit_expr
Rule 106   expr_without_variable_EXIT -> <empty>
Rule 107   exit_expr -> LPAREN exit_expr_EXPR RPAREN
Rule 108   exit_expr_EXPR -> expr
Rule 109   exit_expr_EXPR -> <empty>
Rule 110   variable -> base_variable
Rule 111   variable -> function_call
Rule 112   base_variable -> reference_variable
Rule 113   base_variable -> simple_indirect_reference_DOLAR reference_variable
Rule 114   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 115   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 116   reference_variable_SELECTOR -> <empty>
Rule 117   compound_variable -> VARIABLE
Rule 118   compound_variable -> DOLAR LKEY expr RKEY
Rule 119   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 120   simple_indirect_reference_DOLAR -> <empty>
Rule 121   selector -> LBRACKET selector_EXPR RBRACKET
Rule 122   selector_EXPR -> expr
Rule 123   selector_EXPR -> <empty>
Rule 124   variable_name -> VARIABLE
Rule 125   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 126   inner_statement_MUL -> <empty>
Rule 127   function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 128   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 129   parameter_list -> <empty>
Rule 130   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 131   parameter_list_COLON_PARAMETER -> <empty>
Rule 132   parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
Rule 133   parameter_type -> INT_TYPE
Rule 134   parameter_type -> BOOLEAN_TYPE
Rule 135   parameter_type -> STRING_TYPE
Rule 136   parameter_type -> FLOAT_TYPE
Rule 137   parameter_type -> ARRAY_TYPE
Rule 138   parameter_type -> BOOL_TYPE
Rule 139   parameter_type -> REAL_TYPE
Rule 140   parameter_type -> DOUBLE_TYPE
Rule 141   parameter_type -> <empty>
Rule 142   parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar
Rule 143   parameter_ASSIGN_STATIC_OPT -> <empty>
Rule 144   static_scalar -> common_scalar
Rule 145   static_scalar -> PLUS static_scalar
Rule 146   static_scalar -> MINUS static_scalar
Rule 147   common_scalar -> NUMBER_REAL
Rule 148   common_scalar -> NUMBER_INTEGER
Rule 149   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 150   static_scalar_OPT -> static_array_pair_list
Rule 151   static_scalar_OPT -> <empty>
Rule 152   static_array_pair_list -> static_array_pair static_array_pair_list_COLON_STATIC static_array_pair_list_COLON
Rule 153   static_array_pair_list_COLON_STATIC -> COLON static_array_pair static_array_pair_list_COLON_STATIC
Rule 154   static_array_pair_list_COLON_STATIC -> <empty>
Rule 155   static_array_pair_list_COLON -> COLON
Rule 156   static_array_pair_list_COLON -> <empty>
Rule 157   static_array_pair -> static_scalar static_array_pair_ATTR_STATIC
Rule 158   static_array_pair_ATTR_STATIC -> ATTR_ASSOC static_scalar
Rule 159   static_array_pair_ATTR_STATIC -> <empty>
Rule 160   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 161   array_pair_list -> <empty>
Rule 162   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 163   array_pair_list_ARR_PAIR -> <empty>
Rule 164   array_pair -> expr array_pair_ATTR_EXPR_OPT
Rule 165   array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable
Rule 166   array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr
Rule 167   array_pair_ATTR_EXPR_OPT -> <empty>
Rule 168   array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC
Rule 169   array_pair_EXPR_ATTR_OPT -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 52
AMPERSAND            : 19 30 76 165
AND                  : 
APOSTROFE            : 
ARRAY_TYPE           : 43 81 137
ARROBA               : 
AS                   : 
ASPAS                : 
ASSIGN               : 57 142
ATTR_ASSOC           : 158 166 168
BEGIN_PROGRAM        : 1
BOOLEAN_TYPE         : 44 134
BOOL_TYPE            : 45 138
BREAK                : 
CASE                 : 
CLONE                : 
COLON                : 25 27 33 130 153 155 162
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 86 149
CONTINUE             : 
CRASE                : 
DDOT                 : 73
DECLARE              : 
DECREMENT            : 68 69
DIE                  : 80
DIVIDE               : 48
DIVIDE_ASSIGN        : 56
DO                   : 
DOLAR                : 98 99 118 119
DOUBLE_TYPE          : 39 140
ELSE                 : 15
ELSEIF               : 13
ENDDECLARE           : 
END_PROGRAM          : 1
EQUALS               : 58
EXC_DOT              : 35
EXIT                 : 79
FALSE                : 88
FLOAT_TYPE           : 40 136
FOR                  : 
FOREACH              : 
FUNCTION             : 127
GLOBAL               : 
GREAT_EQUAL          : 62
GREAT_THAN           : 59
ID                   : 21 99 127
IDENTATION           : 
IF                   : 12
INCREMENT            : 66 67
INTE_DOT             : 73
INT_TYPE             : 38 133
LBRACKET             : 70 98 99 101 121
LEFT_LOGICAL         : 64
LESS_EQUAL           : 61
LESS_THAN            : 60
LIST                 : 32
LKEY                 : 8 18 95 99 100 118 127
LPAREN               : 8 12 13 21 32 71 78 81 93 107 127
MINUS                : 37 51 146
MOD_ASSIGN           : 54
NOT_EQUAL            : 63
NUMBER_INTEGER       : 85 148
NUMBER_REAL          : 84 147
OR                   : 
PERCENT              : 49
PLUS                 : 36 47 145
PLUS_ASSIGN          : 55
RBRACKET             : 70 98 99 101 121
REAL_TYPE            : 41 139
RETURN               : 
RIGHT_LOGICAL        : 65
RKEY                 : 8 18 96 99 100 118 127
RPAREN               : 8 12 13 21 32 71 78 81 94 107 127
SEMICOLON            : 6 9
STRING               : 103
STRING_TYPE          : 42 135
SUB_ASSIGN           : 53
TIMES                : 50
TRUE                 : 87
UNSET                : 46
VAR                  : 
VARIABLE             : 30 92 97 104 117 124 132
WHILE                : 8
error                : 

Nonterminals, with rules where they appear

AMPERSAND_OPT        : 127 132
arithmetic_operator  : 77
array_pair           : 160 162
array_pair_ATTR_EXPR_OPT : 164
array_pair_EXPR_ATTR_OPT : 165
array_pair_list      : 81
array_pair_list_ARR_PAIR : 160 162
assign_operator      : 75 76
assignment_list_element : 27 32 33
assignment_list_element_COLON_ASSIGNMENT : 32 33
base_variable        : 22 110
common_scalar        : 144
comparission_operator : 74
compound_variable    : 114
encaps               : 89
encaps_var           : 91
encaps_var_1         : 97
encaps_var_offset    : 101
exit_expr            : 105
exit_expr_EXPR       : 107
expr                 : 6 8 12 13 70 71 72 73 73 73 74 74 75 76 77 77 78 98 99 108 118 122 164 166 168
expr_without_variable_COLON_ASSIGNMENT : 27
expr_without_variable_ENCAPS : 89
expr_without_variable_EXIT : 79 80
function_call        : 82 111
function_call_list_COLON_FUNCTION : 23 25
function_call_parameter : 23 25
function_call_parameter_list : 21
function_declaration_statement : 4
inner_statement      : 2 125
inner_statement_MUL  : 125 127
main                 : 0
main_INNER           : 1 2
parameter            : 128 130
parameter_ASSIGN_STATIC_OPT : 132
parameter_list       : 127
parameter_list_COLON_PARAMETER : 128 130
parameter_type       : 132
reference_variable   : 112 113
reference_variable_SELECTOR : 114 115
selector             : 115
selector_EXPR        : 121
simple_indirect_reference_DOLAR : 113 119
statement            : 5 10 17
statement_BLOCK_OPT  : 12 13 15
statement_IF         : 7
statement_MUL        : 8 10 18
statement_else       : 7
statement_elseif     : 7
static_array_pair    : 152 153
static_array_pair_ATTR_STATIC : 157
static_array_pair_list : 150
static_array_pair_list_COLON : 152
static_array_pair_list_COLON_STATIC : 152 153
static_scalar        : 142 145 146 157 158
static_scalar_OPT    : 
type_cast_operator   : 78
unary_operator       : 72
variable             : 29 31 66 67 68 69 70 75 76 83 100 165
variable_name        : 

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main_INNER -> . inner_statement main_INNER
    (3) main_INNER -> .
    (4) inner_statement -> . function_declaration_statement
    (5) inner_statement -> . statement
    (127) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     reduce using rule 3 (main_INNER -> .)
    FUNCTION        shift and go to state 7
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 4
    function_declaration_statement shift and go to state 5
    statement                      shift and go to state 6
    expr                           shift and go to state 10
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 37


state 4

    (2) main_INNER -> inner_statement . main_INNER
    (2) main_INNER -> . inner_statement main_INNER
    (3) main_INNER -> .
    (4) inner_statement -> . function_declaration_statement
    (5) inner_statement -> . statement
    (127) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     reduce using rule 3 (main_INNER -> .)
    FUNCTION        shift and go to state 7
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 4
    main_INNER                     shift and go to state 38
    function_declaration_statement shift and go to state 5
    statement                      shift and go to state 6
    expr                           shift and go to state 10
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 5

    (4) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 4 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 4 (inner_statement -> function_declaration_statement .)
    SEMICOLON       reduce using rule 4 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 4 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 4 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 4 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 4 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 4 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 4 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 4 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 4 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 4 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 4 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 4 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 4 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 4 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 4 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 4 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 4 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 4 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 4 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 4 (inner_statement -> function_declaration_statement .)


state 6

    (5) inner_statement -> statement .

    FUNCTION        reduce using rule 5 (inner_statement -> statement .)
    WHILE           reduce using rule 5 (inner_statement -> statement .)
    SEMICOLON       reduce using rule 5 (inner_statement -> statement .)
    INCREMENT       reduce using rule 5 (inner_statement -> statement .)
    DECREMENT       reduce using rule 5 (inner_statement -> statement .)
    LPAREN          reduce using rule 5 (inner_statement -> statement .)
    EXIT            reduce using rule 5 (inner_statement -> statement .)
    DIE             reduce using rule 5 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 5 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 5 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 5 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (inner_statement -> statement .)
    TRUE            reduce using rule 5 (inner_statement -> statement .)
    FALSE           reduce using rule 5 (inner_statement -> statement .)
    IF              reduce using rule 5 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 5 (inner_statement -> statement .)
    PLUS            reduce using rule 5 (inner_statement -> statement .)
    MINUS           reduce using rule 5 (inner_statement -> statement .)
    ID              reduce using rule 5 (inner_statement -> statement .)
    DOLAR           reduce using rule 5 (inner_statement -> statement .)
    VARIABLE        reduce using rule 5 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 5 (inner_statement -> statement .)
    RKEY            reduce using rule 5 (inner_statement -> statement .)


state 7

    (127) function_declaration_statement -> FUNCTION . AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (19) AMPERSAND_OPT -> . AMPERSAND
    (20) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 40
    ID              reduce using rule 20 (AMPERSAND_OPT -> .)

    AMPERSAND_OPT                  shift and go to state 39

state 8

    (21) function_call -> ID . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 41


state 9

    (71) expr -> LPAREN . expr RPAREN
    (78) expr -> LPAREN . type_cast_operator RPAREN expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (38) type_cast_operator -> . INT_TYPE
    (39) type_cast_operator -> . DOUBLE_TYPE
    (40) type_cast_operator -> . FLOAT_TYPE
    (41) type_cast_operator -> . REAL_TYPE
    (42) type_cast_operator -> . STRING_TYPE
    (43) type_cast_operator -> . ARRAY_TYPE
    (44) type_cast_operator -> . BOOLEAN_TYPE
    (45) type_cast_operator -> . BOOL_TYPE
    (46) type_cast_operator -> . UNSET
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 44
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    INT_TYPE        shift and go to state 45
    DOUBLE_TYPE     shift and go to state 46
    FLOAT_TYPE      shift and go to state 47
    REAL_TYPE       shift and go to state 48
    STRING_TYPE     shift and go to state 49
    BOOLEAN_TYPE    shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    UNSET           shift and go to state 52
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 42
    type_cast_operator             shift and go to state 43
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 10

    (6) statement -> expr . SEMICOLON
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 53
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 11

    (9) statement -> SEMICOLON .

    FUNCTION        reduce using rule 9 (statement -> SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 9 (statement -> SEMICOLON .)
    INCREMENT       reduce using rule 9 (statement -> SEMICOLON .)
    DECREMENT       reduce using rule 9 (statement -> SEMICOLON .)
    LPAREN          reduce using rule 9 (statement -> SEMICOLON .)
    EXIT            reduce using rule 9 (statement -> SEMICOLON .)
    DIE             reduce using rule 9 (statement -> SEMICOLON .)
    ARRAY_TYPE      reduce using rule 9 (statement -> SEMICOLON .)
    NUMBER_REAL     reduce using rule 9 (statement -> SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (statement -> SEMICOLON .)
    TRUE            reduce using rule 9 (statement -> SEMICOLON .)
    FALSE           reduce using rule 9 (statement -> SEMICOLON .)
    IF              reduce using rule 9 (statement -> SEMICOLON .)
    EXC_DOT         reduce using rule 9 (statement -> SEMICOLON .)
    PLUS            reduce using rule 9 (statement -> SEMICOLON .)
    MINUS           reduce using rule 9 (statement -> SEMICOLON .)
    ID              reduce using rule 9 (statement -> SEMICOLON .)
    DOLAR           reduce using rule 9 (statement -> SEMICOLON .)
    VARIABLE        reduce using rule 9 (statement -> SEMICOLON .)
    END_PROGRAM     reduce using rule 9 (statement -> SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> SEMICOLON .)
    RKEY            reduce using rule 9 (statement -> SEMICOLON .)
    ELSEIF          reduce using rule 9 (statement -> SEMICOLON .)


state 12

    (7) statement -> statement_IF . statement_elseif statement_else
    (13) statement_elseif -> . ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT
    (14) statement_elseif -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 71
    ELSE            reduce using rule 14 (statement_elseif -> .)
    FUNCTION        reduce using rule 14 (statement_elseif -> .)
    WHILE           reduce using rule 14 (statement_elseif -> .)
    SEMICOLON       reduce using rule 14 (statement_elseif -> .)
    INCREMENT       reduce using rule 14 (statement_elseif -> .)
    DECREMENT       reduce using rule 14 (statement_elseif -> .)
    LPAREN          reduce using rule 14 (statement_elseif -> .)
    EXIT            reduce using rule 14 (statement_elseif -> .)
    DIE             reduce using rule 14 (statement_elseif -> .)
    ARRAY_TYPE      reduce using rule 14 (statement_elseif -> .)
    NUMBER_REAL     reduce using rule 14 (statement_elseif -> .)
    NUMBER_INTEGER  reduce using rule 14 (statement_elseif -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 14 (statement_elseif -> .)
    TRUE            reduce using rule 14 (statement_elseif -> .)
    FALSE           reduce using rule 14 (statement_elseif -> .)
    IF              reduce using rule 14 (statement_elseif -> .)
    EXC_DOT         reduce using rule 14 (statement_elseif -> .)
    PLUS            reduce using rule 14 (statement_elseif -> .)
    MINUS           reduce using rule 14 (statement_elseif -> .)
    ID              reduce using rule 14 (statement_elseif -> .)
    DOLAR           reduce using rule 14 (statement_elseif -> .)
    VARIABLE        reduce using rule 14 (statement_elseif -> .)
    END_PROGRAM     reduce using rule 14 (statement_elseif -> .)
    RKEY            reduce using rule 14 (statement_elseif -> .)

  ! ELSEIF          [ reduce using rule 14 (statement_elseif -> .) ]

    statement_elseif               shift and go to state 70

state 13

    (8) statement -> WHILE . LPAREN expr RPAREN LKEY statement_MUL RKEY

    LPAREN          shift and go to state 72


state 14

    (66) expr -> INCREMENT . variable
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 73
    base_variable                  shift and go to state 28
    function_call                  shift and go to state 74
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 15

    (67) expr -> variable . INCREMENT
    (69) expr -> variable . DECREMENT
    (70) expr -> variable . LBRACKET expr RBRACKET
    (75) expr -> variable . assign_operator expr
    (76) expr -> variable . assign_operator AMPERSAND expr
    (83) expr -> variable .
    (52) assign_operator -> . ADD_ASSIGN
    (53) assign_operator -> . SUB_ASSIGN
    (54) assign_operator -> . MOD_ASSIGN
    (55) assign_operator -> . PLUS_ASSIGN
    (56) assign_operator -> . DIVIDE_ASSIGN
    (57) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 75
    DECREMENT       shift and go to state 76
    LBRACKET        shift and go to state 77
    SEMICOLON       reduce using rule 83 (expr -> variable .)
    INTE_DOT        reduce using rule 83 (expr -> variable .)
    EQUALS          reduce using rule 83 (expr -> variable .)
    GREAT_THAN      reduce using rule 83 (expr -> variable .)
    LESS_THAN       reduce using rule 83 (expr -> variable .)
    LESS_EQUAL      reduce using rule 83 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 83 (expr -> variable .)
    NOT_EQUAL       reduce using rule 83 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 83 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 83 (expr -> variable .)
    PLUS            reduce using rule 83 (expr -> variable .)
    DIVIDE          reduce using rule 83 (expr -> variable .)
    PERCENT         reduce using rule 83 (expr -> variable .)
    TIMES           reduce using rule 83 (expr -> variable .)
    MINUS           reduce using rule 83 (expr -> variable .)
    RPAREN          reduce using rule 83 (expr -> variable .)
    DDOT            reduce using rule 83 (expr -> variable .)
    RBRACKET        reduce using rule 83 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 83 (expr -> variable .)
    COLON           reduce using rule 83 (expr -> variable .)
    RKEY            reduce using rule 83 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 79
    SUB_ASSIGN      shift and go to state 80
    MOD_ASSIGN      shift and go to state 81
    PLUS_ASSIGN     shift and go to state 82
    DIVIDE_ASSIGN   shift and go to state 83
    ASSIGN          shift and go to state 84

    assign_operator                shift and go to state 78

state 16

    (68) expr -> DECREMENT . variable
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 85
    base_variable                  shift and go to state 28
    function_call                  shift and go to state 74
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 17

    (72) expr -> unary_operator . expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    unary_operator                 shift and go to state 17
    expr                           shift and go to state 86
    variable                       shift and go to state 15
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 18

    (79) expr -> EXIT . expr_without_variable_EXIT
    (105) expr_without_variable_EXIT -> . exit_expr
    (106) expr_without_variable_EXIT -> .
    (107) exit_expr -> . LPAREN exit_expr_EXPR RPAREN

    SEMICOLON       reduce using rule 106 (expr_without_variable_EXIT -> .)
    INTE_DOT        reduce using rule 106 (expr_without_variable_EXIT -> .)
    EQUALS          reduce using rule 106 (expr_without_variable_EXIT -> .)
    GREAT_THAN      reduce using rule 106 (expr_without_variable_EXIT -> .)
    LESS_THAN       reduce using rule 106 (expr_without_variable_EXIT -> .)
    LESS_EQUAL      reduce using rule 106 (expr_without_variable_EXIT -> .)
    GREAT_EQUAL     reduce using rule 106 (expr_without_variable_EXIT -> .)
    NOT_EQUAL       reduce using rule 106 (expr_without_variable_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 106 (expr_without_variable_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 106 (expr_without_variable_EXIT -> .)
    PLUS            reduce using rule 106 (expr_without_variable_EXIT -> .)
    DIVIDE          reduce using rule 106 (expr_without_variable_EXIT -> .)
    PERCENT         reduce using rule 106 (expr_without_variable_EXIT -> .)
    TIMES           reduce using rule 106 (expr_without_variable_EXIT -> .)
    MINUS           reduce using rule 106 (expr_without_variable_EXIT -> .)
    RPAREN          reduce using rule 106 (expr_without_variable_EXIT -> .)
    DDOT            reduce using rule 106 (expr_without_variable_EXIT -> .)
    RBRACKET        reduce using rule 106 (expr_without_variable_EXIT -> .)
    ATTR_ASSOC      reduce using rule 106 (expr_without_variable_EXIT -> .)
    COLON           reduce using rule 106 (expr_without_variable_EXIT -> .)
    RKEY            reduce using rule 106 (expr_without_variable_EXIT -> .)
    LPAREN          shift and go to state 89

    expr_without_variable_EXIT     shift and go to state 87
    exit_expr                      shift and go to state 88

state 19

    (80) expr -> DIE . expr_without_variable_EXIT
    (105) expr_without_variable_EXIT -> . exit_expr
    (106) expr_without_variable_EXIT -> .
    (107) exit_expr -> . LPAREN exit_expr_EXPR RPAREN

    SEMICOLON       reduce using rule 106 (expr_without_variable_EXIT -> .)
    INTE_DOT        reduce using rule 106 (expr_without_variable_EXIT -> .)
    EQUALS          reduce using rule 106 (expr_without_variable_EXIT -> .)
    GREAT_THAN      reduce using rule 106 (expr_without_variable_EXIT -> .)
    LESS_THAN       reduce using rule 106 (expr_without_variable_EXIT -> .)
    LESS_EQUAL      reduce using rule 106 (expr_without_variable_EXIT -> .)
    GREAT_EQUAL     reduce using rule 106 (expr_without_variable_EXIT -> .)
    NOT_EQUAL       reduce using rule 106 (expr_without_variable_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 106 (expr_without_variable_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 106 (expr_without_variable_EXIT -> .)
    PLUS            reduce using rule 106 (expr_without_variable_EXIT -> .)
    DIVIDE          reduce using rule 106 (expr_without_variable_EXIT -> .)
    PERCENT         reduce using rule 106 (expr_without_variable_EXIT -> .)
    TIMES           reduce using rule 106 (expr_without_variable_EXIT -> .)
    MINUS           reduce using rule 106 (expr_without_variable_EXIT -> .)
    RPAREN          reduce using rule 106 (expr_without_variable_EXIT -> .)
    DDOT            reduce using rule 106 (expr_without_variable_EXIT -> .)
    RBRACKET        reduce using rule 106 (expr_without_variable_EXIT -> .)
    ATTR_ASSOC      reduce using rule 106 (expr_without_variable_EXIT -> .)
    COLON           reduce using rule 106 (expr_without_variable_EXIT -> .)
    RKEY            reduce using rule 106 (expr_without_variable_EXIT -> .)
    LPAREN          shift and go to state 89

    expr_without_variable_EXIT     shift and go to state 90
    exit_expr                      shift and go to state 88

state 20

    (81) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN

    LPAREN          shift and go to state 91


state 21

    (82) expr -> function_call .
    (111) variable -> function_call .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for PERCENT resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for DDOT resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for COLON resolved using rule 82 (expr -> function_call .)
  ! reduce/reduce conflict for RKEY resolved using rule 82 (expr -> function_call .)
    SEMICOLON       reduce using rule 82 (expr -> function_call .)
    INTE_DOT        reduce using rule 82 (expr -> function_call .)
    EQUALS          reduce using rule 82 (expr -> function_call .)
    GREAT_THAN      reduce using rule 82 (expr -> function_call .)
    LESS_THAN       reduce using rule 82 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 82 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 82 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 82 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 82 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 82 (expr -> function_call .)
    PLUS            reduce using rule 82 (expr -> function_call .)
    DIVIDE          reduce using rule 82 (expr -> function_call .)
    PERCENT         reduce using rule 82 (expr -> function_call .)
    TIMES           reduce using rule 82 (expr -> function_call .)
    MINUS           reduce using rule 82 (expr -> function_call .)
    RPAREN          reduce using rule 82 (expr -> function_call .)
    DDOT            reduce using rule 82 (expr -> function_call .)
    RBRACKET        reduce using rule 82 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 82 (expr -> function_call .)
    COLON           reduce using rule 82 (expr -> function_call .)
    RKEY            reduce using rule 82 (expr -> function_call .)
    INCREMENT       reduce using rule 111 (variable -> function_call .)
    DECREMENT       reduce using rule 111 (variable -> function_call .)
    LBRACKET        reduce using rule 111 (variable -> function_call .)
    ADD_ASSIGN      reduce using rule 111 (variable -> function_call .)
    SUB_ASSIGN      reduce using rule 111 (variable -> function_call .)
    MOD_ASSIGN      reduce using rule 111 (variable -> function_call .)
    PLUS_ASSIGN     reduce using rule 111 (variable -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 111 (variable -> function_call .)
    ASSIGN          reduce using rule 111 (variable -> function_call .)

  ! SEMICOLON       [ reduce using rule 111 (variable -> function_call .) ]
  ! INTE_DOT        [ reduce using rule 111 (variable -> function_call .) ]
  ! EQUALS          [ reduce using rule 111 (variable -> function_call .) ]
  ! GREAT_THAN      [ reduce using rule 111 (variable -> function_call .) ]
  ! LESS_THAN       [ reduce using rule 111 (variable -> function_call .) ]
  ! LESS_EQUAL      [ reduce using rule 111 (variable -> function_call .) ]
  ! GREAT_EQUAL     [ reduce using rule 111 (variable -> function_call .) ]
  ! NOT_EQUAL       [ reduce using rule 111 (variable -> function_call .) ]
  ! LEFT_LOGICAL    [ reduce using rule 111 (variable -> function_call .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 111 (variable -> function_call .) ]
  ! PLUS            [ reduce using rule 111 (variable -> function_call .) ]
  ! DIVIDE          [ reduce using rule 111 (variable -> function_call .) ]
  ! PERCENT         [ reduce using rule 111 (variable -> function_call .) ]
  ! TIMES           [ reduce using rule 111 (variable -> function_call .) ]
  ! MINUS           [ reduce using rule 111 (variable -> function_call .) ]
  ! RPAREN          [ reduce using rule 111 (variable -> function_call .) ]
  ! DDOT            [ reduce using rule 111 (variable -> function_call .) ]
  ! RBRACKET        [ reduce using rule 111 (variable -> function_call .) ]
  ! ATTR_ASSOC      [ reduce using rule 111 (variable -> function_call .) ]
  ! COLON           [ reduce using rule 111 (variable -> function_call .) ]
  ! RKEY            [ reduce using rule 111 (variable -> function_call .) ]


state 22

    (84) expr -> NUMBER_REAL .

    SEMICOLON       reduce using rule 84 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 84 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 84 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 84 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 84 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 84 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 84 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 84 (expr -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 84 (expr -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 84 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 84 (expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 84 (expr -> NUMBER_REAL .)
    PERCENT         reduce using rule 84 (expr -> NUMBER_REAL .)
    TIMES           reduce using rule 84 (expr -> NUMBER_REAL .)
    MINUS           reduce using rule 84 (expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 84 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 84 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 84 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 84 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 84 (expr -> NUMBER_REAL .)
    RKEY            reduce using rule 84 (expr -> NUMBER_REAL .)


state 23

    (85) expr -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 85 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 85 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 85 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 85 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 85 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 85 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 85 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 85 (expr -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 85 (expr -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 85 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 85 (expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 85 (expr -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 85 (expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 85 (expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 85 (expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 85 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 85 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 85 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 85 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 85 (expr -> NUMBER_INTEGER .)
    RKEY            reduce using rule 85 (expr -> NUMBER_INTEGER .)


state 24

    (86) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 86 (expr -> CONSTANT_ENCAPSED_STRING .)


state 25

    (87) expr -> TRUE .

    SEMICOLON       reduce using rule 87 (expr -> TRUE .)
    INTE_DOT        reduce using rule 87 (expr -> TRUE .)
    EQUALS          reduce using rule 87 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 87 (expr -> TRUE .)
    LESS_THAN       reduce using rule 87 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 87 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 87 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 87 (expr -> TRUE .)
    LEFT_LOGICAL    reduce using rule 87 (expr -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 87 (expr -> TRUE .)
    PLUS            reduce using rule 87 (expr -> TRUE .)
    DIVIDE          reduce using rule 87 (expr -> TRUE .)
    PERCENT         reduce using rule 87 (expr -> TRUE .)
    TIMES           reduce using rule 87 (expr -> TRUE .)
    MINUS           reduce using rule 87 (expr -> TRUE .)
    RPAREN          reduce using rule 87 (expr -> TRUE .)
    DDOT            reduce using rule 87 (expr -> TRUE .)
    RBRACKET        reduce using rule 87 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 87 (expr -> TRUE .)
    COLON           reduce using rule 87 (expr -> TRUE .)
    RKEY            reduce using rule 87 (expr -> TRUE .)


state 26

    (88) expr -> FALSE .

    SEMICOLON       reduce using rule 88 (expr -> FALSE .)
    INTE_DOT        reduce using rule 88 (expr -> FALSE .)
    EQUALS          reduce using rule 88 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 88 (expr -> FALSE .)
    LESS_THAN       reduce using rule 88 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 88 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 88 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 88 (expr -> FALSE .)
    LEFT_LOGICAL    reduce using rule 88 (expr -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 88 (expr -> FALSE .)
    PLUS            reduce using rule 88 (expr -> FALSE .)
    DIVIDE          reduce using rule 88 (expr -> FALSE .)
    PERCENT         reduce using rule 88 (expr -> FALSE .)
    TIMES           reduce using rule 88 (expr -> FALSE .)
    MINUS           reduce using rule 88 (expr -> FALSE .)
    RPAREN          reduce using rule 88 (expr -> FALSE .)
    DDOT            reduce using rule 88 (expr -> FALSE .)
    RBRACKET        reduce using rule 88 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 88 (expr -> FALSE .)
    COLON           reduce using rule 88 (expr -> FALSE .)
    RKEY            reduce using rule 88 (expr -> FALSE .)


state 27

    (12) statement_IF -> IF . LPAREN expr RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 92


state 28

    (110) variable -> base_variable .
    (22) function_call -> base_variable .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for EQUALS resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for PERCENT resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for TIMES resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for MINUS resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for ADD_ASSIGN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for SUB_ASSIGN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for MOD_ASSIGN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS_ASSIGN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE_ASSIGN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for DDOT resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for COLON resolved using rule 22 (function_call -> base_variable .)
  ! reduce/reduce conflict for RKEY resolved using rule 22 (function_call -> base_variable .)
    SEMICOLON       reduce using rule 22 (function_call -> base_variable .)
    INTE_DOT        reduce using rule 22 (function_call -> base_variable .)
    EQUALS          reduce using rule 22 (function_call -> base_variable .)
    GREAT_THAN      reduce using rule 22 (function_call -> base_variable .)
    LESS_THAN       reduce using rule 22 (function_call -> base_variable .)
    LESS_EQUAL      reduce using rule 22 (function_call -> base_variable .)
    GREAT_EQUAL     reduce using rule 22 (function_call -> base_variable .)
    NOT_EQUAL       reduce using rule 22 (function_call -> base_variable .)
    LEFT_LOGICAL    reduce using rule 22 (function_call -> base_variable .)
    RIGHT_LOGICAL   reduce using rule 22 (function_call -> base_variable .)
    PLUS            reduce using rule 22 (function_call -> base_variable .)
    DIVIDE          reduce using rule 22 (function_call -> base_variable .)
    PERCENT         reduce using rule 22 (function_call -> base_variable .)
    TIMES           reduce using rule 22 (function_call -> base_variable .)
    MINUS           reduce using rule 22 (function_call -> base_variable .)
    INCREMENT       reduce using rule 22 (function_call -> base_variable .)
    DECREMENT       reduce using rule 22 (function_call -> base_variable .)
    LBRACKET        reduce using rule 22 (function_call -> base_variable .)
    ADD_ASSIGN      reduce using rule 22 (function_call -> base_variable .)
    SUB_ASSIGN      reduce using rule 22 (function_call -> base_variable .)
    MOD_ASSIGN      reduce using rule 22 (function_call -> base_variable .)
    PLUS_ASSIGN     reduce using rule 22 (function_call -> base_variable .)
    DIVIDE_ASSIGN   reduce using rule 22 (function_call -> base_variable .)
    ASSIGN          reduce using rule 22 (function_call -> base_variable .)
    RPAREN          reduce using rule 22 (function_call -> base_variable .)
    DDOT            reduce using rule 22 (function_call -> base_variable .)
    RBRACKET        reduce using rule 22 (function_call -> base_variable .)
    ATTR_ASSOC      reduce using rule 22 (function_call -> base_variable .)
    COLON           reduce using rule 22 (function_call -> base_variable .)
    RKEY            reduce using rule 22 (function_call -> base_variable .)

  ! INCREMENT       [ reduce using rule 110 (variable -> base_variable .) ]
  ! DECREMENT       [ reduce using rule 110 (variable -> base_variable .) ]
  ! LBRACKET        [ reduce using rule 110 (variable -> base_variable .) ]
  ! ADD_ASSIGN      [ reduce using rule 110 (variable -> base_variable .) ]
  ! SUB_ASSIGN      [ reduce using rule 110 (variable -> base_variable .) ]
  ! MOD_ASSIGN      [ reduce using rule 110 (variable -> base_variable .) ]
  ! PLUS_ASSIGN     [ reduce using rule 110 (variable -> base_variable .) ]
  ! DIVIDE_ASSIGN   [ reduce using rule 110 (variable -> base_variable .) ]
  ! ASSIGN          [ reduce using rule 110 (variable -> base_variable .) ]
  ! SEMICOLON       [ reduce using rule 110 (variable -> base_variable .) ]
  ! INTE_DOT        [ reduce using rule 110 (variable -> base_variable .) ]
  ! EQUALS          [ reduce using rule 110 (variable -> base_variable .) ]
  ! GREAT_THAN      [ reduce using rule 110 (variable -> base_variable .) ]
  ! LESS_THAN       [ reduce using rule 110 (variable -> base_variable .) ]
  ! LESS_EQUAL      [ reduce using rule 110 (variable -> base_variable .) ]
  ! GREAT_EQUAL     [ reduce using rule 110 (variable -> base_variable .) ]
  ! NOT_EQUAL       [ reduce using rule 110 (variable -> base_variable .) ]
  ! LEFT_LOGICAL    [ reduce using rule 110 (variable -> base_variable .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 110 (variable -> base_variable .) ]
  ! PLUS            [ reduce using rule 110 (variable -> base_variable .) ]
  ! DIVIDE          [ reduce using rule 110 (variable -> base_variable .) ]
  ! PERCENT         [ reduce using rule 110 (variable -> base_variable .) ]
  ! TIMES           [ reduce using rule 110 (variable -> base_variable .) ]
  ! MINUS           [ reduce using rule 110 (variable -> base_variable .) ]
  ! RPAREN          [ reduce using rule 110 (variable -> base_variable .) ]
  ! DDOT            [ reduce using rule 110 (variable -> base_variable .) ]
  ! RBRACKET        [ reduce using rule 110 (variable -> base_variable .) ]
  ! ATTR_ASSOC      [ reduce using rule 110 (variable -> base_variable .) ]
  ! COLON           [ reduce using rule 110 (variable -> base_variable .) ]
  ! RKEY            [ reduce using rule 110 (variable -> base_variable .) ]


state 29

    (35) unary_operator -> EXC_DOT .

    INCREMENT       reduce using rule 35 (unary_operator -> EXC_DOT .)
    DECREMENT       reduce using rule 35 (unary_operator -> EXC_DOT .)
    LPAREN          reduce using rule 35 (unary_operator -> EXC_DOT .)
    EXIT            reduce using rule 35 (unary_operator -> EXC_DOT .)
    DIE             reduce using rule 35 (unary_operator -> EXC_DOT .)
    ARRAY_TYPE      reduce using rule 35 (unary_operator -> EXC_DOT .)
    NUMBER_REAL     reduce using rule 35 (unary_operator -> EXC_DOT .)
    NUMBER_INTEGER  reduce using rule 35 (unary_operator -> EXC_DOT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 35 (unary_operator -> EXC_DOT .)
    TRUE            reduce using rule 35 (unary_operator -> EXC_DOT .)
    FALSE           reduce using rule 35 (unary_operator -> EXC_DOT .)
    EXC_DOT         reduce using rule 35 (unary_operator -> EXC_DOT .)
    PLUS            reduce using rule 35 (unary_operator -> EXC_DOT .)
    MINUS           reduce using rule 35 (unary_operator -> EXC_DOT .)
    ID              reduce using rule 35 (unary_operator -> EXC_DOT .)
    DOLAR           reduce using rule 35 (unary_operator -> EXC_DOT .)
    VARIABLE        reduce using rule 35 (unary_operator -> EXC_DOT .)


state 30

    (36) unary_operator -> PLUS .

    INCREMENT       reduce using rule 36 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 36 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 36 (unary_operator -> PLUS .)
    EXIT            reduce using rule 36 (unary_operator -> PLUS .)
    DIE             reduce using rule 36 (unary_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 36 (unary_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 36 (unary_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 36 (unary_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 36 (unary_operator -> PLUS .)
    TRUE            reduce using rule 36 (unary_operator -> PLUS .)
    FALSE           reduce using rule 36 (unary_operator -> PLUS .)
    EXC_DOT         reduce using rule 36 (unary_operator -> PLUS .)
    PLUS            reduce using rule 36 (unary_operator -> PLUS .)
    MINUS           reduce using rule 36 (unary_operator -> PLUS .)
    ID              reduce using rule 36 (unary_operator -> PLUS .)
    DOLAR           reduce using rule 36 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 36 (unary_operator -> PLUS .)


state 31

    (37) unary_operator -> MINUS .

    INCREMENT       reduce using rule 37 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 37 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 37 (unary_operator -> MINUS .)
    EXIT            reduce using rule 37 (unary_operator -> MINUS .)
    DIE             reduce using rule 37 (unary_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 37 (unary_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 37 (unary_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 37 (unary_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 37 (unary_operator -> MINUS .)
    TRUE            reduce using rule 37 (unary_operator -> MINUS .)
    FALSE           reduce using rule 37 (unary_operator -> MINUS .)
    EXC_DOT         reduce using rule 37 (unary_operator -> MINUS .)
    PLUS            reduce using rule 37 (unary_operator -> MINUS .)
    MINUS           reduce using rule 37 (unary_operator -> MINUS .)
    ID              reduce using rule 37 (unary_operator -> MINUS .)
    DOLAR           reduce using rule 37 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 37 (unary_operator -> MINUS .)


state 32

    (112) base_variable -> reference_variable .

    INCREMENT       reduce using rule 112 (base_variable -> reference_variable .)
    DECREMENT       reduce using rule 112 (base_variable -> reference_variable .)
    LBRACKET        reduce using rule 112 (base_variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 112 (base_variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 112 (base_variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 112 (base_variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 112 (base_variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 112 (base_variable -> reference_variable .)
    ASSIGN          reduce using rule 112 (base_variable -> reference_variable .)
    SEMICOLON       reduce using rule 112 (base_variable -> reference_variable .)
    INTE_DOT        reduce using rule 112 (base_variable -> reference_variable .)
    EQUALS          reduce using rule 112 (base_variable -> reference_variable .)
    GREAT_THAN      reduce using rule 112 (base_variable -> reference_variable .)
    LESS_THAN       reduce using rule 112 (base_variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 112 (base_variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 112 (base_variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 112 (base_variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 112 (base_variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 112 (base_variable -> reference_variable .)
    PLUS            reduce using rule 112 (base_variable -> reference_variable .)
    DIVIDE          reduce using rule 112 (base_variable -> reference_variable .)
    PERCENT         reduce using rule 112 (base_variable -> reference_variable .)
    TIMES           reduce using rule 112 (base_variable -> reference_variable .)
    MINUS           reduce using rule 112 (base_variable -> reference_variable .)
    RPAREN          reduce using rule 112 (base_variable -> reference_variable .)
    DDOT            reduce using rule 112 (base_variable -> reference_variable .)
    RBRACKET        reduce using rule 112 (base_variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 112 (base_variable -> reference_variable .)
    COLON           reduce using rule 112 (base_variable -> reference_variable .)
    RKEY            reduce using rule 112 (base_variable -> reference_variable .)


state 33

    (113) base_variable -> simple_indirect_reference_DOLAR . reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 36
    DOLAR           shift and go to state 94

    reference_variable             shift and go to state 93
    compound_variable              shift and go to state 34

state 34

    (114) reference_variable -> compound_variable . reference_variable_SELECTOR
    (115) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (116) reference_variable_SELECTOR -> .
    (121) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 116 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 116 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 116 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 116 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 116 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 116 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 116 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 116 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 116 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 116 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 116 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 116 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 116 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 116 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 116 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 116 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 116 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 116 (reference_variable_SELECTOR -> .)
    PLUS            reduce using rule 116 (reference_variable_SELECTOR -> .)
    DIVIDE          reduce using rule 116 (reference_variable_SELECTOR -> .)
    PERCENT         reduce using rule 116 (reference_variable_SELECTOR -> .)
    TIMES           reduce using rule 116 (reference_variable_SELECTOR -> .)
    MINUS           reduce using rule 116 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 116 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 116 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 116 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 116 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 116 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 116 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 97

  ! LBRACKET        [ reduce using rule 116 (reference_variable_SELECTOR -> .) ]

    reference_variable_SELECTOR    shift and go to state 95
    selector                       shift and go to state 96

state 35

    (119) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (118) compound_variable -> DOLAR . LKEY expr RKEY
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    LKEY            shift and go to state 100
    DOLAR           shift and go to state 98
    VARIABLE        reduce using rule 120 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 99

state 36

    (117) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 117 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 117 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 117 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 117 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 117 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 117 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 117 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 117 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 117 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 117 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 117 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 117 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 117 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 117 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 117 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 117 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 117 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 117 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 117 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 117 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 117 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 117 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 117 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 117 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 117 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 117 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 117 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 117 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 117 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 117 (compound_variable -> VARIABLE .)


state 37

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 38

    (2) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 2 (main_INNER -> inner_statement main_INNER .)


state 39

    (127) function_declaration_statement -> FUNCTION AMPERSAND_OPT . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 101


state 40

    (19) AMPERSAND_OPT -> AMPERSAND .

    ID              reduce using rule 19 (AMPERSAND_OPT -> AMPERSAND .)
    VARIABLE        reduce using rule 19 (AMPERSAND_OPT -> AMPERSAND .)


state 41

    (21) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (23) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (24) function_call_parameter_list -> .
    (29) function_call_parameter -> . variable
    (30) function_call_parameter -> . AMPERSAND VARIABLE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 24 (function_call_parameter_list -> .)
    AMPERSAND       shift and go to state 105
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter_list   shift and go to state 102
    function_call_parameter        shift and go to state 103
    variable                       shift and go to state 104
    base_variable                  shift and go to state 28
    function_call                  shift and go to state 74
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 42

    (71) expr -> LPAREN expr . RPAREN
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 106
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 43

    (78) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 107


state 44

    (81) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (43) type_cast_operator -> ARRAY_TYPE .

    LPAREN          shift and go to state 91
    RPAREN          reduce using rule 43 (type_cast_operator -> ARRAY_TYPE .)


state 45

    (38) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 38 (type_cast_operator -> INT_TYPE .)


state 46

    (39) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 39 (type_cast_operator -> DOUBLE_TYPE .)


state 47

    (40) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 40 (type_cast_operator -> FLOAT_TYPE .)


state 48

    (41) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 41 (type_cast_operator -> REAL_TYPE .)


state 49

    (42) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 42 (type_cast_operator -> STRING_TYPE .)


state 50

    (44) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 44 (type_cast_operator -> BOOLEAN_TYPE .)


state 51

    (45) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 45 (type_cast_operator -> BOOL_TYPE .)


state 52

    (46) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 46 (type_cast_operator -> UNSET .)


state 53

    (6) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 6 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> expr SEMICOLON .)
    SEMICOLON       reduce using rule 6 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 6 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 6 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 6 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 6 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 6 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 6 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 6 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 6 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 6 (statement -> expr SEMICOLON .)
    IF              reduce using rule 6 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 6 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 6 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 6 (statement -> expr SEMICOLON .)
    ID              reduce using rule 6 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 6 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 6 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 6 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 6 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 6 (statement -> expr SEMICOLON .)


state 54

    (73) expr -> expr INTE_DOT . expr DDOT expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 108
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 55

    (74) expr -> expr comparission_operator . expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 109
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 56

    (77) expr -> expr arithmetic_operator . expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 110
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 57

    (58) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 58 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 58 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 58 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 58 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 58 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 58 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 58 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 58 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 58 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 58 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 58 (comparission_operator -> EQUALS .)
    EXC_DOT         reduce using rule 58 (comparission_operator -> EQUALS .)
    PLUS            reduce using rule 58 (comparission_operator -> EQUALS .)
    MINUS           reduce using rule 58 (comparission_operator -> EQUALS .)
    ID              reduce using rule 58 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 58 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 58 (comparission_operator -> EQUALS .)


state 58

    (59) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    EXC_DOT         reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    PLUS            reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    MINUS           reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 59 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 59 (comparission_operator -> GREAT_THAN .)


state 59

    (60) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 60 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 60 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 60 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 60 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 60 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 60 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 60 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 60 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 60 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 60 (comparission_operator -> LESS_THAN .)
    EXC_DOT         reduce using rule 60 (comparission_operator -> LESS_THAN .)
    PLUS            reduce using rule 60 (comparission_operator -> LESS_THAN .)
    MINUS           reduce using rule 60 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 60 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 60 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 60 (comparission_operator -> LESS_THAN .)


state 60

    (61) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    EXC_DOT         reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    PLUS            reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    MINUS           reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 61 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 61 (comparission_operator -> LESS_EQUAL .)


state 61

    (62) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    EXC_DOT         reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    PLUS            reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    MINUS           reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 62 (comparission_operator -> GREAT_EQUAL .)


state 62

    (63) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    EXC_DOT         reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    PLUS            reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    MINUS           reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 63 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 63 (comparission_operator -> NOT_EQUAL .)


state 63

    (64) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    EXC_DOT         reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    PLUS            reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    MINUS           reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 64 (comparission_operator -> LEFT_LOGICAL .)


state 64

    (65) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    EXC_DOT         reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    PLUS            reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    MINUS           reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 65 (comparission_operator -> RIGHT_LOGICAL .)


state 65

    (47) arithmetic_operator -> PLUS .

    INCREMENT       reduce using rule 47 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 47 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 47 (arithmetic_operator -> PLUS .)
    EXIT            reduce using rule 47 (arithmetic_operator -> PLUS .)
    DIE             reduce using rule 47 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 47 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 47 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 47 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 47 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 47 (arithmetic_operator -> PLUS .)
    EXC_DOT         reduce using rule 47 (arithmetic_operator -> PLUS .)
    PLUS            reduce using rule 47 (arithmetic_operator -> PLUS .)
    MINUS           reduce using rule 47 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 47 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 47 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 47 (arithmetic_operator -> PLUS .)


state 66

    (48) arithmetic_operator -> DIVIDE .

    INCREMENT       reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    EXIT            reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    DIE             reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    EXC_DOT         reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    PLUS            reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    MINUS           reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 48 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 48 (arithmetic_operator -> DIVIDE .)


state 67

    (49) arithmetic_operator -> PERCENT .

    INCREMENT       reduce using rule 49 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 49 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 49 (arithmetic_operator -> PERCENT .)
    EXIT            reduce using rule 49 (arithmetic_operator -> PERCENT .)
    DIE             reduce using rule 49 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 49 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 49 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 49 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 49 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 49 (arithmetic_operator -> PERCENT .)
    EXC_DOT         reduce using rule 49 (arithmetic_operator -> PERCENT .)
    PLUS            reduce using rule 49 (arithmetic_operator -> PERCENT .)
    MINUS           reduce using rule 49 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 49 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 49 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 49 (arithmetic_operator -> PERCENT .)


state 68

    (50) arithmetic_operator -> TIMES .

    INCREMENT       reduce using rule 50 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 50 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 50 (arithmetic_operator -> TIMES .)
    EXIT            reduce using rule 50 (arithmetic_operator -> TIMES .)
    DIE             reduce using rule 50 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 50 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 50 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 50 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 50 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 50 (arithmetic_operator -> TIMES .)
    EXC_DOT         reduce using rule 50 (arithmetic_operator -> TIMES .)
    PLUS            reduce using rule 50 (arithmetic_operator -> TIMES .)
    MINUS           reduce using rule 50 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 50 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 50 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 50 (arithmetic_operator -> TIMES .)


state 69

    (51) arithmetic_operator -> MINUS .

    INCREMENT       reduce using rule 51 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 51 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 51 (arithmetic_operator -> MINUS .)
    EXIT            reduce using rule 51 (arithmetic_operator -> MINUS .)
    DIE             reduce using rule 51 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 51 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 51 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 51 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 51 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 51 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 51 (arithmetic_operator -> MINUS .)
    EXC_DOT         reduce using rule 51 (arithmetic_operator -> MINUS .)
    PLUS            reduce using rule 51 (arithmetic_operator -> MINUS .)
    MINUS           reduce using rule 51 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 51 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 51 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 51 (arithmetic_operator -> MINUS .)


state 70

    (7) statement -> statement_IF statement_elseif . statement_else
    (15) statement_else -> . ELSE statement_BLOCK_OPT
    (16) statement_else -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 112
    FUNCTION        reduce using rule 16 (statement_else -> .)
    WHILE           reduce using rule 16 (statement_else -> .)
    SEMICOLON       reduce using rule 16 (statement_else -> .)
    INCREMENT       reduce using rule 16 (statement_else -> .)
    DECREMENT       reduce using rule 16 (statement_else -> .)
    LPAREN          reduce using rule 16 (statement_else -> .)
    EXIT            reduce using rule 16 (statement_else -> .)
    DIE             reduce using rule 16 (statement_else -> .)
    ARRAY_TYPE      reduce using rule 16 (statement_else -> .)
    NUMBER_REAL     reduce using rule 16 (statement_else -> .)
    NUMBER_INTEGER  reduce using rule 16 (statement_else -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 16 (statement_else -> .)
    TRUE            reduce using rule 16 (statement_else -> .)
    FALSE           reduce using rule 16 (statement_else -> .)
    IF              reduce using rule 16 (statement_else -> .)
    EXC_DOT         reduce using rule 16 (statement_else -> .)
    PLUS            reduce using rule 16 (statement_else -> .)
    MINUS           reduce using rule 16 (statement_else -> .)
    ID              reduce using rule 16 (statement_else -> .)
    DOLAR           reduce using rule 16 (statement_else -> .)
    VARIABLE        reduce using rule 16 (statement_else -> .)
    END_PROGRAM     reduce using rule 16 (statement_else -> .)
    RKEY            reduce using rule 16 (statement_else -> .)
    ELSEIF          reduce using rule 16 (statement_else -> .)

  ! ELSE            [ reduce using rule 16 (statement_else -> .) ]

    statement_else                 shift and go to state 111

state 71

    (13) statement_elseif -> ELSEIF . LPAREN expr RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 113


state 72

    (8) statement -> WHILE LPAREN . expr RPAREN LKEY statement_MUL RKEY
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 114
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 73

    (66) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 66 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 66 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 66 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 66 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 66 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 66 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 66 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 66 (expr -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 66 (expr -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 66 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 66 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 66 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 66 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 66 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 66 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 66 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 66 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 66 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 66 (expr -> INCREMENT variable .)
    COLON           reduce using rule 66 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 66 (expr -> INCREMENT variable .)


state 74

    (111) variable -> function_call .

    SEMICOLON       reduce using rule 111 (variable -> function_call .)
    INTE_DOT        reduce using rule 111 (variable -> function_call .)
    EQUALS          reduce using rule 111 (variable -> function_call .)
    GREAT_THAN      reduce using rule 111 (variable -> function_call .)
    LESS_THAN       reduce using rule 111 (variable -> function_call .)
    LESS_EQUAL      reduce using rule 111 (variable -> function_call .)
    GREAT_EQUAL     reduce using rule 111 (variable -> function_call .)
    NOT_EQUAL       reduce using rule 111 (variable -> function_call .)
    LEFT_LOGICAL    reduce using rule 111 (variable -> function_call .)
    RIGHT_LOGICAL   reduce using rule 111 (variable -> function_call .)
    PLUS            reduce using rule 111 (variable -> function_call .)
    DIVIDE          reduce using rule 111 (variable -> function_call .)
    PERCENT         reduce using rule 111 (variable -> function_call .)
    TIMES           reduce using rule 111 (variable -> function_call .)
    MINUS           reduce using rule 111 (variable -> function_call .)
    RPAREN          reduce using rule 111 (variable -> function_call .)
    DDOT            reduce using rule 111 (variable -> function_call .)
    RBRACKET        reduce using rule 111 (variable -> function_call .)
    ATTR_ASSOC      reduce using rule 111 (variable -> function_call .)
    COLON           reduce using rule 111 (variable -> function_call .)
    RKEY            reduce using rule 111 (variable -> function_call .)


state 75

    (67) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 67 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 67 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 67 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 67 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 67 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 67 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 67 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 67 (expr -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 67 (expr -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 67 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 67 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 67 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 67 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 67 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 67 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 67 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 67 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 67 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 67 (expr -> variable INCREMENT .)
    COLON           reduce using rule 67 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 67 (expr -> variable INCREMENT .)


state 76

    (69) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 69 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 69 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 69 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 69 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 69 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 69 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 69 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 69 (expr -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 69 (expr -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 69 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 69 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 69 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 69 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 69 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 69 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 69 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 69 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 69 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 69 (expr -> variable DECREMENT .)
    COLON           reduce using rule 69 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 69 (expr -> variable DECREMENT .)


state 77

    (70) expr -> variable LBRACKET . expr RBRACKET
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 15
    expr                           shift and go to state 115
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 78

    (75) expr -> variable assign_operator . expr
    (76) expr -> variable assign_operator . AMPERSAND expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 117
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 15
    expr                           shift and go to state 116
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 79

    (52) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    EXC_DOT         reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 52 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 52 (assign_operator -> ADD_ASSIGN .)


state 80

    (53) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    EXC_DOT         reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 53 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 53 (assign_operator -> SUB_ASSIGN .)


state 81

    (54) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    EXC_DOT         reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 54 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 54 (assign_operator -> MOD_ASSIGN .)


state 82

    (55) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    EXC_DOT         reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 55 (assign_operator -> PLUS_ASSIGN .)


state 83

    (56) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    EXC_DOT         reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 56 (assign_operator -> DIVIDE_ASSIGN .)


state 84

    (57) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 57 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 57 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 57 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 57 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 57 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 57 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 57 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 57 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 57 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 57 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 57 (assign_operator -> ASSIGN .)
    EXC_DOT         reduce using rule 57 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 57 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 57 (assign_operator -> ASSIGN .)
    ID              reduce using rule 57 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 57 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 57 (assign_operator -> ASSIGN .)


state 85

    (68) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 68 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 68 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 68 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 68 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 68 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 68 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 68 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 68 (expr -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 68 (expr -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 68 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 68 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 68 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 68 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 68 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 68 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 68 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 68 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 68 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 68 (expr -> DECREMENT variable .)
    COLON           reduce using rule 68 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 68 (expr -> DECREMENT variable .)


state 86

    (72) expr -> unary_operator expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 72 (expr -> unary_operator expr .)
    RPAREN          reduce using rule 72 (expr -> unary_operator expr .)
    DDOT            reduce using rule 72 (expr -> unary_operator expr .)
    RBRACKET        reduce using rule 72 (expr -> unary_operator expr .)
    ATTR_ASSOC      reduce using rule 72 (expr -> unary_operator expr .)
    COLON           reduce using rule 72 (expr -> unary_operator expr .)
    RKEY            reduce using rule 72 (expr -> unary_operator expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

  ! INTE_DOT        [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! EQUALS          [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! PLUS            [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! DIVIDE          [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! PERCENT         [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! TIMES           [ reduce using rule 72 (expr -> unary_operator expr .) ]
  ! MINUS           [ reduce using rule 72 (expr -> unary_operator expr .) ]

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 87

    (79) expr -> EXIT expr_without_variable_EXIT .

    SEMICOLON       reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    INTE_DOT        reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    EQUALS          reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    GREAT_THAN      reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    LESS_THAN       reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    LESS_EQUAL      reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    GREAT_EQUAL     reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    NOT_EQUAL       reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    LEFT_LOGICAL    reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    RIGHT_LOGICAL   reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    PLUS            reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    DIVIDE          reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    PERCENT         reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    TIMES           reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    MINUS           reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    RPAREN          reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    DDOT            reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    RBRACKET        reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    ATTR_ASSOC      reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    COLON           reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)
    RKEY            reduce using rule 79 (expr -> EXIT expr_without_variable_EXIT .)


state 88

    (105) expr_without_variable_EXIT -> exit_expr .

    SEMICOLON       reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    INTE_DOT        reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    EQUALS          reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    GREAT_THAN      reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    LESS_THAN       reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    LESS_EQUAL      reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    GREAT_EQUAL     reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    NOT_EQUAL       reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    LEFT_LOGICAL    reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    RIGHT_LOGICAL   reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    PLUS            reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    DIVIDE          reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    PERCENT         reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    TIMES           reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    MINUS           reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    RPAREN          reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    DDOT            reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    RBRACKET        reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    ATTR_ASSOC      reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    COLON           reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)
    RKEY            reduce using rule 105 (expr_without_variable_EXIT -> exit_expr .)


state 89

    (107) exit_expr -> LPAREN . exit_expr_EXPR RPAREN
    (108) exit_expr_EXPR -> . expr
    (109) exit_expr_EXPR -> .
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 109 (exit_expr_EXPR -> .)
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    exit_expr_EXPR                 shift and go to state 118
    expr                           shift and go to state 119
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 90

    (80) expr -> DIE expr_without_variable_EXIT .

    SEMICOLON       reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    INTE_DOT        reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    EQUALS          reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    GREAT_THAN      reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    LESS_THAN       reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    LESS_EQUAL      reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    GREAT_EQUAL     reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    NOT_EQUAL       reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    LEFT_LOGICAL    reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    RIGHT_LOGICAL   reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    PLUS            reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    DIVIDE          reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    PERCENT         reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    TIMES           reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    MINUS           reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    RPAREN          reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    DDOT            reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    RBRACKET        reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    ATTR_ASSOC      reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    COLON           reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)
    RKEY            reduce using rule 80 (expr -> DIE expr_without_variable_EXIT .)


state 91

    (81) expr -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (160) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (161) array_pair_list -> .
    (164) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (165) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (168) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (169) array_pair_EXPR_ATTR_OPT -> .
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 161 (array_pair_list -> .)
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    AMPERSAND       reduce using rule 169 (array_pair_EXPR_ATTR_OPT -> .)
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    array_pair_list                shift and go to state 120
    array_pair                     shift and go to state 121
    expr                           shift and go to state 122
    array_pair_EXPR_ATTR_OPT       shift and go to state 123
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 92

    (12) statement_IF -> IF LPAREN . expr RPAREN statement_BLOCK_OPT
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 124
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 93

    (113) base_variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LBRACKET        reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 113 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)


state 94

    (118) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 100


state 95

    (114) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 114 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 96

    (115) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (115) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (116) reference_variable_SELECTOR -> .
    (121) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 116 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 116 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 116 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 116 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 116 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 116 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 116 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 116 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 116 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 116 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 116 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 116 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 116 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 116 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 116 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 116 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 116 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 116 (reference_variable_SELECTOR -> .)
    PLUS            reduce using rule 116 (reference_variable_SELECTOR -> .)
    DIVIDE          reduce using rule 116 (reference_variable_SELECTOR -> .)
    PERCENT         reduce using rule 116 (reference_variable_SELECTOR -> .)
    TIMES           reduce using rule 116 (reference_variable_SELECTOR -> .)
    MINUS           reduce using rule 116 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 116 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 116 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 116 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 116 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 116 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 116 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 97

  ! LBRACKET        [ reduce using rule 116 (reference_variable_SELECTOR -> .) ]

    selector                       shift and go to state 96
    reference_variable_SELECTOR    shift and go to state 125

state 97

    (121) selector -> LBRACKET . selector_EXPR RBRACKET
    (122) selector_EXPR -> . expr
    (123) selector_EXPR -> .
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RBRACKET        reduce using rule 123 (selector_EXPR -> .)
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    selector_EXPR                  shift and go to state 126
    expr                           shift and go to state 127
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 98

    (119) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    DOLAR           shift and go to state 98
    VARIABLE        reduce using rule 120 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 99

state 99

    (119) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 119 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 119 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 100

    (118) compound_variable -> DOLAR LKEY . expr RKEY
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 128
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 101

    (127) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 129


state 102

    (21) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 130


state 103

    (23) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (25) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (26) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 132
    RPAREN          reduce using rule 26 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 131

state 104

    (29) function_call_parameter -> variable .

    COLON           reduce using rule 29 (function_call_parameter -> variable .)
    RPAREN          reduce using rule 29 (function_call_parameter -> variable .)


state 105

    (30) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 133


state 106

    (71) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 71 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 71 (expr -> LPAREN expr RPAREN .)


state 107

    (78) expr -> LPAREN type_cast_operator RPAREN . expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 134
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 108

    (73) expr -> expr INTE_DOT expr . DDOT expr
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    DDOT            shift and go to state 135
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 109

    (74) expr -> expr comparission_operator expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 74 (expr -> expr comparission_operator expr .)
    RPAREN          reduce using rule 74 (expr -> expr comparission_operator expr .)
    DDOT            reduce using rule 74 (expr -> expr comparission_operator expr .)
    RBRACKET        reduce using rule 74 (expr -> expr comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 74 (expr -> expr comparission_operator expr .)
    COLON           reduce using rule 74 (expr -> expr comparission_operator expr .)
    RKEY            reduce using rule 74 (expr -> expr comparission_operator expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

  ! INTE_DOT        [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! EQUALS          [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! PLUS            [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! DIVIDE          [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! PERCENT         [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! TIMES           [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]
  ! MINUS           [ reduce using rule 74 (expr -> expr comparission_operator expr .) ]

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 110

    (77) expr -> expr arithmetic_operator expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 77 (expr -> expr arithmetic_operator expr .)
    RPAREN          reduce using rule 77 (expr -> expr arithmetic_operator expr .)
    DDOT            reduce using rule 77 (expr -> expr arithmetic_operator expr .)
    RBRACKET        reduce using rule 77 (expr -> expr arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 77 (expr -> expr arithmetic_operator expr .)
    COLON           reduce using rule 77 (expr -> expr arithmetic_operator expr .)
    RKEY            reduce using rule 77 (expr -> expr arithmetic_operator expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

  ! INTE_DOT        [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! EQUALS          [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! PLUS            [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! DIVIDE          [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! PERCENT         [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! TIMES           [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]
  ! MINUS           [ reduce using rule 77 (expr -> expr arithmetic_operator expr .) ]

    arithmetic_operator            shift and go to state 56
    comparission_operator          shift and go to state 55

state 111

    (7) statement -> statement_IF statement_elseif statement_else .

    FUNCTION        reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    WHILE           reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    SEMICOLON       reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    INCREMENT       reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    DECREMENT       reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    LPAREN          reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    EXIT            reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    DIE             reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    TRUE            reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    FALSE           reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    IF              reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    EXC_DOT         reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    PLUS            reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    MINUS           reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    ID              reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    DOLAR           reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    VARIABLE        reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    ELSE            reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    RKEY            reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)
    ELSEIF          reduce using rule 7 (statement -> statement_IF statement_elseif statement_else .)


state 112

    (15) statement_else -> ELSE . statement_BLOCK_OPT
    (17) statement_BLOCK_OPT -> . statement
    (18) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 138
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 136
    statement                      shift and go to state 137
    expr                           shift and go to state 10
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 113

    (13) statement_elseif -> ELSEIF LPAREN . expr RPAREN statement_BLOCK_OPT
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 139
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 114

    (8) statement -> WHILE LPAREN expr . RPAREN LKEY statement_MUL RKEY
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 140
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 115

    (70) expr -> variable LBRACKET expr . RBRACKET
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    RBRACKET        shift and go to state 141
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 116

    (75) expr -> variable assign_operator expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 75 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 75 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 75 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 75 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 75 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 75 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 75 (expr -> variable assign_operator expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

  ! INTE_DOT        [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! PLUS            [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! DIVIDE          [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! PERCENT         [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! TIMES           [ reduce using rule 75 (expr -> variable assign_operator expr .) ]
  ! MINUS           [ reduce using rule 75 (expr -> variable assign_operator expr .) ]

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 117

    (76) expr -> variable assign_operator AMPERSAND . expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 15
    expr                           shift and go to state 142
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 118

    (107) exit_expr -> LPAREN exit_expr_EXPR . RPAREN

    RPAREN          shift and go to state 143


state 119

    (108) exit_expr_EXPR -> expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    RPAREN          reduce using rule 108 (exit_expr_EXPR -> expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 120

    (81) expr -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 144


state 121

    (160) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (162) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (163) array_pair_list_ARR_PAIR -> .

    COLON           shift and go to state 146
    RPAREN          reduce using rule 163 (array_pair_list_ARR_PAIR -> .)

    array_pair_list_ARR_PAIR       shift and go to state 145

state 122

    (164) array_pair -> expr . array_pair_ATTR_EXPR_OPT
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (168) array_pair_EXPR_ATTR_OPT -> expr . ATTR_ASSOC
    (166) array_pair_ATTR_EXPR_OPT -> . ATTR_ASSOC expr
    (167) array_pair_ATTR_EXPR_OPT -> .
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    INTE_DOT        shift and go to state 54
    ATTR_ASSOC      shift and go to state 148
    COLON           reduce using rule 167 (array_pair_ATTR_EXPR_OPT -> .)
    RPAREN          reduce using rule 167 (array_pair_ATTR_EXPR_OPT -> .)
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    array_pair_ATTR_EXPR_OPT       shift and go to state 147
    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 123

    (165) array_pair -> array_pair_EXPR_ATTR_OPT . AMPERSAND variable

    AMPERSAND       shift and go to state 149


state 124

    (12) statement_IF -> IF LPAREN expr . RPAREN statement_BLOCK_OPT
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 150
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 125

    (115) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 115 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 126

    (121) selector -> LBRACKET selector_EXPR . RBRACKET

    RBRACKET        shift and go to state 151


state 127

    (122) selector_EXPR -> expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    RBRACKET        reduce using rule 122 (selector_EXPR -> expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 128

    (118) compound_variable -> DOLAR LKEY expr . RKEY
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 152
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 129

    (127) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (128) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (129) parameter_list -> .
    (132) parameter -> . parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (133) parameter_type -> . INT_TYPE
    (134) parameter_type -> . BOOLEAN_TYPE
    (135) parameter_type -> . STRING_TYPE
    (136) parameter_type -> . FLOAT_TYPE
    (137) parameter_type -> . ARRAY_TYPE
    (138) parameter_type -> . BOOL_TYPE
    (139) parameter_type -> . REAL_TYPE
    (140) parameter_type -> . DOUBLE_TYPE
    (141) parameter_type -> .

    RPAREN          reduce using rule 129 (parameter_list -> .)
    INT_TYPE        shift and go to state 156
    BOOLEAN_TYPE    shift and go to state 157
    STRING_TYPE     shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    ARRAY_TYPE      shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    REAL_TYPE       shift and go to state 162
    DOUBLE_TYPE     shift and go to state 163
    AMPERSAND       reduce using rule 141 (parameter_type -> .)
    VARIABLE        reduce using rule 141 (parameter_type -> .)

    parameter_list                 shift and go to state 153
    parameter                      shift and go to state 154
    parameter_type                 shift and go to state 155

state 130

    (21) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INCREMENT       reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DECREMENT       reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ADD_ASSIGN      reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    SUB_ASSIGN      reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MOD_ASSIGN      reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS_ASSIGN     reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ASSIGN          reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 21 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 131

    (23) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 23 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 132

    (25) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (29) function_call_parameter -> . variable
    (30) function_call_parameter -> . AMPERSAND VARIABLE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 105
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter        shift and go to state 164
    variable                       shift and go to state 104
    base_variable                  shift and go to state 28
    function_call                  shift and go to state 74
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 133

    (30) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 30 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 30 (function_call_parameter -> AMPERSAND VARIABLE .)


state 134

    (78) expr -> LPAREN type_cast_operator RPAREN expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

  ! INTE_DOT        [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PLUS            [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! TIMES           [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! MINUS           [ reduce using rule 78 (expr -> LPAREN type_cast_operator RPAREN expr .) ]

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 135

    (73) expr -> expr INTE_DOT expr DDOT . expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 165
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 136

    (15) statement_else -> ELSE statement_BLOCK_OPT .

    ELSE            reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    SEMICOLON       reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    PLUS            reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 15 (statement_else -> ELSE statement_BLOCK_OPT .)


state 137

    (17) statement_BLOCK_OPT -> statement .

    ELSE            reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    WHILE           reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    SEMICOLON       reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    EXC_DOT         reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    PLUS            reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 17 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 17 (statement_BLOCK_OPT -> statement .)


state 138

    (18) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (10) statement_MUL -> . statement statement_MUL
    (11) statement_MUL -> .
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 11 (statement_MUL -> .)
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    statement_MUL                  shift and go to state 166
    statement                      shift and go to state 167
    expr                           shift and go to state 10
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 139

    (13) statement_elseif -> ELSEIF LPAREN expr . RPAREN statement_BLOCK_OPT
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 168
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 140

    (8) statement -> WHILE LPAREN expr RPAREN . LKEY statement_MUL RKEY

    LKEY            shift and go to state 169


state 141

    (70) expr -> variable LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    COLON           reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 70 (expr -> variable LBRACKET expr RBRACKET .)


state 142

    (76) expr -> variable assign_operator AMPERSAND expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

  ! INTE_DOT        [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PLUS            [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! DIVIDE          [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PERCENT         [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 76 (expr -> variable assign_operator AMPERSAND expr .) ]

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 143

    (107) exit_expr -> LPAREN exit_expr_EXPR RPAREN .

    SEMICOLON       reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    INTE_DOT        reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    EQUALS          reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    GREAT_THAN      reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    LESS_THAN       reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    LESS_EQUAL      reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    GREAT_EQUAL     reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    NOT_EQUAL       reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    LEFT_LOGICAL    reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    RIGHT_LOGICAL   reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    PLUS            reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    DIVIDE          reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    PERCENT         reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    TIMES           reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    MINUS           reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    RPAREN          reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    DDOT            reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    RBRACKET        reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    ATTR_ASSOC      reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    COLON           reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)
    RKEY            reduce using rule 107 (exit_expr -> LPAREN exit_expr_EXPR RPAREN .)


state 144

    (81) expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 81 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 145

    (160) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 160 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 146

    (162) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (164) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (165) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (168) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (169) array_pair_EXPR_ATTR_OPT -> .
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    AMPERSAND       reduce using rule 169 (array_pair_EXPR_ATTR_OPT -> .)
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    array_pair                     shift and go to state 170
    expr                           shift and go to state 122
    array_pair_EXPR_ATTR_OPT       shift and go to state 123
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 147

    (164) array_pair -> expr array_pair_ATTR_EXPR_OPT .

    COLON           reduce using rule 164 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)
    RPAREN          reduce using rule 164 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)


state 148

    (168) array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .
    (166) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC . expr
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       reduce using rule 168 (array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .)
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 171
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 149

    (165) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND . variable
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 172
    base_variable                  shift and go to state 28
    function_call                  shift and go to state 74
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 150

    (12) statement_IF -> IF LPAREN expr RPAREN . statement_BLOCK_OPT
    (17) statement_BLOCK_OPT -> . statement
    (18) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 138
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 10
    statement_BLOCK_OPT            shift and go to state 173
    statement                      shift and go to state 137
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 151

    (121) selector -> LBRACKET selector_EXPR RBRACKET .

    LBRACKET        reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INCREMENT       reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DECREMENT       reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ADD_ASSIGN      reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SUB_ASSIGN      reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MOD_ASSIGN      reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS_ASSIGN     reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ASSIGN          reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SEMICOLON       reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INTE_DOT        reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    EQUALS          reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_THAN      reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_THAN       reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_EQUAL      reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_EQUAL     reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    NOT_EQUAL       reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LEFT_LOGICAL    reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS            reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE          reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PERCENT         reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    TIMES           reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MINUS           reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RPAREN          reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DDOT            reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RBRACKET        reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ATTR_ASSOC      reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    COLON           reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RKEY            reduce using rule 121 (selector -> LBRACKET selector_EXPR RBRACKET .)


state 152

    (118) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)


state 153

    (127) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 174


state 154

    (128) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (130) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (131) parameter_list_COLON_PARAMETER -> .

    COLON           shift and go to state 176
    RPAREN          reduce using rule 131 (parameter_list_COLON_PARAMETER -> .)

    parameter_list_COLON_PARAMETER shift and go to state 175

state 155

    (132) parameter -> parameter_type . AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (19) AMPERSAND_OPT -> . AMPERSAND
    (20) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 40
    VARIABLE        reduce using rule 20 (AMPERSAND_OPT -> .)

    AMPERSAND_OPT                  shift and go to state 177

state 156

    (133) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 133 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 133 (parameter_type -> INT_TYPE .)


state 157

    (134) parameter_type -> BOOLEAN_TYPE .

    AMPERSAND       reduce using rule 134 (parameter_type -> BOOLEAN_TYPE .)
    VARIABLE        reduce using rule 134 (parameter_type -> BOOLEAN_TYPE .)


state 158

    (135) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 135 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 135 (parameter_type -> STRING_TYPE .)


state 159

    (136) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 136 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 136 (parameter_type -> FLOAT_TYPE .)


state 160

    (137) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 137 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 137 (parameter_type -> ARRAY_TYPE .)


state 161

    (138) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 138 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 138 (parameter_type -> BOOL_TYPE .)


state 162

    (139) parameter_type -> REAL_TYPE .

    AMPERSAND       reduce using rule 139 (parameter_type -> REAL_TYPE .)
    VARIABLE        reduce using rule 139 (parameter_type -> REAL_TYPE .)


state 163

    (140) parameter_type -> DOUBLE_TYPE .

    AMPERSAND       reduce using rule 140 (parameter_type -> DOUBLE_TYPE .)
    VARIABLE        reduce using rule 140 (parameter_type -> DOUBLE_TYPE .)


state 164

    (25) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (25) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (26) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 132
    RPAREN          reduce using rule 26 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 178

state 165

    (73) expr -> expr INTE_DOT expr DDOT expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

  ! INTE_DOT        [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PLUS            [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 73 (expr -> expr INTE_DOT expr DDOT expr .) ]

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 166

    (18) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 179


state 167

    (10) statement_MUL -> statement . statement_MUL
    (10) statement_MUL -> . statement statement_MUL
    (11) statement_MUL -> .
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 11 (statement_MUL -> .)
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    statement                      shift and go to state 167
    statement_MUL                  shift and go to state 180
    expr                           shift and go to state 10
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 168

    (13) statement_elseif -> ELSEIF LPAREN expr RPAREN . statement_BLOCK_OPT
    (17) statement_BLOCK_OPT -> . statement
    (18) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 138
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 10
    statement_BLOCK_OPT            shift and go to state 181
    statement                      shift and go to state 137
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 169

    (8) statement -> WHILE LPAREN expr RPAREN LKEY . statement_MUL RKEY
    (10) statement_MUL -> . statement statement_MUL
    (11) statement_MUL -> .
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 11 (statement_MUL -> .)
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 10
    statement_MUL                  shift and go to state 182
    statement                      shift and go to state 167
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 170

    (162) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (162) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (163) array_pair_list_ARR_PAIR -> .

    COLON           shift and go to state 146
    RPAREN          reduce using rule 163 (array_pair_list_ARR_PAIR -> .)

    array_pair_list_ARR_PAIR       shift and go to state 183

state 171

    (166) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .
    (73) expr -> expr . INTE_DOT expr DDOT expr
    (74) expr -> expr . comparission_operator expr
    (77) expr -> expr . arithmetic_operator expr
    (58) comparission_operator -> . EQUALS
    (59) comparission_operator -> . GREAT_THAN
    (60) comparission_operator -> . LESS_THAN
    (61) comparission_operator -> . LESS_EQUAL
    (62) comparission_operator -> . GREAT_EQUAL
    (63) comparission_operator -> . NOT_EQUAL
    (64) comparission_operator -> . LEFT_LOGICAL
    (65) comparission_operator -> . RIGHT_LOGICAL
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . DIVIDE
    (49) arithmetic_operator -> . PERCENT
    (50) arithmetic_operator -> . TIMES
    (51) arithmetic_operator -> . MINUS

    COLON           reduce using rule 166 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    RPAREN          reduce using rule 166 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    INTE_DOT        shift and go to state 54
    EQUALS          shift and go to state 57
    GREAT_THAN      shift and go to state 58
    LESS_THAN       shift and go to state 59
    LESS_EQUAL      shift and go to state 60
    GREAT_EQUAL     shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    LEFT_LOGICAL    shift and go to state 63
    RIGHT_LOGICAL   shift and go to state 64
    PLUS            shift and go to state 65
    DIVIDE          shift and go to state 66
    PERCENT         shift and go to state 67
    TIMES           shift and go to state 68
    MINUS           shift and go to state 69

    comparission_operator          shift and go to state 55
    arithmetic_operator            shift and go to state 56

state 172

    (165) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .

    COLON           reduce using rule 165 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)
    RPAREN          reduce using rule 165 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)


state 173

    (12) statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .

    ELSEIF          reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    SEMICOLON       reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 12 (statement_IF -> IF LPAREN expr RPAREN statement_BLOCK_OPT .)


state 174

    (127) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 184


state 175

    (128) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 128 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 176

    (130) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (132) parameter -> . parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (133) parameter_type -> . INT_TYPE
    (134) parameter_type -> . BOOLEAN_TYPE
    (135) parameter_type -> . STRING_TYPE
    (136) parameter_type -> . FLOAT_TYPE
    (137) parameter_type -> . ARRAY_TYPE
    (138) parameter_type -> . BOOL_TYPE
    (139) parameter_type -> . REAL_TYPE
    (140) parameter_type -> . DOUBLE_TYPE
    (141) parameter_type -> .

    INT_TYPE        shift and go to state 156
    BOOLEAN_TYPE    shift and go to state 157
    STRING_TYPE     shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    ARRAY_TYPE      shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    REAL_TYPE       shift and go to state 162
    DOUBLE_TYPE     shift and go to state 163
    AMPERSAND       reduce using rule 141 (parameter_type -> .)
    VARIABLE        reduce using rule 141 (parameter_type -> .)

    parameter                      shift and go to state 185
    parameter_type                 shift and go to state 155

state 177

    (132) parameter -> parameter_type AMPERSAND_OPT . VARIABLE parameter_ASSIGN_STATIC_OPT

    VARIABLE        shift and go to state 186


state 178

    (25) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 25 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 179

    (18) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    ELSE            reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    WHILE           reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    SEMICOLON       reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PLUS            reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 18 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 180

    (10) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 10 (statement_MUL -> statement statement_MUL .)


state 181

    (13) statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .

    ELSE            reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    SEMICOLON       reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 13 (statement_elseif -> ELSEIF LPAREN expr RPAREN statement_BLOCK_OPT .)


state 182

    (8) statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL . RKEY

    RKEY            shift and go to state 187


state 183

    (162) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 162 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 184

    (127) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (125) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (126) inner_statement_MUL -> .
    (4) inner_statement -> . function_declaration_statement
    (5) inner_statement -> . statement
    (127) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 126 (inner_statement_MUL -> .)
    FUNCTION        shift and go to state 7
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 188
    inner_statement                shift and go to state 189
    function_declaration_statement shift and go to state 5
    statement                      shift and go to state 6
    expr                           shift and go to state 10
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 185

    (130) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (130) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (131) parameter_list_COLON_PARAMETER -> .

    COLON           shift and go to state 176
    RPAREN          reduce using rule 131 (parameter_list_COLON_PARAMETER -> .)

    parameter_list_COLON_PARAMETER shift and go to state 190

state 186

    (132) parameter -> parameter_type AMPERSAND_OPT VARIABLE . parameter_ASSIGN_STATIC_OPT
    (142) parameter_ASSIGN_STATIC_OPT -> . ASSIGN static_scalar
    (143) parameter_ASSIGN_STATIC_OPT -> .

    ASSIGN          shift and go to state 192
    COLON           reduce using rule 143 (parameter_ASSIGN_STATIC_OPT -> .)
    RPAREN          reduce using rule 143 (parameter_ASSIGN_STATIC_OPT -> .)

    parameter_ASSIGN_STATIC_OPT    shift and go to state 191

state 187

    (8) statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .

    FUNCTION        reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    WHILE           reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    SEMICOLON       reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    DIE             reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    IF              reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    PLUS            reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    ID              reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 8 (statement -> WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY .)


state 188

    (127) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 193


state 189

    (125) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (125) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (126) inner_statement_MUL -> .
    (4) inner_statement -> . function_declaration_statement
    (5) inner_statement -> . statement
    (127) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (6) statement -> . expr SEMICOLON
    (7) statement -> . statement_IF statement_elseif statement_else
    (8) statement -> . WHILE LPAREN expr RPAREN LKEY statement_MUL RKEY
    (9) statement -> . SEMICOLON
    (66) expr -> . INCREMENT variable
    (67) expr -> . variable INCREMENT
    (68) expr -> . DECREMENT variable
    (69) expr -> . variable DECREMENT
    (70) expr -> . variable LBRACKET expr RBRACKET
    (71) expr -> . LPAREN expr RPAREN
    (72) expr -> . unary_operator expr
    (73) expr -> . expr INTE_DOT expr DDOT expr
    (74) expr -> . expr comparission_operator expr
    (75) expr -> . variable assign_operator expr
    (76) expr -> . variable assign_operator AMPERSAND expr
    (77) expr -> . expr arithmetic_operator expr
    (78) expr -> . LPAREN type_cast_operator RPAREN expr
    (79) expr -> . EXIT expr_without_variable_EXIT
    (80) expr -> . DIE expr_without_variable_EXIT
    (81) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (82) expr -> . function_call
    (83) expr -> . variable
    (84) expr -> . NUMBER_REAL
    (85) expr -> . NUMBER_INTEGER
    (86) expr -> . CONSTANT_ENCAPSED_STRING
    (87) expr -> . TRUE
    (88) expr -> . FALSE
    (12) statement_IF -> . IF LPAREN expr RPAREN statement_BLOCK_OPT
    (110) variable -> . base_variable
    (111) variable -> . function_call
    (35) unary_operator -> . EXC_DOT
    (36) unary_operator -> . PLUS
    (37) unary_operator -> . MINUS
    (21) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (22) function_call -> . base_variable
    (112) base_variable -> . reference_variable
    (113) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (114) reference_variable -> . compound_variable reference_variable_SELECTOR
    (119) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (120) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 126 (inner_statement_MUL -> .)
    FUNCTION        shift and go to state 7
    WHILE           shift and go to state 13
    SEMICOLON       shift and go to state 11
    INCREMENT       shift and go to state 14
    DECREMENT       shift and go to state 16
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 18
    DIE             shift and go to state 19
    ARRAY_TYPE      shift and go to state 20
    NUMBER_REAL     shift and go to state 22
    NUMBER_INTEGER  shift and go to state 23
    CONSTANT_ENCAPSED_STRING shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    IF              shift and go to state 27
    EXC_DOT         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    ID              shift and go to state 8
    DOLAR           shift and go to state 35
    VARIABLE        shift and go to state 36

  ! VARIABLE        [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 120 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 189
    inner_statement_MUL            shift and go to state 194
    function_declaration_statement shift and go to state 5
    statement                      shift and go to state 6
    expr                           shift and go to state 10
    statement_IF                   shift and go to state 12
    variable                       shift and go to state 15
    unary_operator                 shift and go to state 17
    function_call                  shift and go to state 21
    base_variable                  shift and go to state 28
    reference_variable             shift and go to state 32
    simple_indirect_reference_DOLAR shift and go to state 33
    compound_variable              shift and go to state 34

state 190

    (130) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 130 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 191

    (132) parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .

    COLON           reduce using rule 132 (parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .)
    RPAREN          reduce using rule 132 (parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .)


state 192

    (142) parameter_ASSIGN_STATIC_OPT -> ASSIGN . static_scalar
    (144) static_scalar -> . common_scalar
    (145) static_scalar -> . PLUS static_scalar
    (146) static_scalar -> . MINUS static_scalar
    (147) common_scalar -> . NUMBER_REAL
    (148) common_scalar -> . NUMBER_INTEGER
    (149) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 197
    MINUS           shift and go to state 198
    NUMBER_REAL     shift and go to state 199
    NUMBER_INTEGER  shift and go to state 200
    CONSTANT_ENCAPSED_STRING shift and go to state 201

    static_scalar                  shift and go to state 195
    common_scalar                  shift and go to state 196

state 193

    (127) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    SEMICOLON       reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 127 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 194

    (125) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 125 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 195

    (142) parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .

    COLON           reduce using rule 142 (parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .)
    RPAREN          reduce using rule 142 (parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .)


state 196

    (144) static_scalar -> common_scalar .

    COLON           reduce using rule 144 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 144 (static_scalar -> common_scalar .)


state 197

    (145) static_scalar -> PLUS . static_scalar
    (144) static_scalar -> . common_scalar
    (145) static_scalar -> . PLUS static_scalar
    (146) static_scalar -> . MINUS static_scalar
    (147) common_scalar -> . NUMBER_REAL
    (148) common_scalar -> . NUMBER_INTEGER
    (149) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 197
    MINUS           shift and go to state 198
    NUMBER_REAL     shift and go to state 199
    NUMBER_INTEGER  shift and go to state 200
    CONSTANT_ENCAPSED_STRING shift and go to state 201

    static_scalar                  shift and go to state 202
    common_scalar                  shift and go to state 196

state 198

    (146) static_scalar -> MINUS . static_scalar
    (144) static_scalar -> . common_scalar
    (145) static_scalar -> . PLUS static_scalar
    (146) static_scalar -> . MINUS static_scalar
    (147) common_scalar -> . NUMBER_REAL
    (148) common_scalar -> . NUMBER_INTEGER
    (149) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 197
    MINUS           shift and go to state 198
    NUMBER_REAL     shift and go to state 199
    NUMBER_INTEGER  shift and go to state 200
    CONSTANT_ENCAPSED_STRING shift and go to state 201

    static_scalar                  shift and go to state 203
    common_scalar                  shift and go to state 196

state 199

    (147) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 147 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 147 (common_scalar -> NUMBER_REAL .)


state 200

    (148) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 148 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 148 (common_scalar -> NUMBER_INTEGER .)


state 201

    (149) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 149 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 149 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 202

    (145) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 145 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 145 (static_scalar -> PLUS static_scalar .)


state 203

    (146) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 146 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 146 (static_scalar -> MINUS static_scalar .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOLAR in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 4 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 4 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 9 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 9 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 12 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 14 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 14 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 16 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 16 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 17 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 17 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 34 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 35 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 41 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 41 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 54 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 54 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 55 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 55 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 56 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 56 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 70 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 72 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 72 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 77 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 77 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 78 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 78 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 86 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 86 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 86 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 86 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 89 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 89 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 91 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 91 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 92 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 92 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 96 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 97 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 97 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 98 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 100 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 100 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 107 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 107 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 109 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 110 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 110 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 112 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 112 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 113 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 113 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 116 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 117 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 117 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 132 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 132 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 134 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 134 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 134 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 134 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 134 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 134 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 134 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 134 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 134 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 135 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 135 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 138 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 138 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 142 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 142 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 142 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 142 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 142 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 142 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 142 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 146 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 146 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 148 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 148 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 149 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 149 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 150 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 150 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 165 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 165 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 165 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 165 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 165 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 165 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 165 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 167 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 167 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 168 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 168 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 169 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 169 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 184 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 184 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 189 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 189 resolved as shift
WARNING: reduce/reduce conflict in state 21 resolved using rule (expr -> function_call)
WARNING: rejected rule (variable -> function_call) in state 21
WARNING: reduce/reduce conflict in state 28 resolved using rule (function_call -> base_variable)
WARNING: rejected rule (variable -> base_variable) in state 28
WARNING: Rule (variable -> base_variable) is never reduced

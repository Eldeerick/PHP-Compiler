Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    OR
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     inner_statement -> function_declaration_statement
Rule 3     inner_statement -> statement
Rule 4     statement -> expr SEMICOLON
Rule 5     statement -> statement_if statement_elseif statement_else
Rule 6     statement -> WHILE expr_paren statement_BLOCK_OPT
Rule 7     statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
Rule 8     statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
Rule 9     statement -> statement_foreach
Rule 10    statement -> BREAK expr_OPT SEMICOLON
Rule 11    statement -> CONTINUE expr_OPT SEMICOLON
Rule 12    statement -> RETURN expr_return_OPT SEMICOLON
Rule 13    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 14    ampersand_variable -> AMPERSAND_OPT VARIABLE
Rule 15    global_var -> VARIABLE
Rule 16    global_var -> DOLAR VARIABLE
Rule 17    global_var -> DOLAR LKEY expr RKEY
Rule 18    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 19    statement_COLON_GLOBAL -> <empty>
Rule 20    expr_paren -> LPAREN expr RPAREN
Rule 21    expr_return_OPT -> expr
Rule 22    expr_return_OPT -> <empty>
Rule 23    statement_if -> IF expr_paren statement_BLOCK_OPT
Rule 24    statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT
Rule 25    statement_elseif -> <empty>
Rule 26    statement_else -> ELSE statement_BLOCK_OPT
Rule 27    statement_else -> <empty>
Rule 28    statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
Rule 29    foreach_first_param -> variable
Rule 30    foreach_first_param -> expr
Rule 31    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 32    for_expr_OPT -> <empty>
Rule 33    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 34    function_call -> base_variable
Rule 35    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 36    function_call_parameter_list -> <empty>
Rule 37    function_call_parameter -> variable
Rule 38    function_call_parameter -> AMPERSAND VARIABLE
Rule 39    assignment_list_element -> variable
Rule 40    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 41    unary_operator -> EXC_DOT
Rule 42    unary_operator -> PLUS
Rule 43    unary_operator -> MINUS
Rule 44    type_cast_operator -> INT_TYPE
Rule 45    type_cast_operator -> DOUBLE_TYPE
Rule 46    type_cast_operator -> FLOAT_TYPE
Rule 47    type_cast_operator -> REAL_TYPE
Rule 48    type_cast_operator -> STRING_TYPE
Rule 49    type_cast_operator -> ARRAY_TYPE
Rule 50    type_cast_operator -> BOOLEAN_TYPE
Rule 51    type_cast_operator -> BOOL_TYPE
Rule 52    type_cast_operator -> UNSET
Rule 53    arithmetic_operator -> PLUS
Rule 54    arithmetic_operator -> DIVIDE
Rule 55    arithmetic_operator -> PERCENT
Rule 56    arithmetic_operator -> TIMES
Rule 57    arithmetic_operator -> MINUS
Rule 58    assign_operator -> ADD_ASSIGN
Rule 59    assign_operator -> SUB_ASSIGN
Rule 60    assign_operator -> MOD_ASSIGN
Rule 61    assign_operator -> PLUS_ASSIGN
Rule 62    assign_operator -> DIVIDE_ASSIGN
Rule 63    assign_operator -> ASSIGN
Rule 64    comparission_operator -> EQUALS
Rule 65    comparission_operator -> GREAT_THAN
Rule 66    comparission_operator -> LESS_THAN
Rule 67    comparission_operator -> LESS_EQUAL
Rule 68    comparission_operator -> GREAT_EQUAL
Rule 69    comparission_operator -> NOT_EQUAL
Rule 70    comparission_operator -> LEFT_LOGICAL
Rule 71    comparission_operator -> RIGHT_LOGICAL
Rule 72    expr -> INCREMENT variable
Rule 73    expr -> variable INCREMENT
Rule 74    expr -> DECREMENT variable
Rule 75    expr -> variable DECREMENT
Rule 76    expr -> variable LBRACKET expr RBRACKET
Rule 77    expr -> LPAREN expr RPAREN
Rule 78    expr -> unary_operator expr
Rule 79    expr -> expr INTE_DOT expr DDOT expr
Rule 80    expr -> expr comparission_operator expr
Rule 81    expr -> variable assign_operator expr
Rule 82    expr -> variable assign_operator AMPERSAND expr
Rule 83    expr -> expr arithmetic_operator expr
Rule 84    expr -> LPAREN type_cast_operator RPAREN expr
Rule 85    expr -> EXIT expr_EXIT
Rule 86    expr -> DIE expr_EXIT
Rule 87    expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 88    expr -> function_call
Rule 89    expr -> variable
Rule 90    expr -> NUMBER_REAL
Rule 91    expr -> NUMBER_INTEGER
Rule 92    expr -> CONSTANT_ENCAPSED_STRING
Rule 93    expr -> TRUE
Rule 94    expr -> FALSE
Rule 95    encaps -> encaps_var
Rule 96    encaps -> VARIABLE
Rule 97    encaps -> LPAREN
Rule 98    encaps -> RPAREN
Rule 99    encaps -> LKEY
Rule 100   encaps -> RKEY
Rule 101   encaps_var -> VARIABLE encaps_var_OPT
Rule 102   encaps_var -> DOLAR LBRACKET expr RBRACKET
Rule 103   encaps_var -> DOLAR LKEY ID LBRACKET expr RBRACKET RKEY
Rule 104   encaps_var -> LKEY variable RKEY
Rule 105   encaps_var_OPT -> LBRACKET encaps_var_offset RBRACKET
Rule 106   encaps_var_OPT -> <empty>
Rule 107   encaps_var_offset -> STRING
Rule 108   encaps_var_offset -> VARIABLE
Rule 109   expr_EXIT -> exit_expr
Rule 110   expr_EXIT -> <empty>
Rule 111   exit_expr -> LPAREN expr_OPT RPAREN
Rule 112   variable -> base_variable
Rule 113   variable -> function_call
Rule 114   base_variable -> reference_variable
Rule 115   base_variable -> simple_indirect_reference_DOLAR reference_variable
Rule 116   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 117   compound_variable -> VARIABLE
Rule 118   compound_variable -> DOLAR LKEY expr RKEY
Rule 119   selector -> LBRACKET selector_EXPR RBRACKET
Rule 120   function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 121   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 122   parameter_list -> <empty>
Rule 123   parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
Rule 124   parameter_type -> INT_TYPE
Rule 125   parameter_type -> BOOLEAN_TYPE
Rule 126   parameter_type -> STRING_TYPE
Rule 127   parameter_type -> FLOAT_TYPE
Rule 128   parameter_type -> ARRAY_TYPE
Rule 129   parameter_type -> BOOL_TYPE
Rule 130   parameter_type -> REAL_TYPE
Rule 131   parameter_type -> DOUBLE_TYPE
Rule 132   parameter_type -> <empty>
Rule 133   static_scalar -> common_scalar
Rule 134   static_scalar -> PLUS static_scalar
Rule 135   static_scalar -> MINUS static_scalar
Rule 136   common_scalar -> NUMBER_REAL
Rule 137   common_scalar -> NUMBER_INTEGER
Rule 138   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 139   static_array_pair_list -> static_array_pair static_array_pair_list_COLON_STATIC static_array_pair_list_COLON
Rule 140   static_array_pair -> static_scalar static_array_pair_ATTR_STATIC
Rule 141   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 142   array_pair_list -> <empty>
Rule 143   array_pair -> expr array_pair_ATTR_EXPR_OPT
Rule 144   array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable
Rule 145   main_INNER -> inner_statement main_INNER
Rule 146   main_INNER -> <empty>
Rule 147   statement_MUL -> statement statement_MUL
Rule 148   statement_MUL -> <empty>
Rule 149   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 150   inner_statement_MUL -> <empty>
Rule 151   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 152   for_expr_COLON_EXPR -> <empty>
Rule 153   statement_BLOCK_OPT -> statement
Rule 154   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 155   AMPERSAND_OPT -> AMPERSAND
Rule 156   AMPERSAND_OPT -> <empty>
Rule 157   statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable
Rule 158   statement_attr_variable_OPT -> <empty>
Rule 159   function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 160   function_call_list_COLON_FUNCTION -> <empty>
Rule 161   expr_without_variable_COLON_ASSIGNMENT -> COLON assignment_list_element expr_without_variable_COLON_ASSIGNMENT
Rule 162   expr_without_variable_COLON_ASSIGNMENT -> <empty>
Rule 163   assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 164   assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 165   expr_OPT -> expr
Rule 166   expr_OPT -> <empty>
Rule 167   expr_without_variable_ENCAPS -> encaps expr_without_variable_ENCAPS
Rule 168   expr_without_variable_ENCAPS -> <empty>
Rule 169   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 170   parameter_list_COLON_PARAMETER -> <empty>
Rule 171   parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar
Rule 172   parameter_ASSIGN_STATIC_OPT -> <empty>
Rule 173   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 174   reference_variable_SELECTOR -> <empty>
Rule 175   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 176   simple_indirect_reference_DOLAR -> <empty>
Rule 177   selector_EXPR -> expr
Rule 178   selector_EXPR -> <empty>
Rule 179   static_scalar_OPT -> static_array_pair_list
Rule 180   static_scalar_OPT -> <empty>
Rule 181   static_array_pair_list_COLON_STATIC -> COLON static_array_pair static_array_pair_list_COLON_STATIC
Rule 182   static_array_pair_list_COLON_STATIC -> <empty>
Rule 183   static_array_pair_list_COLON -> COLON
Rule 184   static_array_pair_list_COLON -> <empty>
Rule 185   static_array_pair_ATTR_STATIC -> ATTR_ASSOC static_scalar
Rule 186   static_array_pair_ATTR_STATIC -> <empty>
Rule 187   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 188   array_pair_list_ARR_PAIR -> <empty>
Rule 189   array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr
Rule 190   array_pair_ATTR_EXPR_OPT -> <empty>
Rule 191   array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC
Rule 192   array_pair_EXPR_ATTR_OPT -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 58
AMPERSAND            : 38 82 144 155
AND                  : 
APOSTROFE            : 
ARRAY_TYPE           : 49 87 128
ARROBA               : 
AS                   : 28
ASPAS                : 
ASSIGN               : 63 171
ATTR_ASSOC           : 157 185 189 191
BEGIN_PROGRAM        : 1
BOOLEAN_TYPE         : 50 125
BOOL_TYPE            : 51 129
BREAK                : 10
CASE                 : 
CLONE                : 
COLON                : 18 151 159 161 163 169 181 183 187
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 92 138
CONTINUE             : 11
CRASE                : 
DDOT                 : 79
DECLARE              : 
DECREMENT            : 74 75
DIE                  : 86
DIVIDE               : 54
DIVIDE_ASSIGN        : 62
DO                   : 7
DOLAR                : 16 17 102 103 118 175
DOUBLE_TYPE          : 45 131
ELSE                 : 26
ELSEIF               : 24
ENDDECLARE           : 
END_PROGRAM          : 1
EQUALS               : 64
EXC_DOT              : 41
EXIT                 : 85
FALSE                : 94
FLOAT_TYPE           : 46 127
FOR                  : 8
FOREACH              : 28
FUNCTION             : 120
GLOBAL               : 13
GREAT_EQUAL          : 68
GREAT_THAN           : 65
ID                   : 33 103 120
IDENTATION           : 
IF                   : 23
INCREMENT            : 72 73
INTE_DOT             : 79
INT_TYPE             : 44 124
LBRACKET             : 76 102 103 105 119
LEFT_LOGICAL         : 70
LESS_EQUAL           : 67
LESS_THAN            : 66
LIST                 : 40
LKEY                 : 17 99 103 104 118 120 154
LPAREN               : 8 20 28 33 40 77 84 87 97 111 120
MINUS                : 43 57 135
MOD_ASSIGN           : 60
NOT_EQUAL            : 69
NUMBER_INTEGER       : 91 137
NUMBER_REAL          : 90 136
OR                   : 
PERCENT              : 55
PLUS                 : 42 53 134
PLUS_ASSIGN          : 61
RBRACKET             : 76 102 103 105 119
REAL_TYPE            : 47 130
RETURN               : 12
RIGHT_LOGICAL        : 71
RKEY                 : 17 100 103 104 118 120 154
RPAREN               : 8 20 28 33 40 77 84 87 98 111 120
SEMICOLON            : 4 7 8 8 10 11 12 13
STRING               : 107
STRING_TYPE          : 48 126
SUB_ASSIGN           : 59
TIMES                : 56
TRUE                 : 93
UNSET                : 52
VAR                  : 
VARIABLE             : 14 15 16 38 96 101 108 117 123
WHILE                : 6 7
error                : 

Nonterminals, with rules where they appear

AMPERSAND_OPT        : 14 120 123
ampersand_variable   : 28 157
arithmetic_operator  : 83
array_pair           : 141 187
array_pair_ATTR_EXPR_OPT : 143
array_pair_EXPR_ATTR_OPT : 144
array_pair_list      : 87
array_pair_list_ARR_PAIR : 141 187
assign_operator      : 81 82
assignment_list_element : 40 161 163
assignment_list_element_COLON_ASSIGNMENT : 40 163
base_variable        : 34 112
common_scalar        : 133
comparission_operator : 80
compound_variable    : 116
encaps               : 167
encaps_var           : 95
encaps_var_OPT       : 101
encaps_var_offset    : 105
exit_expr            : 109
expr                 : 4 17 20 21 30 31 76 77 78 79 79 79 80 80 81 82 83 83 84 102 103 118 143 151 165 177 189 191
expr_EXIT            : 85 86
expr_OPT             : 10 11 111
expr_paren           : 6 7 23 24
expr_return_OPT      : 12
expr_without_variable_COLON_ASSIGNMENT : 161
expr_without_variable_ENCAPS : 167
for_expr_COLON_EXPR  : 31 151
for_expr_OPT         : 8 8 8
foreach_first_param  : 28
function_call        : 88 113
function_call_list_COLON_FUNCTION : 35 159
function_call_parameter : 35 159
function_call_parameter_list : 33
function_declaration_statement : 2
global_var           : 13 18
inner_statement      : 145 149
inner_statement_MUL  : 120 149
main                 : 0
main_INNER           : 1 145
parameter            : 121 169
parameter_ASSIGN_STATIC_OPT : 123
parameter_list       : 120
parameter_list_COLON_PARAMETER : 121 169
parameter_type       : 123
reference_variable   : 114 115
reference_variable_SELECTOR : 116 173
selector             : 173
selector_EXPR        : 119
simple_indirect_reference_DOLAR : 115 175
statement            : 3 147 153
statement_BLOCK_OPT  : 6 7 8 23 24 26 28
statement_COLON_GLOBAL : 13 18
statement_MUL        : 147 154
statement_attr_variable_OPT : 28
statement_else       : 5
statement_elseif     : 5
statement_foreach    : 9
statement_if         : 5
static_array_pair    : 139 181
static_array_pair_ATTR_STATIC : 140
static_array_pair_list : 179
static_array_pair_list_COLON : 139
static_array_pair_list_COLON_STATIC : 139 181
static_scalar        : 134 135 140 171 185
static_scalar_OPT    : 
type_cast_operator   : 84
unary_operator       : 78
variable             : 29 37 39 72 73 74 75 76 81 82 89 104 144

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (145) main_INNER -> . inner_statement main_INNER
    (146) main_INNER -> .
    (2) inner_statement -> . function_declaration_statement
    (3) inner_statement -> . statement
    (120) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     reduce using rule 146 (main_INNER -> .)
    FUNCTION        shift and go to state 7
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 4
    function_declaration_statement shift and go to state 5
    statement                      shift and go to state 6
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 44


state 4

    (145) main_INNER -> inner_statement . main_INNER
    (145) main_INNER -> . inner_statement main_INNER
    (146) main_INNER -> .
    (2) inner_statement -> . function_declaration_statement
    (3) inner_statement -> . statement
    (120) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     reduce using rule 146 (main_INNER -> .)
    FUNCTION        shift and go to state 7
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 4
    main_INNER                     shift and go to state 45
    function_declaration_statement shift and go to state 5
    statement                      shift and go to state 6
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 5

    (2) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 2 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 2 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 2 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 2 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 2 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 2 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 2 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 2 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 2 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 2 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 2 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 2 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 2 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 2 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 2 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 2 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 2 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 2 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 2 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 2 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 2 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 2 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 2 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 2 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 2 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 2 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 2 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 2 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 2 (inner_statement -> function_declaration_statement .)


state 6

    (3) inner_statement -> statement .

    FUNCTION        reduce using rule 3 (inner_statement -> statement .)
    WHILE           reduce using rule 3 (inner_statement -> statement .)
    DO              reduce using rule 3 (inner_statement -> statement .)
    FOR             reduce using rule 3 (inner_statement -> statement .)
    BREAK           reduce using rule 3 (inner_statement -> statement .)
    CONTINUE        reduce using rule 3 (inner_statement -> statement .)
    RETURN          reduce using rule 3 (inner_statement -> statement .)
    GLOBAL          reduce using rule 3 (inner_statement -> statement .)
    INCREMENT       reduce using rule 3 (inner_statement -> statement .)
    DECREMENT       reduce using rule 3 (inner_statement -> statement .)
    LPAREN          reduce using rule 3 (inner_statement -> statement .)
    EXIT            reduce using rule 3 (inner_statement -> statement .)
    DIE             reduce using rule 3 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 3 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 3 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 3 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 3 (inner_statement -> statement .)
    TRUE            reduce using rule 3 (inner_statement -> statement .)
    FALSE           reduce using rule 3 (inner_statement -> statement .)
    IF              reduce using rule 3 (inner_statement -> statement .)
    FOREACH         reduce using rule 3 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 3 (inner_statement -> statement .)
    PLUS            reduce using rule 3 (inner_statement -> statement .)
    MINUS           reduce using rule 3 (inner_statement -> statement .)
    ID              reduce using rule 3 (inner_statement -> statement .)
    DOLAR           reduce using rule 3 (inner_statement -> statement .)
    VARIABLE        reduce using rule 3 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 3 (inner_statement -> statement .)
    RKEY            reduce using rule 3 (inner_statement -> statement .)


state 7

    (120) function_declaration_statement -> FUNCTION . AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) AMPERSAND_OPT -> . AMPERSAND
    (156) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 47
    ID              reduce using rule 156 (AMPERSAND_OPT -> .)

    AMPERSAND_OPT                  shift and go to state 46

state 8

    (33) function_call -> ID . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 48


state 9

    (77) expr -> LPAREN . expr RPAREN
    (84) expr -> LPAREN . type_cast_operator RPAREN expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (44) type_cast_operator -> . INT_TYPE
    (45) type_cast_operator -> . DOUBLE_TYPE
    (46) type_cast_operator -> . FLOAT_TYPE
    (47) type_cast_operator -> . REAL_TYPE
    (48) type_cast_operator -> . STRING_TYPE
    (49) type_cast_operator -> . ARRAY_TYPE
    (50) type_cast_operator -> . BOOLEAN_TYPE
    (51) type_cast_operator -> . BOOL_TYPE
    (52) type_cast_operator -> . UNSET
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 51
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    INT_TYPE        shift and go to state 52
    DOUBLE_TYPE     shift and go to state 53
    FLOAT_TYPE      shift and go to state 54
    REAL_TYPE       shift and go to state 55
    STRING_TYPE     shift and go to state 56
    BOOLEAN_TYPE    shift and go to state 57
    BOOL_TYPE       shift and go to state 58
    UNSET           shift and go to state 59
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 49
    type_cast_operator             shift and go to state 50
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 10

    (4) statement -> expr . SEMICOLON
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 60
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 11

    (5) statement -> statement_if . statement_elseif statement_else
    (24) statement_elseif -> . ELSEIF expr_paren statement_BLOCK_OPT
    (25) statement_elseif -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 78
    ELSE            reduce using rule 25 (statement_elseif -> .)
    FUNCTION        reduce using rule 25 (statement_elseif -> .)
    WHILE           reduce using rule 25 (statement_elseif -> .)
    DO              reduce using rule 25 (statement_elseif -> .)
    FOR             reduce using rule 25 (statement_elseif -> .)
    BREAK           reduce using rule 25 (statement_elseif -> .)
    CONTINUE        reduce using rule 25 (statement_elseif -> .)
    RETURN          reduce using rule 25 (statement_elseif -> .)
    GLOBAL          reduce using rule 25 (statement_elseif -> .)
    INCREMENT       reduce using rule 25 (statement_elseif -> .)
    DECREMENT       reduce using rule 25 (statement_elseif -> .)
    LPAREN          reduce using rule 25 (statement_elseif -> .)
    EXIT            reduce using rule 25 (statement_elseif -> .)
    DIE             reduce using rule 25 (statement_elseif -> .)
    ARRAY_TYPE      reduce using rule 25 (statement_elseif -> .)
    NUMBER_REAL     reduce using rule 25 (statement_elseif -> .)
    NUMBER_INTEGER  reduce using rule 25 (statement_elseif -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 25 (statement_elseif -> .)
    TRUE            reduce using rule 25 (statement_elseif -> .)
    FALSE           reduce using rule 25 (statement_elseif -> .)
    IF              reduce using rule 25 (statement_elseif -> .)
    FOREACH         reduce using rule 25 (statement_elseif -> .)
    EXC_DOT         reduce using rule 25 (statement_elseif -> .)
    PLUS            reduce using rule 25 (statement_elseif -> .)
    MINUS           reduce using rule 25 (statement_elseif -> .)
    ID              reduce using rule 25 (statement_elseif -> .)
    DOLAR           reduce using rule 25 (statement_elseif -> .)
    VARIABLE        reduce using rule 25 (statement_elseif -> .)
    END_PROGRAM     reduce using rule 25 (statement_elseif -> .)
    RKEY            reduce using rule 25 (statement_elseif -> .)

  ! ELSEIF          [ reduce using rule 25 (statement_elseif -> .) ]

    statement_elseif               shift and go to state 77

state 12

    (6) statement -> WHILE . expr_paren statement_BLOCK_OPT
    (20) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 80

    expr_paren                     shift and go to state 79

state 13

    (7) statement -> DO . statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (153) statement_BLOCK_OPT -> . statement
    (154) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 83
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 81
    statement                      shift and go to state 82
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 14

    (8) statement -> FOR . LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 84


state 15

    (9) statement -> statement_foreach .

    FUNCTION        reduce using rule 9 (statement -> statement_foreach .)
    WHILE           reduce using rule 9 (statement -> statement_foreach .)
    DO              reduce using rule 9 (statement -> statement_foreach .)
    FOR             reduce using rule 9 (statement -> statement_foreach .)
    BREAK           reduce using rule 9 (statement -> statement_foreach .)
    CONTINUE        reduce using rule 9 (statement -> statement_foreach .)
    RETURN          reduce using rule 9 (statement -> statement_foreach .)
    GLOBAL          reduce using rule 9 (statement -> statement_foreach .)
    INCREMENT       reduce using rule 9 (statement -> statement_foreach .)
    DECREMENT       reduce using rule 9 (statement -> statement_foreach .)
    LPAREN          reduce using rule 9 (statement -> statement_foreach .)
    EXIT            reduce using rule 9 (statement -> statement_foreach .)
    DIE             reduce using rule 9 (statement -> statement_foreach .)
    ARRAY_TYPE      reduce using rule 9 (statement -> statement_foreach .)
    NUMBER_REAL     reduce using rule 9 (statement -> statement_foreach .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> statement_foreach .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (statement -> statement_foreach .)
    TRUE            reduce using rule 9 (statement -> statement_foreach .)
    FALSE           reduce using rule 9 (statement -> statement_foreach .)
    IF              reduce using rule 9 (statement -> statement_foreach .)
    FOREACH         reduce using rule 9 (statement -> statement_foreach .)
    EXC_DOT         reduce using rule 9 (statement -> statement_foreach .)
    PLUS            reduce using rule 9 (statement -> statement_foreach .)
    MINUS           reduce using rule 9 (statement -> statement_foreach .)
    ID              reduce using rule 9 (statement -> statement_foreach .)
    DOLAR           reduce using rule 9 (statement -> statement_foreach .)
    VARIABLE        reduce using rule 9 (statement -> statement_foreach .)
    END_PROGRAM     reduce using rule 9 (statement -> statement_foreach .)
    ELSE            reduce using rule 9 (statement -> statement_foreach .)
    RKEY            reduce using rule 9 (statement -> statement_foreach .)
    ELSEIF          reduce using rule 9 (statement -> statement_foreach .)


state 16

    (10) statement -> BREAK . expr_OPT SEMICOLON
    (165) expr_OPT -> . expr
    (166) expr_OPT -> .
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 166 (expr_OPT -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 85
    expr                           shift and go to state 86
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 17

    (11) statement -> CONTINUE . expr_OPT SEMICOLON
    (165) expr_OPT -> . expr
    (166) expr_OPT -> .
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 166 (expr_OPT -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 87
    expr                           shift and go to state 86
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 18

    (12) statement -> RETURN . expr_return_OPT SEMICOLON
    (21) expr_return_OPT -> . expr
    (22) expr_return_OPT -> .
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 22 (expr_return_OPT -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr_return_OPT                shift and go to state 88
    expr                           shift and go to state 89
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 19

    (13) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (15) global_var -> . VARIABLE
    (16) global_var -> . DOLAR VARIABLE
    (17) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 91
    DOLAR           shift and go to state 92

    global_var                     shift and go to state 90

state 20

    (72) expr -> INCREMENT . variable
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 93
    base_variable                  shift and go to state 35
    function_call                  shift and go to state 94
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 21

    (73) expr -> variable . INCREMENT
    (75) expr -> variable . DECREMENT
    (76) expr -> variable . LBRACKET expr RBRACKET
    (81) expr -> variable . assign_operator expr
    (82) expr -> variable . assign_operator AMPERSAND expr
    (89) expr -> variable .
    (58) assign_operator -> . ADD_ASSIGN
    (59) assign_operator -> . SUB_ASSIGN
    (60) assign_operator -> . MOD_ASSIGN
    (61) assign_operator -> . PLUS_ASSIGN
    (62) assign_operator -> . DIVIDE_ASSIGN
    (63) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 95
    DECREMENT       shift and go to state 96
    LBRACKET        shift and go to state 97
    SEMICOLON       reduce using rule 89 (expr -> variable .)
    INTE_DOT        reduce using rule 89 (expr -> variable .)
    EQUALS          reduce using rule 89 (expr -> variable .)
    GREAT_THAN      reduce using rule 89 (expr -> variable .)
    LESS_THAN       reduce using rule 89 (expr -> variable .)
    LESS_EQUAL      reduce using rule 89 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 89 (expr -> variable .)
    NOT_EQUAL       reduce using rule 89 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 89 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 89 (expr -> variable .)
    PLUS            reduce using rule 89 (expr -> variable .)
    DIVIDE          reduce using rule 89 (expr -> variable .)
    PERCENT         reduce using rule 89 (expr -> variable .)
    TIMES           reduce using rule 89 (expr -> variable .)
    MINUS           reduce using rule 89 (expr -> variable .)
    RPAREN          reduce using rule 89 (expr -> variable .)
    DDOT            reduce using rule 89 (expr -> variable .)
    COLON           reduce using rule 89 (expr -> variable .)
    RBRACKET        reduce using rule 89 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 89 (expr -> variable .)
    AS              reduce using rule 89 (expr -> variable .)
    RKEY            reduce using rule 89 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 99
    SUB_ASSIGN      shift and go to state 100
    MOD_ASSIGN      shift and go to state 101
    PLUS_ASSIGN     shift and go to state 102
    DIVIDE_ASSIGN   shift and go to state 103
    ASSIGN          shift and go to state 104

    assign_operator                shift and go to state 98

state 22

    (74) expr -> DECREMENT . variable
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 105
    base_variable                  shift and go to state 35
    function_call                  shift and go to state 94
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 23

    (78) expr -> unary_operator . expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    unary_operator                 shift and go to state 23
    expr                           shift and go to state 106
    variable                       shift and go to state 21
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 24

    (85) expr -> EXIT . expr_EXIT
    (109) expr_EXIT -> . exit_expr
    (110) expr_EXIT -> .
    (111) exit_expr -> . LPAREN expr_OPT RPAREN

    SEMICOLON       reduce using rule 110 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 110 (expr_EXIT -> .)
    EQUALS          reduce using rule 110 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 110 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 110 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 110 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 110 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 110 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 110 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 110 (expr_EXIT -> .)
    PLUS            reduce using rule 110 (expr_EXIT -> .)
    DIVIDE          reduce using rule 110 (expr_EXIT -> .)
    PERCENT         reduce using rule 110 (expr_EXIT -> .)
    TIMES           reduce using rule 110 (expr_EXIT -> .)
    MINUS           reduce using rule 110 (expr_EXIT -> .)
    RPAREN          reduce using rule 110 (expr_EXIT -> .)
    DDOT            reduce using rule 110 (expr_EXIT -> .)
    COLON           reduce using rule 110 (expr_EXIT -> .)
    RBRACKET        reduce using rule 110 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 110 (expr_EXIT -> .)
    AS              reduce using rule 110 (expr_EXIT -> .)
    RKEY            reduce using rule 110 (expr_EXIT -> .)
    LPAREN          shift and go to state 109

    expr_EXIT                      shift and go to state 107
    exit_expr                      shift and go to state 108

state 25

    (86) expr -> DIE . expr_EXIT
    (109) expr_EXIT -> . exit_expr
    (110) expr_EXIT -> .
    (111) exit_expr -> . LPAREN expr_OPT RPAREN

    SEMICOLON       reduce using rule 110 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 110 (expr_EXIT -> .)
    EQUALS          reduce using rule 110 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 110 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 110 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 110 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 110 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 110 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 110 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 110 (expr_EXIT -> .)
    PLUS            reduce using rule 110 (expr_EXIT -> .)
    DIVIDE          reduce using rule 110 (expr_EXIT -> .)
    PERCENT         reduce using rule 110 (expr_EXIT -> .)
    TIMES           reduce using rule 110 (expr_EXIT -> .)
    MINUS           reduce using rule 110 (expr_EXIT -> .)
    RPAREN          reduce using rule 110 (expr_EXIT -> .)
    DDOT            reduce using rule 110 (expr_EXIT -> .)
    COLON           reduce using rule 110 (expr_EXIT -> .)
    RBRACKET        reduce using rule 110 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 110 (expr_EXIT -> .)
    AS              reduce using rule 110 (expr_EXIT -> .)
    RKEY            reduce using rule 110 (expr_EXIT -> .)
    LPAREN          shift and go to state 109

    expr_EXIT                      shift and go to state 110
    exit_expr                      shift and go to state 108

state 26

    (87) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN

    LPAREN          shift and go to state 111


state 27

    (88) expr -> function_call .
    (113) variable -> function_call .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for PERCENT resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for DDOT resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for COLON resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for AS resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for RKEY resolved using rule 88 (expr -> function_call .)
    SEMICOLON       reduce using rule 88 (expr -> function_call .)
    INTE_DOT        reduce using rule 88 (expr -> function_call .)
    EQUALS          reduce using rule 88 (expr -> function_call .)
    GREAT_THAN      reduce using rule 88 (expr -> function_call .)
    LESS_THAN       reduce using rule 88 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 88 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 88 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 88 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 88 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 88 (expr -> function_call .)
    PLUS            reduce using rule 88 (expr -> function_call .)
    DIVIDE          reduce using rule 88 (expr -> function_call .)
    PERCENT         reduce using rule 88 (expr -> function_call .)
    TIMES           reduce using rule 88 (expr -> function_call .)
    MINUS           reduce using rule 88 (expr -> function_call .)
    RPAREN          reduce using rule 88 (expr -> function_call .)
    DDOT            reduce using rule 88 (expr -> function_call .)
    COLON           reduce using rule 88 (expr -> function_call .)
    RBRACKET        reduce using rule 88 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 88 (expr -> function_call .)
    AS              reduce using rule 88 (expr -> function_call .)
    RKEY            reduce using rule 88 (expr -> function_call .)
    INCREMENT       reduce using rule 113 (variable -> function_call .)
    DECREMENT       reduce using rule 113 (variable -> function_call .)
    LBRACKET        reduce using rule 113 (variable -> function_call .)
    ADD_ASSIGN      reduce using rule 113 (variable -> function_call .)
    SUB_ASSIGN      reduce using rule 113 (variable -> function_call .)
    MOD_ASSIGN      reduce using rule 113 (variable -> function_call .)
    PLUS_ASSIGN     reduce using rule 113 (variable -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 113 (variable -> function_call .)
    ASSIGN          reduce using rule 113 (variable -> function_call .)

  ! SEMICOLON       [ reduce using rule 113 (variable -> function_call .) ]
  ! INTE_DOT        [ reduce using rule 113 (variable -> function_call .) ]
  ! EQUALS          [ reduce using rule 113 (variable -> function_call .) ]
  ! GREAT_THAN      [ reduce using rule 113 (variable -> function_call .) ]
  ! LESS_THAN       [ reduce using rule 113 (variable -> function_call .) ]
  ! LESS_EQUAL      [ reduce using rule 113 (variable -> function_call .) ]
  ! GREAT_EQUAL     [ reduce using rule 113 (variable -> function_call .) ]
  ! NOT_EQUAL       [ reduce using rule 113 (variable -> function_call .) ]
  ! LEFT_LOGICAL    [ reduce using rule 113 (variable -> function_call .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 113 (variable -> function_call .) ]
  ! PLUS            [ reduce using rule 113 (variable -> function_call .) ]
  ! DIVIDE          [ reduce using rule 113 (variable -> function_call .) ]
  ! PERCENT         [ reduce using rule 113 (variable -> function_call .) ]
  ! TIMES           [ reduce using rule 113 (variable -> function_call .) ]
  ! MINUS           [ reduce using rule 113 (variable -> function_call .) ]
  ! RPAREN          [ reduce using rule 113 (variable -> function_call .) ]
  ! DDOT            [ reduce using rule 113 (variable -> function_call .) ]
  ! COLON           [ reduce using rule 113 (variable -> function_call .) ]
  ! RBRACKET        [ reduce using rule 113 (variable -> function_call .) ]
  ! ATTR_ASSOC      [ reduce using rule 113 (variable -> function_call .) ]
  ! AS              [ reduce using rule 113 (variable -> function_call .) ]
  ! RKEY            [ reduce using rule 113 (variable -> function_call .) ]


state 28

    (90) expr -> NUMBER_REAL .

    SEMICOLON       reduce using rule 90 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 90 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 90 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 90 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 90 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 90 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 90 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 90 (expr -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 90 (expr -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 90 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 90 (expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 90 (expr -> NUMBER_REAL .)
    PERCENT         reduce using rule 90 (expr -> NUMBER_REAL .)
    TIMES           reduce using rule 90 (expr -> NUMBER_REAL .)
    MINUS           reduce using rule 90 (expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 90 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 90 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 90 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 90 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 90 (expr -> NUMBER_REAL .)
    AS              reduce using rule 90 (expr -> NUMBER_REAL .)
    RKEY            reduce using rule 90 (expr -> NUMBER_REAL .)


state 29

    (91) expr -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 91 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 91 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 91 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 91 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 91 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 91 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 91 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 91 (expr -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 91 (expr -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 91 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 91 (expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 91 (expr -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 91 (expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 91 (expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 91 (expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 91 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 91 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 91 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 91 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 91 (expr -> NUMBER_INTEGER .)
    AS              reduce using rule 91 (expr -> NUMBER_INTEGER .)
    RKEY            reduce using rule 91 (expr -> NUMBER_INTEGER .)


state 30

    (92) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 92 (expr -> CONSTANT_ENCAPSED_STRING .)


state 31

    (93) expr -> TRUE .

    SEMICOLON       reduce using rule 93 (expr -> TRUE .)
    INTE_DOT        reduce using rule 93 (expr -> TRUE .)
    EQUALS          reduce using rule 93 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 93 (expr -> TRUE .)
    LESS_THAN       reduce using rule 93 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 93 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 93 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 93 (expr -> TRUE .)
    LEFT_LOGICAL    reduce using rule 93 (expr -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 93 (expr -> TRUE .)
    PLUS            reduce using rule 93 (expr -> TRUE .)
    DIVIDE          reduce using rule 93 (expr -> TRUE .)
    PERCENT         reduce using rule 93 (expr -> TRUE .)
    TIMES           reduce using rule 93 (expr -> TRUE .)
    MINUS           reduce using rule 93 (expr -> TRUE .)
    RPAREN          reduce using rule 93 (expr -> TRUE .)
    DDOT            reduce using rule 93 (expr -> TRUE .)
    COLON           reduce using rule 93 (expr -> TRUE .)
    RBRACKET        reduce using rule 93 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 93 (expr -> TRUE .)
    AS              reduce using rule 93 (expr -> TRUE .)
    RKEY            reduce using rule 93 (expr -> TRUE .)


state 32

    (94) expr -> FALSE .

    SEMICOLON       reduce using rule 94 (expr -> FALSE .)
    INTE_DOT        reduce using rule 94 (expr -> FALSE .)
    EQUALS          reduce using rule 94 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 94 (expr -> FALSE .)
    LESS_THAN       reduce using rule 94 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 94 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 94 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 94 (expr -> FALSE .)
    LEFT_LOGICAL    reduce using rule 94 (expr -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 94 (expr -> FALSE .)
    PLUS            reduce using rule 94 (expr -> FALSE .)
    DIVIDE          reduce using rule 94 (expr -> FALSE .)
    PERCENT         reduce using rule 94 (expr -> FALSE .)
    TIMES           reduce using rule 94 (expr -> FALSE .)
    MINUS           reduce using rule 94 (expr -> FALSE .)
    RPAREN          reduce using rule 94 (expr -> FALSE .)
    DDOT            reduce using rule 94 (expr -> FALSE .)
    COLON           reduce using rule 94 (expr -> FALSE .)
    RBRACKET        reduce using rule 94 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 94 (expr -> FALSE .)
    AS              reduce using rule 94 (expr -> FALSE .)
    RKEY            reduce using rule 94 (expr -> FALSE .)


state 33

    (23) statement_if -> IF . expr_paren statement_BLOCK_OPT
    (20) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 80

    expr_paren                     shift and go to state 112

state 34

    (28) statement_foreach -> FOREACH . LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 113


state 35

    (112) variable -> base_variable .
    (34) function_call -> base_variable .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for EQUALS resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for PERCENT resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for TIMES resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for ADD_ASSIGN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for SUB_ASSIGN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for MOD_ASSIGN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS_ASSIGN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE_ASSIGN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for DDOT resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for AS resolved using rule 34 (function_call -> base_variable .)
  ! reduce/reduce conflict for RKEY resolved using rule 34 (function_call -> base_variable .)
    SEMICOLON       reduce using rule 34 (function_call -> base_variable .)
    INTE_DOT        reduce using rule 34 (function_call -> base_variable .)
    EQUALS          reduce using rule 34 (function_call -> base_variable .)
    GREAT_THAN      reduce using rule 34 (function_call -> base_variable .)
    LESS_THAN       reduce using rule 34 (function_call -> base_variable .)
    LESS_EQUAL      reduce using rule 34 (function_call -> base_variable .)
    GREAT_EQUAL     reduce using rule 34 (function_call -> base_variable .)
    NOT_EQUAL       reduce using rule 34 (function_call -> base_variable .)
    LEFT_LOGICAL    reduce using rule 34 (function_call -> base_variable .)
    RIGHT_LOGICAL   reduce using rule 34 (function_call -> base_variable .)
    PLUS            reduce using rule 34 (function_call -> base_variable .)
    DIVIDE          reduce using rule 34 (function_call -> base_variable .)
    PERCENT         reduce using rule 34 (function_call -> base_variable .)
    TIMES           reduce using rule 34 (function_call -> base_variable .)
    MINUS           reduce using rule 34 (function_call -> base_variable .)
    INCREMENT       reduce using rule 34 (function_call -> base_variable .)
    DECREMENT       reduce using rule 34 (function_call -> base_variable .)
    LBRACKET        reduce using rule 34 (function_call -> base_variable .)
    ADD_ASSIGN      reduce using rule 34 (function_call -> base_variable .)
    SUB_ASSIGN      reduce using rule 34 (function_call -> base_variable .)
    MOD_ASSIGN      reduce using rule 34 (function_call -> base_variable .)
    PLUS_ASSIGN     reduce using rule 34 (function_call -> base_variable .)
    DIVIDE_ASSIGN   reduce using rule 34 (function_call -> base_variable .)
    ASSIGN          reduce using rule 34 (function_call -> base_variable .)
    RPAREN          reduce using rule 34 (function_call -> base_variable .)
    DDOT            reduce using rule 34 (function_call -> base_variable .)
    COLON           reduce using rule 34 (function_call -> base_variable .)
    RBRACKET        reduce using rule 34 (function_call -> base_variable .)
    ATTR_ASSOC      reduce using rule 34 (function_call -> base_variable .)
    AS              reduce using rule 34 (function_call -> base_variable .)
    RKEY            reduce using rule 34 (function_call -> base_variable .)

  ! INCREMENT       [ reduce using rule 112 (variable -> base_variable .) ]
  ! DECREMENT       [ reduce using rule 112 (variable -> base_variable .) ]
  ! LBRACKET        [ reduce using rule 112 (variable -> base_variable .) ]
  ! ADD_ASSIGN      [ reduce using rule 112 (variable -> base_variable .) ]
  ! SUB_ASSIGN      [ reduce using rule 112 (variable -> base_variable .) ]
  ! MOD_ASSIGN      [ reduce using rule 112 (variable -> base_variable .) ]
  ! PLUS_ASSIGN     [ reduce using rule 112 (variable -> base_variable .) ]
  ! DIVIDE_ASSIGN   [ reduce using rule 112 (variable -> base_variable .) ]
  ! ASSIGN          [ reduce using rule 112 (variable -> base_variable .) ]
  ! SEMICOLON       [ reduce using rule 112 (variable -> base_variable .) ]
  ! INTE_DOT        [ reduce using rule 112 (variable -> base_variable .) ]
  ! EQUALS          [ reduce using rule 112 (variable -> base_variable .) ]
  ! GREAT_THAN      [ reduce using rule 112 (variable -> base_variable .) ]
  ! LESS_THAN       [ reduce using rule 112 (variable -> base_variable .) ]
  ! LESS_EQUAL      [ reduce using rule 112 (variable -> base_variable .) ]
  ! GREAT_EQUAL     [ reduce using rule 112 (variable -> base_variable .) ]
  ! NOT_EQUAL       [ reduce using rule 112 (variable -> base_variable .) ]
  ! LEFT_LOGICAL    [ reduce using rule 112 (variable -> base_variable .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 112 (variable -> base_variable .) ]
  ! PLUS            [ reduce using rule 112 (variable -> base_variable .) ]
  ! DIVIDE          [ reduce using rule 112 (variable -> base_variable .) ]
  ! PERCENT         [ reduce using rule 112 (variable -> base_variable .) ]
  ! TIMES           [ reduce using rule 112 (variable -> base_variable .) ]
  ! MINUS           [ reduce using rule 112 (variable -> base_variable .) ]
  ! RPAREN          [ reduce using rule 112 (variable -> base_variable .) ]
  ! DDOT            [ reduce using rule 112 (variable -> base_variable .) ]
  ! COLON           [ reduce using rule 112 (variable -> base_variable .) ]
  ! RBRACKET        [ reduce using rule 112 (variable -> base_variable .) ]
  ! ATTR_ASSOC      [ reduce using rule 112 (variable -> base_variable .) ]
  ! AS              [ reduce using rule 112 (variable -> base_variable .) ]
  ! RKEY            [ reduce using rule 112 (variable -> base_variable .) ]


state 36

    (41) unary_operator -> EXC_DOT .

    INCREMENT       reduce using rule 41 (unary_operator -> EXC_DOT .)
    DECREMENT       reduce using rule 41 (unary_operator -> EXC_DOT .)
    LPAREN          reduce using rule 41 (unary_operator -> EXC_DOT .)
    EXIT            reduce using rule 41 (unary_operator -> EXC_DOT .)
    DIE             reduce using rule 41 (unary_operator -> EXC_DOT .)
    ARRAY_TYPE      reduce using rule 41 (unary_operator -> EXC_DOT .)
    NUMBER_REAL     reduce using rule 41 (unary_operator -> EXC_DOT .)
    NUMBER_INTEGER  reduce using rule 41 (unary_operator -> EXC_DOT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 41 (unary_operator -> EXC_DOT .)
    TRUE            reduce using rule 41 (unary_operator -> EXC_DOT .)
    FALSE           reduce using rule 41 (unary_operator -> EXC_DOT .)
    EXC_DOT         reduce using rule 41 (unary_operator -> EXC_DOT .)
    PLUS            reduce using rule 41 (unary_operator -> EXC_DOT .)
    MINUS           reduce using rule 41 (unary_operator -> EXC_DOT .)
    ID              reduce using rule 41 (unary_operator -> EXC_DOT .)
    DOLAR           reduce using rule 41 (unary_operator -> EXC_DOT .)
    VARIABLE        reduce using rule 41 (unary_operator -> EXC_DOT .)


state 37

    (42) unary_operator -> PLUS .

    INCREMENT       reduce using rule 42 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 42 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 42 (unary_operator -> PLUS .)
    EXIT            reduce using rule 42 (unary_operator -> PLUS .)
    DIE             reduce using rule 42 (unary_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 42 (unary_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 42 (unary_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 42 (unary_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 42 (unary_operator -> PLUS .)
    TRUE            reduce using rule 42 (unary_operator -> PLUS .)
    FALSE           reduce using rule 42 (unary_operator -> PLUS .)
    EXC_DOT         reduce using rule 42 (unary_operator -> PLUS .)
    PLUS            reduce using rule 42 (unary_operator -> PLUS .)
    MINUS           reduce using rule 42 (unary_operator -> PLUS .)
    ID              reduce using rule 42 (unary_operator -> PLUS .)
    DOLAR           reduce using rule 42 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 42 (unary_operator -> PLUS .)


state 38

    (43) unary_operator -> MINUS .

    INCREMENT       reduce using rule 43 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 43 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 43 (unary_operator -> MINUS .)
    EXIT            reduce using rule 43 (unary_operator -> MINUS .)
    DIE             reduce using rule 43 (unary_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 43 (unary_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 43 (unary_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 43 (unary_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 43 (unary_operator -> MINUS .)
    TRUE            reduce using rule 43 (unary_operator -> MINUS .)
    FALSE           reduce using rule 43 (unary_operator -> MINUS .)
    EXC_DOT         reduce using rule 43 (unary_operator -> MINUS .)
    PLUS            reduce using rule 43 (unary_operator -> MINUS .)
    MINUS           reduce using rule 43 (unary_operator -> MINUS .)
    ID              reduce using rule 43 (unary_operator -> MINUS .)
    DOLAR           reduce using rule 43 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 43 (unary_operator -> MINUS .)


state 39

    (114) base_variable -> reference_variable .

    INCREMENT       reduce using rule 114 (base_variable -> reference_variable .)
    DECREMENT       reduce using rule 114 (base_variable -> reference_variable .)
    LBRACKET        reduce using rule 114 (base_variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 114 (base_variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 114 (base_variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 114 (base_variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 114 (base_variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 114 (base_variable -> reference_variable .)
    ASSIGN          reduce using rule 114 (base_variable -> reference_variable .)
    SEMICOLON       reduce using rule 114 (base_variable -> reference_variable .)
    INTE_DOT        reduce using rule 114 (base_variable -> reference_variable .)
    EQUALS          reduce using rule 114 (base_variable -> reference_variable .)
    GREAT_THAN      reduce using rule 114 (base_variable -> reference_variable .)
    LESS_THAN       reduce using rule 114 (base_variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 114 (base_variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 114 (base_variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 114 (base_variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 114 (base_variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 114 (base_variable -> reference_variable .)
    PLUS            reduce using rule 114 (base_variable -> reference_variable .)
    DIVIDE          reduce using rule 114 (base_variable -> reference_variable .)
    PERCENT         reduce using rule 114 (base_variable -> reference_variable .)
    TIMES           reduce using rule 114 (base_variable -> reference_variable .)
    MINUS           reduce using rule 114 (base_variable -> reference_variable .)
    RPAREN          reduce using rule 114 (base_variable -> reference_variable .)
    DDOT            reduce using rule 114 (base_variable -> reference_variable .)
    COLON           reduce using rule 114 (base_variable -> reference_variable .)
    RBRACKET        reduce using rule 114 (base_variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 114 (base_variable -> reference_variable .)
    AS              reduce using rule 114 (base_variable -> reference_variable .)
    RKEY            reduce using rule 114 (base_variable -> reference_variable .)


state 40

    (115) base_variable -> simple_indirect_reference_DOLAR . reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 43
    DOLAR           shift and go to state 115

    reference_variable             shift and go to state 114
    compound_variable              shift and go to state 41

state 41

    (116) reference_variable -> compound_variable . reference_variable_SELECTOR
    (173) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (174) reference_variable_SELECTOR -> .
    (119) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 174 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 174 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 174 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 174 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 174 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 174 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 174 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 174 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 174 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 174 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 174 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 174 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 174 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 174 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 174 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 174 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 174 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 174 (reference_variable_SELECTOR -> .)
    PLUS            reduce using rule 174 (reference_variable_SELECTOR -> .)
    DIVIDE          reduce using rule 174 (reference_variable_SELECTOR -> .)
    PERCENT         reduce using rule 174 (reference_variable_SELECTOR -> .)
    TIMES           reduce using rule 174 (reference_variable_SELECTOR -> .)
    MINUS           reduce using rule 174 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 174 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 174 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 174 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 174 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 174 (reference_variable_SELECTOR -> .)
    AS              reduce using rule 174 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 174 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 118

  ! LBRACKET        [ reduce using rule 174 (reference_variable_SELECTOR -> .) ]

    reference_variable_SELECTOR    shift and go to state 116
    selector                       shift and go to state 117

state 42

    (175) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (118) compound_variable -> DOLAR . LKEY expr RKEY
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    LKEY            shift and go to state 121
    DOLAR           shift and go to state 119
    VARIABLE        reduce using rule 176 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 120

state 43

    (117) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 117 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 117 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 117 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 117 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 117 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 117 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 117 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 117 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 117 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 117 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 117 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 117 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 117 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 117 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 117 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 117 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 117 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 117 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 117 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 117 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 117 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 117 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 117 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 117 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 117 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 117 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 117 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 117 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 117 (compound_variable -> VARIABLE .)
    AS              reduce using rule 117 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 117 (compound_variable -> VARIABLE .)


state 44

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 45

    (145) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 145 (main_INNER -> inner_statement main_INNER .)


state 46

    (120) function_declaration_statement -> FUNCTION AMPERSAND_OPT . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 122


state 47

    (155) AMPERSAND_OPT -> AMPERSAND .

    ID              reduce using rule 155 (AMPERSAND_OPT -> AMPERSAND .)
    VARIABLE        reduce using rule 155 (AMPERSAND_OPT -> AMPERSAND .)


state 48

    (33) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (35) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (36) function_call_parameter_list -> .
    (37) function_call_parameter -> . variable
    (38) function_call_parameter -> . AMPERSAND VARIABLE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 36 (function_call_parameter_list -> .)
    AMPERSAND       shift and go to state 126
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter_list   shift and go to state 123
    function_call_parameter        shift and go to state 124
    variable                       shift and go to state 125
    base_variable                  shift and go to state 35
    function_call                  shift and go to state 94
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 49

    (77) expr -> LPAREN expr . RPAREN
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 127
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 50

    (84) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 128


state 51

    (87) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (49) type_cast_operator -> ARRAY_TYPE .

    LPAREN          shift and go to state 111
    RPAREN          reduce using rule 49 (type_cast_operator -> ARRAY_TYPE .)


state 52

    (44) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 44 (type_cast_operator -> INT_TYPE .)


state 53

    (45) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 45 (type_cast_operator -> DOUBLE_TYPE .)


state 54

    (46) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 46 (type_cast_operator -> FLOAT_TYPE .)


state 55

    (47) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 47 (type_cast_operator -> REAL_TYPE .)


state 56

    (48) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 48 (type_cast_operator -> STRING_TYPE .)


state 57

    (50) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 50 (type_cast_operator -> BOOLEAN_TYPE .)


state 58

    (51) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 51 (type_cast_operator -> BOOL_TYPE .)


state 59

    (52) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 52 (type_cast_operator -> UNSET .)


state 60

    (4) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 4 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> expr SEMICOLON .)
    DO              reduce using rule 4 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 4 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 4 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 4 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 4 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 4 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 4 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 4 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 4 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 4 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 4 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 4 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 4 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 4 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 4 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 4 (statement -> expr SEMICOLON .)
    IF              reduce using rule 4 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 4 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 4 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 4 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 4 (statement -> expr SEMICOLON .)
    ID              reduce using rule 4 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 4 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 4 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 4 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 4 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 4 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 4 (statement -> expr SEMICOLON .)


state 61

    (79) expr -> expr INTE_DOT . expr DDOT expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 129
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 62

    (80) expr -> expr comparission_operator . expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 130
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 63

    (83) expr -> expr arithmetic_operator . expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 131
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 64

    (64) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 64 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 64 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 64 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 64 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 64 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 64 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 64 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 64 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 64 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 64 (comparission_operator -> EQUALS .)
    EXC_DOT         reduce using rule 64 (comparission_operator -> EQUALS .)
    PLUS            reduce using rule 64 (comparission_operator -> EQUALS .)
    MINUS           reduce using rule 64 (comparission_operator -> EQUALS .)
    ID              reduce using rule 64 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 64 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 64 (comparission_operator -> EQUALS .)


state 65

    (65) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    EXC_DOT         reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    PLUS            reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    MINUS           reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 65 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 65 (comparission_operator -> GREAT_THAN .)


state 66

    (66) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 66 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 66 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 66 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 66 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 66 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 66 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 66 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 66 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 66 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 66 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 66 (comparission_operator -> LESS_THAN .)
    EXC_DOT         reduce using rule 66 (comparission_operator -> LESS_THAN .)
    PLUS            reduce using rule 66 (comparission_operator -> LESS_THAN .)
    MINUS           reduce using rule 66 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 66 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 66 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 66 (comparission_operator -> LESS_THAN .)


state 67

    (67) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    EXC_DOT         reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    PLUS            reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    MINUS           reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 67 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 67 (comparission_operator -> LESS_EQUAL .)


state 68

    (68) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    EXC_DOT         reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    PLUS            reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    MINUS           reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 68 (comparission_operator -> GREAT_EQUAL .)


state 69

    (69) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    EXC_DOT         reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    PLUS            reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    MINUS           reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 69 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 69 (comparission_operator -> NOT_EQUAL .)


state 70

    (70) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    EXC_DOT         reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    PLUS            reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    MINUS           reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 70 (comparission_operator -> LEFT_LOGICAL .)


state 71

    (71) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    EXC_DOT         reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    PLUS            reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    MINUS           reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 71 (comparission_operator -> RIGHT_LOGICAL .)


state 72

    (53) arithmetic_operator -> PLUS .

    INCREMENT       reduce using rule 53 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 53 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 53 (arithmetic_operator -> PLUS .)
    EXIT            reduce using rule 53 (arithmetic_operator -> PLUS .)
    DIE             reduce using rule 53 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 53 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 53 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 53 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 53 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 53 (arithmetic_operator -> PLUS .)
    EXC_DOT         reduce using rule 53 (arithmetic_operator -> PLUS .)
    PLUS            reduce using rule 53 (arithmetic_operator -> PLUS .)
    MINUS           reduce using rule 53 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 53 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 53 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 53 (arithmetic_operator -> PLUS .)


state 73

    (54) arithmetic_operator -> DIVIDE .

    INCREMENT       reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    EXIT            reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    DIE             reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    EXC_DOT         reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    PLUS            reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    MINUS           reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 54 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 54 (arithmetic_operator -> DIVIDE .)


state 74

    (55) arithmetic_operator -> PERCENT .

    INCREMENT       reduce using rule 55 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 55 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 55 (arithmetic_operator -> PERCENT .)
    EXIT            reduce using rule 55 (arithmetic_operator -> PERCENT .)
    DIE             reduce using rule 55 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 55 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 55 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 55 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 55 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 55 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 55 (arithmetic_operator -> PERCENT .)
    EXC_DOT         reduce using rule 55 (arithmetic_operator -> PERCENT .)
    PLUS            reduce using rule 55 (arithmetic_operator -> PERCENT .)
    MINUS           reduce using rule 55 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 55 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 55 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 55 (arithmetic_operator -> PERCENT .)


state 75

    (56) arithmetic_operator -> TIMES .

    INCREMENT       reduce using rule 56 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 56 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 56 (arithmetic_operator -> TIMES .)
    EXIT            reduce using rule 56 (arithmetic_operator -> TIMES .)
    DIE             reduce using rule 56 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 56 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 56 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 56 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 56 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 56 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 56 (arithmetic_operator -> TIMES .)
    EXC_DOT         reduce using rule 56 (arithmetic_operator -> TIMES .)
    PLUS            reduce using rule 56 (arithmetic_operator -> TIMES .)
    MINUS           reduce using rule 56 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 56 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 56 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 56 (arithmetic_operator -> TIMES .)


state 76

    (57) arithmetic_operator -> MINUS .

    INCREMENT       reduce using rule 57 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 57 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 57 (arithmetic_operator -> MINUS .)
    EXIT            reduce using rule 57 (arithmetic_operator -> MINUS .)
    DIE             reduce using rule 57 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 57 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 57 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 57 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 57 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 57 (arithmetic_operator -> MINUS .)
    EXC_DOT         reduce using rule 57 (arithmetic_operator -> MINUS .)
    PLUS            reduce using rule 57 (arithmetic_operator -> MINUS .)
    MINUS           reduce using rule 57 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 57 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 57 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 57 (arithmetic_operator -> MINUS .)


state 77

    (5) statement -> statement_if statement_elseif . statement_else
    (26) statement_else -> . ELSE statement_BLOCK_OPT
    (27) statement_else -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 133
    FUNCTION        reduce using rule 27 (statement_else -> .)
    WHILE           reduce using rule 27 (statement_else -> .)
    DO              reduce using rule 27 (statement_else -> .)
    FOR             reduce using rule 27 (statement_else -> .)
    BREAK           reduce using rule 27 (statement_else -> .)
    CONTINUE        reduce using rule 27 (statement_else -> .)
    RETURN          reduce using rule 27 (statement_else -> .)
    GLOBAL          reduce using rule 27 (statement_else -> .)
    INCREMENT       reduce using rule 27 (statement_else -> .)
    DECREMENT       reduce using rule 27 (statement_else -> .)
    LPAREN          reduce using rule 27 (statement_else -> .)
    EXIT            reduce using rule 27 (statement_else -> .)
    DIE             reduce using rule 27 (statement_else -> .)
    ARRAY_TYPE      reduce using rule 27 (statement_else -> .)
    NUMBER_REAL     reduce using rule 27 (statement_else -> .)
    NUMBER_INTEGER  reduce using rule 27 (statement_else -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 27 (statement_else -> .)
    TRUE            reduce using rule 27 (statement_else -> .)
    FALSE           reduce using rule 27 (statement_else -> .)
    IF              reduce using rule 27 (statement_else -> .)
    FOREACH         reduce using rule 27 (statement_else -> .)
    EXC_DOT         reduce using rule 27 (statement_else -> .)
    PLUS            reduce using rule 27 (statement_else -> .)
    MINUS           reduce using rule 27 (statement_else -> .)
    ID              reduce using rule 27 (statement_else -> .)
    DOLAR           reduce using rule 27 (statement_else -> .)
    VARIABLE        reduce using rule 27 (statement_else -> .)
    END_PROGRAM     reduce using rule 27 (statement_else -> .)
    RKEY            reduce using rule 27 (statement_else -> .)
    ELSEIF          reduce using rule 27 (statement_else -> .)

  ! ELSE            [ reduce using rule 27 (statement_else -> .) ]

    statement_else                 shift and go to state 132

state 78

    (24) statement_elseif -> ELSEIF . expr_paren statement_BLOCK_OPT
    (20) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 80

    expr_paren                     shift and go to state 134

state 79

    (6) statement -> WHILE expr_paren . statement_BLOCK_OPT
    (153) statement_BLOCK_OPT -> . statement
    (154) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 83
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 135
    statement                      shift and go to state 82
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 80

    (20) expr_paren -> LPAREN . expr RPAREN
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 136
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 81

    (7) statement -> DO statement_BLOCK_OPT . WHILE expr_paren SEMICOLON

    WHILE           shift and go to state 137


state 82

    (153) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    EXC_DOT         reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    PLUS            reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 153 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 153 (statement_BLOCK_OPT -> statement .)


state 83

    (154) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (147) statement_MUL -> . statement statement_MUL
    (148) statement_MUL -> .
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 148 (statement_MUL -> .)
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement_MUL                  shift and go to state 138
    statement                      shift and go to state 139
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 84

    (8) statement -> FOR LPAREN . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (31) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (32) for_expr_OPT -> .
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 32 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 140
    expr                           shift and go to state 141
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 85

    (10) statement -> BREAK expr_OPT . SEMICOLON

    SEMICOLON       shift and go to state 142


state 86

    (165) expr_OPT -> expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 165 (expr_OPT -> expr .)
    RPAREN          reduce using rule 165 (expr_OPT -> expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 87

    (11) statement -> CONTINUE expr_OPT . SEMICOLON

    SEMICOLON       shift and go to state 143


state 88

    (12) statement -> RETURN expr_return_OPT . SEMICOLON

    SEMICOLON       shift and go to state 144


state 89

    (21) expr_return_OPT -> expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 21 (expr_return_OPT -> expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 90

    (13) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (18) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (19) statement_COLON_GLOBAL -> .

    COLON           shift and go to state 146
    SEMICOLON       reduce using rule 19 (statement_COLON_GLOBAL -> .)

    statement_COLON_GLOBAL         shift and go to state 145

state 91

    (15) global_var -> VARIABLE .

    COLON           reduce using rule 15 (global_var -> VARIABLE .)
    SEMICOLON       reduce using rule 15 (global_var -> VARIABLE .)


state 92

    (16) global_var -> DOLAR . VARIABLE
    (17) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 147
    LKEY            shift and go to state 148


state 93

    (72) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 72 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 72 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 72 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 72 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 72 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 72 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 72 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 72 (expr -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 72 (expr -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 72 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 72 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 72 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 72 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 72 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 72 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 72 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 72 (expr -> INCREMENT variable .)
    COLON           reduce using rule 72 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 72 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 72 (expr -> INCREMENT variable .)
    AS              reduce using rule 72 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 72 (expr -> INCREMENT variable .)


state 94

    (113) variable -> function_call .

    SEMICOLON       reduce using rule 113 (variable -> function_call .)
    INTE_DOT        reduce using rule 113 (variable -> function_call .)
    EQUALS          reduce using rule 113 (variable -> function_call .)
    GREAT_THAN      reduce using rule 113 (variable -> function_call .)
    LESS_THAN       reduce using rule 113 (variable -> function_call .)
    LESS_EQUAL      reduce using rule 113 (variable -> function_call .)
    GREAT_EQUAL     reduce using rule 113 (variable -> function_call .)
    NOT_EQUAL       reduce using rule 113 (variable -> function_call .)
    LEFT_LOGICAL    reduce using rule 113 (variable -> function_call .)
    RIGHT_LOGICAL   reduce using rule 113 (variable -> function_call .)
    PLUS            reduce using rule 113 (variable -> function_call .)
    DIVIDE          reduce using rule 113 (variable -> function_call .)
    PERCENT         reduce using rule 113 (variable -> function_call .)
    TIMES           reduce using rule 113 (variable -> function_call .)
    MINUS           reduce using rule 113 (variable -> function_call .)
    RPAREN          reduce using rule 113 (variable -> function_call .)
    DDOT            reduce using rule 113 (variable -> function_call .)
    COLON           reduce using rule 113 (variable -> function_call .)
    RBRACKET        reduce using rule 113 (variable -> function_call .)
    ATTR_ASSOC      reduce using rule 113 (variable -> function_call .)
    AS              reduce using rule 113 (variable -> function_call .)
    RKEY            reduce using rule 113 (variable -> function_call .)


state 95

    (73) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 73 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 73 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 73 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 73 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 73 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 73 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 73 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 73 (expr -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 73 (expr -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 73 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 73 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 73 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 73 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 73 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 73 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 73 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 73 (expr -> variable INCREMENT .)
    COLON           reduce using rule 73 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 73 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 73 (expr -> variable INCREMENT .)
    AS              reduce using rule 73 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 73 (expr -> variable INCREMENT .)


state 96

    (75) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 75 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 75 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 75 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 75 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 75 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 75 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 75 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 75 (expr -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 75 (expr -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 75 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 75 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 75 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 75 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 75 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 75 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 75 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 75 (expr -> variable DECREMENT .)
    COLON           reduce using rule 75 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 75 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 75 (expr -> variable DECREMENT .)
    AS              reduce using rule 75 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 75 (expr -> variable DECREMENT .)


state 97

    (76) expr -> variable LBRACKET . expr RBRACKET
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 21
    expr                           shift and go to state 149
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 98

    (81) expr -> variable assign_operator . expr
    (82) expr -> variable assign_operator . AMPERSAND expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 151
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 21
    expr                           shift and go to state 150
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 99

    (58) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    EXC_DOT         reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 58 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 58 (assign_operator -> ADD_ASSIGN .)


state 100

    (59) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    EXC_DOT         reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 59 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 59 (assign_operator -> SUB_ASSIGN .)


state 101

    (60) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    EXC_DOT         reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 60 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 60 (assign_operator -> MOD_ASSIGN .)


state 102

    (61) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    EXC_DOT         reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 61 (assign_operator -> PLUS_ASSIGN .)


state 103

    (62) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    EXC_DOT         reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 62 (assign_operator -> DIVIDE_ASSIGN .)


state 104

    (63) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 63 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 63 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 63 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 63 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 63 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 63 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 63 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 63 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 63 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 63 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 63 (assign_operator -> ASSIGN .)
    EXC_DOT         reduce using rule 63 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 63 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 63 (assign_operator -> ASSIGN .)
    ID              reduce using rule 63 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 63 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 63 (assign_operator -> ASSIGN .)


state 105

    (74) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 74 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 74 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 74 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 74 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 74 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 74 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 74 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 74 (expr -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 74 (expr -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 74 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 74 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 74 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 74 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 74 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 74 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 74 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 74 (expr -> DECREMENT variable .)
    COLON           reduce using rule 74 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 74 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 74 (expr -> DECREMENT variable .)
    AS              reduce using rule 74 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 74 (expr -> DECREMENT variable .)


state 106

    (78) expr -> unary_operator expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 78 (expr -> unary_operator expr .)
    RPAREN          reduce using rule 78 (expr -> unary_operator expr .)
    DDOT            reduce using rule 78 (expr -> unary_operator expr .)
    COLON           reduce using rule 78 (expr -> unary_operator expr .)
    RBRACKET        reduce using rule 78 (expr -> unary_operator expr .)
    ATTR_ASSOC      reduce using rule 78 (expr -> unary_operator expr .)
    AS              reduce using rule 78 (expr -> unary_operator expr .)
    RKEY            reduce using rule 78 (expr -> unary_operator expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

  ! INTE_DOT        [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! EQUALS          [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! PLUS            [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! DIVIDE          [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! PERCENT         [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! TIMES           [ reduce using rule 78 (expr -> unary_operator expr .) ]
  ! MINUS           [ reduce using rule 78 (expr -> unary_operator expr .) ]

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 107

    (85) expr -> EXIT expr_EXIT .

    SEMICOLON       reduce using rule 85 (expr -> EXIT expr_EXIT .)
    INTE_DOT        reduce using rule 85 (expr -> EXIT expr_EXIT .)
    EQUALS          reduce using rule 85 (expr -> EXIT expr_EXIT .)
    GREAT_THAN      reduce using rule 85 (expr -> EXIT expr_EXIT .)
    LESS_THAN       reduce using rule 85 (expr -> EXIT expr_EXIT .)
    LESS_EQUAL      reduce using rule 85 (expr -> EXIT expr_EXIT .)
    GREAT_EQUAL     reduce using rule 85 (expr -> EXIT expr_EXIT .)
    NOT_EQUAL       reduce using rule 85 (expr -> EXIT expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 85 (expr -> EXIT expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 85 (expr -> EXIT expr_EXIT .)
    PLUS            reduce using rule 85 (expr -> EXIT expr_EXIT .)
    DIVIDE          reduce using rule 85 (expr -> EXIT expr_EXIT .)
    PERCENT         reduce using rule 85 (expr -> EXIT expr_EXIT .)
    TIMES           reduce using rule 85 (expr -> EXIT expr_EXIT .)
    MINUS           reduce using rule 85 (expr -> EXIT expr_EXIT .)
    RPAREN          reduce using rule 85 (expr -> EXIT expr_EXIT .)
    DDOT            reduce using rule 85 (expr -> EXIT expr_EXIT .)
    COLON           reduce using rule 85 (expr -> EXIT expr_EXIT .)
    RBRACKET        reduce using rule 85 (expr -> EXIT expr_EXIT .)
    ATTR_ASSOC      reduce using rule 85 (expr -> EXIT expr_EXIT .)
    AS              reduce using rule 85 (expr -> EXIT expr_EXIT .)
    RKEY            reduce using rule 85 (expr -> EXIT expr_EXIT .)


state 108

    (109) expr_EXIT -> exit_expr .

    SEMICOLON       reduce using rule 109 (expr_EXIT -> exit_expr .)
    INTE_DOT        reduce using rule 109 (expr_EXIT -> exit_expr .)
    EQUALS          reduce using rule 109 (expr_EXIT -> exit_expr .)
    GREAT_THAN      reduce using rule 109 (expr_EXIT -> exit_expr .)
    LESS_THAN       reduce using rule 109 (expr_EXIT -> exit_expr .)
    LESS_EQUAL      reduce using rule 109 (expr_EXIT -> exit_expr .)
    GREAT_EQUAL     reduce using rule 109 (expr_EXIT -> exit_expr .)
    NOT_EQUAL       reduce using rule 109 (expr_EXIT -> exit_expr .)
    LEFT_LOGICAL    reduce using rule 109 (expr_EXIT -> exit_expr .)
    RIGHT_LOGICAL   reduce using rule 109 (expr_EXIT -> exit_expr .)
    PLUS            reduce using rule 109 (expr_EXIT -> exit_expr .)
    DIVIDE          reduce using rule 109 (expr_EXIT -> exit_expr .)
    PERCENT         reduce using rule 109 (expr_EXIT -> exit_expr .)
    TIMES           reduce using rule 109 (expr_EXIT -> exit_expr .)
    MINUS           reduce using rule 109 (expr_EXIT -> exit_expr .)
    RPAREN          reduce using rule 109 (expr_EXIT -> exit_expr .)
    DDOT            reduce using rule 109 (expr_EXIT -> exit_expr .)
    COLON           reduce using rule 109 (expr_EXIT -> exit_expr .)
    RBRACKET        reduce using rule 109 (expr_EXIT -> exit_expr .)
    ATTR_ASSOC      reduce using rule 109 (expr_EXIT -> exit_expr .)
    AS              reduce using rule 109 (expr_EXIT -> exit_expr .)
    RKEY            reduce using rule 109 (expr_EXIT -> exit_expr .)


state 109

    (111) exit_expr -> LPAREN . expr_OPT RPAREN
    (165) expr_OPT -> . expr
    (166) expr_OPT -> .
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 166 (expr_OPT -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 152
    expr                           shift and go to state 86
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 110

    (86) expr -> DIE expr_EXIT .

    SEMICOLON       reduce using rule 86 (expr -> DIE expr_EXIT .)
    INTE_DOT        reduce using rule 86 (expr -> DIE expr_EXIT .)
    EQUALS          reduce using rule 86 (expr -> DIE expr_EXIT .)
    GREAT_THAN      reduce using rule 86 (expr -> DIE expr_EXIT .)
    LESS_THAN       reduce using rule 86 (expr -> DIE expr_EXIT .)
    LESS_EQUAL      reduce using rule 86 (expr -> DIE expr_EXIT .)
    GREAT_EQUAL     reduce using rule 86 (expr -> DIE expr_EXIT .)
    NOT_EQUAL       reduce using rule 86 (expr -> DIE expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 86 (expr -> DIE expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 86 (expr -> DIE expr_EXIT .)
    PLUS            reduce using rule 86 (expr -> DIE expr_EXIT .)
    DIVIDE          reduce using rule 86 (expr -> DIE expr_EXIT .)
    PERCENT         reduce using rule 86 (expr -> DIE expr_EXIT .)
    TIMES           reduce using rule 86 (expr -> DIE expr_EXIT .)
    MINUS           reduce using rule 86 (expr -> DIE expr_EXIT .)
    RPAREN          reduce using rule 86 (expr -> DIE expr_EXIT .)
    DDOT            reduce using rule 86 (expr -> DIE expr_EXIT .)
    COLON           reduce using rule 86 (expr -> DIE expr_EXIT .)
    RBRACKET        reduce using rule 86 (expr -> DIE expr_EXIT .)
    ATTR_ASSOC      reduce using rule 86 (expr -> DIE expr_EXIT .)
    AS              reduce using rule 86 (expr -> DIE expr_EXIT .)
    RKEY            reduce using rule 86 (expr -> DIE expr_EXIT .)


state 111

    (87) expr -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (141) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (142) array_pair_list -> .
    (143) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (144) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (191) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (192) array_pair_EXPR_ATTR_OPT -> .
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 142 (array_pair_list -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    AMPERSAND       reduce using rule 192 (array_pair_EXPR_ATTR_OPT -> .)
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    array_pair_list                shift and go to state 153
    array_pair                     shift and go to state 154
    expr                           shift and go to state 155
    array_pair_EXPR_ATTR_OPT       shift and go to state 156
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 112

    (23) statement_if -> IF expr_paren . statement_BLOCK_OPT
    (153) statement_BLOCK_OPT -> . statement
    (154) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 83
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 157
    statement                      shift and go to state 82
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 113

    (28) statement_foreach -> FOREACH LPAREN . foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (29) foreach_first_param -> . variable
    (30) foreach_first_param -> . expr
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 8
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    foreach_first_param            shift and go to state 158
    variable                       shift and go to state 159
    expr                           shift and go to state 160
    base_variable                  shift and go to state 35
    function_call                  shift and go to state 161
    unary_operator                 shift and go to state 23
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 114

    (115) base_variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LBRACKET        reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    AS              reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 115 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)


state 115

    (118) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 121


state 116

    (116) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AS              reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 116 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 117

    (173) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (173) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (174) reference_variable_SELECTOR -> .
    (119) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 174 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 174 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 174 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 174 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 174 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 174 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 174 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 174 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 174 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 174 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 174 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 174 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 174 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 174 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 174 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 174 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 174 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 174 (reference_variable_SELECTOR -> .)
    PLUS            reduce using rule 174 (reference_variable_SELECTOR -> .)
    DIVIDE          reduce using rule 174 (reference_variable_SELECTOR -> .)
    PERCENT         reduce using rule 174 (reference_variable_SELECTOR -> .)
    TIMES           reduce using rule 174 (reference_variable_SELECTOR -> .)
    MINUS           reduce using rule 174 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 174 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 174 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 174 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 174 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 174 (reference_variable_SELECTOR -> .)
    AS              reduce using rule 174 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 174 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 118

  ! LBRACKET        [ reduce using rule 174 (reference_variable_SELECTOR -> .) ]

    selector                       shift and go to state 117
    reference_variable_SELECTOR    shift and go to state 162

state 118

    (119) selector -> LBRACKET . selector_EXPR RBRACKET
    (177) selector_EXPR -> . expr
    (178) selector_EXPR -> .
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RBRACKET        reduce using rule 178 (selector_EXPR -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    selector_EXPR                  shift and go to state 163
    expr                           shift and go to state 164
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 119

    (175) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    DOLAR           shift and go to state 119
    VARIABLE        reduce using rule 176 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 120

state 120

    (175) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 175 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 175 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 121

    (118) compound_variable -> DOLAR LKEY . expr RKEY
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 165
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 122

    (120) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 166


state 123

    (33) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 167


state 124

    (35) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (159) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (160) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 169
    RPAREN          reduce using rule 160 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 168

state 125

    (37) function_call_parameter -> variable .

    COLON           reduce using rule 37 (function_call_parameter -> variable .)
    RPAREN          reduce using rule 37 (function_call_parameter -> variable .)


state 126

    (38) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 170


state 127

    (77) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 77 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 77 (expr -> LPAREN expr RPAREN .)


state 128

    (84) expr -> LPAREN type_cast_operator RPAREN . expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 171
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 129

    (79) expr -> expr INTE_DOT expr . DDOT expr
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    DDOT            shift and go to state 172
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 130

    (80) expr -> expr comparission_operator expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 80 (expr -> expr comparission_operator expr .)
    RPAREN          reduce using rule 80 (expr -> expr comparission_operator expr .)
    DDOT            reduce using rule 80 (expr -> expr comparission_operator expr .)
    COLON           reduce using rule 80 (expr -> expr comparission_operator expr .)
    RBRACKET        reduce using rule 80 (expr -> expr comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 80 (expr -> expr comparission_operator expr .)
    AS              reduce using rule 80 (expr -> expr comparission_operator expr .)
    RKEY            reduce using rule 80 (expr -> expr comparission_operator expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

  ! INTE_DOT        [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! EQUALS          [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! PLUS            [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! DIVIDE          [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! PERCENT         [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! TIMES           [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]
  ! MINUS           [ reduce using rule 80 (expr -> expr comparission_operator expr .) ]

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 131

    (83) expr -> expr arithmetic_operator expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 83 (expr -> expr arithmetic_operator expr .)
    RPAREN          reduce using rule 83 (expr -> expr arithmetic_operator expr .)
    DDOT            reduce using rule 83 (expr -> expr arithmetic_operator expr .)
    COLON           reduce using rule 83 (expr -> expr arithmetic_operator expr .)
    RBRACKET        reduce using rule 83 (expr -> expr arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 83 (expr -> expr arithmetic_operator expr .)
    AS              reduce using rule 83 (expr -> expr arithmetic_operator expr .)
    RKEY            reduce using rule 83 (expr -> expr arithmetic_operator expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

  ! INTE_DOT        [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! EQUALS          [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! PLUS            [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! DIVIDE          [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! PERCENT         [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! TIMES           [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]
  ! MINUS           [ reduce using rule 83 (expr -> expr arithmetic_operator expr .) ]

    arithmetic_operator            shift and go to state 63
    comparission_operator          shift and go to state 62

state 132

    (5) statement -> statement_if statement_elseif statement_else .

    FUNCTION        reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    WHILE           reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    DO              reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    FOR             reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    BREAK           reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    CONTINUE        reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    RETURN          reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    GLOBAL          reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    INCREMENT       reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    DECREMENT       reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    LPAREN          reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    EXIT            reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    DIE             reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    TRUE            reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    FALSE           reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    IF              reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    FOREACH         reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    EXC_DOT         reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    PLUS            reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    MINUS           reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    ID              reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    DOLAR           reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    VARIABLE        reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    ELSE            reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    RKEY            reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)
    ELSEIF          reduce using rule 5 (statement -> statement_if statement_elseif statement_else .)


state 133

    (26) statement_else -> ELSE . statement_BLOCK_OPT
    (153) statement_BLOCK_OPT -> . statement
    (154) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 83
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 173
    statement                      shift and go to state 82
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 134

    (24) statement_elseif -> ELSEIF expr_paren . statement_BLOCK_OPT
    (153) statement_BLOCK_OPT -> . statement
    (154) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 83
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 174
    statement                      shift and go to state 82
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 135

    (6) statement -> WHILE expr_paren statement_BLOCK_OPT .

    FUNCTION        reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ELSE            reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 6 (statement -> WHILE expr_paren statement_BLOCK_OPT .)


state 136

    (20) expr_paren -> LPAREN expr . RPAREN
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 175
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 137

    (7) statement -> DO statement_BLOCK_OPT WHILE . expr_paren SEMICOLON
    (20) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 80

    expr_paren                     shift and go to state 176

state 138

    (154) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 177


state 139

    (147) statement_MUL -> statement . statement_MUL
    (147) statement_MUL -> . statement statement_MUL
    (148) statement_MUL -> .
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 148 (statement_MUL -> .)
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement                      shift and go to state 139
    statement_MUL                  shift and go to state 178
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 140

    (8) statement -> FOR LPAREN for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    SEMICOLON       shift and go to state 179


state 141

    (31) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (151) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (152) for_expr_COLON_EXPR -> .
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    INTE_DOT        shift and go to state 61
    COLON           shift and go to state 181
    SEMICOLON       reduce using rule 152 (for_expr_COLON_EXPR -> .)
    RPAREN          reduce using rule 152 (for_expr_COLON_EXPR -> .)
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    for_expr_COLON_EXPR            shift and go to state 180
    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 142

    (10) statement -> BREAK expr_OPT SEMICOLON .

    FUNCTION        reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    DO              reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    FOR             reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    BREAK           reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    CONTINUE        reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    GLOBAL          reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    INCREMENT       reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    DECREMENT       reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    LPAREN          reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    EXIT            reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    DIE             reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    TRUE            reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    FALSE           reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    IF              reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    FOREACH         reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    PLUS            reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    MINUS           reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    ID              reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    DOLAR           reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    VARIABLE        reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    RKEY            reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)
    ELSEIF          reduce using rule 10 (statement -> BREAK expr_OPT SEMICOLON .)


state 143

    (11) statement -> CONTINUE expr_OPT SEMICOLON .

    FUNCTION        reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DO              reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FOR             reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    CONTINUE        reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    GLOBAL          reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    INCREMENT       reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DECREMENT       reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    LPAREN          reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    EXIT            reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DIE             reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    TRUE            reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FALSE           reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    IF              reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FOREACH         reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    PLUS            reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    MINUS           reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ID              reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DOLAR           reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    VARIABLE        reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    RKEY            reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ELSEIF          reduce using rule 11 (statement -> CONTINUE expr_OPT SEMICOLON .)


state 144

    (12) statement -> RETURN expr_return_OPT SEMICOLON .

    FUNCTION        reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DO              reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FOR             reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    BREAK           reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    CONTINUE        reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    GLOBAL          reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    INCREMENT       reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DECREMENT       reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    LPAREN          reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    EXIT            reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DIE             reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    TRUE            reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FALSE           reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    IF              reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FOREACH         reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    PLUS            reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    MINUS           reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ID              reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DOLAR           reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    VARIABLE        reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    RKEY            reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ELSEIF          reduce using rule 12 (statement -> RETURN expr_return_OPT SEMICOLON .)


state 145

    (13) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 182


state 146

    (18) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (15) global_var -> . VARIABLE
    (16) global_var -> . DOLAR VARIABLE
    (17) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 91
    DOLAR           shift and go to state 92

    global_var                     shift and go to state 183

state 147

    (16) global_var -> DOLAR VARIABLE .

    COLON           reduce using rule 16 (global_var -> DOLAR VARIABLE .)
    SEMICOLON       reduce using rule 16 (global_var -> DOLAR VARIABLE .)


state 148

    (17) global_var -> DOLAR LKEY . expr RKEY
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 184
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 149

    (76) expr -> variable LBRACKET expr . RBRACKET
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    RBRACKET        shift and go to state 185
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 150

    (81) expr -> variable assign_operator expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 81 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 81 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 81 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 81 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 81 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 81 (expr -> variable assign_operator expr .)
    AS              reduce using rule 81 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 81 (expr -> variable assign_operator expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

  ! INTE_DOT        [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! PLUS            [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! DIVIDE          [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! PERCENT         [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! TIMES           [ reduce using rule 81 (expr -> variable assign_operator expr .) ]
  ! MINUS           [ reduce using rule 81 (expr -> variable assign_operator expr .) ]

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 151

    (82) expr -> variable assign_operator AMPERSAND . expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 21
    expr                           shift and go to state 186
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 152

    (111) exit_expr -> LPAREN expr_OPT . RPAREN

    RPAREN          shift and go to state 187


state 153

    (87) expr -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 188


state 154

    (141) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (187) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> .

    COLON           shift and go to state 190
    RPAREN          reduce using rule 188 (array_pair_list_ARR_PAIR -> .)

    array_pair_list_ARR_PAIR       shift and go to state 189

state 155

    (143) array_pair -> expr . array_pair_ATTR_EXPR_OPT
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (191) array_pair_EXPR_ATTR_OPT -> expr . ATTR_ASSOC
    (189) array_pair_ATTR_EXPR_OPT -> . ATTR_ASSOC expr
    (190) array_pair_ATTR_EXPR_OPT -> .
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    INTE_DOT        shift and go to state 61
    ATTR_ASSOC      shift and go to state 192
    COLON           reduce using rule 190 (array_pair_ATTR_EXPR_OPT -> .)
    RPAREN          reduce using rule 190 (array_pair_ATTR_EXPR_OPT -> .)
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    array_pair_ATTR_EXPR_OPT       shift and go to state 191
    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 156

    (144) array_pair -> array_pair_EXPR_ATTR_OPT . AMPERSAND variable

    AMPERSAND       shift and go to state 193


state 157

    (23) statement_if -> IF expr_paren statement_BLOCK_OPT .

    ELSEIF          reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ELSE            reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 23 (statement_if -> IF expr_paren statement_BLOCK_OPT .)


state 158

    (28) statement_foreach -> FOREACH LPAREN foreach_first_param . AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT

    AS              shift and go to state 194


state 159

    (29) foreach_first_param -> variable .
    (73) expr -> variable . INCREMENT
    (75) expr -> variable . DECREMENT
    (76) expr -> variable . LBRACKET expr RBRACKET
    (81) expr -> variable . assign_operator expr
    (82) expr -> variable . assign_operator AMPERSAND expr
    (89) expr -> variable .
    (58) assign_operator -> . ADD_ASSIGN
    (59) assign_operator -> . SUB_ASSIGN
    (60) assign_operator -> . MOD_ASSIGN
    (61) assign_operator -> . PLUS_ASSIGN
    (62) assign_operator -> . DIVIDE_ASSIGN
    (63) assign_operator -> . ASSIGN

  ! reduce/reduce conflict for AS resolved using rule 29 (foreach_first_param -> variable .)
    AS              reduce using rule 29 (foreach_first_param -> variable .)
    INCREMENT       shift and go to state 95
    DECREMENT       shift and go to state 96
    LBRACKET        shift and go to state 97
    INTE_DOT        reduce using rule 89 (expr -> variable .)
    EQUALS          reduce using rule 89 (expr -> variable .)
    GREAT_THAN      reduce using rule 89 (expr -> variable .)
    LESS_THAN       reduce using rule 89 (expr -> variable .)
    LESS_EQUAL      reduce using rule 89 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 89 (expr -> variable .)
    NOT_EQUAL       reduce using rule 89 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 89 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 89 (expr -> variable .)
    PLUS            reduce using rule 89 (expr -> variable .)
    DIVIDE          reduce using rule 89 (expr -> variable .)
    PERCENT         reduce using rule 89 (expr -> variable .)
    TIMES           reduce using rule 89 (expr -> variable .)
    MINUS           reduce using rule 89 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 99
    SUB_ASSIGN      shift and go to state 100
    MOD_ASSIGN      shift and go to state 101
    PLUS_ASSIGN     shift and go to state 102
    DIVIDE_ASSIGN   shift and go to state 103
    ASSIGN          shift and go to state 104

  ! AS              [ reduce using rule 89 (expr -> variable .) ]

    assign_operator                shift and go to state 98

state 160

    (30) foreach_first_param -> expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    AS              reduce using rule 30 (foreach_first_param -> expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 161

    (113) variable -> function_call .
    (88) expr -> function_call .

  ! reduce/reduce conflict for INTE_DOT resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for PERCENT resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 88 (expr -> function_call .)
  ! reduce/reduce conflict for AS resolved using rule 88 (expr -> function_call .)
    INCREMENT       reduce using rule 113 (variable -> function_call .)
    DECREMENT       reduce using rule 113 (variable -> function_call .)
    LBRACKET        reduce using rule 113 (variable -> function_call .)
    ADD_ASSIGN      reduce using rule 113 (variable -> function_call .)
    SUB_ASSIGN      reduce using rule 113 (variable -> function_call .)
    MOD_ASSIGN      reduce using rule 113 (variable -> function_call .)
    PLUS_ASSIGN     reduce using rule 113 (variable -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 113 (variable -> function_call .)
    ASSIGN          reduce using rule 113 (variable -> function_call .)
    INTE_DOT        reduce using rule 88 (expr -> function_call .)
    EQUALS          reduce using rule 88 (expr -> function_call .)
    GREAT_THAN      reduce using rule 88 (expr -> function_call .)
    LESS_THAN       reduce using rule 88 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 88 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 88 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 88 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 88 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 88 (expr -> function_call .)
    PLUS            reduce using rule 88 (expr -> function_call .)
    DIVIDE          reduce using rule 88 (expr -> function_call .)
    PERCENT         reduce using rule 88 (expr -> function_call .)
    TIMES           reduce using rule 88 (expr -> function_call .)
    MINUS           reduce using rule 88 (expr -> function_call .)
    AS              reduce using rule 88 (expr -> function_call .)

  ! AS              [ reduce using rule 113 (variable -> function_call .) ]
  ! INTE_DOT        [ reduce using rule 113 (variable -> function_call .) ]
  ! EQUALS          [ reduce using rule 113 (variable -> function_call .) ]
  ! GREAT_THAN      [ reduce using rule 113 (variable -> function_call .) ]
  ! LESS_THAN       [ reduce using rule 113 (variable -> function_call .) ]
  ! LESS_EQUAL      [ reduce using rule 113 (variable -> function_call .) ]
  ! GREAT_EQUAL     [ reduce using rule 113 (variable -> function_call .) ]
  ! NOT_EQUAL       [ reduce using rule 113 (variable -> function_call .) ]
  ! LEFT_LOGICAL    [ reduce using rule 113 (variable -> function_call .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 113 (variable -> function_call .) ]
  ! PLUS            [ reduce using rule 113 (variable -> function_call .) ]
  ! DIVIDE          [ reduce using rule 113 (variable -> function_call .) ]
  ! PERCENT         [ reduce using rule 113 (variable -> function_call .) ]
  ! TIMES           [ reduce using rule 113 (variable -> function_call .) ]
  ! MINUS           [ reduce using rule 113 (variable -> function_call .) ]


state 162

    (173) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 173 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 163

    (119) selector -> LBRACKET selector_EXPR . RBRACKET

    RBRACKET        shift and go to state 195


state 164

    (177) selector_EXPR -> expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    RBRACKET        reduce using rule 177 (selector_EXPR -> expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 165

    (118) compound_variable -> DOLAR LKEY expr . RKEY
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 196
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 166

    (120) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (121) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (122) parameter_list -> .
    (123) parameter -> . parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (124) parameter_type -> . INT_TYPE
    (125) parameter_type -> . BOOLEAN_TYPE
    (126) parameter_type -> . STRING_TYPE
    (127) parameter_type -> . FLOAT_TYPE
    (128) parameter_type -> . ARRAY_TYPE
    (129) parameter_type -> . BOOL_TYPE
    (130) parameter_type -> . REAL_TYPE
    (131) parameter_type -> . DOUBLE_TYPE
    (132) parameter_type -> .

    RPAREN          reduce using rule 122 (parameter_list -> .)
    INT_TYPE        shift and go to state 200
    BOOLEAN_TYPE    shift and go to state 201
    STRING_TYPE     shift and go to state 202
    FLOAT_TYPE      shift and go to state 203
    ARRAY_TYPE      shift and go to state 204
    BOOL_TYPE       shift and go to state 205
    REAL_TYPE       shift and go to state 206
    DOUBLE_TYPE     shift and go to state 207
    AMPERSAND       reduce using rule 132 (parameter_type -> .)
    VARIABLE        reduce using rule 132 (parameter_type -> .)

    parameter_list                 shift and go to state 197
    parameter                      shift and go to state 198
    parameter_type                 shift and go to state 199

state 167

    (33) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INCREMENT       reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DECREMENT       reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ADD_ASSIGN      reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    SUB_ASSIGN      reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MOD_ASSIGN      reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS_ASSIGN     reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ASSIGN          reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 33 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 168

    (35) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 35 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 169

    (159) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (37) function_call_parameter -> . variable
    (38) function_call_parameter -> . AMPERSAND VARIABLE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 126
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter        shift and go to state 208
    variable                       shift and go to state 125
    base_variable                  shift and go to state 35
    function_call                  shift and go to state 94
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 170

    (38) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 38 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 38 (function_call_parameter -> AMPERSAND VARIABLE .)


state 171

    (84) expr -> LPAREN type_cast_operator RPAREN expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

  ! INTE_DOT        [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PLUS            [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! TIMES           [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! MINUS           [ reduce using rule 84 (expr -> LPAREN type_cast_operator RPAREN expr .) ]

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 172

    (79) expr -> expr INTE_DOT expr DDOT . expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 209
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 173

    (26) statement_else -> ELSE statement_BLOCK_OPT .

    ELSE            reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    PLUS            reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 26 (statement_else -> ELSE statement_BLOCK_OPT .)


state 174

    (24) statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .

    ELSE            reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 24 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)


state 175

    (20) expr_paren -> LPAREN expr RPAREN .

    LKEY            reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    DO              reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    FOR             reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    DIE             reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    IF              reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    EXC_DOT         reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    ID              reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 20 (expr_paren -> LPAREN expr RPAREN .)


state 176

    (7) statement -> DO statement_BLOCK_OPT WHILE expr_paren . SEMICOLON

    SEMICOLON       shift and go to state 210


state 177

    (154) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PLUS            reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 154 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 178

    (147) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 147 (statement_MUL -> statement statement_MUL .)


state 179

    (8) statement -> FOR LPAREN for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (31) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (32) for_expr_OPT -> .
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 32 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 211
    expr                           shift and go to state 141
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 180

    (31) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 31 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 31 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 181

    (151) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 212
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 182

    (13) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOREACH         reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXC_DOT         reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    PLUS            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    MINUS           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 183

    (18) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (18) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (19) statement_COLON_GLOBAL -> .

    COLON           shift and go to state 146
    SEMICOLON       reduce using rule 19 (statement_COLON_GLOBAL -> .)

    statement_COLON_GLOBAL         shift and go to state 213

state 184

    (17) global_var -> DOLAR LKEY expr . RKEY
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 214
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 185

    (76) expr -> variable LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    COLON           reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    AS              reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 76 (expr -> variable LBRACKET expr RBRACKET .)


state 186

    (82) expr -> variable assign_operator AMPERSAND expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

  ! INTE_DOT        [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PLUS            [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! DIVIDE          [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PERCENT         [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 82 (expr -> variable assign_operator AMPERSAND expr .) ]

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 187

    (111) exit_expr -> LPAREN expr_OPT RPAREN .

    SEMICOLON       reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    INTE_DOT        reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    EQUALS          reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    GREAT_THAN      reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LESS_THAN       reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LESS_EQUAL      reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    GREAT_EQUAL     reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    NOT_EQUAL       reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LEFT_LOGICAL    reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RIGHT_LOGICAL   reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    PLUS            reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    DIVIDE          reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    PERCENT         reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    TIMES           reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    MINUS           reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RPAREN          reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    DDOT            reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    COLON           reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RBRACKET        reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    ATTR_ASSOC      reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    AS              reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RKEY            reduce using rule 111 (exit_expr -> LPAREN expr_OPT RPAREN .)


state 188

    (87) expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 87 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 189

    (141) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 141 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 190

    (187) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (143) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (144) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (191) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (192) array_pair_EXPR_ATTR_OPT -> .
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    AMPERSAND       reduce using rule 192 (array_pair_EXPR_ATTR_OPT -> .)
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    array_pair                     shift and go to state 215
    expr                           shift and go to state 155
    array_pair_EXPR_ATTR_OPT       shift and go to state 156
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 191

    (143) array_pair -> expr array_pair_ATTR_EXPR_OPT .

    COLON           reduce using rule 143 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)
    RPAREN          reduce using rule 143 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)


state 192

    (191) array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .
    (189) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC . expr
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       reduce using rule 191 (array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 216
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 193

    (144) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND . variable
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 217
    base_variable                  shift and go to state 35
    function_call                  shift and go to state 94
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 194

    (28) statement_foreach -> FOREACH LPAREN foreach_first_param AS . ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (14) ampersand_variable -> . AMPERSAND_OPT VARIABLE
    (155) AMPERSAND_OPT -> . AMPERSAND
    (156) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 47
    VARIABLE        reduce using rule 156 (AMPERSAND_OPT -> .)

    ampersand_variable             shift and go to state 218
    AMPERSAND_OPT                  shift and go to state 219

state 195

    (119) selector -> LBRACKET selector_EXPR RBRACKET .

    LBRACKET        reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INCREMENT       reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DECREMENT       reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ADD_ASSIGN      reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SUB_ASSIGN      reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MOD_ASSIGN      reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS_ASSIGN     reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ASSIGN          reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SEMICOLON       reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INTE_DOT        reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    EQUALS          reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_THAN      reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_THAN       reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_EQUAL      reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_EQUAL     reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    NOT_EQUAL       reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LEFT_LOGICAL    reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS            reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE          reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PERCENT         reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    TIMES           reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MINUS           reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RPAREN          reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DDOT            reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    COLON           reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RBRACKET        reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ATTR_ASSOC      reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    AS              reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RKEY            reduce using rule 119 (selector -> LBRACKET selector_EXPR RBRACKET .)


state 196

    (118) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    AS              reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 118 (compound_variable -> DOLAR LKEY expr RKEY .)


state 197

    (120) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 220


state 198

    (121) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (169) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (170) parameter_list_COLON_PARAMETER -> .

    COLON           shift and go to state 222
    RPAREN          reduce using rule 170 (parameter_list_COLON_PARAMETER -> .)

    parameter_list_COLON_PARAMETER shift and go to state 221

state 199

    (123) parameter -> parameter_type . AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (155) AMPERSAND_OPT -> . AMPERSAND
    (156) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 47
    VARIABLE        reduce using rule 156 (AMPERSAND_OPT -> .)

    AMPERSAND_OPT                  shift and go to state 223

state 200

    (124) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 124 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 124 (parameter_type -> INT_TYPE .)


state 201

    (125) parameter_type -> BOOLEAN_TYPE .

    AMPERSAND       reduce using rule 125 (parameter_type -> BOOLEAN_TYPE .)
    VARIABLE        reduce using rule 125 (parameter_type -> BOOLEAN_TYPE .)


state 202

    (126) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 126 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 126 (parameter_type -> STRING_TYPE .)


state 203

    (127) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 127 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 127 (parameter_type -> FLOAT_TYPE .)


state 204

    (128) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 128 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 128 (parameter_type -> ARRAY_TYPE .)


state 205

    (129) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 129 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 129 (parameter_type -> BOOL_TYPE .)


state 206

    (130) parameter_type -> REAL_TYPE .

    AMPERSAND       reduce using rule 130 (parameter_type -> REAL_TYPE .)
    VARIABLE        reduce using rule 130 (parameter_type -> REAL_TYPE .)


state 207

    (131) parameter_type -> DOUBLE_TYPE .

    AMPERSAND       reduce using rule 131 (parameter_type -> DOUBLE_TYPE .)
    VARIABLE        reduce using rule 131 (parameter_type -> DOUBLE_TYPE .)


state 208

    (159) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (159) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (160) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 169
    RPAREN          reduce using rule 160 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 224

state 209

    (79) expr -> expr INTE_DOT expr DDOT expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .)
    AS              reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

  ! INTE_DOT        [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PLUS            [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 79 (expr -> expr INTE_DOT expr DDOT expr .) ]

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 210

    (7) statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .

    FUNCTION        reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DO              reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FOR             reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    CONTINUE        reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    GLOBAL          reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    INCREMENT       reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DECREMENT       reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    LPAREN          reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    EXIT            reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DIE             reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ARRAY_TYPE      reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    NUMBER_REAL     reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    TRUE            reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FALSE           reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    IF              reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FOREACH         reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    EXC_DOT         reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    PLUS            reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    MINUS           reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ID              reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DOLAR           reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    VARIABLE        reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    END_PROGRAM     reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    RKEY            reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ELSEIF          reduce using rule 7 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)


state 211

    (8) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    SEMICOLON       shift and go to state 225


state 212

    (151) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (151) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (152) for_expr_COLON_EXPR -> .
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    INTE_DOT        shift and go to state 61
    COLON           shift and go to state 181
    SEMICOLON       reduce using rule 152 (for_expr_COLON_EXPR -> .)
    RPAREN          reduce using rule 152 (for_expr_COLON_EXPR -> .)
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    for_expr_COLON_EXPR            shift and go to state 226
    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 213

    (18) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 18 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 214

    (17) global_var -> DOLAR LKEY expr RKEY .

    COLON           reduce using rule 17 (global_var -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 17 (global_var -> DOLAR LKEY expr RKEY .)


state 215

    (187) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (187) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> .

    COLON           shift and go to state 190
    RPAREN          reduce using rule 188 (array_pair_list_ARR_PAIR -> .)

    array_pair_list_ARR_PAIR       shift and go to state 227

state 216

    (189) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .
    (79) expr -> expr . INTE_DOT expr DDOT expr
    (80) expr -> expr . comparission_operator expr
    (83) expr -> expr . arithmetic_operator expr
    (64) comparission_operator -> . EQUALS
    (65) comparission_operator -> . GREAT_THAN
    (66) comparission_operator -> . LESS_THAN
    (67) comparission_operator -> . LESS_EQUAL
    (68) comparission_operator -> . GREAT_EQUAL
    (69) comparission_operator -> . NOT_EQUAL
    (70) comparission_operator -> . LEFT_LOGICAL
    (71) comparission_operator -> . RIGHT_LOGICAL
    (53) arithmetic_operator -> . PLUS
    (54) arithmetic_operator -> . DIVIDE
    (55) arithmetic_operator -> . PERCENT
    (56) arithmetic_operator -> . TIMES
    (57) arithmetic_operator -> . MINUS

    COLON           reduce using rule 189 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    RPAREN          reduce using rule 189 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    INTE_DOT        shift and go to state 61
    EQUALS          shift and go to state 64
    GREAT_THAN      shift and go to state 65
    LESS_THAN       shift and go to state 66
    LESS_EQUAL      shift and go to state 67
    GREAT_EQUAL     shift and go to state 68
    NOT_EQUAL       shift and go to state 69
    LEFT_LOGICAL    shift and go to state 70
    RIGHT_LOGICAL   shift and go to state 71
    PLUS            shift and go to state 72
    DIVIDE          shift and go to state 73
    PERCENT         shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76

    comparission_operator          shift and go to state 62
    arithmetic_operator            shift and go to state 63

state 217

    (144) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .

    COLON           reduce using rule 144 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)
    RPAREN          reduce using rule 144 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)


state 218

    (28) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable . statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (157) statement_attr_variable_OPT -> . ATTR_ASSOC ampersand_variable
    (158) statement_attr_variable_OPT -> .

    ATTR_ASSOC      shift and go to state 229
    RPAREN          reduce using rule 158 (statement_attr_variable_OPT -> .)

    statement_attr_variable_OPT    shift and go to state 228

state 219

    (14) ampersand_variable -> AMPERSAND_OPT . VARIABLE

    VARIABLE        shift and go to state 230


state 220

    (120) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 231


state 221

    (121) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 121 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 222

    (169) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (123) parameter -> . parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (124) parameter_type -> . INT_TYPE
    (125) parameter_type -> . BOOLEAN_TYPE
    (126) parameter_type -> . STRING_TYPE
    (127) parameter_type -> . FLOAT_TYPE
    (128) parameter_type -> . ARRAY_TYPE
    (129) parameter_type -> . BOOL_TYPE
    (130) parameter_type -> . REAL_TYPE
    (131) parameter_type -> . DOUBLE_TYPE
    (132) parameter_type -> .

    INT_TYPE        shift and go to state 200
    BOOLEAN_TYPE    shift and go to state 201
    STRING_TYPE     shift and go to state 202
    FLOAT_TYPE      shift and go to state 203
    ARRAY_TYPE      shift and go to state 204
    BOOL_TYPE       shift and go to state 205
    REAL_TYPE       shift and go to state 206
    DOUBLE_TYPE     shift and go to state 207
    AMPERSAND       reduce using rule 132 (parameter_type -> .)
    VARIABLE        reduce using rule 132 (parameter_type -> .)

    parameter                      shift and go to state 232
    parameter_type                 shift and go to state 199

state 223

    (123) parameter -> parameter_type AMPERSAND_OPT . VARIABLE parameter_ASSIGN_STATIC_OPT

    VARIABLE        shift and go to state 233


state 224

    (159) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 159 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 225

    (8) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT RPAREN statement_BLOCK_OPT
    (31) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (32) for_expr_OPT -> .
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 32 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 234
    expr                           shift and go to state 141
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 226

    (151) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 151 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 151 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 227

    (187) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 187 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 228

    (28) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 235


state 229

    (157) statement_attr_variable_OPT -> ATTR_ASSOC . ampersand_variable
    (14) ampersand_variable -> . AMPERSAND_OPT VARIABLE
    (155) AMPERSAND_OPT -> . AMPERSAND
    (156) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 47
    VARIABLE        reduce using rule 156 (AMPERSAND_OPT -> .)

    ampersand_variable             shift and go to state 236
    AMPERSAND_OPT                  shift and go to state 219

state 230

    (14) ampersand_variable -> AMPERSAND_OPT VARIABLE .

    ATTR_ASSOC      reduce using rule 14 (ampersand_variable -> AMPERSAND_OPT VARIABLE .)
    RPAREN          reduce using rule 14 (ampersand_variable -> AMPERSAND_OPT VARIABLE .)


state 231

    (120) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (149) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (150) inner_statement_MUL -> .
    (2) inner_statement -> . function_declaration_statement
    (3) inner_statement -> . statement
    (120) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 150 (inner_statement_MUL -> .)
    FUNCTION        shift and go to state 7
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 237
    inner_statement                shift and go to state 238
    function_declaration_statement shift and go to state 5
    statement                      shift and go to state 6
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 232

    (169) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (169) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (170) parameter_list_COLON_PARAMETER -> .

    COLON           shift and go to state 222
    RPAREN          reduce using rule 170 (parameter_list_COLON_PARAMETER -> .)

    parameter_list_COLON_PARAMETER shift and go to state 239

state 233

    (123) parameter -> parameter_type AMPERSAND_OPT VARIABLE . parameter_ASSIGN_STATIC_OPT
    (171) parameter_ASSIGN_STATIC_OPT -> . ASSIGN static_scalar
    (172) parameter_ASSIGN_STATIC_OPT -> .

    ASSIGN          shift and go to state 241
    COLON           reduce using rule 172 (parameter_ASSIGN_STATIC_OPT -> .)
    RPAREN          reduce using rule 172 (parameter_ASSIGN_STATIC_OPT -> .)

    parameter_ASSIGN_STATIC_OPT    shift and go to state 240

state 234

    (8) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 242


state 235

    (28) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN . statement_BLOCK_OPT
    (153) statement_BLOCK_OPT -> . statement
    (154) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 83
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 243
    statement                      shift and go to state 82
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 236

    (157) statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable .

    RPAREN          reduce using rule 157 (statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable .)


state 237

    (120) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 244


state 238

    (149) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (149) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (150) inner_statement_MUL -> .
    (2) inner_statement -> . function_declaration_statement
    (3) inner_statement -> . statement
    (120) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 150 (inner_statement_MUL -> .)
    FUNCTION        shift and go to state 7
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 238
    inner_statement_MUL            shift and go to state 245
    function_declaration_statement shift and go to state 5
    statement                      shift and go to state 6
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 239

    (169) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 169 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 240

    (123) parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .

    COLON           reduce using rule 123 (parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .)
    RPAREN          reduce using rule 123 (parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .)


state 241

    (171) parameter_ASSIGN_STATIC_OPT -> ASSIGN . static_scalar
    (133) static_scalar -> . common_scalar
    (134) static_scalar -> . PLUS static_scalar
    (135) static_scalar -> . MINUS static_scalar
    (136) common_scalar -> . NUMBER_REAL
    (137) common_scalar -> . NUMBER_INTEGER
    (138) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 248
    MINUS           shift and go to state 249
    NUMBER_REAL     shift and go to state 250
    NUMBER_INTEGER  shift and go to state 251
    CONSTANT_ENCAPSED_STRING shift and go to state 252

    static_scalar                  shift and go to state 246
    common_scalar                  shift and go to state 247

state 242

    (8) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN . statement_BLOCK_OPT
    (153) statement_BLOCK_OPT -> . statement
    (154) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (4) statement -> . expr SEMICOLON
    (5) statement -> . statement_if statement_elseif statement_else
    (6) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (7) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (8) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (9) statement -> . statement_foreach
    (10) statement -> . BREAK expr_OPT SEMICOLON
    (11) statement -> . CONTINUE expr_OPT SEMICOLON
    (12) statement -> . RETURN expr_return_OPT SEMICOLON
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (72) expr -> . INCREMENT variable
    (73) expr -> . variable INCREMENT
    (74) expr -> . DECREMENT variable
    (75) expr -> . variable DECREMENT
    (76) expr -> . variable LBRACKET expr RBRACKET
    (77) expr -> . LPAREN expr RPAREN
    (78) expr -> . unary_operator expr
    (79) expr -> . expr INTE_DOT expr DDOT expr
    (80) expr -> . expr comparission_operator expr
    (81) expr -> . variable assign_operator expr
    (82) expr -> . variable assign_operator AMPERSAND expr
    (83) expr -> . expr arithmetic_operator expr
    (84) expr -> . LPAREN type_cast_operator RPAREN expr
    (85) expr -> . EXIT expr_EXIT
    (86) expr -> . DIE expr_EXIT
    (87) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (88) expr -> . function_call
    (89) expr -> . variable
    (90) expr -> . NUMBER_REAL
    (91) expr -> . NUMBER_INTEGER
    (92) expr -> . CONSTANT_ENCAPSED_STRING
    (93) expr -> . TRUE
    (94) expr -> . FALSE
    (23) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (28) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (112) variable -> . base_variable
    (113) variable -> . function_call
    (41) unary_operator -> . EXC_DOT
    (42) unary_operator -> . PLUS
    (43) unary_operator -> . MINUS
    (33) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (34) function_call -> . base_variable
    (114) base_variable -> . reference_variable
    (115) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (116) reference_variable -> . compound_variable reference_variable_SELECTOR
    (175) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (176) simple_indirect_reference_DOLAR -> .
    (117) compound_variable -> . VARIABLE
    (118) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 83
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    FOR             shift and go to state 14
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 9
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    FOREACH         shift and go to state 34
    EXC_DOT         shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    ID              shift and go to state 8
    DOLAR           shift and go to state 42
    VARIABLE        shift and go to state 43

  ! VARIABLE        [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 176 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 253
    statement                      shift and go to state 82
    expr                           shift and go to state 10
    statement_if                   shift and go to state 11
    statement_foreach              shift and go to state 15
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 35
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 41

state 243

    (28) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 28 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)


state 244

    (120) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 120 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 245

    (149) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 149 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 246

    (171) parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .

    COLON           reduce using rule 171 (parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .)
    RPAREN          reduce using rule 171 (parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .)


state 247

    (133) static_scalar -> common_scalar .

    COLON           reduce using rule 133 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 133 (static_scalar -> common_scalar .)


state 248

    (134) static_scalar -> PLUS . static_scalar
    (133) static_scalar -> . common_scalar
    (134) static_scalar -> . PLUS static_scalar
    (135) static_scalar -> . MINUS static_scalar
    (136) common_scalar -> . NUMBER_REAL
    (137) common_scalar -> . NUMBER_INTEGER
    (138) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 248
    MINUS           shift and go to state 249
    NUMBER_REAL     shift and go to state 250
    NUMBER_INTEGER  shift and go to state 251
    CONSTANT_ENCAPSED_STRING shift and go to state 252

    static_scalar                  shift and go to state 254
    common_scalar                  shift and go to state 247

state 249

    (135) static_scalar -> MINUS . static_scalar
    (133) static_scalar -> . common_scalar
    (134) static_scalar -> . PLUS static_scalar
    (135) static_scalar -> . MINUS static_scalar
    (136) common_scalar -> . NUMBER_REAL
    (137) common_scalar -> . NUMBER_INTEGER
    (138) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 248
    MINUS           shift and go to state 249
    NUMBER_REAL     shift and go to state 250
    NUMBER_INTEGER  shift and go to state 251
    CONSTANT_ENCAPSED_STRING shift and go to state 252

    static_scalar                  shift and go to state 255
    common_scalar                  shift and go to state 247

state 250

    (136) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 136 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 136 (common_scalar -> NUMBER_REAL .)


state 251

    (137) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 137 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 137 (common_scalar -> NUMBER_INTEGER .)


state 252

    (138) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 138 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 138 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 253

    (8) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 8 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)


state 254

    (134) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 134 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 134 (static_scalar -> PLUS static_scalar .)


state 255

    (135) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 135 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 135 (static_scalar -> MINUS static_scalar .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOLAR in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 4 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 4 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 9 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 9 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 11 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 13 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 13 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 16 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 16 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 17 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 17 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 18 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 18 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 20 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 20 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 22 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 22 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 23 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 23 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 41 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 42 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 48 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 48 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 61 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 61 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 62 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 62 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 63 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 63 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 77 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 79 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 79 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 80 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 80 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 83 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 83 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 84 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 84 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 97 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 97 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 98 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 98 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 106 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 106 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 109 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 109 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 111 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 111 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 112 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 112 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 113 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 113 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 118 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 118 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 119 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 121 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 121 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 128 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 128 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 130 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 130 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 130 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 130 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 130 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 130 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 131 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 131 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 131 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 131 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 131 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 131 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 131 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 133 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 133 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 134 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 134 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 139 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 139 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 148 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 148 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 150 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 150 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 150 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 150 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 150 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 150 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 150 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 150 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 150 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 150 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 150 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 151 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 151 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 169 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 169 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 171 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 171 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 171 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 171 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 171 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 171 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 171 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 171 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 172 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 172 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 179 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 179 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 181 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 181 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 186 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 186 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 186 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 186 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 186 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 186 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 186 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 186 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 186 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 186 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 186 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 186 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 190 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 190 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 192 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 192 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 193 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 193 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 209 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 209 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 209 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 209 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 209 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 209 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 209 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 209 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 209 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 209 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 209 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 209 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 209 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 209 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 225 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 225 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 231 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 231 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 235 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 235 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 238 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 238 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 242 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 242 resolved as shift
WARNING: reduce/reduce conflict in state 27 resolved using rule (expr -> function_call)
WARNING: rejected rule (variable -> function_call) in state 27
WARNING: reduce/reduce conflict in state 35 resolved using rule (function_call -> base_variable)
WARNING: rejected rule (variable -> base_variable) in state 35
WARNING: reduce/reduce conflict in state 159 resolved using rule (foreach_first_param -> variable)
WARNING: rejected rule (expr -> variable) in state 159
WARNING: reduce/reduce conflict in state 161 resolved using rule (expr -> function_call)
WARNING: rejected rule (variable -> function_call) in state 161
WARNING: Rule (variable -> base_variable) is never reduced

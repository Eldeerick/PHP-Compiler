
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSADD_ASSIGN AMPERSAND AND APOSTROFE ARRAY_TYPE ARROBA AS ASPAS ASSIGN ATTR_ASSOC BEGIN_PROGRAM BOOLEAN_TYPE BOOL_TYPE BREAK CASE CLONE COLON COMMENT_MULTI COMMENT_SINGLE CONCATENATE CONSTANT_ENCAPSED_STRING CONTINUE CRASE DDOT DECLARE DECREMENT DIE DIVIDE DIVIDE_ASSIGN DO DOLAR DOUBLE_TYPE ELSE ELSEIF ENDDECLARE END_PROGRAM EQUALS EXC_DOT EXIT FALSE FLOAT_TYPE FOR FOREACH FUNCTION GLOBAL GREAT_EQUAL GREAT_THAN ID IDENTATION IF INCREMENT INTE_DOT INT_TYPE LBRACKET LEFT_LOGICAL LESS_EQUAL LESS_THAN LIST LKEY LPAREN MINUS MOD_ASSIGN NOT_EQUAL NUMBER_INTEGER NUMBER_REAL OR PERCENT PLUS PLUS_ASSIGN RBRACKET REAL_TYPE RETURN RIGHT_LOGICAL RKEY RPAREN SEMICOLON STRING STRING_TYPE SUB_ASSIGN TIMES TRUE UNSET VAR VARIABLE WHILE\n  main : BEGIN_PROGRAM main_INNER END_PROGRAM \n  | BEGIN_PROGRAM END_PROGRAM\n  \n  main_INNER : inner_statement main_INNER\n    | inner_statement\n  \n  inner_statement : function_declaration_statement\n    | statement\n  \n  inner_statement_MUL : inner_statement inner_statement_MUL\n    | inner_statement\n  \n  expr : expr PLUS expr\n    | expr MINUS expr \n    | expr DIVIDE expr\n    | expr PERCENT expr\n    | expr TIMES expr\n    | expr EQUALS expr\n    | MINUS expr %prec UMINUS \n    | expr NOT_EQUAL\n    | expr GREAT_THAN expr\n    | expr GREAT_EQUAL expr\n    | expr LESS_THAN expr\n    | expr LESS_EQUAL expr\n    | expr AND expr\n    | expr OR expr\n    | INCREMENT variable\n    | variable INCREMENT\n    | DECREMENT variable\n    | variable DECREMENT\n    | variable\n    | LPAREN expr RPAREN\n    | ARRAY_TYPE array_declaration\n    | function_call\n    | scalar\n    | TRUE\n    | FALSE\n    | INTE_DOT expr DDOT expr\n    | variable assign_operator expr\n    | variable assign_operator AMPERSAND expr\n    | LPAREN type_cast_operator RPAREN expr\n  \n  exit_statement : EXIT exit_expr\n    | EXIT\n  \n  die_statement : DIE exit_expr\n    | DIE\n  \n  exit_expr : LPAREN expr RPAREN\n    | LPAREN RPAREN\n  \n  array_declaration : LPAREN array_pair_list RPAREN\n    | LPAREN RPAREN\n  \n  statement : expr SEMICOLON\n    | if_statement \n    | while_statement\n    | do_statement\n    | for_statement\n    | foreach_statement\n    | break_statement\n    | continue_statement \n    | return_statement\n    | exit_statement SEMICOLON\n    | die_statement SEMICOLON\n    | global_statement SEMICOLON\n  \n  S : S1 \n    | IF expr_parentheses S3\n  S1 : IF expr_parentheses S2 ELSE S1\n    |\n  S2 : ELSEIF expr_parentheses S2\n    | S1\n  S3 : S\n    | S1 ELSE S3\n  \n  if_statement : statement_if\n  | statement_if statement_else\n  | statement_if statement_elseif\n  | statement_if statement_elseif statement_else\n   \n  statement_if : IF expr_parentheses statement_BLOCK_OPT statement_if\n   | IF expr_parentheses statement_BLOCK_OPT\n  \n  statement_elseif : ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif\n   | ELSEIF expr_parentheses statement_BLOCK_OPT\n  \n  statement_else : ELSE statement_BLOCK_OPT\n  \n  global_statement : GLOBAL global_var statement_COLON_GLOBAL \n    | GLOBAL global_var \n  \n  while_statement : WHILE expr_parentheses statement_BLOCK_OPT\n  \n  do_statement : DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON\n  \n  break_statement : BREAK expr SEMICOLON\n    | BREAK SEMICOLON\n  \n  continue_statement : CONTINUE expr SEMICOLON\n    | CONTINUE SEMICOLON\n  \n  return_statement : RETURN expr SEMICOLON \n    | RETURN SEMICOLON \n  \n  for_statement : FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT\n  \n  for_parameters : SEMICOLON SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT\n  | SEMICOLON for_expr_OPT SEMICOLON\n  | SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  | SEMICOLON SEMICOLON for_expr_OPT\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  \n  global_var : VARIABLE\n    | DOLAR VARIABLE\n    | DOLAR LKEY expr RKEY \n  \n  statement_COLON_GLOBAL : COLON global_var statement_COLON_GLOBAL\n    | COLON global_var\n  \n  ampersand_variable : AMPERSAND VARIABLE\n    | VARIABLE\n  \n  expr_parentheses : LPAREN expr RPAREN\n  \n  foreach_statement : FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT\n  | FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT\n  \n  for_expr_OPT : expr for_expr_COLON_EXPR\n  | expr\n  \n  for_expr_COLON_EXPR : COLON expr for_expr_COLON_EXPR\n    | COLON expr\n  \n  function_call : ID LPAREN function_call_parameter_list RPAREN\n    | ID LPAREN RPAREN\n  \n  function_call_parameter_list : function_call_parameter fc_parameter_list_COLON_PARAMETER\n    |  function_call_parameter\n  \n  fc_parameter_list_COLON_PARAMETER : COLON function_call_parameter fc_parameter_list_COLON_PARAMETER\n    | COLON function_call_parameter\n  \n  function_call_parameter : expr\n    | AMPERSAND VARIABLE\n  \n  unary_operator : EXC_DOT\n    | PLUS\n    | MINUS\n  \n    type_cast_operator : INT_TYPE\n      | DOUBLE_TYPE\n      | FLOAT_TYPE\n      | REAL_TYPE\n      | STRING_TYPE \n      | ARRAY_TYPE\n      | BOOLEAN_TYPE\n      | BOOL_TYPE\n      | UNSET\n  \n  assign_operator : ADD_ASSIGN\n    | SUB_ASSIGN\n    | MOD_ASSIGN\n    | PLUS_ASSIGN\n    | DIVIDE_ASSIGN\n    | ASSIGN\n  \n  arithmetic_operator : PLUS\n    | DIVIDE\n    | PERCENT\n    | TIMES\n    | MINUS\n  \n  comparission_operator : EQUALS\n    | GREAT_THAN\n    | LESS_THAN\n    | LESS_EQUAL\n    | GREAT_EQUAL\n    | NOT_EQUAL\n    | LEFT_LOGICAL\n    | RIGHT_LOGICAL\n    | AND\n    | OR\n  \n  scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  variable : VARIABLE reference_variable_SELECTOR\n    | VARIABLE\n  \n  selector : LBRACKET expr RBRACKET \n    | LBRACKET RBRACKET\n  \n  function_declaration_statement : FUNCTION fds_id fds_parameter fds_statements\n  \n  fds_statements : LKEY inner_statement_MUL RKEY\n    | LKEY RKEY\n  \n  fds_id : AMPERSAND ID\n    | ID\n  \n  fds_parameter : LPAREN parameter_list RPAREN\n    | LPAREN RPAREN\n  \n  parameter_list : parameter parameter_list_COLON_PARAMETER \n    | parameter\n   \n  parameter : VARIABLE \n    | parameter_prefix VARIABLE\n    | VARIABLE ASSIGN static_scalar\n    | parameter_prefix VARIABLE ASSIGN static_scalar\n  \n  parameter_prefix : parameter_type AMPERSAND\n    | AMPERSAND\n    | parameter_type\n  \n  parameter_type : INT_TYPE\n    | BOOLEAN_TYPE\n    | STRING_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE\n    | BOOL_TYPE\n    | REAL_TYPE\n    | DOUBLE_TYPE\n  \n  static_scalar : common_scalar \n    | PLUS static_scalar\n    | MINUS static_scalar\n  \n  common_scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  array_pair_list : array_pair array_pair_list_ARR_PAIR \n    | array_pair\n   \n  array_pair : expr\n    | AMPERSAND variable\n    | expr ATTR_ASSOC expr\n    | expr ATTR_ASSOC AMPERSAND variable\n  \n  statement_MUL : statement statement_MUL\n    | statement\n  \n  statement_BLOCK_OPT : statement \n    | LKEY statement_MUL RKEY \n    | LKEY RKEY\n  \n  parameter_list_COLON_PARAMETER : COLON parameter parameter_list_COLON_PARAMETER\n    | COLON parameter\n  \n    reference_variable_SELECTOR : selector reference_variable_SELECTOR\n    | selector\n  \n  array_pair_list_ARR_PAIR : COLON array_pair array_pair_list_ARR_PAIR\n    | COLON array_pair\n  '
    
_lr_action_items = {'BEGIN_PROGRAM':([0,],[2,]),'$end':([1,4,49,],[0,-2,-1,]),'END_PROGRAM':([2,3,5,6,7,10,11,12,13,14,15,16,17,32,50,54,68,69,70,97,98,104,109,111,113,150,151,153,157,164,165,166,181,182,207,210,227,229,240,241,242,254,280,283,],[4,49,-4,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,-3,-46,-55,-56,-57,-67,-68,-194,-80,-82,-84,-69,-74,-77,-196,-79,-81,-83,-71,-156,-73,-195,-70,-158,-72,-78,-85,-157,-102,-103,]),'FUNCTION':([2,5,6,7,10,11,12,13,14,15,16,17,32,54,68,69,70,97,98,104,109,111,113,150,151,153,157,164,165,166,181,182,183,207,210,227,229,230,240,241,242,254,280,283,],[8,8,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,-46,-55,-56,-57,-67,-68,-194,-80,-82,-84,-69,-74,-77,-196,-79,-81,-83,-71,-156,8,-73,-195,-70,-158,8,-72,-78,-85,-157,-102,-103,]),'MINUS':([2,5,6,7,9,10,11,12,13,14,15,16,17,21,23,25,27,28,29,30,31,32,34,37,38,39,43,45,46,47,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,94,95,96,97,98,99,101,102,104,105,106,107,108,109,110,111,112,113,115,120,121,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,157,158,160,162,163,164,165,166,167,172,173,174,175,177,179,181,182,183,199,200,201,203,204,206,207,208,210,212,213,215,217,221,222,223,225,227,229,230,234,238,240,241,242,244,246,247,254,259,260,264,268,271,280,282,283,],[21,21,-5,-6,56,-47,-48,-49,-50,-51,-52,-53,-54,21,-27,21,-30,-31,-32,-33,21,-66,21,21,21,21,-153,-149,-150,-151,-46,21,21,21,21,21,21,-16,21,21,21,21,21,21,-55,-56,-57,-15,-23,-24,-26,21,-128,-129,-130,-131,-132,-133,-25,56,-29,21,56,-67,-68,21,21,21,-194,21,21,21,56,-80,56,-82,56,-84,21,-152,-200,21,21,21,-9,-10,-11,56,-13,56,56,56,56,56,56,56,56,21,-28,21,-45,56,21,-69,-74,21,-77,56,-196,21,21,56,56,-79,-81,-83,56,21,-199,56,-155,-109,56,-71,-156,21,56,56,-44,21,21,56,-73,-101,-195,21,21,21,21,56,-154,-108,21,-70,-158,21,260,56,-72,-78,-85,21,21,56,-157,260,260,260,21,21,-102,21,-103,]),'INCREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,23,25,31,32,34,37,38,39,43,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,120,121,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,173,175,181,182,183,203,204,207,208,210,212,213,215,217,222,225,227,229,230,240,241,242,244,246,254,268,271,280,282,283,],[22,22,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,22,73,22,22,-66,22,22,22,22,-153,-46,22,22,22,22,22,22,22,22,22,22,22,22,-55,-56,-57,22,-128,-129,-130,-131,-132,-133,22,-67,-68,22,22,22,-194,22,22,22,-80,-82,-84,22,-152,-200,22,22,22,22,22,22,-69,-74,22,-77,-196,22,22,-79,-81,-83,22,-199,-155,-71,-156,22,22,22,-73,-101,-195,22,22,22,22,-154,22,-70,-158,22,-72,-78,-85,22,22,-157,22,22,-102,22,-103,]),'DECREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,23,25,31,32,34,37,38,39,43,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,120,121,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,173,175,181,182,183,203,204,207,208,210,212,213,215,217,222,225,227,229,230,240,241,242,244,246,254,268,271,280,282,283,],[24,24,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,24,74,24,24,-66,24,24,24,24,-153,-46,24,24,24,24,24,24,24,24,24,24,24,24,-55,-56,-57,24,-128,-129,-130,-131,-132,-133,24,-67,-68,24,24,24,-194,24,24,24,-80,-82,-84,24,-152,-200,24,24,24,24,24,24,-69,-74,24,-77,-196,24,24,-79,-81,-83,24,-199,-155,-71,-156,24,24,24,-73,-101,-195,24,24,24,24,-154,24,-70,-158,24,-72,-78,-85,24,24,-157,24,24,-102,24,-103,]),'LPAREN':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,26,31,32,33,34,35,36,37,38,39,40,41,44,48,51,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,85,95,97,98,99,100,101,102,104,105,106,107,109,111,113,115,122,123,124,127,141,143,149,150,151,152,153,155,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,240,241,242,244,246,254,268,271,280,282,283,],[25,25,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,25,25,95,25,-66,102,25,106,107,25,25,25,115,115,123,102,126,-160,-46,25,25,25,25,25,25,25,25,25,25,25,25,-55,-56,-57,25,-128,-129,-130,-131,-132,-133,95,25,-67,-68,25,102,25,25,-194,25,25,25,-80,-82,-84,25,25,25,25,-159,25,25,25,-69,-74,25,-77,102,-196,25,25,-79,-81,-83,25,-71,-156,25,25,25,-73,-101,-195,25,25,25,25,25,-70,-158,25,-72,-78,-85,25,25,-157,25,25,-102,25,-103,]),'ARRAY_TYPE':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,31,32,34,37,38,39,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,126,141,143,149,150,151,152,153,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,233,240,241,242,244,246,254,268,271,280,282,283,],[26,26,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,26,85,26,-66,26,26,26,26,-46,26,26,26,26,26,26,26,26,26,26,26,26,-55,-56,-57,26,-128,-129,-130,-131,-132,-133,26,-67,-68,26,26,26,-194,26,26,26,-80,-82,-84,26,26,26,26,195,26,26,26,-69,-74,26,-77,-196,26,26,-79,-81,-83,26,-71,-156,26,26,26,-73,-101,-195,26,26,26,26,26,-70,-158,26,195,-72,-78,-85,26,26,-157,26,26,-102,26,-103,]),'TRUE':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,31,32,34,37,38,39,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,240,241,242,244,246,254,268,271,280,282,283,],[29,29,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,29,29,29,-66,29,29,29,29,-46,29,29,29,29,29,29,29,29,29,29,29,29,-55,-56,-57,29,-128,-129,-130,-131,-132,-133,29,-67,-68,29,29,29,-194,29,29,29,-80,-82,-84,29,29,29,29,29,29,29,-69,-74,29,-77,-196,29,29,-79,-81,-83,29,-71,-156,29,29,29,-73,-101,-195,29,29,29,29,29,-70,-158,29,-72,-78,-85,29,29,-157,29,29,-102,29,-103,]),'FALSE':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,31,32,34,37,38,39,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,240,241,242,244,246,254,268,271,280,282,283,],[30,30,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,30,30,30,-66,30,30,30,30,-46,30,30,30,30,30,30,30,30,30,30,30,30,-55,-56,-57,30,-128,-129,-130,-131,-132,-133,30,-67,-68,30,30,30,-194,30,30,30,-80,-82,-84,30,30,30,30,30,30,30,-69,-74,30,-77,-196,30,30,-79,-81,-83,30,-71,-156,30,30,30,-73,-101,-195,30,30,30,30,30,-70,-158,30,-72,-78,-85,30,30,-157,30,30,-102,30,-103,]),'INTE_DOT':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,31,32,34,37,38,39,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,240,241,242,244,246,254,268,271,280,282,283,],[31,31,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,31,31,31,-66,31,31,31,31,-46,31,31,31,31,31,31,31,31,31,31,31,31,-55,-56,-57,31,-128,-129,-130,-131,-132,-133,31,-67,-68,31,31,31,-194,31,31,31,-80,-82,-84,31,31,31,31,31,31,31,-69,-74,31,-77,-196,31,31,-79,-81,-83,31,-71,-156,31,31,31,-73,-101,-195,31,31,31,31,31,-70,-158,31,-72,-78,-85,31,31,-157,31,31,-102,31,-103,]),'WHILE':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,103,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[33,33,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,33,-46,-55,-56,-57,-67,-68,33,33,155,-194,33,-80,-82,-84,33,-69,-74,33,-77,-196,33,-79,-81,-83,-71,-156,33,-73,-101,-195,33,-70,-158,33,-72,-78,-85,-157,33,-102,33,-103,]),'DO':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[34,34,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,34,-46,-55,-56,-57,-67,-68,34,34,-194,34,-80,-82,-84,34,-69,-74,34,-77,-196,34,-79,-81,-83,-71,-156,34,-73,-101,-195,34,-70,-158,34,-72,-78,-85,-157,34,-102,34,-103,]),'FOR':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[35,35,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,35,-46,-55,-56,-57,-67,-68,35,35,-194,35,-80,-82,-84,35,-69,-74,35,-77,-196,35,-79,-81,-83,-71,-156,35,-73,-101,-195,35,-70,-158,35,-72,-78,-85,-157,35,-102,35,-103,]),'FOREACH':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[36,36,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,36,-46,-55,-56,-57,-67,-68,36,36,-194,36,-80,-82,-84,36,-69,-74,36,-77,-196,36,-79,-81,-83,-71,-156,36,-73,-101,-195,36,-70,-158,36,-72,-78,-85,-157,36,-102,36,-103,]),'BREAK':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[37,37,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,37,-46,-55,-56,-57,-67,-68,37,37,-194,37,-80,-82,-84,37,-69,-74,37,-77,-196,37,-79,-81,-83,-71,-156,37,-73,-101,-195,37,-70,-158,37,-72,-78,-85,-157,37,-102,37,-103,]),'CONTINUE':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[38,38,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,38,-46,-55,-56,-57,-67,-68,38,38,-194,38,-80,-82,-84,38,-69,-74,38,-77,-196,38,-79,-81,-83,-71,-156,38,-73,-101,-195,38,-70,-158,38,-72,-78,-85,-157,38,-102,38,-103,]),'RETURN':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[39,39,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,39,-46,-55,-56,-57,-67,-68,39,39,-194,39,-80,-82,-84,39,-69,-74,39,-77,-196,39,-79,-81,-83,-71,-156,39,-73,-101,-195,39,-70,-158,39,-72,-78,-85,-157,39,-102,39,-103,]),'EXIT':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[40,40,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,40,-46,-55,-56,-57,-67,-68,40,40,-194,40,-80,-82,-84,40,-69,-74,40,-77,-196,40,-79,-81,-83,-71,-156,40,-73,-101,-195,40,-70,-158,40,-72,-78,-85,-157,40,-102,40,-103,]),'DIE':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[41,41,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,41,-46,-55,-56,-57,-67,-68,41,41,-194,41,-80,-82,-84,41,-69,-74,41,-77,-196,41,-79,-81,-83,-71,-156,41,-73,-101,-195,41,-70,-158,41,-72,-78,-85,-157,41,-102,41,-103,]),'GLOBAL':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[42,42,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,42,-46,-55,-56,-57,-67,-68,42,42,-194,42,-80,-82,-84,42,-69,-74,42,-77,-196,42,-79,-81,-83,-71,-156,42,-73,-101,-195,42,-70,-158,42,-72,-78,-85,-157,42,-102,42,-103,]),'VARIABLE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,24,25,31,32,34,37,38,39,42,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,119,122,123,124,126,141,143,148,149,150,151,152,153,157,158,160,164,165,166,170,172,180,181,182,183,188,189,190,191,192,193,194,195,196,197,198,203,204,207,208,210,212,213,215,217,218,225,227,229,230,233,236,239,240,241,242,244,246,249,254,268,271,272,280,282,283,],[43,43,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,43,43,43,43,43,-66,43,43,43,43,118,-46,43,43,43,43,43,43,43,43,43,43,43,43,-55,-56,-57,43,-128,-129,-130,-131,-132,-133,43,-67,-68,43,43,43,-194,43,43,43,-80,-82,-84,43,171,43,43,43,187,43,43,43,43,-69,-74,43,-77,-196,43,43,-79,-81,-83,118,43,226,-71,-156,43,235,-171,-170,-172,-173,-174,-175,-176,-177,-178,-179,43,43,-73,-101,-195,43,43,43,43,250,43,-70,-158,43,187,-169,43,-72,-78,-85,43,43,273,-157,43,43,250,-102,43,-103,]),'ID':([2,5,6,7,8,10,11,12,13,14,15,16,17,21,25,31,32,34,37,38,39,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,240,241,242,244,246,254,268,271,280,282,283,],[44,44,-5,-6,53,-47,-48,-49,-50,-51,-52,-53,-54,44,44,44,-66,44,44,44,44,127,-46,44,44,44,44,44,44,44,44,44,44,44,44,-55,-56,-57,44,-128,-129,-130,-131,-132,-133,44,-67,-68,44,44,44,-194,44,44,44,-80,-82,-84,44,44,44,44,44,44,44,-69,-74,44,-77,-196,44,44,-79,-81,-83,44,-71,-156,44,44,44,-73,-101,-195,44,44,44,44,44,-70,-158,44,-72,-78,-85,44,44,-157,44,44,-102,44,-103,]),'NUMBER_REAL':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,31,32,34,37,38,39,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,234,240,241,242,244,246,254,259,260,264,268,271,280,282,283,],[45,45,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,45,45,45,-66,45,45,45,45,-46,45,45,45,45,45,45,45,45,45,45,45,45,-55,-56,-57,45,-128,-129,-130,-131,-132,-133,45,-67,-68,45,45,45,-194,45,45,45,-80,-82,-84,45,45,45,45,45,45,45,-69,-74,45,-77,-196,45,45,-79,-81,-83,45,-71,-156,45,45,45,-73,-101,-195,45,45,45,45,45,-70,-158,45,261,-72,-78,-85,45,45,-157,261,261,261,45,45,-102,45,-103,]),'NUMBER_INTEGER':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,31,32,34,37,38,39,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,234,240,241,242,244,246,254,259,260,264,268,271,280,282,283,],[46,46,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,46,46,46,-66,46,46,46,46,-46,46,46,46,46,46,46,46,46,46,46,46,46,-55,-56,-57,46,-128,-129,-130,-131,-132,-133,46,-67,-68,46,46,46,-194,46,46,46,-80,-82,-84,46,46,46,46,46,46,46,-69,-74,46,-77,-196,46,46,-79,-81,-83,46,-71,-156,46,46,46,-73,-101,-195,46,46,46,46,46,-70,-158,46,262,-72,-78,-85,46,46,-157,262,262,262,46,46,-102,46,-103,]),'CONSTANT_ENCAPSED_STRING':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,31,32,34,37,38,39,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,141,143,149,150,151,152,153,157,158,160,164,165,166,172,181,182,183,203,204,207,208,210,212,213,215,217,225,227,229,230,234,240,241,242,244,246,254,259,260,264,268,271,280,282,283,],[47,47,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,47,47,47,-66,47,47,47,47,-46,47,47,47,47,47,47,47,47,47,47,47,47,-55,-56,-57,47,-128,-129,-130,-131,-132,-133,47,-67,-68,47,47,47,-194,47,47,47,-80,-82,-84,47,47,47,47,47,47,47,-69,-74,47,-77,-196,47,47,-79,-81,-83,47,-71,-156,47,47,47,-73,-101,-195,47,47,47,47,47,-70,-158,47,263,-72,-78,-85,47,47,-157,263,263,263,47,47,-102,47,-103,]),'IF':([2,5,6,7,10,11,12,13,14,15,16,17,32,34,54,68,69,70,97,98,99,101,104,105,109,111,113,124,150,151,152,153,157,158,164,165,166,181,182,183,207,208,210,212,227,229,230,240,241,242,254,271,280,282,283,],[48,48,-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-66,48,-46,-55,-56,-57,-67,-68,48,48,-194,48,-80,-82,-84,48,-69,-74,48,-77,-196,48,-79,-81,-83,48,-156,48,-73,-101,-195,48,-70,-158,48,-72,-78,-85,-157,48,-102,48,-103,]),'RKEY':([6,7,10,11,12,13,14,15,16,17,23,27,28,29,30,32,43,45,46,47,54,61,68,69,70,71,72,73,74,82,94,97,98,104,105,109,111,113,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,150,151,153,156,157,158,164,165,166,173,175,177,181,182,183,199,200,201,206,207,210,211,221,222,223,227,228,229,230,240,241,242,254,255,280,283,],[-5,-6,-47,-48,-49,-50,-51,-52,-53,-54,-27,-30,-31,-32,-33,-66,-153,-149,-150,-151,-46,-16,-55,-56,-57,-15,-23,-24,-26,-25,-29,-67,-68,-194,157,-80,-82,-84,-152,-200,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-21,-22,-35,-28,-45,-69,-74,-77,210,-196,-193,-79,-81,-83,-199,-155,-109,-71,-156,229,-36,-37,-44,-34,-73,-195,-192,252,-154,-108,-70,254,-158,-8,-72,-78,-85,-157,-7,-102,-103,]),'AMPERSAND':([8,75,76,77,78,79,80,81,95,123,126,189,191,192,193,194,195,196,197,198,203,204,218,225,233,272,],[52,141,-128,-129,-130,-131,-132,-133,148,180,190,236,-172,-173,-174,-175,-176,-177,-178,-179,148,239,249,180,190,249,]),'SEMICOLON':([9,18,19,20,23,27,28,29,30,37,38,39,40,41,43,45,46,47,61,71,72,73,74,82,94,106,108,110,112,114,116,117,118,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,160,161,162,168,169,171,173,175,177,199,200,201,206,208,209,214,215,216,219,220,222,223,245,247,251,252,270,],[54,68,69,70,-27,-30,-31,-32,-33,109,111,113,-39,-41,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,-29,160,164,165,166,-38,-40,-76,-94,-152,-200,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-21,-22,-35,-28,-45,213,215,-105,-43,-75,-95,-199,-155,-109,-36,-37,-44,-34,-101,241,244,246,-104,-42,-98,-154,-108,268,-107,-97,-96,-106,]),'PLUS':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,234,238,247,259,260,264,],[55,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,55,-29,55,55,55,55,-152,-200,-9,-10,-11,55,-13,55,55,55,55,55,55,55,55,-28,-45,55,55,55,55,55,-199,55,-155,-109,55,55,55,-44,55,55,-154,-108,259,55,55,259,259,259,]),'DIVIDE':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[57,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,57,-29,57,57,57,57,-152,-200,57,57,-11,57,-13,57,57,57,57,57,57,57,57,-28,-45,57,57,57,57,57,-199,57,-155,-109,57,57,57,-44,57,57,-154,-108,57,57,]),'PERCENT':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[58,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,58,-29,58,58,58,58,-152,-200,-9,-10,-11,58,-13,58,58,58,58,58,58,58,58,-28,-45,58,58,58,58,58,-199,58,-155,-109,58,58,58,-44,58,58,-154,-108,58,58,]),'TIMES':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[59,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,59,-29,59,59,59,59,-152,-200,59,59,-11,59,-13,59,59,59,59,59,59,59,59,-28,-45,59,59,59,59,59,-199,59,-155,-109,59,59,59,-44,59,59,-154,-108,59,59,]),'EQUALS':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[60,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,60,-29,60,60,60,60,-152,-200,-9,-10,-11,60,-13,60,60,60,60,60,60,60,60,-28,-45,60,60,60,60,60,-199,60,-155,-109,60,60,60,-44,60,60,-154,-108,60,60,]),'NOT_EQUAL':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[61,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,61,-29,61,61,61,61,-152,-200,-9,-10,-11,61,-13,61,61,61,61,61,61,61,61,-28,-45,61,61,61,61,61,-199,61,-155,-109,61,61,61,-44,61,61,-154,-108,61,61,]),'GREAT_THAN':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[62,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,62,-29,62,62,62,62,-152,-200,-9,-10,-11,62,-13,62,62,62,62,62,62,62,62,-28,-45,62,62,62,62,62,-199,62,-155,-109,62,62,62,-44,62,62,-154,-108,62,62,]),'GREAT_EQUAL':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[63,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,63,-29,63,63,63,63,-152,-200,-9,-10,-11,63,-13,63,63,63,63,63,63,63,63,-28,-45,63,63,63,63,63,-199,63,-155,-109,63,63,63,-44,63,63,-154,-108,63,63,]),'LESS_THAN':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[64,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,64,-29,64,64,64,64,-152,-200,-9,-10,-11,64,-13,64,64,64,64,64,64,64,64,-28,-45,64,64,64,64,64,-199,64,-155,-109,64,64,64,-44,64,64,-154,-108,64,64,]),'LESS_EQUAL':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[65,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,65,-29,65,65,65,65,-152,-200,-9,-10,-11,65,-13,65,65,65,65,65,65,65,65,-28,-45,65,65,65,65,65,-199,65,-155,-109,65,65,65,-44,65,65,-154,-108,65,65,]),'AND':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[66,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,66,-29,66,66,66,66,-152,-200,-9,-10,-11,66,-13,66,66,66,66,66,66,66,66,-28,-45,66,66,66,66,66,-199,66,-155,-109,66,66,66,-44,66,66,-154,-108,66,66,]),'OR':([9,23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,154,162,163,167,173,174,175,177,179,199,200,201,206,221,222,223,238,247,],[67,-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,67,-29,67,67,67,67,-152,-200,-9,-10,-11,67,-13,67,67,67,67,67,67,67,67,-28,-45,67,67,67,67,67,-199,67,-155,-109,67,67,67,-44,67,67,-154,-108,67,67,]),'ELSE':([10,11,12,13,14,15,16,17,32,54,68,69,70,97,98,104,109,111,113,150,151,153,157,164,165,166,181,207,210,227,240,241,242,280,283,],[-47,-48,-49,-50,-51,-52,-53,-54,99,-46,-55,-56,-57,-67,99,-194,-80,-82,-84,-69,-74,-77,-196,-79,-81,-83,-71,-73,-195,-70,-72,-78,-85,-102,-103,]),'ELSEIF':([10,11,12,13,14,15,16,17,32,54,68,69,70,97,98,104,109,111,113,150,151,153,157,164,165,166,181,207,210,227,240,241,242,280,283,],[-47,-48,-49,-50,-51,-52,-53,-54,100,-46,-55,-56,-57,-67,-68,-194,-80,-82,-84,-69,-74,-77,-196,-79,-81,-83,-71,100,-195,-70,-72,-78,-85,-102,-103,]),'RPAREN':([23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,83,84,85,86,87,88,89,90,91,92,93,94,95,115,120,121,123,126,128,129,130,131,132,133,134,135,136,137,138,139,140,142,144,145,146,147,154,159,162,167,173,175,176,177,178,179,184,186,187,199,200,201,202,205,206,213,216,222,223,224,226,232,235,237,238,243,244,246,247,248,250,253,256,257,258,261,262,263,265,266,267,268,269,270,273,274,275,276,277,278,279,281,],[-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,142,143,-124,-119,-120,-121,-122,-123,-125,-126,-127,-29,145,168,-152,-200,177,185,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-21,-22,-35,-28,201,-45,-187,-188,208,212,-105,219,-199,-155,223,-109,-111,-114,231,-164,-165,-36,-37,-44,-186,-189,-34,-86,-104,-154,-108,-110,-115,-163,-166,-202,-190,-92,-90,-87,-107,271,-100,-113,-198,-167,-180,-183,-184,-185,-201,-191,-91,-88,-89,-106,-99,-112,-197,-181,-182,-168,-93,282,]),'DDOT':([23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,94,96,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,173,175,177,199,200,201,206,222,223,],[-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,-29,149,-152,-200,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-21,-22,-35,-28,-45,-199,-155,-109,-36,-37,-44,-34,-154,-108,]),'ATTR_ASSOC':([23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,94,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,147,173,175,177,199,200,201,206,222,223,248,250,273,],[-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,-29,-152,-200,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-21,-22,-35,-28,-45,204,-199,-155,-109,-36,-37,-44,-34,-154,-108,272,-100,-99,]),'COLON':([23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,94,117,118,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,146,147,162,171,173,175,177,178,179,186,187,199,200,201,205,206,220,222,223,226,235,237,238,247,252,253,256,257,258,261,262,263,266,276,277,278,],[-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,-29,170,-94,-152,-200,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-21,-22,-35,-28,-45,203,-188,217,-95,-199,-155,-109,225,-114,233,-165,-36,-37,-44,-189,-34,170,-154,-108,-115,-166,203,-190,217,-96,225,233,-167,-180,-183,-184,-185,-191,-181,-182,-168,]),'AS':([23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,94,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,163,173,175,177,199,200,201,206,222,223,],[-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,-29,-152,-200,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-21,-22,-35,-28,-45,218,-199,-155,-109,-36,-37,-44,-34,-154,-108,]),'RBRACKET':([23,27,28,29,30,43,45,46,47,61,71,72,73,74,82,94,120,121,122,128,129,130,131,132,133,134,135,136,137,138,139,140,142,145,173,174,175,177,199,200,201,206,222,223,],[-27,-30,-31,-32,-33,-153,-149,-150,-151,-16,-15,-23,-24,-26,-25,-29,-152,-200,175,-9,-10,-11,-12,-13,-14,-17,-18,-19,-20,-21,-22,-35,-28,-45,-199,222,-155,-109,-36,-37,-44,-34,-154,-108,]),'ADD_ASSIGN':([23,43,120,121,173,175,222,],[76,-153,-152,-200,-199,-155,-154,]),'SUB_ASSIGN':([23,43,120,121,173,175,222,],[77,-153,-152,-200,-199,-155,-154,]),'MOD_ASSIGN':([23,43,120,121,173,175,222,],[78,-153,-152,-200,-199,-155,-154,]),'PLUS_ASSIGN':([23,43,120,121,173,175,222,],[79,-153,-152,-200,-199,-155,-154,]),'DIVIDE_ASSIGN':([23,43,120,121,173,175,222,],[80,-153,-152,-200,-199,-155,-154,]),'ASSIGN':([23,43,120,121,173,175,187,222,235,],[81,-153,-152,-200,-199,-155,234,-154,264,]),'INT_TYPE':([25,126,233,],[86,191,191,]),'DOUBLE_TYPE':([25,126,233,],[87,198,198,]),'FLOAT_TYPE':([25,126,233,],[88,194,194,]),'REAL_TYPE':([25,126,233,],[89,197,197,]),'STRING_TYPE':([25,126,233,],[90,193,193,]),'BOOLEAN_TYPE':([25,126,233,],[91,192,192,]),'BOOL_TYPE':([25,126,233,],[92,196,196,]),'UNSET':([25,],[93,]),'LKEY':([34,99,101,119,124,125,152,185,208,212,231,271,282,],[105,105,105,172,105,183,105,-162,-101,105,-161,105,105,]),'DOLAR':([42,170,],[119,119,]),'LBRACKET':([43,121,175,222,],[122,122,-155,-154,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'main_INNER':([2,5,],[3,50,]),'inner_statement':([2,5,183,230,],[5,5,230,230,]),'function_declaration_statement':([2,5,183,230,],[6,6,6,6,]),'statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[7,7,104,104,104,158,104,104,158,7,104,7,104,104,]),'expr':([2,5,21,25,31,34,37,38,39,55,56,57,58,59,60,62,63,64,65,66,67,75,95,99,101,102,105,106,107,115,122,123,124,141,143,149,152,158,160,172,183,203,204,212,213,215,217,225,230,244,246,268,271,282,],[9,9,71,83,96,9,108,110,112,128,129,130,131,132,133,134,135,136,137,138,139,140,147,9,9,154,9,162,163,167,174,179,9,199,200,206,9,9,162,221,9,147,238,9,162,162,247,179,9,162,162,162,9,9,]),'if_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'while_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'do_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'for_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'foreach_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'break_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'continue_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'return_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'exit_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'die_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'global_statement':([2,5,34,99,101,105,124,152,158,183,212,230,271,282,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'variable':([2,5,21,22,24,25,31,34,37,38,39,55,56,57,58,59,60,62,63,64,65,66,67,75,95,99,101,102,105,106,107,115,122,123,124,141,143,148,149,152,158,160,172,183,203,204,212,213,215,217,225,230,239,244,246,268,271,282,],[23,23,23,72,82,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,205,23,23,23,23,23,23,23,23,23,23,23,23,23,23,266,23,23,23,23,23,]),'function_call':([2,5,21,25,31,34,37,38,39,55,56,57,58,59,60,62,63,64,65,66,67,75,95,99,101,102,105,106,107,115,122,123,124,141,143,149,152,158,160,172,183,203,204,212,213,215,217,225,230,244,246,268,271,282,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'scalar':([2,5,21,25,31,34,37,38,39,55,56,57,58,59,60,62,63,64,65,66,67,75,95,99,101,102,105,106,107,115,122,123,124,141,143,149,152,158,160,172,183,203,204,212,213,215,217,225,230,244,246,268,271,282,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'statement_if':([2,5,34,99,101,105,124,152,158,181,183,212,230,271,282,],[32,32,32,32,32,32,32,32,32,227,32,32,32,32,32,]),'fds_id':([8,],[51,]),'assign_operator':([23,],[75,]),'type_cast_operator':([25,],[84,]),'array_declaration':([26,85,],[94,94,]),'statement_else':([32,98,],[97,150,]),'statement_elseif':([32,207,],[98,240,]),'expr_parentheses':([33,48,100,155,],[101,124,152,209,]),'statement_BLOCK_OPT':([34,99,101,124,152,212,271,282,],[103,151,153,181,207,242,280,283,]),'exit_expr':([40,41,],[114,116,]),'global_var':([42,170,],[117,220,]),'reference_variable_SELECTOR':([43,121,],[120,173,]),'selector':([43,121,],[121,121,]),'fds_parameter':([51,],[125,]),'array_pair_list':([95,],[144,]),'array_pair':([95,203,],[146,237,]),'statement_MUL':([105,158,],[156,211,]),'for_parameters':([106,],[159,]),'for_expr_OPT':([106,160,213,215,244,246,268,],[161,214,243,245,267,269,279,]),'statement_COLON_GLOBAL':([117,220,],[169,251,]),'function_call_parameter_list':([123,],[176,]),'function_call_parameter':([123,225,],[178,253,]),'fds_statements':([125,],[182,]),'parameter_list':([126,],[184,]),'parameter':([126,233,],[186,256,]),'parameter_prefix':([126,233,],[188,188,]),'parameter_type':([126,233,],[189,189,]),'array_pair_list_ARR_PAIR':([146,237,],[202,265,]),'for_expr_COLON_EXPR':([162,247,],[216,270,]),'fc_parameter_list_COLON_PARAMETER':([178,253,],[224,274,]),'inner_statement_MUL':([183,230,],[228,255,]),'parameter_list_COLON_PARAMETER':([186,256,],[232,275,]),'ampersand_variable':([218,272,],[248,281,]),'static_scalar':([234,259,260,264,],[257,276,277,278,]),'common_scalar':([234,259,260,264,],[258,258,258,258,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> BEGIN_PROGRAM main_INNER END_PROGRAM','main',3,'p_main','Parser.py',16),
  ('main -> BEGIN_PROGRAM END_PROGRAM','main',2,'p_main','Parser.py',17),
  ('main_INNER -> inner_statement main_INNER','main_INNER',2,'p_main_INNER','Parser.py',26),
  ('main_INNER -> inner_statement','main_INNER',1,'p_main_INNER','Parser.py',27),
  ('inner_statement -> function_declaration_statement','inner_statement',1,'p_inner_statement','Parser.py',36),
  ('inner_statement -> statement','inner_statement',1,'p_inner_statement','Parser.py',37),
  ('inner_statement_MUL -> inner_statement inner_statement_MUL','inner_statement_MUL',2,'p_inner_statement_MUL','Parser.py',46),
  ('inner_statement_MUL -> inner_statement','inner_statement_MUL',1,'p_inner_statement_MUL','Parser.py',47),
  ('expr -> expr PLUS expr','expr',3,'p_expr','Parser.py',57),
  ('expr -> expr MINUS expr','expr',3,'p_expr','Parser.py',58),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','Parser.py',59),
  ('expr -> expr PERCENT expr','expr',3,'p_expr','Parser.py',60),
  ('expr -> expr TIMES expr','expr',3,'p_expr','Parser.py',61),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','Parser.py',62),
  ('expr -> MINUS expr','expr',2,'p_expr','Parser.py',63),
  ('expr -> expr NOT_EQUAL','expr',2,'p_expr','Parser.py',64),
  ('expr -> expr GREAT_THAN expr','expr',3,'p_expr','Parser.py',65),
  ('expr -> expr GREAT_EQUAL expr','expr',3,'p_expr','Parser.py',66),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','Parser.py',67),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr','Parser.py',68),
  ('expr -> expr AND expr','expr',3,'p_expr','Parser.py',69),
  ('expr -> expr OR expr','expr',3,'p_expr','Parser.py',70),
  ('expr -> INCREMENT variable','expr',2,'p_expr','Parser.py',71),
  ('expr -> variable INCREMENT','expr',2,'p_expr','Parser.py',72),
  ('expr -> DECREMENT variable','expr',2,'p_expr','Parser.py',73),
  ('expr -> variable DECREMENT','expr',2,'p_expr','Parser.py',74),
  ('expr -> variable','expr',1,'p_expr','Parser.py',75),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','Parser.py',76),
  ('expr -> ARRAY_TYPE array_declaration','expr',2,'p_expr','Parser.py',77),
  ('expr -> function_call','expr',1,'p_expr','Parser.py',78),
  ('expr -> scalar','expr',1,'p_expr','Parser.py',79),
  ('expr -> TRUE','expr',1,'p_expr','Parser.py',80),
  ('expr -> FALSE','expr',1,'p_expr','Parser.py',81),
  ('expr -> INTE_DOT expr DDOT expr','expr',4,'p_expr','Parser.py',82),
  ('expr -> variable assign_operator expr','expr',3,'p_expr','Parser.py',83),
  ('expr -> variable assign_operator AMPERSAND expr','expr',4,'p_expr','Parser.py',84),
  ('expr -> LPAREN type_cast_operator RPAREN expr','expr',4,'p_expr','Parser.py',85),
  ('exit_statement -> EXIT exit_expr','exit_statement',2,'p_exit_statement','Parser.py',131),
  ('exit_statement -> EXIT','exit_statement',1,'p_exit_statement','Parser.py',132),
  ('die_statement -> DIE exit_expr','die_statement',2,'p_die_statement','Parser.py',141),
  ('die_statement -> DIE','die_statement',1,'p_die_statement','Parser.py',142),
  ('exit_expr -> LPAREN expr RPAREN','exit_expr',3,'p_exit_expr','Parser.py',151),
  ('exit_expr -> LPAREN RPAREN','exit_expr',2,'p_exit_expr','Parser.py',152),
  ('array_declaration -> LPAREN array_pair_list RPAREN','array_declaration',3,'p_array_declaration','Parser.py',161),
  ('array_declaration -> LPAREN RPAREN','array_declaration',2,'p_array_declaration','Parser.py',162),
  ('statement -> expr SEMICOLON','statement',2,'p_statement','Parser.py',171),
  ('statement -> if_statement','statement',1,'p_statement','Parser.py',172),
  ('statement -> while_statement','statement',1,'p_statement','Parser.py',173),
  ('statement -> do_statement','statement',1,'p_statement','Parser.py',174),
  ('statement -> for_statement','statement',1,'p_statement','Parser.py',175),
  ('statement -> foreach_statement','statement',1,'p_statement','Parser.py',176),
  ('statement -> break_statement','statement',1,'p_statement','Parser.py',177),
  ('statement -> continue_statement','statement',1,'p_statement','Parser.py',178),
  ('statement -> return_statement','statement',1,'p_statement','Parser.py',179),
  ('statement -> exit_statement SEMICOLON','statement',2,'p_statement','Parser.py',180),
  ('statement -> die_statement SEMICOLON','statement',2,'p_statement','Parser.py',181),
  ('statement -> global_statement SEMICOLON','statement',2,'p_statement','Parser.py',182),
  ('S -> S1','S',1,'p_IF','Parser.py',211),
  ('S -> IF expr_parentheses S3','S',3,'p_IF','Parser.py',212),
  ('S1 -> IF expr_parentheses S2 ELSE S1','S1',5,'p_IF','Parser.py',213),
  ('S1 -> <empty>','S1',0,'p_IF','Parser.py',214),
  ('S2 -> ELSEIF expr_parentheses S2','S2',3,'p_IF','Parser.py',215),
  ('S2 -> S1','S2',1,'p_IF','Parser.py',216),
  ('S3 -> S','S3',1,'p_IF','Parser.py',217),
  ('S3 -> S1 ELSE S3','S3',3,'p_IF','Parser.py',218),
  ('if_statement -> statement_if','if_statement',1,'p_if_statement','Parser.py',223),
  ('if_statement -> statement_if statement_else','if_statement',2,'p_if_statement','Parser.py',224),
  ('if_statement -> statement_if statement_elseif','if_statement',2,'p_if_statement','Parser.py',225),
  ('if_statement -> statement_if statement_elseif statement_else','if_statement',3,'p_if_statement','Parser.py',226),
  ('statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if','statement_if',4,'p_statement_if','Parser.py',239),
  ('statement_if -> IF expr_parentheses statement_BLOCK_OPT','statement_if',3,'p_statement_if','Parser.py',240),
  ('statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif','statement_elseif',4,'p_statement_elseif','Parser.py',249),
  ('statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT','statement_elseif',3,'p_statement_elseif','Parser.py',250),
  ('statement_else -> ELSE statement_BLOCK_OPT','statement_else',2,'p_statement_else','Parser.py',259),
  ('global_statement -> GLOBAL global_var statement_COLON_GLOBAL','global_statement',3,'p_global_statement','Parser.py',266),
  ('global_statement -> GLOBAL global_var','global_statement',2,'p_global_statement','Parser.py',267),
  ('while_statement -> WHILE expr_parentheses statement_BLOCK_OPT','while_statement',3,'p_while_statement','Parser.py',277),
  ('do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON','do_statement',5,'p_do_statement','Parser.py',284),
  ('break_statement -> BREAK expr SEMICOLON','break_statement',3,'p_break_statement','Parser.py',290),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','Parser.py',291),
  ('continue_statement -> CONTINUE expr SEMICOLON','continue_statement',3,'p_continue_statement','Parser.py',300),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','Parser.py',301),
  ('return_statement -> RETURN expr SEMICOLON','return_statement',3,'p_return_statement','Parser.py',310),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','Parser.py',311),
  ('for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT','for_statement',5,'p_for_statement','Parser.py',320),
  ('for_parameters -> SEMICOLON SEMICOLON','for_parameters',2,'p_for_parameters','Parser.py',326),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',327),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON','for_parameters',4,'p_for_parameters','Parser.py',328),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',329),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',330),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',331),
  ('for_parameters -> SEMICOLON SEMICOLON for_expr_OPT','for_parameters',3,'p_for_parameters','Parser.py',332),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',5,'p_for_parameters','Parser.py',333),
  ('global_var -> VARIABLE','global_var',1,'p_global_var','Parser.py',355),
  ('global_var -> DOLAR VARIABLE','global_var',2,'p_global_var','Parser.py',356),
  ('global_var -> DOLAR LKEY expr RKEY','global_var',4,'p_global_var','Parser.py',357),
  ('statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL','statement_COLON_GLOBAL',3,'p_statement_COLON_GLOBAL','Parser.py',368),
  ('statement_COLON_GLOBAL -> COLON global_var','statement_COLON_GLOBAL',2,'p_statement_COLON_GLOBAL','Parser.py',369),
  ('ampersand_variable -> AMPERSAND VARIABLE','ampersand_variable',2,'p_ampersand_variable','Parser.py',378),
  ('ampersand_variable -> VARIABLE','ampersand_variable',1,'p_ampersand_variable','Parser.py',379),
  ('expr_parentheses -> LPAREN expr RPAREN','expr_parentheses',3,'p_expr_parentheses','Parser.py',388),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT','foreach_statement',7,'p_foreach_statement','Parser.py',395),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT','foreach_statement',9,'p_foreach_statement','Parser.py',396),
  ('for_expr_OPT -> expr for_expr_COLON_EXPR','for_expr_OPT',2,'p_for_expr_OPT','Parser.py',405),
  ('for_expr_OPT -> expr','for_expr_OPT',1,'p_for_expr_OPT','Parser.py',406),
  ('for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR','for_expr_COLON_EXPR',3,'p_for_expr_COLON_EXPR','Parser.py',415),
  ('for_expr_COLON_EXPR -> COLON expr','for_expr_COLON_EXPR',2,'p_for_expr_COLON_EXPR','Parser.py',416),
  ('function_call -> ID LPAREN function_call_parameter_list RPAREN','function_call',4,'p_function_call','Parser.py',425),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','Parser.py',426),
  ('function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER','function_call_parameter_list',2,'p_function_call_parameter_list','Parser.py',435),
  ('function_call_parameter_list -> function_call_parameter','function_call_parameter_list',1,'p_function_call_parameter_list','Parser.py',436),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER','fc_parameter_list_COLON_PARAMETER',3,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',445),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter','fc_parameter_list_COLON_PARAMETER',2,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',446),
  ('function_call_parameter -> expr','function_call_parameter',1,'p_function_call_parameter','Parser.py',455),
  ('function_call_parameter -> AMPERSAND VARIABLE','function_call_parameter',2,'p_function_call_parameter','Parser.py',456),
  ('unary_operator -> EXC_DOT','unary_operator',1,'p_unary_operator','Parser.py',465),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','Parser.py',466),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','Parser.py',467),
  ('type_cast_operator -> INT_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',472),
  ('type_cast_operator -> DOUBLE_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',473),
  ('type_cast_operator -> FLOAT_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',474),
  ('type_cast_operator -> REAL_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',475),
  ('type_cast_operator -> STRING_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',476),
  ('type_cast_operator -> ARRAY_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',477),
  ('type_cast_operator -> BOOLEAN_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',478),
  ('type_cast_operator -> BOOL_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',479),
  ('type_cast_operator -> UNSET','type_cast_operator',1,'p_type_cast_operator','Parser.py',480),
  ('assign_operator -> ADD_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',486),
  ('assign_operator -> SUB_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',487),
  ('assign_operator -> MOD_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',488),
  ('assign_operator -> PLUS_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',489),
  ('assign_operator -> DIVIDE_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',490),
  ('assign_operator -> ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',491),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',497),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',498),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',499),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',500),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',501),
  ('comparission_operator -> EQUALS','comparission_operator',1,'p_comparission_operator','Parser.py',507),
  ('comparission_operator -> GREAT_THAN','comparission_operator',1,'p_comparission_operator','Parser.py',508),
  ('comparission_operator -> LESS_THAN','comparission_operator',1,'p_comparission_operator','Parser.py',509),
  ('comparission_operator -> LESS_EQUAL','comparission_operator',1,'p_comparission_operator','Parser.py',510),
  ('comparission_operator -> GREAT_EQUAL','comparission_operator',1,'p_comparission_operator','Parser.py',511),
  ('comparission_operator -> NOT_EQUAL','comparission_operator',1,'p_comparission_operator','Parser.py',512),
  ('comparission_operator -> LEFT_LOGICAL','comparission_operator',1,'p_comparission_operator','Parser.py',513),
  ('comparission_operator -> RIGHT_LOGICAL','comparission_operator',1,'p_comparission_operator','Parser.py',514),
  ('comparission_operator -> AND','comparission_operator',1,'p_comparission_operator','Parser.py',515),
  ('comparission_operator -> OR','comparission_operator',1,'p_comparission_operator','Parser.py',516),
  ('scalar -> NUMBER_REAL','scalar',1,'p_scalar','Parser.py',522),
  ('scalar -> NUMBER_INTEGER','scalar',1,'p_scalar','Parser.py',523),
  ('scalar -> CONSTANT_ENCAPSED_STRING','scalar',1,'p_scalar','Parser.py',524),
  ('variable -> VARIABLE reference_variable_SELECTOR','variable',2,'p_variable','Parser.py',530),
  ('variable -> VARIABLE','variable',1,'p_variable','Parser.py',531),
  ('selector -> LBRACKET expr RBRACKET','selector',3,'p_selector','Parser.py',540),
  ('selector -> LBRACKET RBRACKET','selector',2,'p_selector','Parser.py',541),
  ('function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements','function_declaration_statement',4,'p_function_declaration_statement','Parser.py',550),
  ('fds_statements -> LKEY inner_statement_MUL RKEY','fds_statements',3,'p_fds_statements','Parser.py',556),
  ('fds_statements -> LKEY RKEY','fds_statements',2,'p_fds_statements','Parser.py',557),
  ('fds_id -> AMPERSAND ID','fds_id',2,'p_fds_id','Parser.py',566),
  ('fds_id -> ID','fds_id',1,'p_fds_id','Parser.py',567),
  ('fds_parameter -> LPAREN parameter_list RPAREN','fds_parameter',3,'p_fds_parameter','Parser.py',576),
  ('fds_parameter -> LPAREN RPAREN','fds_parameter',2,'p_fds_parameter','Parser.py',577),
  ('parameter_list -> parameter parameter_list_COLON_PARAMETER','parameter_list',2,'p_parameter_list','Parser.py',586),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser.py',587),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','Parser.py',596),
  ('parameter -> parameter_prefix VARIABLE','parameter',2,'p_parameter','Parser.py',597),
  ('parameter -> VARIABLE ASSIGN static_scalar','parameter',3,'p_parameter','Parser.py',598),
  ('parameter -> parameter_prefix VARIABLE ASSIGN static_scalar','parameter',4,'p_parameter','Parser.py',599),
  ('parameter_prefix -> parameter_type AMPERSAND','parameter_prefix',2,'p_parameter_prefix','Parser.py',612),
  ('parameter_prefix -> AMPERSAND','parameter_prefix',1,'p_parameter_prefix','Parser.py',613),
  ('parameter_prefix -> parameter_type','parameter_prefix',1,'p_parameter_prefix','Parser.py',614),
  ('parameter_type -> INT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',625),
  ('parameter_type -> BOOLEAN_TYPE','parameter_type',1,'p_parameter_type','Parser.py',626),
  ('parameter_type -> STRING_TYPE','parameter_type',1,'p_parameter_type','Parser.py',627),
  ('parameter_type -> FLOAT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',628),
  ('parameter_type -> ARRAY_TYPE','parameter_type',1,'p_parameter_type','Parser.py',629),
  ('parameter_type -> BOOL_TYPE','parameter_type',1,'p_parameter_type','Parser.py',630),
  ('parameter_type -> REAL_TYPE','parameter_type',1,'p_parameter_type','Parser.py',631),
  ('parameter_type -> DOUBLE_TYPE','parameter_type',1,'p_parameter_type','Parser.py',632),
  ('static_scalar -> common_scalar','static_scalar',1,'p_static_scalar','Parser.py',639),
  ('static_scalar -> PLUS static_scalar','static_scalar',2,'p_static_scalar','Parser.py',640),
  ('static_scalar -> MINUS static_scalar','static_scalar',2,'p_static_scalar','Parser.py',641),
  ('common_scalar -> NUMBER_REAL','common_scalar',1,'p_common_scalar','Parser.py',652),
  ('common_scalar -> NUMBER_INTEGER','common_scalar',1,'p_common_scalar','Parser.py',653),
  ('common_scalar -> CONSTANT_ENCAPSED_STRING','common_scalar',1,'p_common_scalar','Parser.py',654),
  ('array_pair_list -> array_pair array_pair_list_ARR_PAIR','array_pair_list',2,'p_array_pair_list','Parser.py',660),
  ('array_pair_list -> array_pair','array_pair_list',1,'p_array_pair_list','Parser.py',661),
  ('array_pair -> expr','array_pair',1,'p_array_pair','Parser.py',670),
  ('array_pair -> AMPERSAND variable','array_pair',2,'p_array_pair','Parser.py',671),
  ('array_pair -> expr ATTR_ASSOC expr','array_pair',3,'p_array_pair','Parser.py',672),
  ('array_pair -> expr ATTR_ASSOC AMPERSAND variable','array_pair',4,'p_array_pair','Parser.py',673),
  ('statement_MUL -> statement statement_MUL','statement_MUL',2,'p_statement_MUL','Parser.py',689),
  ('statement_MUL -> statement','statement_MUL',1,'p_statement_MUL','Parser.py',690),
  ('statement_BLOCK_OPT -> statement','statement_BLOCK_OPT',1,'p_statement_BLOCK_OPT','Parser.py',699),
  ('statement_BLOCK_OPT -> LKEY statement_MUL RKEY','statement_BLOCK_OPT',3,'p_statement_BLOCK_OPT','Parser.py',700),
  ('statement_BLOCK_OPT -> LKEY RKEY','statement_BLOCK_OPT',2,'p_statement_BLOCK_OPT','Parser.py',701),
  ('parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER','parameter_list_COLON_PARAMETER',3,'p_parameter_list_COLON_PARAMETER','Parser.py',712),
  ('parameter_list_COLON_PARAMETER -> COLON parameter','parameter_list_COLON_PARAMETER',2,'p_parameter_list_COLON_PARAMETER','Parser.py',713),
  ('reference_variable_SELECTOR -> selector reference_variable_SELECTOR','reference_variable_SELECTOR',2,'p_reference_variable_SELECTOR','Parser.py',722),
  ('reference_variable_SELECTOR -> selector','reference_variable_SELECTOR',1,'p_reference_variable_SELECTOR','Parser.py',723),
  ('array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR','array_pair_list_ARR_PAIR',3,'p_array_pair_list_ARR_PAIR','Parser.py',732),
  ('array_pair_list_ARR_PAIR -> COLON array_pair','array_pair_list_ARR_PAIR',2,'p_array_pair_list_ARR_PAIR','Parser.py',733),
]

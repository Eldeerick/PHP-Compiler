Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    STRING
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     main_INNER -> inner_statement main_INNER
Rule 4     main_INNER -> inner_statement
Rule 5     inner_statement -> function_declaration_statement
Rule 6     inner_statement -> statement
Rule 7     expr -> expr1 expr2
Rule 8     expr -> expr1
Rule 9     expr -> expr3
Rule 10    expr2 -> INTE_DOT expr DDOT expr
Rule 11    expr2 -> comparission_operator expr
Rule 12    expr2 -> arithmetic_operator expr
Rule 13    expr3 -> variable assign_operator expr
Rule 14    expr3 -> variable assign_operator AMPERSAND expr
Rule 15    expr3 -> LPAREN type_cast_operator RPAREN expr
Rule 16    expr1 -> INCREMENT variable
Rule 17    expr1 -> variable INCREMENT
Rule 18    expr1 -> DECREMENT variable
Rule 19    expr1 -> variable DECREMENT
Rule 20    expr1 -> variable
Rule 21    expr1 -> LPAREN expr RPAREN
Rule 22    expr1 -> EXIT exit_expr
Rule 23    expr1 -> EXIT
Rule 24    expr1 -> DIE exit_expr
Rule 25    expr1 -> DIE
Rule 26    expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 27    expr1 -> ARRAY_TYPE LPAREN RPAREN
Rule 28    expr1 -> function_call
Rule 29    expr1 -> scalar
Rule 30    expr1 -> TRUE
Rule 31    expr1 -> FALSE
Rule 32    statement -> expr SEMICOLON
Rule 33    statement -> if_statement
Rule 34    statement -> while_statement
Rule 35    statement -> do_statement
Rule 36    statement -> for_statement
Rule 37    statement -> foreach_statement
Rule 38    statement -> break_statement
Rule 39    statement -> continue_statement
Rule 40    statement -> return_statement
Rule 41    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 42    statement -> GLOBAL global_var SEMICOLON
Rule 43    if_statement -> statement_if if_statement_complement
Rule 44    if_statement -> statement_if
Rule 45    if_statement_complement -> statement_elseif
Rule 46    if_statement_complement -> statement_else
Rule 47    while_statement -> WHILE expr_parentheses statement_BLOCK_OPT
Rule 48    do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
Rule 49    break_statement -> BREAK expr SEMICOLON
Rule 50    break_statement -> BREAK SEMICOLON
Rule 51    continue_statement -> CONTINUE expr SEMICOLON
Rule 52    continue_statement -> CONTINUE SEMICOLON
Rule 53    return_statement -> RETURN expr SEMICOLON
Rule 54    return_statement -> RETURN SEMICOLON
Rule 55    for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
Rule 56    for_parameters -> SEMICOLON SEMICOLON
Rule 57    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 58    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 59    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 60    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 61    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 62    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 63    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 64    global_var -> VARIABLE
Rule 65    global_var -> DOLAR VARIABLE
Rule 66    global_var -> DOLAR LKEY expr RKEY
Rule 67    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 68    statement_COLON_GLOBAL -> COLON global_var
Rule 69    ampersand_variable -> AMPERSAND VARIABLE
Rule 70    ampersand_variable -> VARIABLE
Rule 71    expr_parentheses -> LPAREN expr RPAREN
Rule 72    statement_if -> IF expr_parentheses statement_BLOCK_OPT
Rule 73    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT
Rule 74    statement_else -> ELSE statement_BLOCK_OPT
Rule 75    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 76    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 77    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 78    for_expr_OPT -> expr
Rule 79    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 80    function_call -> ID LPAREN RPAREN
Rule 81    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 82    function_call_parameter_list -> function_call_parameter
Rule 83    function_call_parameter -> expr
Rule 84    function_call_parameter -> AMPERSAND VARIABLE
Rule 85    assignment_list_element -> variable
Rule 86    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 87    unary_operator -> EXC_DOT
Rule 88    unary_operator -> PLUS
Rule 89    unary_operator -> MINUS
Rule 90    type_cast_operator -> INT_TYPE
Rule 91    type_cast_operator -> DOUBLE_TYPE
Rule 92    type_cast_operator -> FLOAT_TYPE
Rule 93    type_cast_operator -> REAL_TYPE
Rule 94    type_cast_operator -> STRING_TYPE
Rule 95    type_cast_operator -> ARRAY_TYPE
Rule 96    type_cast_operator -> BOOLEAN_TYPE
Rule 97    type_cast_operator -> BOOL_TYPE
Rule 98    type_cast_operator -> UNSET
Rule 99    assign_operator -> ADD_ASSIGN
Rule 100   assign_operator -> SUB_ASSIGN
Rule 101   assign_operator -> MOD_ASSIGN
Rule 102   assign_operator -> PLUS_ASSIGN
Rule 103   assign_operator -> DIVIDE_ASSIGN
Rule 104   assign_operator -> ASSIGN
Rule 105   arithmetic_operator -> PLUS
Rule 106   arithmetic_operator -> DIVIDE
Rule 107   arithmetic_operator -> PERCENT
Rule 108   arithmetic_operator -> TIMES
Rule 109   arithmetic_operator -> MINUS
Rule 110   comparission_operator -> EQUALS
Rule 111   comparission_operator -> GREAT_THAN
Rule 112   comparission_operator -> LESS_THAN
Rule 113   comparission_operator -> LESS_EQUAL
Rule 114   comparission_operator -> GREAT_EQUAL
Rule 115   comparission_operator -> NOT_EQUAL
Rule 116   comparission_operator -> LEFT_LOGICAL
Rule 117   comparission_operator -> RIGHT_LOGICAL
Rule 118   comparission_operator -> AND
Rule 119   comparission_operator -> OR
Rule 120   scalar -> NUMBER_REAL
Rule 121   scalar -> NUMBER_INTEGER
Rule 122   scalar -> CONSTANT_ENCAPSED_STRING
Rule 123   exit_expr -> LPAREN expr RPAREN
Rule 124   exit_expr -> LPAREN RPAREN
Rule 125   variable -> reference_variable
Rule 126   variable -> simple_indirect_reference_DOLAR reference_variable
Rule 127   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 128   reference_variable -> compound_variable
Rule 129   compound_variable -> VARIABLE
Rule 130   compound_variable -> DOLAR LKEY expr RKEY
Rule 131   selector -> LBRACKET expr RBRACKET
Rule 132   selector -> LBRACKET RBRACKET
Rule 133   function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements
Rule 134   fds_statements -> LKEY inner_statement_MUL RKEY
Rule 135   fds_statements -> LKEY RKEY
Rule 136   fds_id -> AMPERSAND ID
Rule 137   fds_id -> ID
Rule 138   fds_parameter -> LPAREN parameter_list RPAREN
Rule 139   fds_parameter -> LPAREN RPAREN
Rule 140   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 141   parameter_list -> parameter
Rule 142   parameter -> VARIABLE
Rule 143   parameter -> parameter_prefix VARIABLE
Rule 144   parameter -> VARIABLE ASSIGN static_scalar
Rule 145   parameter -> parameter_prefix VARIABLE ASSIGN static_scalar
Rule 146   parameter_prefix -> parameter_type AMPERSAND
Rule 147   parameter_prefix -> AMPERSAND
Rule 148   parameter_prefix -> parameter_type
Rule 149   parameter_type -> INT_TYPE
Rule 150   parameter_type -> BOOLEAN_TYPE
Rule 151   parameter_type -> STRING_TYPE
Rule 152   parameter_type -> FLOAT_TYPE
Rule 153   parameter_type -> ARRAY_TYPE
Rule 154   parameter_type -> BOOL_TYPE
Rule 155   parameter_type -> REAL_TYPE
Rule 156   parameter_type -> DOUBLE_TYPE
Rule 157   static_scalar -> common_scalar
Rule 158   static_scalar -> PLUS static_scalar
Rule 159   static_scalar -> MINUS static_scalar
Rule 160   common_scalar -> NUMBER_REAL
Rule 161   common_scalar -> NUMBER_INTEGER
Rule 162   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 163   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 164   array_pair_list -> array_pair
Rule 165   array_pair -> expr
Rule 166   array_pair -> expr ATTR_ASSOC expr
Rule 167   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 168   array_pair -> AMPERSAND variable
Rule 169   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 170   inner_statement_MUL -> inner_statement
Rule 171   statement_MUL -> statement statement_MUL
Rule 172   statement_MUL -> statement
Rule 173   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 174   for_expr_COLON_EXPR -> COLON expr
Rule 175   statement_BLOCK_OPT -> statement
Rule 176   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 177   statement_BLOCK_OPT -> LKEY RKEY
Rule 178   function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 179   function_call_list_COLON_FUNCTION -> COLON function_call_parameter
Rule 180   assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 181   assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 182   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 183   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 184   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 185   reference_variable_SELECTOR -> selector
Rule 186   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 187   simple_indirect_reference_DOLAR -> DOLAR
Rule 188   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 189   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 99
AMPERSAND            : 14 69 84 136 146 147 167 168
AND                  : 118
APOSTROFE            : 
ARRAY_TYPE           : 26 27 95 153
ARROBA               : 
AS                   : 75 76
ASPAS                : 
ASSIGN               : 104 144 145
ATTR_ASSOC           : 76 166 167
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 96 150
BOOL_TYPE            : 97 154
BREAK                : 49 50
CASE                 : 
CLONE                : 
COLON                : 67 68 173 174 178 179 180 182 183 188 189
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 122 162
CONTINUE             : 51 52
CRASE                : 
DDOT                 : 10
DECLARE              : 
DECREMENT            : 18 19
DIE                  : 24 25
DIVIDE               : 106
DIVIDE_ASSIGN        : 103
DO                   : 48
DOLAR                : 65 66 130 186 187
DOUBLE_TYPE          : 91 156
ELSE                 : 74
ELSEIF               : 73
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 110
EXC_DOT              : 87
EXIT                 : 22 23
FALSE                : 31
FLOAT_TYPE           : 92 152
FOR                  : 55
FOREACH              : 75 76
FUNCTION             : 133
GLOBAL               : 41 42
GREAT_EQUAL          : 114
GREAT_THAN           : 111
ID                   : 79 80 136 137
IDENTATION           : 
IF                   : 72
INCREMENT            : 16 17
INTE_DOT             : 10
INT_TYPE             : 90 149
LBRACKET             : 131 132
LEFT_LOGICAL         : 116
LESS_EQUAL           : 113
LESS_THAN            : 112
LIST                 : 86
LKEY                 : 66 130 134 135 176 177
LPAREN               : 15 21 26 27 55 71 75 76 79 80 86 123 124 138 139
MINUS                : 89 109 159
MOD_ASSIGN           : 101
NOT_EQUAL            : 115
NUMBER_INTEGER       : 121 161
NUMBER_REAL          : 120 160
OR                   : 119
PERCENT              : 107
PLUS                 : 88 105 158
PLUS_ASSIGN          : 102
RBRACKET             : 131 132
REAL_TYPE            : 93 155
RETURN               : 53 54
RIGHT_LOGICAL        : 117
RKEY                 : 66 130 134 135 176 177
RPAREN               : 15 21 26 27 55 71 75 76 79 80 86 123 124 138 139
SEMICOLON            : 32 41 42 48 49 50 51 52 53 54 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63
STRING               : 
STRING_TYPE          : 94 151
SUB_ASSIGN           : 100
TIMES                : 108
TRUE                 : 30
UNSET                : 98
VAR                  : 
VARIABLE             : 64 65 69 70 84 129 142 143 144 145
WHILE                : 47 48
error                : 

Nonterminals, with rules where they appear

ampersand_variable   : 75 76 76
arithmetic_operator  : 12
array_pair           : 163 164 188 189
array_pair_list      : 26
array_pair_list_ARR_PAIR : 163 188
assign_operator      : 13 14
assignment_list_element : 86 180
assignment_list_element_COLON_ASSIGNMENT : 86 180
break_statement      : 38
common_scalar        : 157
comparission_operator : 11
compound_variable    : 127 128
continue_statement   : 39
do_statement         : 35
exit_expr            : 22 24
expr                 : 10 10 11 12 13 14 15 21 32 49 51 53 66 71 75 76 77 78 83 123 130 131 165 166 166 167 173 174
expr1                : 7 8
expr2                : 7
expr3                : 9
expr_parentheses     : 47 48 72 73
fds_id               : 133
fds_parameter        : 133
fds_statements       : 133
for_expr_COLON_EXPR  : 77 173
for_expr_OPT         : 57 58 58 59 59 60 61 61 62 63 63 63
for_parameters       : 55
for_statement        : 36
foreach_statement    : 37
function_call        : 28
function_call_list_COLON_FUNCTION : 81 178
function_call_parameter : 81 82 178 179
function_call_parameter_list : 79
function_declaration_statement : 5
global_var           : 41 42 67 68
if_statement         : 33
if_statement_complement : 43
inner_statement      : 3 4 169 170
inner_statement_MUL  : 134 169
main                 : 0
main_INNER           : 1 3
parameter            : 140 141 182 183
parameter_list       : 138
parameter_list_COLON_PARAMETER : 140 182
parameter_prefix     : 143 145
parameter_type       : 146 148
reference_variable   : 125 126
reference_variable_SELECTOR : 127 184
return_statement     : 40
scalar               : 29
selector             : 184 185
simple_indirect_reference_DOLAR : 126 186
statement            : 6 171 172 175
statement_BLOCK_OPT  : 47 48 55 72 73 74 75 76
statement_COLON_GLOBAL : 41 67
statement_MUL        : 171 176
statement_else       : 46
statement_elseif     : 45
statement_if         : 43 44
static_scalar        : 144 145 158 159
type_cast_operator   : 15
unary_operator       : 
variable             : 13 14 16 17 18 19 20 85 167 168
while_statement      : 34

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (133) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 50


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (3) main_INNER -> inner_statement . main_INNER
    (4) main_INNER -> inner_statement .
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (133) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     reduce using rule 4 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 51
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 6

    (5) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 5 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 5 (inner_statement -> function_declaration_statement .)


state 7

    (6) inner_statement -> statement .

    FUNCTION        reduce using rule 6 (inner_statement -> statement .)
    GLOBAL          reduce using rule 6 (inner_statement -> statement .)
    WHILE           reduce using rule 6 (inner_statement -> statement .)
    DO              reduce using rule 6 (inner_statement -> statement .)
    FOR             reduce using rule 6 (inner_statement -> statement .)
    FOREACH         reduce using rule 6 (inner_statement -> statement .)
    BREAK           reduce using rule 6 (inner_statement -> statement .)
    CONTINUE        reduce using rule 6 (inner_statement -> statement .)
    RETURN          reduce using rule 6 (inner_statement -> statement .)
    INCREMENT       reduce using rule 6 (inner_statement -> statement .)
    DECREMENT       reduce using rule 6 (inner_statement -> statement .)
    LPAREN          reduce using rule 6 (inner_statement -> statement .)
    EXIT            reduce using rule 6 (inner_statement -> statement .)
    DIE             reduce using rule 6 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 6 (inner_statement -> statement .)
    TRUE            reduce using rule 6 (inner_statement -> statement .)
    FALSE           reduce using rule 6 (inner_statement -> statement .)
    IF              reduce using rule 6 (inner_statement -> statement .)
    ID              reduce using rule 6 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 6 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 6 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (inner_statement -> statement .)
    DOLAR           reduce using rule 6 (inner_statement -> statement .)
    VARIABLE        reduce using rule 6 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 6 (inner_statement -> statement .)
    RKEY            reduce using rule 6 (inner_statement -> statement .)


state 8

    (133) function_declaration_statement -> FUNCTION . fds_id fds_parameter fds_statements
    (136) fds_id -> . AMPERSAND ID
    (137) fds_id -> . ID

    AMPERSAND       shift and go to state 53
    ID              shift and go to state 54

    fds_id                         shift and go to state 52

state 9

    (32) statement -> expr . SEMICOLON

    SEMICOLON       shift and go to state 55


state 10

    (33) statement -> if_statement .

    FUNCTION        reduce using rule 33 (statement -> if_statement .)
    GLOBAL          reduce using rule 33 (statement -> if_statement .)
    WHILE           reduce using rule 33 (statement -> if_statement .)
    DO              reduce using rule 33 (statement -> if_statement .)
    FOR             reduce using rule 33 (statement -> if_statement .)
    FOREACH         reduce using rule 33 (statement -> if_statement .)
    BREAK           reduce using rule 33 (statement -> if_statement .)
    CONTINUE        reduce using rule 33 (statement -> if_statement .)
    RETURN          reduce using rule 33 (statement -> if_statement .)
    INCREMENT       reduce using rule 33 (statement -> if_statement .)
    DECREMENT       reduce using rule 33 (statement -> if_statement .)
    LPAREN          reduce using rule 33 (statement -> if_statement .)
    EXIT            reduce using rule 33 (statement -> if_statement .)
    DIE             reduce using rule 33 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 33 (statement -> if_statement .)
    TRUE            reduce using rule 33 (statement -> if_statement .)
    FALSE           reduce using rule 33 (statement -> if_statement .)
    IF              reduce using rule 33 (statement -> if_statement .)
    ID              reduce using rule 33 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 33 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 33 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 33 (statement -> if_statement .)
    DOLAR           reduce using rule 33 (statement -> if_statement .)
    VARIABLE        reduce using rule 33 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 33 (statement -> if_statement .)
    RKEY            reduce using rule 33 (statement -> if_statement .)
    ELSEIF          reduce using rule 33 (statement -> if_statement .)
    ELSE            reduce using rule 33 (statement -> if_statement .)


state 11

    (34) statement -> while_statement .

    FUNCTION        reduce using rule 34 (statement -> while_statement .)
    GLOBAL          reduce using rule 34 (statement -> while_statement .)
    WHILE           reduce using rule 34 (statement -> while_statement .)
    DO              reduce using rule 34 (statement -> while_statement .)
    FOR             reduce using rule 34 (statement -> while_statement .)
    FOREACH         reduce using rule 34 (statement -> while_statement .)
    BREAK           reduce using rule 34 (statement -> while_statement .)
    CONTINUE        reduce using rule 34 (statement -> while_statement .)
    RETURN          reduce using rule 34 (statement -> while_statement .)
    INCREMENT       reduce using rule 34 (statement -> while_statement .)
    DECREMENT       reduce using rule 34 (statement -> while_statement .)
    LPAREN          reduce using rule 34 (statement -> while_statement .)
    EXIT            reduce using rule 34 (statement -> while_statement .)
    DIE             reduce using rule 34 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 34 (statement -> while_statement .)
    TRUE            reduce using rule 34 (statement -> while_statement .)
    FALSE           reduce using rule 34 (statement -> while_statement .)
    IF              reduce using rule 34 (statement -> while_statement .)
    ID              reduce using rule 34 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 34 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 34 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 34 (statement -> while_statement .)
    DOLAR           reduce using rule 34 (statement -> while_statement .)
    VARIABLE        reduce using rule 34 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 34 (statement -> while_statement .)
    RKEY            reduce using rule 34 (statement -> while_statement .)
    ELSEIF          reduce using rule 34 (statement -> while_statement .)
    ELSE            reduce using rule 34 (statement -> while_statement .)


state 12

    (35) statement -> do_statement .

    FUNCTION        reduce using rule 35 (statement -> do_statement .)
    GLOBAL          reduce using rule 35 (statement -> do_statement .)
    WHILE           reduce using rule 35 (statement -> do_statement .)
    DO              reduce using rule 35 (statement -> do_statement .)
    FOR             reduce using rule 35 (statement -> do_statement .)
    FOREACH         reduce using rule 35 (statement -> do_statement .)
    BREAK           reduce using rule 35 (statement -> do_statement .)
    CONTINUE        reduce using rule 35 (statement -> do_statement .)
    RETURN          reduce using rule 35 (statement -> do_statement .)
    INCREMENT       reduce using rule 35 (statement -> do_statement .)
    DECREMENT       reduce using rule 35 (statement -> do_statement .)
    LPAREN          reduce using rule 35 (statement -> do_statement .)
    EXIT            reduce using rule 35 (statement -> do_statement .)
    DIE             reduce using rule 35 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 35 (statement -> do_statement .)
    TRUE            reduce using rule 35 (statement -> do_statement .)
    FALSE           reduce using rule 35 (statement -> do_statement .)
    IF              reduce using rule 35 (statement -> do_statement .)
    ID              reduce using rule 35 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 35 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 35 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 35 (statement -> do_statement .)
    DOLAR           reduce using rule 35 (statement -> do_statement .)
    VARIABLE        reduce using rule 35 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 35 (statement -> do_statement .)
    RKEY            reduce using rule 35 (statement -> do_statement .)
    ELSEIF          reduce using rule 35 (statement -> do_statement .)
    ELSE            reduce using rule 35 (statement -> do_statement .)


state 13

    (36) statement -> for_statement .

    FUNCTION        reduce using rule 36 (statement -> for_statement .)
    GLOBAL          reduce using rule 36 (statement -> for_statement .)
    WHILE           reduce using rule 36 (statement -> for_statement .)
    DO              reduce using rule 36 (statement -> for_statement .)
    FOR             reduce using rule 36 (statement -> for_statement .)
    FOREACH         reduce using rule 36 (statement -> for_statement .)
    BREAK           reduce using rule 36 (statement -> for_statement .)
    CONTINUE        reduce using rule 36 (statement -> for_statement .)
    RETURN          reduce using rule 36 (statement -> for_statement .)
    INCREMENT       reduce using rule 36 (statement -> for_statement .)
    DECREMENT       reduce using rule 36 (statement -> for_statement .)
    LPAREN          reduce using rule 36 (statement -> for_statement .)
    EXIT            reduce using rule 36 (statement -> for_statement .)
    DIE             reduce using rule 36 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 36 (statement -> for_statement .)
    TRUE            reduce using rule 36 (statement -> for_statement .)
    FALSE           reduce using rule 36 (statement -> for_statement .)
    IF              reduce using rule 36 (statement -> for_statement .)
    ID              reduce using rule 36 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 36 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 36 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 36 (statement -> for_statement .)
    DOLAR           reduce using rule 36 (statement -> for_statement .)
    VARIABLE        reduce using rule 36 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 36 (statement -> for_statement .)
    RKEY            reduce using rule 36 (statement -> for_statement .)
    ELSEIF          reduce using rule 36 (statement -> for_statement .)
    ELSE            reduce using rule 36 (statement -> for_statement .)


state 14

    (37) statement -> foreach_statement .

    FUNCTION        reduce using rule 37 (statement -> foreach_statement .)
    GLOBAL          reduce using rule 37 (statement -> foreach_statement .)
    WHILE           reduce using rule 37 (statement -> foreach_statement .)
    DO              reduce using rule 37 (statement -> foreach_statement .)
    FOR             reduce using rule 37 (statement -> foreach_statement .)
    FOREACH         reduce using rule 37 (statement -> foreach_statement .)
    BREAK           reduce using rule 37 (statement -> foreach_statement .)
    CONTINUE        reduce using rule 37 (statement -> foreach_statement .)
    RETURN          reduce using rule 37 (statement -> foreach_statement .)
    INCREMENT       reduce using rule 37 (statement -> foreach_statement .)
    DECREMENT       reduce using rule 37 (statement -> foreach_statement .)
    LPAREN          reduce using rule 37 (statement -> foreach_statement .)
    EXIT            reduce using rule 37 (statement -> foreach_statement .)
    DIE             reduce using rule 37 (statement -> foreach_statement .)
    ARRAY_TYPE      reduce using rule 37 (statement -> foreach_statement .)
    TRUE            reduce using rule 37 (statement -> foreach_statement .)
    FALSE           reduce using rule 37 (statement -> foreach_statement .)
    IF              reduce using rule 37 (statement -> foreach_statement .)
    ID              reduce using rule 37 (statement -> foreach_statement .)
    NUMBER_REAL     reduce using rule 37 (statement -> foreach_statement .)
    NUMBER_INTEGER  reduce using rule 37 (statement -> foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 37 (statement -> foreach_statement .)
    DOLAR           reduce using rule 37 (statement -> foreach_statement .)
    VARIABLE        reduce using rule 37 (statement -> foreach_statement .)
    END_PROGRAM     reduce using rule 37 (statement -> foreach_statement .)
    RKEY            reduce using rule 37 (statement -> foreach_statement .)
    ELSEIF          reduce using rule 37 (statement -> foreach_statement .)
    ELSE            reduce using rule 37 (statement -> foreach_statement .)


state 15

    (38) statement -> break_statement .

    FUNCTION        reduce using rule 38 (statement -> break_statement .)
    GLOBAL          reduce using rule 38 (statement -> break_statement .)
    WHILE           reduce using rule 38 (statement -> break_statement .)
    DO              reduce using rule 38 (statement -> break_statement .)
    FOR             reduce using rule 38 (statement -> break_statement .)
    FOREACH         reduce using rule 38 (statement -> break_statement .)
    BREAK           reduce using rule 38 (statement -> break_statement .)
    CONTINUE        reduce using rule 38 (statement -> break_statement .)
    RETURN          reduce using rule 38 (statement -> break_statement .)
    INCREMENT       reduce using rule 38 (statement -> break_statement .)
    DECREMENT       reduce using rule 38 (statement -> break_statement .)
    LPAREN          reduce using rule 38 (statement -> break_statement .)
    EXIT            reduce using rule 38 (statement -> break_statement .)
    DIE             reduce using rule 38 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 38 (statement -> break_statement .)
    TRUE            reduce using rule 38 (statement -> break_statement .)
    FALSE           reduce using rule 38 (statement -> break_statement .)
    IF              reduce using rule 38 (statement -> break_statement .)
    ID              reduce using rule 38 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 38 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 38 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 38 (statement -> break_statement .)
    DOLAR           reduce using rule 38 (statement -> break_statement .)
    VARIABLE        reduce using rule 38 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 38 (statement -> break_statement .)
    RKEY            reduce using rule 38 (statement -> break_statement .)
    ELSEIF          reduce using rule 38 (statement -> break_statement .)
    ELSE            reduce using rule 38 (statement -> break_statement .)


state 16

    (39) statement -> continue_statement .

    FUNCTION        reduce using rule 39 (statement -> continue_statement .)
    GLOBAL          reduce using rule 39 (statement -> continue_statement .)
    WHILE           reduce using rule 39 (statement -> continue_statement .)
    DO              reduce using rule 39 (statement -> continue_statement .)
    FOR             reduce using rule 39 (statement -> continue_statement .)
    FOREACH         reduce using rule 39 (statement -> continue_statement .)
    BREAK           reduce using rule 39 (statement -> continue_statement .)
    CONTINUE        reduce using rule 39 (statement -> continue_statement .)
    RETURN          reduce using rule 39 (statement -> continue_statement .)
    INCREMENT       reduce using rule 39 (statement -> continue_statement .)
    DECREMENT       reduce using rule 39 (statement -> continue_statement .)
    LPAREN          reduce using rule 39 (statement -> continue_statement .)
    EXIT            reduce using rule 39 (statement -> continue_statement .)
    DIE             reduce using rule 39 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 39 (statement -> continue_statement .)
    TRUE            reduce using rule 39 (statement -> continue_statement .)
    FALSE           reduce using rule 39 (statement -> continue_statement .)
    IF              reduce using rule 39 (statement -> continue_statement .)
    ID              reduce using rule 39 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 39 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 39 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 39 (statement -> continue_statement .)
    DOLAR           reduce using rule 39 (statement -> continue_statement .)
    VARIABLE        reduce using rule 39 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 39 (statement -> continue_statement .)
    RKEY            reduce using rule 39 (statement -> continue_statement .)
    ELSEIF          reduce using rule 39 (statement -> continue_statement .)
    ELSE            reduce using rule 39 (statement -> continue_statement .)


state 17

    (40) statement -> return_statement .

    FUNCTION        reduce using rule 40 (statement -> return_statement .)
    GLOBAL          reduce using rule 40 (statement -> return_statement .)
    WHILE           reduce using rule 40 (statement -> return_statement .)
    DO              reduce using rule 40 (statement -> return_statement .)
    FOR             reduce using rule 40 (statement -> return_statement .)
    FOREACH         reduce using rule 40 (statement -> return_statement .)
    BREAK           reduce using rule 40 (statement -> return_statement .)
    CONTINUE        reduce using rule 40 (statement -> return_statement .)
    RETURN          reduce using rule 40 (statement -> return_statement .)
    INCREMENT       reduce using rule 40 (statement -> return_statement .)
    DECREMENT       reduce using rule 40 (statement -> return_statement .)
    LPAREN          reduce using rule 40 (statement -> return_statement .)
    EXIT            reduce using rule 40 (statement -> return_statement .)
    DIE             reduce using rule 40 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 40 (statement -> return_statement .)
    TRUE            reduce using rule 40 (statement -> return_statement .)
    FALSE           reduce using rule 40 (statement -> return_statement .)
    IF              reduce using rule 40 (statement -> return_statement .)
    ID              reduce using rule 40 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 40 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 40 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 40 (statement -> return_statement .)
    DOLAR           reduce using rule 40 (statement -> return_statement .)
    VARIABLE        reduce using rule 40 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 40 (statement -> return_statement .)
    RKEY            reduce using rule 40 (statement -> return_statement .)
    ELSEIF          reduce using rule 40 (statement -> return_statement .)
    ELSE            reduce using rule 40 (statement -> return_statement .)


state 18

    (41) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> GLOBAL . global_var SEMICOLON
    (64) global_var -> . VARIABLE
    (65) global_var -> . DOLAR VARIABLE
    (66) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 57
    DOLAR           shift and go to state 58

    global_var                     shift and go to state 56

state 19

    (7) expr -> expr1 . expr2
    (8) expr -> expr1 .
    (10) expr2 -> . INTE_DOT expr DDOT expr
    (11) expr2 -> . comparission_operator expr
    (12) expr2 -> . arithmetic_operator expr
    (110) comparission_operator -> . EQUALS
    (111) comparission_operator -> . GREAT_THAN
    (112) comparission_operator -> . LESS_THAN
    (113) comparission_operator -> . LESS_EQUAL
    (114) comparission_operator -> . GREAT_EQUAL
    (115) comparission_operator -> . NOT_EQUAL
    (116) comparission_operator -> . LEFT_LOGICAL
    (117) comparission_operator -> . RIGHT_LOGICAL
    (118) comparission_operator -> . AND
    (119) comparission_operator -> . OR
    (105) arithmetic_operator -> . PLUS
    (106) arithmetic_operator -> . DIVIDE
    (107) arithmetic_operator -> . PERCENT
    (108) arithmetic_operator -> . TIMES
    (109) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 8 (expr -> expr1 .)
    RPAREN          reduce using rule 8 (expr -> expr1 .)
    DDOT            reduce using rule 8 (expr -> expr1 .)
    COLON           reduce using rule 8 (expr -> expr1 .)
    AS              reduce using rule 8 (expr -> expr1 .)
    ATTR_ASSOC      reduce using rule 8 (expr -> expr1 .)
    RBRACKET        reduce using rule 8 (expr -> expr1 .)
    RKEY            reduce using rule 8 (expr -> expr1 .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    PLUS            shift and go to state 73
    DIVIDE          shift and go to state 74
    PERCENT         shift and go to state 75
    TIMES           shift and go to state 76
    MINUS           shift and go to state 77

    expr2                          shift and go to state 59
    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 20

    (9) expr -> expr3 .

    SEMICOLON       reduce using rule 9 (expr -> expr3 .)
    RPAREN          reduce using rule 9 (expr -> expr3 .)
    DDOT            reduce using rule 9 (expr -> expr3 .)
    COLON           reduce using rule 9 (expr -> expr3 .)
    AS              reduce using rule 9 (expr -> expr3 .)
    ATTR_ASSOC      reduce using rule 9 (expr -> expr3 .)
    RBRACKET        reduce using rule 9 (expr -> expr3 .)
    RKEY            reduce using rule 9 (expr -> expr3 .)


state 21

    (43) if_statement -> statement_if . if_statement_complement
    (44) if_statement -> statement_if .
    (45) if_statement_complement -> . statement_elseif
    (46) if_statement_complement -> . statement_else
    (73) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT
    (74) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 44 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 44 (if_statement -> statement_if .)
    WHILE           reduce using rule 44 (if_statement -> statement_if .)
    DO              reduce using rule 44 (if_statement -> statement_if .)
    FOR             reduce using rule 44 (if_statement -> statement_if .)
    FOREACH         reduce using rule 44 (if_statement -> statement_if .)
    BREAK           reduce using rule 44 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 44 (if_statement -> statement_if .)
    RETURN          reduce using rule 44 (if_statement -> statement_if .)
    INCREMENT       reduce using rule 44 (if_statement -> statement_if .)
    DECREMENT       reduce using rule 44 (if_statement -> statement_if .)
    LPAREN          reduce using rule 44 (if_statement -> statement_if .)
    EXIT            reduce using rule 44 (if_statement -> statement_if .)
    DIE             reduce using rule 44 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 44 (if_statement -> statement_if .)
    TRUE            reduce using rule 44 (if_statement -> statement_if .)
    FALSE           reduce using rule 44 (if_statement -> statement_if .)
    IF              reduce using rule 44 (if_statement -> statement_if .)
    ID              reduce using rule 44 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 44 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 44 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (if_statement -> statement_if .)
    DOLAR           reduce using rule 44 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 44 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 44 (if_statement -> statement_if .)
    RKEY            reduce using rule 44 (if_statement -> statement_if .)
    ELSEIF          shift and go to state 81
    ELSE            shift and go to state 82

  ! ELSEIF          [ reduce using rule 44 (if_statement -> statement_if .) ]
  ! ELSE            [ reduce using rule 44 (if_statement -> statement_if .) ]

    if_statement_complement        shift and go to state 78
    statement_elseif               shift and go to state 79
    statement_else                 shift and go to state 80

state 22

    (47) while_statement -> WHILE . expr_parentheses statement_BLOCK_OPT
    (71) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 84

    expr_parentheses               shift and go to state 83

state 23

    (48) do_statement -> DO . statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (175) statement_BLOCK_OPT -> . statement
    (176) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (177) statement_BLOCK_OPT -> . LKEY RKEY
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 87
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 85
    statement                      shift and go to state 86
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 24

    (55) for_statement -> FOR . LPAREN for_parameters RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 88


state 25

    (21) expr1 -> LPAREN . expr RPAREN
    (15) expr3 -> LPAREN . type_cast_operator RPAREN expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (90) type_cast_operator -> . INT_TYPE
    (91) type_cast_operator -> . DOUBLE_TYPE
    (92) type_cast_operator -> . FLOAT_TYPE
    (93) type_cast_operator -> . REAL_TYPE
    (94) type_cast_operator -> . STRING_TYPE
    (95) type_cast_operator -> . ARRAY_TYPE
    (96) type_cast_operator -> . BOOLEAN_TYPE
    (97) type_cast_operator -> . BOOL_TYPE
    (98) type_cast_operator -> . UNSET
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INT_TYPE        shift and go to state 91
    DOUBLE_TYPE     shift and go to state 92
    FLOAT_TYPE      shift and go to state 93
    REAL_TYPE       shift and go to state 94
    STRING_TYPE     shift and go to state 95
    ARRAY_TYPE      shift and go to state 96
    BOOLEAN_TYPE    shift and go to state 97
    BOOL_TYPE       shift and go to state 98
    UNSET           shift and go to state 99
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 89
    type_cast_operator             shift and go to state 90
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 26

    (75) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 100


state 27

    (49) break_statement -> BREAK . expr SEMICOLON
    (50) break_statement -> BREAK . SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 102
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 101
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 28

    (51) continue_statement -> CONTINUE . expr SEMICOLON
    (52) continue_statement -> CONTINUE . SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 104
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 103
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 29

    (53) return_statement -> RETURN . expr SEMICOLON
    (54) return_statement -> RETURN . SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 106
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 105
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 30

    (16) expr1 -> INCREMENT . variable
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 107
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 31

    (17) expr1 -> variable . INCREMENT
    (19) expr1 -> variable . DECREMENT
    (20) expr1 -> variable .
    (13) expr3 -> variable . assign_operator expr
    (14) expr3 -> variable . assign_operator AMPERSAND expr
    (99) assign_operator -> . ADD_ASSIGN
    (100) assign_operator -> . SUB_ASSIGN
    (101) assign_operator -> . MOD_ASSIGN
    (102) assign_operator -> . PLUS_ASSIGN
    (103) assign_operator -> . DIVIDE_ASSIGN
    (104) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 108
    DECREMENT       shift and go to state 109
    INTE_DOT        reduce using rule 20 (expr1 -> variable .)
    EQUALS          reduce using rule 20 (expr1 -> variable .)
    GREAT_THAN      reduce using rule 20 (expr1 -> variable .)
    LESS_THAN       reduce using rule 20 (expr1 -> variable .)
    LESS_EQUAL      reduce using rule 20 (expr1 -> variable .)
    GREAT_EQUAL     reduce using rule 20 (expr1 -> variable .)
    NOT_EQUAL       reduce using rule 20 (expr1 -> variable .)
    LEFT_LOGICAL    reduce using rule 20 (expr1 -> variable .)
    RIGHT_LOGICAL   reduce using rule 20 (expr1 -> variable .)
    AND             reduce using rule 20 (expr1 -> variable .)
    OR              reduce using rule 20 (expr1 -> variable .)
    PLUS            reduce using rule 20 (expr1 -> variable .)
    DIVIDE          reduce using rule 20 (expr1 -> variable .)
    PERCENT         reduce using rule 20 (expr1 -> variable .)
    TIMES           reduce using rule 20 (expr1 -> variable .)
    MINUS           reduce using rule 20 (expr1 -> variable .)
    SEMICOLON       reduce using rule 20 (expr1 -> variable .)
    RPAREN          reduce using rule 20 (expr1 -> variable .)
    DDOT            reduce using rule 20 (expr1 -> variable .)
    COLON           reduce using rule 20 (expr1 -> variable .)
    AS              reduce using rule 20 (expr1 -> variable .)
    ATTR_ASSOC      reduce using rule 20 (expr1 -> variable .)
    RBRACKET        reduce using rule 20 (expr1 -> variable .)
    RKEY            reduce using rule 20 (expr1 -> variable .)
    ADD_ASSIGN      shift and go to state 111
    SUB_ASSIGN      shift and go to state 112
    MOD_ASSIGN      shift and go to state 113
    PLUS_ASSIGN     shift and go to state 114
    DIVIDE_ASSIGN   shift and go to state 115
    ASSIGN          shift and go to state 116

    assign_operator                shift and go to state 110

state 32

    (18) expr1 -> DECREMENT . variable
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 117
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 33

    (22) expr1 -> EXIT . exit_expr
    (23) expr1 -> EXIT .
    (123) exit_expr -> . LPAREN expr RPAREN
    (124) exit_expr -> . LPAREN RPAREN

    INTE_DOT        reduce using rule 23 (expr1 -> EXIT .)
    EQUALS          reduce using rule 23 (expr1 -> EXIT .)
    GREAT_THAN      reduce using rule 23 (expr1 -> EXIT .)
    LESS_THAN       reduce using rule 23 (expr1 -> EXIT .)
    LESS_EQUAL      reduce using rule 23 (expr1 -> EXIT .)
    GREAT_EQUAL     reduce using rule 23 (expr1 -> EXIT .)
    NOT_EQUAL       reduce using rule 23 (expr1 -> EXIT .)
    LEFT_LOGICAL    reduce using rule 23 (expr1 -> EXIT .)
    RIGHT_LOGICAL   reduce using rule 23 (expr1 -> EXIT .)
    AND             reduce using rule 23 (expr1 -> EXIT .)
    OR              reduce using rule 23 (expr1 -> EXIT .)
    PLUS            reduce using rule 23 (expr1 -> EXIT .)
    DIVIDE          reduce using rule 23 (expr1 -> EXIT .)
    PERCENT         reduce using rule 23 (expr1 -> EXIT .)
    TIMES           reduce using rule 23 (expr1 -> EXIT .)
    MINUS           reduce using rule 23 (expr1 -> EXIT .)
    SEMICOLON       reduce using rule 23 (expr1 -> EXIT .)
    RPAREN          reduce using rule 23 (expr1 -> EXIT .)
    DDOT            reduce using rule 23 (expr1 -> EXIT .)
    COLON           reduce using rule 23 (expr1 -> EXIT .)
    AS              reduce using rule 23 (expr1 -> EXIT .)
    ATTR_ASSOC      reduce using rule 23 (expr1 -> EXIT .)
    RBRACKET        reduce using rule 23 (expr1 -> EXIT .)
    RKEY            reduce using rule 23 (expr1 -> EXIT .)
    LPAREN          shift and go to state 119

    exit_expr                      shift and go to state 118

state 34

    (24) expr1 -> DIE . exit_expr
    (25) expr1 -> DIE .
    (123) exit_expr -> . LPAREN expr RPAREN
    (124) exit_expr -> . LPAREN RPAREN

    INTE_DOT        reduce using rule 25 (expr1 -> DIE .)
    EQUALS          reduce using rule 25 (expr1 -> DIE .)
    GREAT_THAN      reduce using rule 25 (expr1 -> DIE .)
    LESS_THAN       reduce using rule 25 (expr1 -> DIE .)
    LESS_EQUAL      reduce using rule 25 (expr1 -> DIE .)
    GREAT_EQUAL     reduce using rule 25 (expr1 -> DIE .)
    NOT_EQUAL       reduce using rule 25 (expr1 -> DIE .)
    LEFT_LOGICAL    reduce using rule 25 (expr1 -> DIE .)
    RIGHT_LOGICAL   reduce using rule 25 (expr1 -> DIE .)
    AND             reduce using rule 25 (expr1 -> DIE .)
    OR              reduce using rule 25 (expr1 -> DIE .)
    PLUS            reduce using rule 25 (expr1 -> DIE .)
    DIVIDE          reduce using rule 25 (expr1 -> DIE .)
    PERCENT         reduce using rule 25 (expr1 -> DIE .)
    TIMES           reduce using rule 25 (expr1 -> DIE .)
    MINUS           reduce using rule 25 (expr1 -> DIE .)
    SEMICOLON       reduce using rule 25 (expr1 -> DIE .)
    RPAREN          reduce using rule 25 (expr1 -> DIE .)
    DDOT            reduce using rule 25 (expr1 -> DIE .)
    COLON           reduce using rule 25 (expr1 -> DIE .)
    AS              reduce using rule 25 (expr1 -> DIE .)
    ATTR_ASSOC      reduce using rule 25 (expr1 -> DIE .)
    RBRACKET        reduce using rule 25 (expr1 -> DIE .)
    RKEY            reduce using rule 25 (expr1 -> DIE .)
    LPAREN          shift and go to state 119

    exit_expr                      shift and go to state 120

state 35

    (26) expr1 -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (27) expr1 -> ARRAY_TYPE . LPAREN RPAREN

    LPAREN          shift and go to state 121


state 36

    (28) expr1 -> function_call .

    INTE_DOT        reduce using rule 28 (expr1 -> function_call .)
    EQUALS          reduce using rule 28 (expr1 -> function_call .)
    GREAT_THAN      reduce using rule 28 (expr1 -> function_call .)
    LESS_THAN       reduce using rule 28 (expr1 -> function_call .)
    LESS_EQUAL      reduce using rule 28 (expr1 -> function_call .)
    GREAT_EQUAL     reduce using rule 28 (expr1 -> function_call .)
    NOT_EQUAL       reduce using rule 28 (expr1 -> function_call .)
    LEFT_LOGICAL    reduce using rule 28 (expr1 -> function_call .)
    RIGHT_LOGICAL   reduce using rule 28 (expr1 -> function_call .)
    AND             reduce using rule 28 (expr1 -> function_call .)
    OR              reduce using rule 28 (expr1 -> function_call .)
    PLUS            reduce using rule 28 (expr1 -> function_call .)
    DIVIDE          reduce using rule 28 (expr1 -> function_call .)
    PERCENT         reduce using rule 28 (expr1 -> function_call .)
    TIMES           reduce using rule 28 (expr1 -> function_call .)
    MINUS           reduce using rule 28 (expr1 -> function_call .)
    SEMICOLON       reduce using rule 28 (expr1 -> function_call .)
    RPAREN          reduce using rule 28 (expr1 -> function_call .)
    DDOT            reduce using rule 28 (expr1 -> function_call .)
    COLON           reduce using rule 28 (expr1 -> function_call .)
    AS              reduce using rule 28 (expr1 -> function_call .)
    ATTR_ASSOC      reduce using rule 28 (expr1 -> function_call .)
    RBRACKET        reduce using rule 28 (expr1 -> function_call .)
    RKEY            reduce using rule 28 (expr1 -> function_call .)


state 37

    (29) expr1 -> scalar .

    INTE_DOT        reduce using rule 29 (expr1 -> scalar .)
    EQUALS          reduce using rule 29 (expr1 -> scalar .)
    GREAT_THAN      reduce using rule 29 (expr1 -> scalar .)
    LESS_THAN       reduce using rule 29 (expr1 -> scalar .)
    LESS_EQUAL      reduce using rule 29 (expr1 -> scalar .)
    GREAT_EQUAL     reduce using rule 29 (expr1 -> scalar .)
    NOT_EQUAL       reduce using rule 29 (expr1 -> scalar .)
    LEFT_LOGICAL    reduce using rule 29 (expr1 -> scalar .)
    RIGHT_LOGICAL   reduce using rule 29 (expr1 -> scalar .)
    AND             reduce using rule 29 (expr1 -> scalar .)
    OR              reduce using rule 29 (expr1 -> scalar .)
    PLUS            reduce using rule 29 (expr1 -> scalar .)
    DIVIDE          reduce using rule 29 (expr1 -> scalar .)
    PERCENT         reduce using rule 29 (expr1 -> scalar .)
    TIMES           reduce using rule 29 (expr1 -> scalar .)
    MINUS           reduce using rule 29 (expr1 -> scalar .)
    SEMICOLON       reduce using rule 29 (expr1 -> scalar .)
    RPAREN          reduce using rule 29 (expr1 -> scalar .)
    DDOT            reduce using rule 29 (expr1 -> scalar .)
    COLON           reduce using rule 29 (expr1 -> scalar .)
    AS              reduce using rule 29 (expr1 -> scalar .)
    ATTR_ASSOC      reduce using rule 29 (expr1 -> scalar .)
    RBRACKET        reduce using rule 29 (expr1 -> scalar .)
    RKEY            reduce using rule 29 (expr1 -> scalar .)


state 38

    (30) expr1 -> TRUE .

    INTE_DOT        reduce using rule 30 (expr1 -> TRUE .)
    EQUALS          reduce using rule 30 (expr1 -> TRUE .)
    GREAT_THAN      reduce using rule 30 (expr1 -> TRUE .)
    LESS_THAN       reduce using rule 30 (expr1 -> TRUE .)
    LESS_EQUAL      reduce using rule 30 (expr1 -> TRUE .)
    GREAT_EQUAL     reduce using rule 30 (expr1 -> TRUE .)
    NOT_EQUAL       reduce using rule 30 (expr1 -> TRUE .)
    LEFT_LOGICAL    reduce using rule 30 (expr1 -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 30 (expr1 -> TRUE .)
    AND             reduce using rule 30 (expr1 -> TRUE .)
    OR              reduce using rule 30 (expr1 -> TRUE .)
    PLUS            reduce using rule 30 (expr1 -> TRUE .)
    DIVIDE          reduce using rule 30 (expr1 -> TRUE .)
    PERCENT         reduce using rule 30 (expr1 -> TRUE .)
    TIMES           reduce using rule 30 (expr1 -> TRUE .)
    MINUS           reduce using rule 30 (expr1 -> TRUE .)
    SEMICOLON       reduce using rule 30 (expr1 -> TRUE .)
    RPAREN          reduce using rule 30 (expr1 -> TRUE .)
    DDOT            reduce using rule 30 (expr1 -> TRUE .)
    COLON           reduce using rule 30 (expr1 -> TRUE .)
    AS              reduce using rule 30 (expr1 -> TRUE .)
    ATTR_ASSOC      reduce using rule 30 (expr1 -> TRUE .)
    RBRACKET        reduce using rule 30 (expr1 -> TRUE .)
    RKEY            reduce using rule 30 (expr1 -> TRUE .)


state 39

    (31) expr1 -> FALSE .

    INTE_DOT        reduce using rule 31 (expr1 -> FALSE .)
    EQUALS          reduce using rule 31 (expr1 -> FALSE .)
    GREAT_THAN      reduce using rule 31 (expr1 -> FALSE .)
    LESS_THAN       reduce using rule 31 (expr1 -> FALSE .)
    LESS_EQUAL      reduce using rule 31 (expr1 -> FALSE .)
    GREAT_EQUAL     reduce using rule 31 (expr1 -> FALSE .)
    NOT_EQUAL       reduce using rule 31 (expr1 -> FALSE .)
    LEFT_LOGICAL    reduce using rule 31 (expr1 -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 31 (expr1 -> FALSE .)
    AND             reduce using rule 31 (expr1 -> FALSE .)
    OR              reduce using rule 31 (expr1 -> FALSE .)
    PLUS            reduce using rule 31 (expr1 -> FALSE .)
    DIVIDE          reduce using rule 31 (expr1 -> FALSE .)
    PERCENT         reduce using rule 31 (expr1 -> FALSE .)
    TIMES           reduce using rule 31 (expr1 -> FALSE .)
    MINUS           reduce using rule 31 (expr1 -> FALSE .)
    SEMICOLON       reduce using rule 31 (expr1 -> FALSE .)
    RPAREN          reduce using rule 31 (expr1 -> FALSE .)
    DDOT            reduce using rule 31 (expr1 -> FALSE .)
    COLON           reduce using rule 31 (expr1 -> FALSE .)
    AS              reduce using rule 31 (expr1 -> FALSE .)
    ATTR_ASSOC      reduce using rule 31 (expr1 -> FALSE .)
    RBRACKET        reduce using rule 31 (expr1 -> FALSE .)
    RKEY            reduce using rule 31 (expr1 -> FALSE .)


state 40

    (72) statement_if -> IF . expr_parentheses statement_BLOCK_OPT
    (71) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 84

    expr_parentheses               shift and go to state 122

state 41

    (125) variable -> reference_variable .

    INCREMENT       reduce using rule 125 (variable -> reference_variable .)
    DECREMENT       reduce using rule 125 (variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 125 (variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 125 (variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 125 (variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 125 (variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 125 (variable -> reference_variable .)
    ASSIGN          reduce using rule 125 (variable -> reference_variable .)
    INTE_DOT        reduce using rule 125 (variable -> reference_variable .)
    EQUALS          reduce using rule 125 (variable -> reference_variable .)
    GREAT_THAN      reduce using rule 125 (variable -> reference_variable .)
    LESS_THAN       reduce using rule 125 (variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 125 (variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 125 (variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 125 (variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 125 (variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 125 (variable -> reference_variable .)
    AND             reduce using rule 125 (variable -> reference_variable .)
    OR              reduce using rule 125 (variable -> reference_variable .)
    PLUS            reduce using rule 125 (variable -> reference_variable .)
    DIVIDE          reduce using rule 125 (variable -> reference_variable .)
    PERCENT         reduce using rule 125 (variable -> reference_variable .)
    TIMES           reduce using rule 125 (variable -> reference_variable .)
    MINUS           reduce using rule 125 (variable -> reference_variable .)
    SEMICOLON       reduce using rule 125 (variable -> reference_variable .)
    RPAREN          reduce using rule 125 (variable -> reference_variable .)
    DDOT            reduce using rule 125 (variable -> reference_variable .)
    COLON           reduce using rule 125 (variable -> reference_variable .)
    AS              reduce using rule 125 (variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 125 (variable -> reference_variable .)
    RBRACKET        reduce using rule 125 (variable -> reference_variable .)
    RKEY            reduce using rule 125 (variable -> reference_variable .)


state 42

    (126) variable -> simple_indirect_reference_DOLAR . reference_variable
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 49
    DOLAR           shift and go to state 124

    reference_variable             shift and go to state 123
    compound_variable              shift and go to state 47

state 43

    (79) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (80) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 125


state 44

    (120) scalar -> NUMBER_REAL .

    INTE_DOT        reduce using rule 120 (scalar -> NUMBER_REAL .)
    EQUALS          reduce using rule 120 (scalar -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 120 (scalar -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 120 (scalar -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 120 (scalar -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 120 (scalar -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 120 (scalar -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 120 (scalar -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 120 (scalar -> NUMBER_REAL .)
    AND             reduce using rule 120 (scalar -> NUMBER_REAL .)
    OR              reduce using rule 120 (scalar -> NUMBER_REAL .)
    PLUS            reduce using rule 120 (scalar -> NUMBER_REAL .)
    DIVIDE          reduce using rule 120 (scalar -> NUMBER_REAL .)
    PERCENT         reduce using rule 120 (scalar -> NUMBER_REAL .)
    TIMES           reduce using rule 120 (scalar -> NUMBER_REAL .)
    MINUS           reduce using rule 120 (scalar -> NUMBER_REAL .)
    SEMICOLON       reduce using rule 120 (scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 120 (scalar -> NUMBER_REAL .)
    DDOT            reduce using rule 120 (scalar -> NUMBER_REAL .)
    COLON           reduce using rule 120 (scalar -> NUMBER_REAL .)
    AS              reduce using rule 120 (scalar -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 120 (scalar -> NUMBER_REAL .)
    RBRACKET        reduce using rule 120 (scalar -> NUMBER_REAL .)
    RKEY            reduce using rule 120 (scalar -> NUMBER_REAL .)


state 45

    (121) scalar -> NUMBER_INTEGER .

    INTE_DOT        reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    AND             reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    OR              reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    PLUS            reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    TIMES           reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    MINUS           reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    SEMICOLON       reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    DDOT            reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    COLON           reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    AS              reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 121 (scalar -> NUMBER_INTEGER .)
    RKEY            reduce using rule 121 (scalar -> NUMBER_INTEGER .)


state 46

    (122) scalar -> CONSTANT_ENCAPSED_STRING .

    INTE_DOT        reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    SEMICOLON       reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 122 (scalar -> CONSTANT_ENCAPSED_STRING .)


state 47

    (127) reference_variable -> compound_variable . reference_variable_SELECTOR
    (128) reference_variable -> compound_variable .
    (184) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (185) reference_variable_SELECTOR -> . selector
    (131) selector -> . LBRACKET expr RBRACKET
    (132) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 128 (reference_variable -> compound_variable .)
    DECREMENT       reduce using rule 128 (reference_variable -> compound_variable .)
    ADD_ASSIGN      reduce using rule 128 (reference_variable -> compound_variable .)
    SUB_ASSIGN      reduce using rule 128 (reference_variable -> compound_variable .)
    MOD_ASSIGN      reduce using rule 128 (reference_variable -> compound_variable .)
    PLUS_ASSIGN     reduce using rule 128 (reference_variable -> compound_variable .)
    DIVIDE_ASSIGN   reduce using rule 128 (reference_variable -> compound_variable .)
    ASSIGN          reduce using rule 128 (reference_variable -> compound_variable .)
    INTE_DOT        reduce using rule 128 (reference_variable -> compound_variable .)
    EQUALS          reduce using rule 128 (reference_variable -> compound_variable .)
    GREAT_THAN      reduce using rule 128 (reference_variable -> compound_variable .)
    LESS_THAN       reduce using rule 128 (reference_variable -> compound_variable .)
    LESS_EQUAL      reduce using rule 128 (reference_variable -> compound_variable .)
    GREAT_EQUAL     reduce using rule 128 (reference_variable -> compound_variable .)
    NOT_EQUAL       reduce using rule 128 (reference_variable -> compound_variable .)
    LEFT_LOGICAL    reduce using rule 128 (reference_variable -> compound_variable .)
    RIGHT_LOGICAL   reduce using rule 128 (reference_variable -> compound_variable .)
    AND             reduce using rule 128 (reference_variable -> compound_variable .)
    OR              reduce using rule 128 (reference_variable -> compound_variable .)
    PLUS            reduce using rule 128 (reference_variable -> compound_variable .)
    DIVIDE          reduce using rule 128 (reference_variable -> compound_variable .)
    PERCENT         reduce using rule 128 (reference_variable -> compound_variable .)
    TIMES           reduce using rule 128 (reference_variable -> compound_variable .)
    MINUS           reduce using rule 128 (reference_variable -> compound_variable .)
    SEMICOLON       reduce using rule 128 (reference_variable -> compound_variable .)
    RPAREN          reduce using rule 128 (reference_variable -> compound_variable .)
    DDOT            reduce using rule 128 (reference_variable -> compound_variable .)
    COLON           reduce using rule 128 (reference_variable -> compound_variable .)
    AS              reduce using rule 128 (reference_variable -> compound_variable .)
    ATTR_ASSOC      reduce using rule 128 (reference_variable -> compound_variable .)
    RBRACKET        reduce using rule 128 (reference_variable -> compound_variable .)
    RKEY            reduce using rule 128 (reference_variable -> compound_variable .)
    LBRACKET        shift and go to state 128

    reference_variable_SELECTOR    shift and go to state 126
    selector                       shift and go to state 127

state 48

    (186) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> DOLAR .
    (130) compound_variable -> DOLAR . LKEY expr RKEY
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 187 (simple_indirect_reference_DOLAR -> DOLAR .)
    LKEY            shift and go to state 131
    DOLAR           shift and go to state 129

  ! DOLAR           [ reduce using rule 187 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 130

state 49

    (129) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 129 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 129 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 129 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 129 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 129 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 129 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 129 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 129 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 129 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 129 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 129 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 129 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 129 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 129 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 129 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 129 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 129 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 129 (compound_variable -> VARIABLE .)
    AND             reduce using rule 129 (compound_variable -> VARIABLE .)
    OR              reduce using rule 129 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 129 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 129 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 129 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 129 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 129 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 129 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 129 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 129 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 129 (compound_variable -> VARIABLE .)
    AS              reduce using rule 129 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 129 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 129 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 129 (compound_variable -> VARIABLE .)


state 50

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 51

    (3) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 3 (main_INNER -> inner_statement main_INNER .)


state 52

    (133) function_declaration_statement -> FUNCTION fds_id . fds_parameter fds_statements
    (138) fds_parameter -> . LPAREN parameter_list RPAREN
    (139) fds_parameter -> . LPAREN RPAREN

    LPAREN          shift and go to state 133

    fds_parameter                  shift and go to state 132

state 53

    (136) fds_id -> AMPERSAND . ID

    ID              shift and go to state 134


state 54

    (137) fds_id -> ID .

    LPAREN          reduce using rule 137 (fds_id -> ID .)


state 55

    (32) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 32 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 32 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 32 (statement -> expr SEMICOLON .)
    DO              reduce using rule 32 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 32 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 32 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 32 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 32 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 32 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 32 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 32 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 32 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 32 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 32 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 32 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 32 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 32 (statement -> expr SEMICOLON .)
    IF              reduce using rule 32 (statement -> expr SEMICOLON .)
    ID              reduce using rule 32 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 32 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 32 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 32 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 32 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 32 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 32 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 32 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 32 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 32 (statement -> expr SEMICOLON .)


state 56

    (41) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (42) statement -> GLOBAL global_var . SEMICOLON
    (67) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (68) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       shift and go to state 136
    COLON           shift and go to state 137

    statement_COLON_GLOBAL         shift and go to state 135

state 57

    (64) global_var -> VARIABLE .

    SEMICOLON       reduce using rule 64 (global_var -> VARIABLE .)
    COLON           reduce using rule 64 (global_var -> VARIABLE .)


state 58

    (65) global_var -> DOLAR . VARIABLE
    (66) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 138
    LKEY            shift and go to state 139


state 59

    (7) expr -> expr1 expr2 .

    SEMICOLON       reduce using rule 7 (expr -> expr1 expr2 .)
    RPAREN          reduce using rule 7 (expr -> expr1 expr2 .)
    DDOT            reduce using rule 7 (expr -> expr1 expr2 .)
    COLON           reduce using rule 7 (expr -> expr1 expr2 .)
    AS              reduce using rule 7 (expr -> expr1 expr2 .)
    ATTR_ASSOC      reduce using rule 7 (expr -> expr1 expr2 .)
    RBRACKET        reduce using rule 7 (expr -> expr1 expr2 .)
    RKEY            reduce using rule 7 (expr -> expr1 expr2 .)


state 60

    (10) expr2 -> INTE_DOT . expr DDOT expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 140
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 61

    (11) expr2 -> comparission_operator . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 141
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 62

    (12) expr2 -> arithmetic_operator . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 142
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 63

    (110) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 110 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 110 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 110 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 110 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 110 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 110 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 110 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 110 (comparission_operator -> EQUALS .)
    ID              reduce using rule 110 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 110 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 110 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 110 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 110 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 110 (comparission_operator -> EQUALS .)


state 64

    (111) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 111 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 111 (comparission_operator -> GREAT_THAN .)


state 65

    (112) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 112 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 112 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 112 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 112 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 112 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 112 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 112 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 112 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 112 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 112 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 112 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 112 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 112 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 112 (comparission_operator -> LESS_THAN .)


state 66

    (113) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 113 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 113 (comparission_operator -> LESS_EQUAL .)


state 67

    (114) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 114 (comparission_operator -> GREAT_EQUAL .)


state 68

    (115) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 115 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 115 (comparission_operator -> NOT_EQUAL .)


state 69

    (116) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 116 (comparission_operator -> LEFT_LOGICAL .)


state 70

    (117) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 117 (comparission_operator -> RIGHT_LOGICAL .)


state 71

    (118) comparission_operator -> AND .

    INCREMENT       reduce using rule 118 (comparission_operator -> AND .)
    DECREMENT       reduce using rule 118 (comparission_operator -> AND .)
    LPAREN          reduce using rule 118 (comparission_operator -> AND .)
    EXIT            reduce using rule 118 (comparission_operator -> AND .)
    DIE             reduce using rule 118 (comparission_operator -> AND .)
    ARRAY_TYPE      reduce using rule 118 (comparission_operator -> AND .)
    TRUE            reduce using rule 118 (comparission_operator -> AND .)
    FALSE           reduce using rule 118 (comparission_operator -> AND .)
    ID              reduce using rule 118 (comparission_operator -> AND .)
    NUMBER_REAL     reduce using rule 118 (comparission_operator -> AND .)
    NUMBER_INTEGER  reduce using rule 118 (comparission_operator -> AND .)
    CONSTANT_ENCAPSED_STRING reduce using rule 118 (comparission_operator -> AND .)
    DOLAR           reduce using rule 118 (comparission_operator -> AND .)
    VARIABLE        reduce using rule 118 (comparission_operator -> AND .)


state 72

    (119) comparission_operator -> OR .

    INCREMENT       reduce using rule 119 (comparission_operator -> OR .)
    DECREMENT       reduce using rule 119 (comparission_operator -> OR .)
    LPAREN          reduce using rule 119 (comparission_operator -> OR .)
    EXIT            reduce using rule 119 (comparission_operator -> OR .)
    DIE             reduce using rule 119 (comparission_operator -> OR .)
    ARRAY_TYPE      reduce using rule 119 (comparission_operator -> OR .)
    TRUE            reduce using rule 119 (comparission_operator -> OR .)
    FALSE           reduce using rule 119 (comparission_operator -> OR .)
    ID              reduce using rule 119 (comparission_operator -> OR .)
    NUMBER_REAL     reduce using rule 119 (comparission_operator -> OR .)
    NUMBER_INTEGER  reduce using rule 119 (comparission_operator -> OR .)
    CONSTANT_ENCAPSED_STRING reduce using rule 119 (comparission_operator -> OR .)
    DOLAR           reduce using rule 119 (comparission_operator -> OR .)
    VARIABLE        reduce using rule 119 (comparission_operator -> OR .)


state 73

    (105) arithmetic_operator -> PLUS .

    INCREMENT       reduce using rule 105 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 105 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 105 (arithmetic_operator -> PLUS .)
    EXIT            reduce using rule 105 (arithmetic_operator -> PLUS .)
    DIE             reduce using rule 105 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 105 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 105 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 105 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 105 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 105 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 105 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 105 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 105 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 105 (arithmetic_operator -> PLUS .)


state 74

    (106) arithmetic_operator -> DIVIDE .

    INCREMENT       reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    EXIT            reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    DIE             reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 106 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 106 (arithmetic_operator -> DIVIDE .)


state 75

    (107) arithmetic_operator -> PERCENT .

    INCREMENT       reduce using rule 107 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 107 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 107 (arithmetic_operator -> PERCENT .)
    EXIT            reduce using rule 107 (arithmetic_operator -> PERCENT .)
    DIE             reduce using rule 107 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 107 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 107 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 107 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 107 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 107 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 107 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 107 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 107 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 107 (arithmetic_operator -> PERCENT .)


state 76

    (108) arithmetic_operator -> TIMES .

    INCREMENT       reduce using rule 108 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 108 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 108 (arithmetic_operator -> TIMES .)
    EXIT            reduce using rule 108 (arithmetic_operator -> TIMES .)
    DIE             reduce using rule 108 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 108 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 108 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 108 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 108 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 108 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 108 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 108 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 108 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 108 (arithmetic_operator -> TIMES .)


state 77

    (109) arithmetic_operator -> MINUS .

    INCREMENT       reduce using rule 109 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 109 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 109 (arithmetic_operator -> MINUS .)
    EXIT            reduce using rule 109 (arithmetic_operator -> MINUS .)
    DIE             reduce using rule 109 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 109 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 109 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 109 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 109 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 109 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 109 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 109 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 109 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 109 (arithmetic_operator -> MINUS .)


state 78

    (43) if_statement -> statement_if if_statement_complement .

    FUNCTION        reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    GLOBAL          reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    WHILE           reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    DO              reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    FOR             reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    FOREACH         reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    BREAK           reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    CONTINUE        reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    RETURN          reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    INCREMENT       reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    DECREMENT       reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    LPAREN          reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    EXIT            reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    DIE             reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    ARRAY_TYPE      reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    TRUE            reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    FALSE           reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    IF              reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    ID              reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    NUMBER_REAL     reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    NUMBER_INTEGER  reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    DOLAR           reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    VARIABLE        reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    END_PROGRAM     reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    RKEY            reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    ELSEIF          reduce using rule 43 (if_statement -> statement_if if_statement_complement .)
    ELSE            reduce using rule 43 (if_statement -> statement_if if_statement_complement .)


state 79

    (45) if_statement_complement -> statement_elseif .

    FUNCTION        reduce using rule 45 (if_statement_complement -> statement_elseif .)
    GLOBAL          reduce using rule 45 (if_statement_complement -> statement_elseif .)
    WHILE           reduce using rule 45 (if_statement_complement -> statement_elseif .)
    DO              reduce using rule 45 (if_statement_complement -> statement_elseif .)
    FOR             reduce using rule 45 (if_statement_complement -> statement_elseif .)
    FOREACH         reduce using rule 45 (if_statement_complement -> statement_elseif .)
    BREAK           reduce using rule 45 (if_statement_complement -> statement_elseif .)
    CONTINUE        reduce using rule 45 (if_statement_complement -> statement_elseif .)
    RETURN          reduce using rule 45 (if_statement_complement -> statement_elseif .)
    INCREMENT       reduce using rule 45 (if_statement_complement -> statement_elseif .)
    DECREMENT       reduce using rule 45 (if_statement_complement -> statement_elseif .)
    LPAREN          reduce using rule 45 (if_statement_complement -> statement_elseif .)
    EXIT            reduce using rule 45 (if_statement_complement -> statement_elseif .)
    DIE             reduce using rule 45 (if_statement_complement -> statement_elseif .)
    ARRAY_TYPE      reduce using rule 45 (if_statement_complement -> statement_elseif .)
    TRUE            reduce using rule 45 (if_statement_complement -> statement_elseif .)
    FALSE           reduce using rule 45 (if_statement_complement -> statement_elseif .)
    IF              reduce using rule 45 (if_statement_complement -> statement_elseif .)
    ID              reduce using rule 45 (if_statement_complement -> statement_elseif .)
    NUMBER_REAL     reduce using rule 45 (if_statement_complement -> statement_elseif .)
    NUMBER_INTEGER  reduce using rule 45 (if_statement_complement -> statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 45 (if_statement_complement -> statement_elseif .)
    DOLAR           reduce using rule 45 (if_statement_complement -> statement_elseif .)
    VARIABLE        reduce using rule 45 (if_statement_complement -> statement_elseif .)
    END_PROGRAM     reduce using rule 45 (if_statement_complement -> statement_elseif .)
    RKEY            reduce using rule 45 (if_statement_complement -> statement_elseif .)
    ELSEIF          reduce using rule 45 (if_statement_complement -> statement_elseif .)
    ELSE            reduce using rule 45 (if_statement_complement -> statement_elseif .)


state 80

    (46) if_statement_complement -> statement_else .

    FUNCTION        reduce using rule 46 (if_statement_complement -> statement_else .)
    GLOBAL          reduce using rule 46 (if_statement_complement -> statement_else .)
    WHILE           reduce using rule 46 (if_statement_complement -> statement_else .)
    DO              reduce using rule 46 (if_statement_complement -> statement_else .)
    FOR             reduce using rule 46 (if_statement_complement -> statement_else .)
    FOREACH         reduce using rule 46 (if_statement_complement -> statement_else .)
    BREAK           reduce using rule 46 (if_statement_complement -> statement_else .)
    CONTINUE        reduce using rule 46 (if_statement_complement -> statement_else .)
    RETURN          reduce using rule 46 (if_statement_complement -> statement_else .)
    INCREMENT       reduce using rule 46 (if_statement_complement -> statement_else .)
    DECREMENT       reduce using rule 46 (if_statement_complement -> statement_else .)
    LPAREN          reduce using rule 46 (if_statement_complement -> statement_else .)
    EXIT            reduce using rule 46 (if_statement_complement -> statement_else .)
    DIE             reduce using rule 46 (if_statement_complement -> statement_else .)
    ARRAY_TYPE      reduce using rule 46 (if_statement_complement -> statement_else .)
    TRUE            reduce using rule 46 (if_statement_complement -> statement_else .)
    FALSE           reduce using rule 46 (if_statement_complement -> statement_else .)
    IF              reduce using rule 46 (if_statement_complement -> statement_else .)
    ID              reduce using rule 46 (if_statement_complement -> statement_else .)
    NUMBER_REAL     reduce using rule 46 (if_statement_complement -> statement_else .)
    NUMBER_INTEGER  reduce using rule 46 (if_statement_complement -> statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (if_statement_complement -> statement_else .)
    DOLAR           reduce using rule 46 (if_statement_complement -> statement_else .)
    VARIABLE        reduce using rule 46 (if_statement_complement -> statement_else .)
    END_PROGRAM     reduce using rule 46 (if_statement_complement -> statement_else .)
    RKEY            reduce using rule 46 (if_statement_complement -> statement_else .)
    ELSEIF          reduce using rule 46 (if_statement_complement -> statement_else .)
    ELSE            reduce using rule 46 (if_statement_complement -> statement_else .)


state 81

    (73) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT
    (71) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 84

    expr_parentheses               shift and go to state 143

state 82

    (74) statement_else -> ELSE . statement_BLOCK_OPT
    (175) statement_BLOCK_OPT -> . statement
    (176) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (177) statement_BLOCK_OPT -> . LKEY RKEY
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 87
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 144
    statement                      shift and go to state 86
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 83

    (47) while_statement -> WHILE expr_parentheses . statement_BLOCK_OPT
    (175) statement_BLOCK_OPT -> . statement
    (176) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (177) statement_BLOCK_OPT -> . LKEY RKEY
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 87
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 145
    statement                      shift and go to state 86
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 84

    (71) expr_parentheses -> LPAREN . expr RPAREN
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 146
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 85

    (48) do_statement -> DO statement_BLOCK_OPT . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 147


state 86

    (175) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 175 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 175 (statement_BLOCK_OPT -> statement .)


state 87

    (176) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (177) statement_BLOCK_OPT -> LKEY . RKEY
    (171) statement_MUL -> . statement statement_MUL
    (172) statement_MUL -> . statement
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 149
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_MUL                  shift and go to state 148
    statement                      shift and go to state 150
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 88

    (55) for_statement -> FOR LPAREN . for_parameters RPAREN statement_BLOCK_OPT
    (56) for_parameters -> . SEMICOLON SEMICOLON
    (57) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (58) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (59) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (60) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (61) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (62) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (63) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (77) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (78) for_expr_OPT -> . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 152
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_parameters                 shift and go to state 151
    for_expr_OPT                   shift and go to state 153
    expr                           shift and go to state 154
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 89

    (21) expr1 -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 155


state 90

    (15) expr3 -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 156


state 91

    (90) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 90 (type_cast_operator -> INT_TYPE .)


state 92

    (91) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 91 (type_cast_operator -> DOUBLE_TYPE .)


state 93

    (92) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 92 (type_cast_operator -> FLOAT_TYPE .)


state 94

    (93) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 93 (type_cast_operator -> REAL_TYPE .)


state 95

    (94) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 94 (type_cast_operator -> STRING_TYPE .)


state 96

    (95) type_cast_operator -> ARRAY_TYPE .
    (26) expr1 -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (27) expr1 -> ARRAY_TYPE . LPAREN RPAREN

    RPAREN          reduce using rule 95 (type_cast_operator -> ARRAY_TYPE .)
    LPAREN          shift and go to state 121


state 97

    (96) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 96 (type_cast_operator -> BOOLEAN_TYPE .)


state 98

    (97) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 97 (type_cast_operator -> BOOL_TYPE .)


state 99

    (98) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 98 (type_cast_operator -> UNSET .)


state 100

    (75) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 157
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 101

    (49) break_statement -> BREAK expr . SEMICOLON

    SEMICOLON       shift and go to state 158


state 102

    (50) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    DOLAR           reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 50 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 50 (break_statement -> BREAK SEMICOLON .)


state 103

    (51) continue_statement -> CONTINUE expr . SEMICOLON

    SEMICOLON       shift and go to state 159


state 104

    (52) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    DOLAR           reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 52 (continue_statement -> CONTINUE SEMICOLON .)


state 105

    (53) return_statement -> RETURN expr . SEMICOLON

    SEMICOLON       shift and go to state 160


state 106

    (54) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    DOLAR           reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 54 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 54 (return_statement -> RETURN SEMICOLON .)


state 107

    (16) expr1 -> INCREMENT variable .

    INTE_DOT        reduce using rule 16 (expr1 -> INCREMENT variable .)
    EQUALS          reduce using rule 16 (expr1 -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 16 (expr1 -> INCREMENT variable .)
    LESS_THAN       reduce using rule 16 (expr1 -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 16 (expr1 -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 16 (expr1 -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 16 (expr1 -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 16 (expr1 -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 16 (expr1 -> INCREMENT variable .)
    AND             reduce using rule 16 (expr1 -> INCREMENT variable .)
    OR              reduce using rule 16 (expr1 -> INCREMENT variable .)
    PLUS            reduce using rule 16 (expr1 -> INCREMENT variable .)
    DIVIDE          reduce using rule 16 (expr1 -> INCREMENT variable .)
    PERCENT         reduce using rule 16 (expr1 -> INCREMENT variable .)
    TIMES           reduce using rule 16 (expr1 -> INCREMENT variable .)
    MINUS           reduce using rule 16 (expr1 -> INCREMENT variable .)
    SEMICOLON       reduce using rule 16 (expr1 -> INCREMENT variable .)
    RPAREN          reduce using rule 16 (expr1 -> INCREMENT variable .)
    DDOT            reduce using rule 16 (expr1 -> INCREMENT variable .)
    COLON           reduce using rule 16 (expr1 -> INCREMENT variable .)
    AS              reduce using rule 16 (expr1 -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 16 (expr1 -> INCREMENT variable .)
    RBRACKET        reduce using rule 16 (expr1 -> INCREMENT variable .)
    RKEY            reduce using rule 16 (expr1 -> INCREMENT variable .)


state 108

    (17) expr1 -> variable INCREMENT .

    INTE_DOT        reduce using rule 17 (expr1 -> variable INCREMENT .)
    EQUALS          reduce using rule 17 (expr1 -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 17 (expr1 -> variable INCREMENT .)
    LESS_THAN       reduce using rule 17 (expr1 -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 17 (expr1 -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 17 (expr1 -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 17 (expr1 -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 17 (expr1 -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 17 (expr1 -> variable INCREMENT .)
    AND             reduce using rule 17 (expr1 -> variable INCREMENT .)
    OR              reduce using rule 17 (expr1 -> variable INCREMENT .)
    PLUS            reduce using rule 17 (expr1 -> variable INCREMENT .)
    DIVIDE          reduce using rule 17 (expr1 -> variable INCREMENT .)
    PERCENT         reduce using rule 17 (expr1 -> variable INCREMENT .)
    TIMES           reduce using rule 17 (expr1 -> variable INCREMENT .)
    MINUS           reduce using rule 17 (expr1 -> variable INCREMENT .)
    SEMICOLON       reduce using rule 17 (expr1 -> variable INCREMENT .)
    RPAREN          reduce using rule 17 (expr1 -> variable INCREMENT .)
    DDOT            reduce using rule 17 (expr1 -> variable INCREMENT .)
    COLON           reduce using rule 17 (expr1 -> variable INCREMENT .)
    AS              reduce using rule 17 (expr1 -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 17 (expr1 -> variable INCREMENT .)
    RBRACKET        reduce using rule 17 (expr1 -> variable INCREMENT .)
    RKEY            reduce using rule 17 (expr1 -> variable INCREMENT .)


state 109

    (19) expr1 -> variable DECREMENT .

    INTE_DOT        reduce using rule 19 (expr1 -> variable DECREMENT .)
    EQUALS          reduce using rule 19 (expr1 -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 19 (expr1 -> variable DECREMENT .)
    LESS_THAN       reduce using rule 19 (expr1 -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 19 (expr1 -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 19 (expr1 -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 19 (expr1 -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 19 (expr1 -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 19 (expr1 -> variable DECREMENT .)
    AND             reduce using rule 19 (expr1 -> variable DECREMENT .)
    OR              reduce using rule 19 (expr1 -> variable DECREMENT .)
    PLUS            reduce using rule 19 (expr1 -> variable DECREMENT .)
    DIVIDE          reduce using rule 19 (expr1 -> variable DECREMENT .)
    PERCENT         reduce using rule 19 (expr1 -> variable DECREMENT .)
    TIMES           reduce using rule 19 (expr1 -> variable DECREMENT .)
    MINUS           reduce using rule 19 (expr1 -> variable DECREMENT .)
    SEMICOLON       reduce using rule 19 (expr1 -> variable DECREMENT .)
    RPAREN          reduce using rule 19 (expr1 -> variable DECREMENT .)
    DDOT            reduce using rule 19 (expr1 -> variable DECREMENT .)
    COLON           reduce using rule 19 (expr1 -> variable DECREMENT .)
    AS              reduce using rule 19 (expr1 -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 19 (expr1 -> variable DECREMENT .)
    RBRACKET        reduce using rule 19 (expr1 -> variable DECREMENT .)
    RKEY            reduce using rule 19 (expr1 -> variable DECREMENT .)


state 110

    (13) expr3 -> variable assign_operator . expr
    (14) expr3 -> variable assign_operator . AMPERSAND expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 162
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 31
    expr                           shift and go to state 161
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 111

    (99) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 99 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 99 (assign_operator -> ADD_ASSIGN .)


state 112

    (100) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 100 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 100 (assign_operator -> SUB_ASSIGN .)


state 113

    (101) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 101 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 101 (assign_operator -> MOD_ASSIGN .)


state 114

    (102) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 102 (assign_operator -> PLUS_ASSIGN .)


state 115

    (103) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 103 (assign_operator -> DIVIDE_ASSIGN .)


state 116

    (104) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 104 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 104 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 104 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 104 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 104 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 104 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 104 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 104 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 104 (assign_operator -> ASSIGN .)
    ID              reduce using rule 104 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 104 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 104 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 104 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 104 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 104 (assign_operator -> ASSIGN .)


state 117

    (18) expr1 -> DECREMENT variable .

    INTE_DOT        reduce using rule 18 (expr1 -> DECREMENT variable .)
    EQUALS          reduce using rule 18 (expr1 -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 18 (expr1 -> DECREMENT variable .)
    LESS_THAN       reduce using rule 18 (expr1 -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 18 (expr1 -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 18 (expr1 -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 18 (expr1 -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 18 (expr1 -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 18 (expr1 -> DECREMENT variable .)
    AND             reduce using rule 18 (expr1 -> DECREMENT variable .)
    OR              reduce using rule 18 (expr1 -> DECREMENT variable .)
    PLUS            reduce using rule 18 (expr1 -> DECREMENT variable .)
    DIVIDE          reduce using rule 18 (expr1 -> DECREMENT variable .)
    PERCENT         reduce using rule 18 (expr1 -> DECREMENT variable .)
    TIMES           reduce using rule 18 (expr1 -> DECREMENT variable .)
    MINUS           reduce using rule 18 (expr1 -> DECREMENT variable .)
    SEMICOLON       reduce using rule 18 (expr1 -> DECREMENT variable .)
    RPAREN          reduce using rule 18 (expr1 -> DECREMENT variable .)
    DDOT            reduce using rule 18 (expr1 -> DECREMENT variable .)
    COLON           reduce using rule 18 (expr1 -> DECREMENT variable .)
    AS              reduce using rule 18 (expr1 -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 18 (expr1 -> DECREMENT variable .)
    RBRACKET        reduce using rule 18 (expr1 -> DECREMENT variable .)
    RKEY            reduce using rule 18 (expr1 -> DECREMENT variable .)


state 118

    (22) expr1 -> EXIT exit_expr .

    INTE_DOT        reduce using rule 22 (expr1 -> EXIT exit_expr .)
    EQUALS          reduce using rule 22 (expr1 -> EXIT exit_expr .)
    GREAT_THAN      reduce using rule 22 (expr1 -> EXIT exit_expr .)
    LESS_THAN       reduce using rule 22 (expr1 -> EXIT exit_expr .)
    LESS_EQUAL      reduce using rule 22 (expr1 -> EXIT exit_expr .)
    GREAT_EQUAL     reduce using rule 22 (expr1 -> EXIT exit_expr .)
    NOT_EQUAL       reduce using rule 22 (expr1 -> EXIT exit_expr .)
    LEFT_LOGICAL    reduce using rule 22 (expr1 -> EXIT exit_expr .)
    RIGHT_LOGICAL   reduce using rule 22 (expr1 -> EXIT exit_expr .)
    AND             reduce using rule 22 (expr1 -> EXIT exit_expr .)
    OR              reduce using rule 22 (expr1 -> EXIT exit_expr .)
    PLUS            reduce using rule 22 (expr1 -> EXIT exit_expr .)
    DIVIDE          reduce using rule 22 (expr1 -> EXIT exit_expr .)
    PERCENT         reduce using rule 22 (expr1 -> EXIT exit_expr .)
    TIMES           reduce using rule 22 (expr1 -> EXIT exit_expr .)
    MINUS           reduce using rule 22 (expr1 -> EXIT exit_expr .)
    SEMICOLON       reduce using rule 22 (expr1 -> EXIT exit_expr .)
    RPAREN          reduce using rule 22 (expr1 -> EXIT exit_expr .)
    DDOT            reduce using rule 22 (expr1 -> EXIT exit_expr .)
    COLON           reduce using rule 22 (expr1 -> EXIT exit_expr .)
    AS              reduce using rule 22 (expr1 -> EXIT exit_expr .)
    ATTR_ASSOC      reduce using rule 22 (expr1 -> EXIT exit_expr .)
    RBRACKET        reduce using rule 22 (expr1 -> EXIT exit_expr .)
    RKEY            reduce using rule 22 (expr1 -> EXIT exit_expr .)


state 119

    (123) exit_expr -> LPAREN . expr RPAREN
    (124) exit_expr -> LPAREN . RPAREN
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 164
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 163
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 120

    (24) expr1 -> DIE exit_expr .

    INTE_DOT        reduce using rule 24 (expr1 -> DIE exit_expr .)
    EQUALS          reduce using rule 24 (expr1 -> DIE exit_expr .)
    GREAT_THAN      reduce using rule 24 (expr1 -> DIE exit_expr .)
    LESS_THAN       reduce using rule 24 (expr1 -> DIE exit_expr .)
    LESS_EQUAL      reduce using rule 24 (expr1 -> DIE exit_expr .)
    GREAT_EQUAL     reduce using rule 24 (expr1 -> DIE exit_expr .)
    NOT_EQUAL       reduce using rule 24 (expr1 -> DIE exit_expr .)
    LEFT_LOGICAL    reduce using rule 24 (expr1 -> DIE exit_expr .)
    RIGHT_LOGICAL   reduce using rule 24 (expr1 -> DIE exit_expr .)
    AND             reduce using rule 24 (expr1 -> DIE exit_expr .)
    OR              reduce using rule 24 (expr1 -> DIE exit_expr .)
    PLUS            reduce using rule 24 (expr1 -> DIE exit_expr .)
    DIVIDE          reduce using rule 24 (expr1 -> DIE exit_expr .)
    PERCENT         reduce using rule 24 (expr1 -> DIE exit_expr .)
    TIMES           reduce using rule 24 (expr1 -> DIE exit_expr .)
    MINUS           reduce using rule 24 (expr1 -> DIE exit_expr .)
    SEMICOLON       reduce using rule 24 (expr1 -> DIE exit_expr .)
    RPAREN          reduce using rule 24 (expr1 -> DIE exit_expr .)
    DDOT            reduce using rule 24 (expr1 -> DIE exit_expr .)
    COLON           reduce using rule 24 (expr1 -> DIE exit_expr .)
    AS              reduce using rule 24 (expr1 -> DIE exit_expr .)
    ATTR_ASSOC      reduce using rule 24 (expr1 -> DIE exit_expr .)
    RBRACKET        reduce using rule 24 (expr1 -> DIE exit_expr .)
    RKEY            reduce using rule 24 (expr1 -> DIE exit_expr .)


state 121

    (26) expr1 -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (27) expr1 -> ARRAY_TYPE LPAREN . RPAREN
    (163) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (164) array_pair_list -> . array_pair
    (165) array_pair -> . expr
    (166) array_pair -> . expr ATTR_ASSOC expr
    (167) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (168) array_pair -> . AMPERSAND variable
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 166
    AMPERSAND       shift and go to state 169
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    array_pair_list                shift and go to state 165
    array_pair                     shift and go to state 167
    expr                           shift and go to state 168
    variable                       shift and go to state 31
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 122

    (72) statement_if -> IF expr_parentheses . statement_BLOCK_OPT
    (175) statement_BLOCK_OPT -> . statement
    (176) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (177) statement_BLOCK_OPT -> . LKEY RKEY
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 87
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 170
    statement                      shift and go to state 86
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 123

    (126) variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    AND             reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    OR              reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    AS              reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 126 (variable -> simple_indirect_reference_DOLAR reference_variable .)


state 124

    (130) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 131


state 125

    (79) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (80) function_call -> ID LPAREN . RPAREN
    (81) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (82) function_call_parameter_list -> . function_call_parameter
    (83) function_call_parameter -> . expr
    (84) function_call_parameter -> . AMPERSAND VARIABLE
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 172
    AMPERSAND       shift and go to state 175
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    function_call_parameter_list   shift and go to state 171
    function_call_parameter        shift and go to state 173
    expr                           shift and go to state 174
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 126

    (127) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AND             reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    OR              reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AS              reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 127 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 127

    (184) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (185) reference_variable_SELECTOR -> selector .
    (184) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (185) reference_variable_SELECTOR -> . selector
    (131) selector -> . LBRACKET expr RBRACKET
    (132) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    DECREMENT       reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    ADD_ASSIGN      reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    SUB_ASSIGN      reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    MOD_ASSIGN      reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    PLUS_ASSIGN     reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    DIVIDE_ASSIGN   reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    ASSIGN          reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    INTE_DOT        reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    EQUALS          reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    GREAT_THAN      reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    LESS_THAN       reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    LESS_EQUAL      reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    GREAT_EQUAL     reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    NOT_EQUAL       reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    LEFT_LOGICAL    reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    RIGHT_LOGICAL   reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    AND             reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    OR              reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    PLUS            reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    DIVIDE          reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    PERCENT         reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    TIMES           reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    MINUS           reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    SEMICOLON       reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    RPAREN          reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    DDOT            reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    COLON           reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    AS              reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    ATTR_ASSOC      reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    RBRACKET        reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    RKEY            reduce using rule 185 (reference_variable_SELECTOR -> selector .)
    LBRACKET        shift and go to state 128

    selector                       shift and go to state 127
    reference_variable_SELECTOR    shift and go to state 176

state 128

    (131) selector -> LBRACKET . expr RBRACKET
    (132) selector -> LBRACKET . RBRACKET
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RBRACKET        shift and go to state 178
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 177
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 129

    (186) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> DOLAR .
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 187 (simple_indirect_reference_DOLAR -> DOLAR .)
    DOLAR           shift and go to state 129

  ! DOLAR           [ reduce using rule 187 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 130

state 130

    (186) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 131

    (130) compound_variable -> DOLAR LKEY . expr RKEY
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 179
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 132

    (133) function_declaration_statement -> FUNCTION fds_id fds_parameter . fds_statements
    (134) fds_statements -> . LKEY inner_statement_MUL RKEY
    (135) fds_statements -> . LKEY RKEY

    LKEY            shift and go to state 181

    fds_statements                 shift and go to state 180

state 133

    (138) fds_parameter -> LPAREN . parameter_list RPAREN
    (139) fds_parameter -> LPAREN . RPAREN
    (140) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (141) parameter_list -> . parameter
    (142) parameter -> . VARIABLE
    (143) parameter -> . parameter_prefix VARIABLE
    (144) parameter -> . VARIABLE ASSIGN static_scalar
    (145) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (146) parameter_prefix -> . parameter_type AMPERSAND
    (147) parameter_prefix -> . AMPERSAND
    (148) parameter_prefix -> . parameter_type
    (149) parameter_type -> . INT_TYPE
    (150) parameter_type -> . BOOLEAN_TYPE
    (151) parameter_type -> . STRING_TYPE
    (152) parameter_type -> . FLOAT_TYPE
    (153) parameter_type -> . ARRAY_TYPE
    (154) parameter_type -> . BOOL_TYPE
    (155) parameter_type -> . REAL_TYPE
    (156) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 183
    VARIABLE        shift and go to state 185
    AMPERSAND       shift and go to state 188
    INT_TYPE        shift and go to state 189
    BOOLEAN_TYPE    shift and go to state 190
    STRING_TYPE     shift and go to state 191
    FLOAT_TYPE      shift and go to state 192
    ARRAY_TYPE      shift and go to state 193
    BOOL_TYPE       shift and go to state 194
    REAL_TYPE       shift and go to state 195
    DOUBLE_TYPE     shift and go to state 196

    parameter_list                 shift and go to state 182
    parameter                      shift and go to state 184
    parameter_prefix               shift and go to state 186
    parameter_type                 shift and go to state 187

state 134

    (136) fds_id -> AMPERSAND ID .

    LPAREN          reduce using rule 136 (fds_id -> AMPERSAND ID .)


state 135

    (41) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 197


state 136

    (42) statement -> GLOBAL global_var SEMICOLON .

    FUNCTION        reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    GLOBAL          reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    WHILE           reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    DO              reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    FOR             reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    FOREACH         reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    BREAK           reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    CONTINUE        reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    RETURN          reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    INCREMENT       reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    DECREMENT       reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    LPAREN          reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    EXIT            reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    DIE             reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    ARRAY_TYPE      reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    TRUE            reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    FALSE           reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    IF              reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    ID              reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_REAL     reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    DOLAR           reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    VARIABLE        reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    END_PROGRAM     reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    RKEY            reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    ELSEIF          reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)
    ELSE            reduce using rule 42 (statement -> GLOBAL global_var SEMICOLON .)


state 137

    (67) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (68) statement_COLON_GLOBAL -> COLON . global_var
    (64) global_var -> . VARIABLE
    (65) global_var -> . DOLAR VARIABLE
    (66) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 57
    DOLAR           shift and go to state 58

    global_var                     shift and go to state 198

state 138

    (65) global_var -> DOLAR VARIABLE .

    SEMICOLON       reduce using rule 65 (global_var -> DOLAR VARIABLE .)
    COLON           reduce using rule 65 (global_var -> DOLAR VARIABLE .)


state 139

    (66) global_var -> DOLAR LKEY . expr RKEY
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 199
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 140

    (10) expr2 -> INTE_DOT expr . DDOT expr

    DDOT            shift and go to state 200


state 141

    (11) expr2 -> comparission_operator expr .

    SEMICOLON       reduce using rule 11 (expr2 -> comparission_operator expr .)
    RPAREN          reduce using rule 11 (expr2 -> comparission_operator expr .)
    DDOT            reduce using rule 11 (expr2 -> comparission_operator expr .)
    COLON           reduce using rule 11 (expr2 -> comparission_operator expr .)
    AS              reduce using rule 11 (expr2 -> comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 11 (expr2 -> comparission_operator expr .)
    RBRACKET        reduce using rule 11 (expr2 -> comparission_operator expr .)
    RKEY            reduce using rule 11 (expr2 -> comparission_operator expr .)


state 142

    (12) expr2 -> arithmetic_operator expr .

    SEMICOLON       reduce using rule 12 (expr2 -> arithmetic_operator expr .)
    RPAREN          reduce using rule 12 (expr2 -> arithmetic_operator expr .)
    DDOT            reduce using rule 12 (expr2 -> arithmetic_operator expr .)
    COLON           reduce using rule 12 (expr2 -> arithmetic_operator expr .)
    AS              reduce using rule 12 (expr2 -> arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 12 (expr2 -> arithmetic_operator expr .)
    RBRACKET        reduce using rule 12 (expr2 -> arithmetic_operator expr .)
    RKEY            reduce using rule 12 (expr2 -> arithmetic_operator expr .)


state 143

    (73) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT
    (175) statement_BLOCK_OPT -> . statement
    (176) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (177) statement_BLOCK_OPT -> . LKEY RKEY
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 87
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 201
    statement                      shift and go to state 86
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 144

    (74) statement_else -> ELSE statement_BLOCK_OPT .

    FUNCTION        reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSE            reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)


state 145

    (47) while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 47 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)


state 146

    (71) expr_parentheses -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 202


state 147

    (48) do_statement -> DO statement_BLOCK_OPT WHILE . expr_parentheses SEMICOLON
    (71) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 84

    expr_parentheses               shift and go to state 203

state 148

    (176) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 204


state 149

    (177) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOREACH         reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    INCREMENT       reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    DECREMENT       reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    DOLAR           reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 177 (statement_BLOCK_OPT -> LKEY RKEY .)


state 150

    (171) statement_MUL -> statement . statement_MUL
    (172) statement_MUL -> statement .
    (171) statement_MUL -> . statement statement_MUL
    (172) statement_MUL -> . statement
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 172 (statement_MUL -> statement .)
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement                      shift and go to state 150
    statement_MUL                  shift and go to state 205
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 151

    (55) for_statement -> FOR LPAREN for_parameters . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 206


state 152

    (56) for_parameters -> SEMICOLON . SEMICOLON
    (60) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (61) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (62) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (77) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (78) for_expr_OPT -> . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 207
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 208
    expr                           shift and go to state 154
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 153

    (57) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (58) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (59) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (63) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 209


state 154

    (77) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (78) for_expr_OPT -> expr .
    (173) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (174) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 78 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 78 (for_expr_OPT -> expr .)
    COLON           shift and go to state 211

    for_expr_COLON_EXPR            shift and go to state 210

state 155

    (21) expr1 -> LPAREN expr RPAREN .

    INTE_DOT        reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    AND             reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    OR              reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    COLON           reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    AS              reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 21 (expr1 -> LPAREN expr RPAREN .)


state 156

    (15) expr3 -> LPAREN type_cast_operator RPAREN . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 212
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 157

    (75) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    AS              shift and go to state 213


state 158

    (49) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    FOREACH         reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    DOLAR           reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 49 (break_statement -> BREAK expr SEMICOLON .)


state 159

    (51) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOREACH         reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    DOLAR           reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 51 (continue_statement -> CONTINUE expr SEMICOLON .)


state 160

    (53) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    DOLAR           reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 53 (return_statement -> RETURN expr SEMICOLON .)


state 161

    (13) expr3 -> variable assign_operator expr .

    SEMICOLON       reduce using rule 13 (expr3 -> variable assign_operator expr .)
    RPAREN          reduce using rule 13 (expr3 -> variable assign_operator expr .)
    DDOT            reduce using rule 13 (expr3 -> variable assign_operator expr .)
    COLON           reduce using rule 13 (expr3 -> variable assign_operator expr .)
    AS              reduce using rule 13 (expr3 -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 13 (expr3 -> variable assign_operator expr .)
    RBRACKET        reduce using rule 13 (expr3 -> variable assign_operator expr .)
    RKEY            reduce using rule 13 (expr3 -> variable assign_operator expr .)


state 162

    (14) expr3 -> variable assign_operator AMPERSAND . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 31
    expr                           shift and go to state 214
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 163

    (123) exit_expr -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 215


state 164

    (124) exit_expr -> LPAREN RPAREN .

    INTE_DOT        reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    EQUALS          reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    AND             reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    OR              reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    PLUS            reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    PERCENT         reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    TIMES           reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    RPAREN          reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    DDOT            reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    COLON           reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    AS              reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 124 (exit_expr -> LPAREN RPAREN .)
    RKEY            reduce using rule 124 (exit_expr -> LPAREN RPAREN .)


state 165

    (26) expr1 -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 216


state 166

    (27) expr1 -> ARRAY_TYPE LPAREN RPAREN .

    INTE_DOT        reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    EQUALS          reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_THAN       reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    AND             reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    OR              reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    PLUS            reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    DIVIDE          reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    PERCENT         reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    TIMES           reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    MINUS           reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    SEMICOLON       reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    RPAREN          reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    DDOT            reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    COLON           reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    AS              reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    RBRACKET        reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)
    RKEY            reduce using rule 27 (expr1 -> ARRAY_TYPE LPAREN RPAREN .)


state 167

    (163) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (164) array_pair_list -> array_pair .
    (188) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (189) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 164 (array_pair_list -> array_pair .)
    COLON           shift and go to state 218

    array_pair_list_ARR_PAIR       shift and go to state 217

state 168

    (165) array_pair -> expr .
    (166) array_pair -> expr . ATTR_ASSOC expr
    (167) array_pair -> expr . ATTR_ASSOC AMPERSAND variable

    COLON           reduce using rule 165 (array_pair -> expr .)
    RPAREN          reduce using rule 165 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 219


state 169

    (168) array_pair -> AMPERSAND . variable
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 220
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 170

    (72) statement_if -> IF expr_parentheses statement_BLOCK_OPT .

    ELSEIF          reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 72 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)


state 171

    (79) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 221


state 172

    (80) function_call -> ID LPAREN RPAREN .

    INTE_DOT        reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    AS              reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 80 (function_call -> ID LPAREN RPAREN .)
    RKEY            reduce using rule 80 (function_call -> ID LPAREN RPAREN .)


state 173

    (81) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (82) function_call_parameter_list -> function_call_parameter .
    (178) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (179) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter

    RPAREN          reduce using rule 82 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 223

    function_call_list_COLON_FUNCTION shift and go to state 222

state 174

    (83) function_call_parameter -> expr .

    COLON           reduce using rule 83 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 83 (function_call_parameter -> expr .)


state 175

    (84) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 224


state 176

    (184) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AND             reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    OR              reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 184 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 177

    (131) selector -> LBRACKET expr . RBRACKET

    RBRACKET        shift and go to state 225


state 178

    (132) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    PLUS_ASSIGN     reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    LEFT_LOGICAL    reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    AND             reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    OR              reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    AS              reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 132 (selector -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 132 (selector -> LBRACKET RBRACKET .)


state 179

    (130) compound_variable -> DOLAR LKEY expr . RKEY

    RKEY            shift and go to state 226


state 180

    (133) function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .

    FUNCTION        reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    GLOBAL          reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    WHILE           reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DO              reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOR             reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOREACH         reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    BREAK           reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONTINUE        reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RETURN          reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    INCREMENT       reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DECREMENT       reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    LPAREN          reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXIT            reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DIE             reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ARRAY_TYPE      reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    TRUE            reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FALSE           reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    IF              reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ID              reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_REAL     reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_INTEGER  reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONSTANT_ENCAPSED_STRING reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DOLAR           reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    VARIABLE        reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    END_PROGRAM     reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RKEY            reduce using rule 133 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)


state 181

    (134) fds_statements -> LKEY . inner_statement_MUL RKEY
    (135) fds_statements -> LKEY . RKEY
    (169) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (170) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (133) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 228
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement_MUL            shift and go to state 227
    inner_statement                shift and go to state 229
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 182

    (138) fds_parameter -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 230


state 183

    (139) fds_parameter -> LPAREN RPAREN .

    LKEY            reduce using rule 139 (fds_parameter -> LPAREN RPAREN .)


state 184

    (140) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (141) parameter_list -> parameter .
    (182) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (183) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 141 (parameter_list -> parameter .)
    COLON           shift and go to state 232

    parameter_list_COLON_PARAMETER shift and go to state 231

state 185

    (142) parameter -> VARIABLE .
    (144) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 142 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 142 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 233


state 186

    (143) parameter -> parameter_prefix . VARIABLE
    (145) parameter -> parameter_prefix . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 234


state 187

    (146) parameter_prefix -> parameter_type . AMPERSAND
    (148) parameter_prefix -> parameter_type .

    AMPERSAND       shift and go to state 235
    VARIABLE        reduce using rule 148 (parameter_prefix -> parameter_type .)


state 188

    (147) parameter_prefix -> AMPERSAND .

    VARIABLE        reduce using rule 147 (parameter_prefix -> AMPERSAND .)


state 189

    (149) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 149 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 149 (parameter_type -> INT_TYPE .)


state 190

    (150) parameter_type -> BOOLEAN_TYPE .

    AMPERSAND       reduce using rule 150 (parameter_type -> BOOLEAN_TYPE .)
    VARIABLE        reduce using rule 150 (parameter_type -> BOOLEAN_TYPE .)


state 191

    (151) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 151 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 151 (parameter_type -> STRING_TYPE .)


state 192

    (152) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 152 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 152 (parameter_type -> FLOAT_TYPE .)


state 193

    (153) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 153 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 153 (parameter_type -> ARRAY_TYPE .)


state 194

    (154) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 154 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 154 (parameter_type -> BOOL_TYPE .)


state 195

    (155) parameter_type -> REAL_TYPE .

    AMPERSAND       reduce using rule 155 (parameter_type -> REAL_TYPE .)
    VARIABLE        reduce using rule 155 (parameter_type -> REAL_TYPE .)


state 196

    (156) parameter_type -> DOUBLE_TYPE .

    AMPERSAND       reduce using rule 156 (parameter_type -> DOUBLE_TYPE .)
    VARIABLE        reduce using rule 156 (parameter_type -> DOUBLE_TYPE .)


state 197

    (41) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOREACH         reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 41 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 198

    (67) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (68) statement_COLON_GLOBAL -> COLON global_var .
    (67) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (68) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 68 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 137

    statement_COLON_GLOBAL         shift and go to state 236

state 199

    (66) global_var -> DOLAR LKEY expr . RKEY

    RKEY            shift and go to state 237


state 200

    (10) expr2 -> INTE_DOT expr DDOT . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 238
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 201

    (73) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)


state 202

    (71) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 71 (expr_parentheses -> LPAREN expr RPAREN .)


state 203

    (48) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 239


state 204

    (176) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 176 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 205

    (171) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 171 (statement_MUL -> statement statement_MUL .)


state 206

    (55) for_statement -> FOR LPAREN for_parameters RPAREN . statement_BLOCK_OPT
    (175) statement_BLOCK_OPT -> . statement
    (176) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (177) statement_BLOCK_OPT -> . LKEY RKEY
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 87
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 240
    statement                      shift and go to state 86
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 207

    (56) for_parameters -> SEMICOLON SEMICOLON .
    (62) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (77) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (78) for_expr_OPT -> . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 56 (for_parameters -> SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 241
    expr                           shift and go to state 154
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 208

    (60) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (61) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 242


state 209

    (57) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (58) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (59) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (63) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (77) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (78) for_expr_OPT -> . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 244
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 243
    expr                           shift and go to state 154
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 210

    (77) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 77 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 77 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 211

    (173) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (174) for_expr_COLON_EXPR -> COLON . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 245
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 212

    (15) expr3 -> LPAREN type_cast_operator RPAREN expr .

    SEMICOLON       reduce using rule 15 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 15 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 15 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 15 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 15 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 15 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 15 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 15 (expr3 -> LPAREN type_cast_operator RPAREN expr .)


state 213

    (75) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (69) ampersand_variable -> . AMPERSAND VARIABLE
    (70) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 247
    VARIABLE        shift and go to state 248

    ampersand_variable             shift and go to state 246

state 214

    (14) expr3 -> variable assign_operator AMPERSAND expr .

    SEMICOLON       reduce using rule 14 (expr3 -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 14 (expr3 -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 14 (expr3 -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 14 (expr3 -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 14 (expr3 -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 14 (expr3 -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 14 (expr3 -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 14 (expr3 -> variable assign_operator AMPERSAND expr .)


state 215

    (123) exit_expr -> LPAREN expr RPAREN .

    INTE_DOT        reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 123 (exit_expr -> LPAREN expr RPAREN .)


state 216

    (26) expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    INTE_DOT        reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    SEMICOLON       reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 26 (expr1 -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 217

    (163) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 163 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 218

    (188) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (189) array_pair_list_ARR_PAIR -> COLON . array_pair
    (165) array_pair -> . expr
    (166) array_pair -> . expr ATTR_ASSOC expr
    (167) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (168) array_pair -> . AMPERSAND variable
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 169
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    array_pair                     shift and go to state 249
    expr                           shift and go to state 168
    variable                       shift and go to state 31
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 219

    (166) array_pair -> expr ATTR_ASSOC . expr
    (167) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 251
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 250
    variable                       shift and go to state 31
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 220

    (168) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 168 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 168 (array_pair -> AMPERSAND variable .)


state 221

    (79) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    INTE_DOT        reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    SEMICOLON       reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 79 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 222

    (81) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 81 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 223

    (178) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (179) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter
    (83) function_call_parameter -> . expr
    (84) function_call_parameter -> . AMPERSAND VARIABLE
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 175
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    function_call_parameter        shift and go to state 252
    expr                           shift and go to state 174
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 224

    (84) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 84 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 84 (function_call_parameter -> AMPERSAND VARIABLE .)


state 225

    (131) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    PLUS_ASSIGN     reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    AS              reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 131 (selector -> LBRACKET expr RBRACKET .)


state 226

    (130) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    AND             reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    OR              reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    AS              reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 130 (compound_variable -> DOLAR LKEY expr RKEY .)


state 227

    (134) fds_statements -> LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 253


state 228

    (135) fds_statements -> LKEY RKEY .

    FUNCTION        reduce using rule 135 (fds_statements -> LKEY RKEY .)
    GLOBAL          reduce using rule 135 (fds_statements -> LKEY RKEY .)
    WHILE           reduce using rule 135 (fds_statements -> LKEY RKEY .)
    DO              reduce using rule 135 (fds_statements -> LKEY RKEY .)
    FOR             reduce using rule 135 (fds_statements -> LKEY RKEY .)
    FOREACH         reduce using rule 135 (fds_statements -> LKEY RKEY .)
    BREAK           reduce using rule 135 (fds_statements -> LKEY RKEY .)
    CONTINUE        reduce using rule 135 (fds_statements -> LKEY RKEY .)
    RETURN          reduce using rule 135 (fds_statements -> LKEY RKEY .)
    INCREMENT       reduce using rule 135 (fds_statements -> LKEY RKEY .)
    DECREMENT       reduce using rule 135 (fds_statements -> LKEY RKEY .)
    LPAREN          reduce using rule 135 (fds_statements -> LKEY RKEY .)
    EXIT            reduce using rule 135 (fds_statements -> LKEY RKEY .)
    DIE             reduce using rule 135 (fds_statements -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 135 (fds_statements -> LKEY RKEY .)
    TRUE            reduce using rule 135 (fds_statements -> LKEY RKEY .)
    FALSE           reduce using rule 135 (fds_statements -> LKEY RKEY .)
    IF              reduce using rule 135 (fds_statements -> LKEY RKEY .)
    ID              reduce using rule 135 (fds_statements -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 135 (fds_statements -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 135 (fds_statements -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 135 (fds_statements -> LKEY RKEY .)
    DOLAR           reduce using rule 135 (fds_statements -> LKEY RKEY .)
    VARIABLE        reduce using rule 135 (fds_statements -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 135 (fds_statements -> LKEY RKEY .)
    RKEY            reduce using rule 135 (fds_statements -> LKEY RKEY .)


state 229

    (169) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (170) inner_statement_MUL -> inner_statement .
    (169) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (170) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (133) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 170 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement                shift and go to state 229
    inner_statement_MUL            shift and go to state 254
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 230

    (138) fds_parameter -> LPAREN parameter_list RPAREN .

    LKEY            reduce using rule 138 (fds_parameter -> LPAREN parameter_list RPAREN .)


state 231

    (140) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 140 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 232

    (182) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (183) parameter_list_COLON_PARAMETER -> COLON . parameter
    (142) parameter -> . VARIABLE
    (143) parameter -> . parameter_prefix VARIABLE
    (144) parameter -> . VARIABLE ASSIGN static_scalar
    (145) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (146) parameter_prefix -> . parameter_type AMPERSAND
    (147) parameter_prefix -> . AMPERSAND
    (148) parameter_prefix -> . parameter_type
    (149) parameter_type -> . INT_TYPE
    (150) parameter_type -> . BOOLEAN_TYPE
    (151) parameter_type -> . STRING_TYPE
    (152) parameter_type -> . FLOAT_TYPE
    (153) parameter_type -> . ARRAY_TYPE
    (154) parameter_type -> . BOOL_TYPE
    (155) parameter_type -> . REAL_TYPE
    (156) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 185
    AMPERSAND       shift and go to state 188
    INT_TYPE        shift and go to state 189
    BOOLEAN_TYPE    shift and go to state 190
    STRING_TYPE     shift and go to state 191
    FLOAT_TYPE      shift and go to state 192
    ARRAY_TYPE      shift and go to state 193
    BOOL_TYPE       shift and go to state 194
    REAL_TYPE       shift and go to state 195
    DOUBLE_TYPE     shift and go to state 196

    parameter                      shift and go to state 255
    parameter_prefix               shift and go to state 186
    parameter_type                 shift and go to state 187

state 233

    (144) parameter -> VARIABLE ASSIGN . static_scalar
    (157) static_scalar -> . common_scalar
    (158) static_scalar -> . PLUS static_scalar
    (159) static_scalar -> . MINUS static_scalar
    (160) common_scalar -> . NUMBER_REAL
    (161) common_scalar -> . NUMBER_INTEGER
    (162) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 256
    common_scalar                  shift and go to state 257

state 234

    (143) parameter -> parameter_prefix VARIABLE .
    (145) parameter -> parameter_prefix VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 143 (parameter -> parameter_prefix VARIABLE .)
    RPAREN          reduce using rule 143 (parameter -> parameter_prefix VARIABLE .)
    ASSIGN          shift and go to state 263


state 235

    (146) parameter_prefix -> parameter_type AMPERSAND .

    VARIABLE        reduce using rule 146 (parameter_prefix -> parameter_type AMPERSAND .)


state 236

    (67) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 67 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 237

    (66) global_var -> DOLAR LKEY expr RKEY .

    SEMICOLON       reduce using rule 66 (global_var -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 66 (global_var -> DOLAR LKEY expr RKEY .)


state 238

    (10) expr2 -> INTE_DOT expr DDOT expr .

    SEMICOLON       reduce using rule 10 (expr2 -> INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 10 (expr2 -> INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 10 (expr2 -> INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 10 (expr2 -> INTE_DOT expr DDOT expr .)
    AS              reduce using rule 10 (expr2 -> INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 10 (expr2 -> INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 10 (expr2 -> INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 10 (expr2 -> INTE_DOT expr DDOT expr .)


state 239

    (48) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOREACH         reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    INCREMENT       reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DECREMENT       reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DOLAR           reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 48 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)


state 240

    (55) for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 55 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)


state 241

    (62) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 62 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 242

    (60) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (61) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (77) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (78) for_expr_OPT -> . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 60 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 264
    expr                           shift and go to state 154
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 243

    (58) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (63) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 265


state 244

    (57) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (59) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (77) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (78) for_expr_OPT -> . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 57 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 266
    expr                           shift and go to state 154
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 245

    (173) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (174) for_expr_COLON_EXPR -> COLON expr .
    (173) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (174) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 174 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 174 (for_expr_COLON_EXPR -> COLON expr .)
    COLON           shift and go to state 211

    for_expr_COLON_EXPR            shift and go to state 267

state 246

    (75) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 268
    ATTR_ASSOC      shift and go to state 269


state 247

    (69) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 270


state 248

    (70) ampersand_variable -> VARIABLE .

    RPAREN          reduce using rule 70 (ampersand_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 70 (ampersand_variable -> VARIABLE .)


state 249

    (188) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (189) array_pair_list_ARR_PAIR -> COLON array_pair .
    (188) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (189) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 189 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 218

    array_pair_list_ARR_PAIR       shift and go to state 271

state 250

    (166) array_pair -> expr ATTR_ASSOC expr .

    COLON           reduce using rule 166 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 166 (array_pair -> expr ATTR_ASSOC expr .)


state 251

    (167) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 272
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 252

    (178) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (179) function_call_list_COLON_FUNCTION -> COLON function_call_parameter .
    (178) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (179) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter

    RPAREN          reduce using rule 179 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter .)
    COLON           shift and go to state 223

    function_call_list_COLON_FUNCTION shift and go to state 273

state 253

    (134) fds_statements -> LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 134 (fds_statements -> LKEY inner_statement_MUL RKEY .)


state 254

    (169) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 169 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 255

    (182) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (183) parameter_list_COLON_PARAMETER -> COLON parameter .
    (182) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (183) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 183 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 232

    parameter_list_COLON_PARAMETER shift and go to state 274

state 256

    (144) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 144 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 144 (parameter -> VARIABLE ASSIGN static_scalar .)


state 257

    (157) static_scalar -> common_scalar .

    COLON           reduce using rule 157 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 157 (static_scalar -> common_scalar .)


state 258

    (158) static_scalar -> PLUS . static_scalar
    (157) static_scalar -> . common_scalar
    (158) static_scalar -> . PLUS static_scalar
    (159) static_scalar -> . MINUS static_scalar
    (160) common_scalar -> . NUMBER_REAL
    (161) common_scalar -> . NUMBER_INTEGER
    (162) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 275
    common_scalar                  shift and go to state 257

state 259

    (159) static_scalar -> MINUS . static_scalar
    (157) static_scalar -> . common_scalar
    (158) static_scalar -> . PLUS static_scalar
    (159) static_scalar -> . MINUS static_scalar
    (160) common_scalar -> . NUMBER_REAL
    (161) common_scalar -> . NUMBER_INTEGER
    (162) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 276
    common_scalar                  shift and go to state 257

state 260

    (160) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 160 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 160 (common_scalar -> NUMBER_REAL .)


state 261

    (161) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 161 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 161 (common_scalar -> NUMBER_INTEGER .)


state 262

    (162) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 162 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 162 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 263

    (145) parameter -> parameter_prefix VARIABLE ASSIGN . static_scalar
    (157) static_scalar -> . common_scalar
    (158) static_scalar -> . PLUS static_scalar
    (159) static_scalar -> . MINUS static_scalar
    (160) common_scalar -> . NUMBER_REAL
    (161) common_scalar -> . NUMBER_INTEGER
    (162) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 277
    common_scalar                  shift and go to state 257

state 264

    (61) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 61 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 265

    (58) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (63) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (77) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (78) for_expr_OPT -> . expr
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 58 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 278
    expr                           shift and go to state 154
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 266

    (59) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 59 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 267

    (173) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 173 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 173 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 268

    (75) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN . statement_BLOCK_OPT
    (175) statement_BLOCK_OPT -> . statement
    (176) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (177) statement_BLOCK_OPT -> . LKEY RKEY
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 87
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 279
    statement                      shift and go to state 86
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 269

    (76) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC . ampersand_variable RPAREN statement_BLOCK_OPT
    (69) ampersand_variable -> . AMPERSAND VARIABLE
    (70) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 247
    VARIABLE        shift and go to state 248

    ampersand_variable             shift and go to state 280

state 270

    (69) ampersand_variable -> AMPERSAND VARIABLE .

    RPAREN          reduce using rule 69 (ampersand_variable -> AMPERSAND VARIABLE .)
    ATTR_ASSOC      reduce using rule 69 (ampersand_variable -> AMPERSAND VARIABLE .)


state 271

    (188) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 188 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 272

    (167) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 167 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 167 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 273

    (178) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 178 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 274

    (182) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 182 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 275

    (158) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 158 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 158 (static_scalar -> PLUS static_scalar .)


state 276

    (159) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 159 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 159 (static_scalar -> MINUS static_scalar .)


state 277

    (145) parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 145 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 145 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)


state 278

    (63) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 63 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 279

    (75) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 75 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)


state 280

    (76) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 281


state 281

    (76) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN . statement_BLOCK_OPT
    (175) statement_BLOCK_OPT -> . statement
    (176) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (177) statement_BLOCK_OPT -> . LKEY RKEY
    (32) statement -> . expr SEMICOLON
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . do_statement
    (36) statement -> . for_statement
    (37) statement -> . foreach_statement
    (38) statement -> . break_statement
    (39) statement -> . continue_statement
    (40) statement -> . return_statement
    (41) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (42) statement -> . GLOBAL global_var SEMICOLON
    (7) expr -> . expr1 expr2
    (8) expr -> . expr1
    (9) expr -> . expr3
    (43) if_statement -> . statement_if if_statement_complement
    (44) if_statement -> . statement_if
    (47) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (48) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (55) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (75) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (76) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (49) break_statement -> . BREAK expr SEMICOLON
    (50) break_statement -> . BREAK SEMICOLON
    (51) continue_statement -> . CONTINUE expr SEMICOLON
    (52) continue_statement -> . CONTINUE SEMICOLON
    (53) return_statement -> . RETURN expr SEMICOLON
    (54) return_statement -> . RETURN SEMICOLON
    (16) expr1 -> . INCREMENT variable
    (17) expr1 -> . variable INCREMENT
    (18) expr1 -> . DECREMENT variable
    (19) expr1 -> . variable DECREMENT
    (20) expr1 -> . variable
    (21) expr1 -> . LPAREN expr RPAREN
    (22) expr1 -> . EXIT exit_expr
    (23) expr1 -> . EXIT
    (24) expr1 -> . DIE exit_expr
    (25) expr1 -> . DIE
    (26) expr1 -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (27) expr1 -> . ARRAY_TYPE LPAREN RPAREN
    (28) expr1 -> . function_call
    (29) expr1 -> . scalar
    (30) expr1 -> . TRUE
    (31) expr1 -> . FALSE
    (13) expr3 -> . variable assign_operator expr
    (14) expr3 -> . variable assign_operator AMPERSAND expr
    (15) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (72) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (125) variable -> . reference_variable
    (126) variable -> . simple_indirect_reference_DOLAR reference_variable
    (79) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (80) function_call -> . ID LPAREN RPAREN
    (120) scalar -> . NUMBER_REAL
    (121) scalar -> . NUMBER_INTEGER
    (122) scalar -> . CONSTANT_ENCAPSED_STRING
    (127) reference_variable -> . compound_variable reference_variable_SELECTOR
    (128) reference_variable -> . compound_variable
    (186) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (187) simple_indirect_reference_DOLAR -> . DOLAR
    (129) compound_variable -> . VARIABLE
    (130) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 87
    GLOBAL          shift and go to state 18
    WHILE           shift and go to state 22
    DO              shift and go to state 23
    FOR             shift and go to state 24
    FOREACH         shift and go to state 26
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    INCREMENT       shift and go to state 30
    DECREMENT       shift and go to state 32
    LPAREN          shift and go to state 25
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    ARRAY_TYPE      shift and go to state 35
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39
    IF              shift and go to state 40
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 282
    statement                      shift and go to state 86
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    expr1                          shift and go to state 19
    expr3                          shift and go to state 20
    statement_if                   shift and go to state 21
    variable                       shift and go to state 31
    function_call                  shift and go to state 36
    scalar                         shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 47

state 282

    (76) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 76 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 21 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 21 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 48 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 129 resolved as shift

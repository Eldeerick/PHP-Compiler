Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    OR
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     inner_statement -> function_declaration_statement
Rule 4     inner_statement -> statement
Rule 5     statement -> expr SEMICOLON
Rule 6     statement -> statement_if statement_elseif
Rule 7     statement -> statement_if statement_elseif statement_else
Rule 8     statement -> statement_if
Rule 9     statement -> statement_if statement_else
Rule 10    statement -> WHILE expr_paren statement_BLOCK_OPT
Rule 11    statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
Rule 12    statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
Rule 13    statement -> BREAK expr SEMICOLON
Rule 14    statement -> BREAK SEMICOLON
Rule 15    statement -> CONTINUE expr SEMICOLON
Rule 16    statement -> CONTINUE SEMICOLON
Rule 17    statement -> RETURN expr SEMICOLON
Rule 18    statement -> RETURN SEMICOLON
Rule 19    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 20    statement -> GLOBAL global_var SEMICOLON
Rule 21    ampersand_variable -> AMPERSAND VARIABLE
Rule 22    ampersand_variable -> VARIABLE
Rule 23    statement_for -> SEMICOLON SEMICOLON
Rule 24    statement_for -> for_expr_OPT SEMICOLON SEMICOLON
Rule 25    statement_for -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 26    statement_for -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 27    statement_for -> SEMICOLON for_expr_OPT SEMICOLON
Rule 28    statement_for -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 29    statement_for -> SEMICOLON SEMICOLON for_expr_OPT
Rule 30    statement_for -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 31    global_var -> VARIABLE
Rule 32    global_var -> DOLAR VARIABLE
Rule 33    global_var -> DOLAR LKEY expr RKEY
Rule 34    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 35    statement_COLON_GLOBAL -> COLON global_var
Rule 36    expr_paren -> LPAREN expr RPAREN
Rule 37    statement_if -> IF expr_paren statement_BLOCK_OPT
Rule 38    statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT
Rule 39    statement_else -> ELSE statement_BLOCK_OPT
Rule 40    statement_foreach -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 41    statement_foreach -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 42    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 43    for_expr_OPT -> expr
Rule 44    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 45    function_call -> base_variable
Rule 46    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 47    function_call_parameter_list -> <empty>
Rule 48    function_call_parameter -> variable
Rule 49    function_call_parameter -> AMPERSAND VARIABLE
Rule 50    assignment_list_element -> variable
Rule 51    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 52    unary_operator -> EXC_DOT
Rule 53    unary_operator -> PLUS
Rule 54    unary_operator -> MINUS
Rule 55    type_cast_operator -> INT_TYPE
Rule 56    type_cast_operator -> DOUBLE_TYPE
Rule 57    type_cast_operator -> FLOAT_TYPE
Rule 58    type_cast_operator -> REAL_TYPE
Rule 59    type_cast_operator -> STRING_TYPE
Rule 60    type_cast_operator -> ARRAY_TYPE
Rule 61    type_cast_operator -> BOOLEAN_TYPE
Rule 62    type_cast_operator -> BOOL_TYPE
Rule 63    type_cast_operator -> UNSET
Rule 64    arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr
Rule 65    arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr
Rule 66    arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr
Rule 67    arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr
Rule 68    arithmetic_expr -> LPAREN arithmetic_expr RPAREN
Rule 69    arithmetic_expr -> NUMBER_INTEGER
Rule 70    arithmetic_expr -> NUMBER_REAL
Rule 71    assign_operator -> ADD_ASSIGN
Rule 72    assign_operator -> SUB_ASSIGN
Rule 73    assign_operator -> MOD_ASSIGN
Rule 74    assign_operator -> PLUS_ASSIGN
Rule 75    assign_operator -> DIVIDE_ASSIGN
Rule 76    assign_operator -> ASSIGN
Rule 77    arithmetic_operator -> PLUS
Rule 78    arithmetic_operator -> DIVIDE
Rule 79    arithmetic_operator -> PERCENT
Rule 80    arithmetic_operator -> TIMES
Rule 81    arithmetic_operator -> MINUS
Rule 82    comparission_operator -> EQUALS
Rule 83    comparission_operator -> GREAT_THAN
Rule 84    comparission_operator -> LESS_THAN
Rule 85    comparission_operator -> LESS_EQUAL
Rule 86    comparission_operator -> GREAT_EQUAL
Rule 87    comparission_operator -> NOT_EQUAL
Rule 88    comparission_operator -> LEFT_LOGICAL
Rule 89    comparission_operator -> RIGHT_LOGICAL
Rule 90    expr -> INCREMENT variable
Rule 91    expr -> variable INCREMENT
Rule 92    expr -> DECREMENT variable
Rule 93    expr -> variable DECREMENT
Rule 94    expr -> variable LBRACKET expr RBRACKET
Rule 95    expr -> LPAREN expr RPAREN
Rule 96    expr -> unary_operator expr
Rule 97    expr -> expr INTE_DOT expr DDOT expr
Rule 98    expr -> expr comparission_operator expr
Rule 99    expr -> variable assign_operator expr
Rule 100   expr -> variable assign_operator AMPERSAND expr
Rule 101   expr -> expr arithmetic_operator expr
Rule 102   expr -> LPAREN type_cast_operator RPAREN expr
Rule 103   expr -> EXIT expr_EXIT
Rule 104   expr -> DIE expr_EXIT
Rule 105   expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 106   expr -> ARRAY_TYPE LPAREN RPAREN
Rule 107   expr -> function_call
Rule 108   expr -> variable
Rule 109   expr -> NUMBER_REAL
Rule 110   expr -> NUMBER_INTEGER
Rule 111   expr -> CONSTANT_ENCAPSED_STRING
Rule 112   expr -> TRUE
Rule 113   expr -> FALSE
Rule 114   encaps -> encaps_var
Rule 115   encaps -> VARIABLE
Rule 116   encaps -> LPAREN
Rule 117   encaps -> RPAREN
Rule 118   encaps -> LKEY
Rule 119   encaps -> RKEY
Rule 120   encaps_var -> VARIABLE encaps_var_OPT
Rule 121   encaps_var -> DOLAR LBRACKET expr RBRACKET
Rule 122   encaps_var -> DOLAR LKEY ID LBRACKET expr RBRACKET RKEY
Rule 123   encaps_var -> LKEY variable RKEY
Rule 124   encaps_var_OPT -> LBRACKET encaps_var_offset RBRACKET
Rule 125   encaps_var_OPT -> <empty>
Rule 126   encaps_var_offset -> STRING
Rule 127   encaps_var_offset -> VARIABLE
Rule 128   expr_EXIT -> exit_expr
Rule 129   expr_EXIT -> <empty>
Rule 130   exit_expr -> LPAREN expr RPAREN
Rule 131   exit_expr -> LPAREN RPAREN
Rule 132   variable -> base_variable
Rule 133   variable -> function_call
Rule 134   base_variable -> reference_variable
Rule 135   base_variable -> simple_indirect_reference_DOLAR reference_variable
Rule 136   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 137   compound_variable -> VARIABLE
Rule 138   compound_variable -> DOLAR LKEY expr RKEY
Rule 139   selector -> LBRACKET selector_EXPR RBRACKET
Rule 140   function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY
Rule 141   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
Rule 142   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
Rule 143   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
Rule 144   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 145   function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
Rule 146   function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
Rule 147   function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 148   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 149   parameter_list -> parameter
Rule 150   parameter -> VARIABLE
Rule 151   parameter -> VARIABLE ASSIGN static_scalar
Rule 152   parameter -> parameter_type VARIABLE
Rule 153   parameter -> parameter_type AMPERSAND VARIABLE
Rule 154   parameter -> AMPERSAND VARIABLE
Rule 155   parameter -> AMPERSAND VARIABLE ASSIGN static_scalar
Rule 156   parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
Rule 157   parameter_type -> INT_TYPE
Rule 158   parameter_type -> BOOLEAN_TYPE
Rule 159   parameter_type -> STRING_TYPE
Rule 160   parameter_type -> FLOAT_TYPE
Rule 161   parameter_type -> ARRAY_TYPE
Rule 162   parameter_type -> BOOL_TYPE
Rule 163   parameter_type -> REAL_TYPE
Rule 164   parameter_type -> DOUBLE_TYPE
Rule 165   static_scalar -> common_scalar
Rule 166   static_scalar -> PLUS static_scalar
Rule 167   static_scalar -> MINUS static_scalar
Rule 168   common_scalar -> NUMBER_REAL
Rule 169   common_scalar -> NUMBER_INTEGER
Rule 170   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 171   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 172   array_pair_list -> array_pair
Rule 173   array_pair -> expr
Rule 174   array_pair -> expr array_pair_ATTR_EXPR_OPT
Rule 175   array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable
Rule 176   array_pair -> AMPERSAND variable
Rule 177   main_INNER -> inner_statement main_INNER
Rule 178   main_INNER -> inner_statement
Rule 179   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 180   inner_statement_MUL -> inner_statement
Rule 181   statement_MUL -> statement statement_MUL
Rule 182   statement_MUL -> statement
Rule 183   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 184   for_expr_COLON_EXPR -> COLON expr
Rule 185   statement_BLOCK_OPT -> statement
Rule 186   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 187   statement_BLOCK_OPT -> LKEY RKEY
Rule 188   function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 189   function_call_list_COLON_FUNCTION -> <empty>
Rule 190   expr_without_variable_COLON_ASSIGNMENT -> COLON assignment_list_element expr_without_variable_COLON_ASSIGNMENT
Rule 191   expr_without_variable_COLON_ASSIGNMENT -> <empty>
Rule 192   assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 193   assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 194   expr_without_variable_ENCAPS -> encaps expr_without_variable_ENCAPS
Rule 195   expr_without_variable_ENCAPS -> <empty>
Rule 196   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 197   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 198   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 199   reference_variable_SELECTOR -> <empty>
Rule 200   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 201   simple_indirect_reference_DOLAR -> <empty>
Rule 202   selector_EXPR -> expr
Rule 203   selector_EXPR -> <empty>
Rule 204   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 205   array_pair_list_ARR_PAIR -> COLON array_pair
Rule 206   array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr
Rule 207   array_pair_ATTR_EXPR_OPT -> <empty>
Rule 208   array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC

Terminals, with rules where they appear

ADD_ASSIGN           : 71
AMPERSAND            : 21 49 100 141 142 143 144 153 154 155 156 175 176
AND                  : 
APOSTROFE            : 
ARRAY_TYPE           : 60 105 106 161
ARROBA               : 
AS                   : 40 41
ASPAS                : 
ASSIGN               : 76 151 155 156
ATTR_ASSOC           : 41 206 208
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 61 158
BOOL_TYPE            : 62 162
BREAK                : 13 14
CASE                 : 
CLONE                : 
COLON                : 34 35 183 184 188 190 192 196 197 204 205
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 111 170
CONTINUE             : 15 16
CRASE                : 
DDOT                 : 97
DECLARE              : 
DECREMENT            : 92 93
DIE                  : 104
DIVIDE               : 67 78
DIVIDE_ASSIGN        : 75
DO                   : 11
DOLAR                : 32 33 121 122 138 200
DOUBLE_TYPE          : 56 164
ELSE                 : 39
ELSEIF               : 38
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 82
EXC_DOT              : 52
EXIT                 : 103
FALSE                : 113
FLOAT_TYPE           : 57 160
FOR                  : 12
FOREACH              : 40 41
FUNCTION             : 140 141 142 143 144 145 146 147
GLOBAL               : 19 20
GREAT_EQUAL          : 86
GREAT_THAN           : 83
ID                   : 44 122 140 141 142 143 144 145 146 147
IDENTATION           : 
IF                   : 37
INCREMENT            : 90 91
INTE_DOT             : 97
INT_TYPE             : 55 157
LBRACKET             : 94 121 122 124 139
LEFT_LOGICAL         : 88
LESS_EQUAL           : 85
LESS_THAN            : 84
LIST                 : 51
LKEY                 : 33 118 122 123 138 140 141 142 143 144 145 146 147 186 187
LPAREN               : 12 36 40 41 44 51 68 95 102 105 106 116 130 131 140 141 142 143 144 145 146 147
MINUS                : 54 65 81 167
MOD_ASSIGN           : 73
NOT_EQUAL            : 87
NUMBER_INTEGER       : 69 110 169
NUMBER_REAL          : 70 109 168
OR                   : 
PERCENT              : 79
PLUS                 : 53 64 77 166
PLUS_ASSIGN          : 74
RBRACKET             : 94 121 122 124 139
REAL_TYPE            : 58 163
RETURN               : 17 18
RIGHT_LOGICAL        : 89
RKEY                 : 33 119 122 123 138 140 141 142 143 144 145 146 147 186 187
RPAREN               : 12 36 40 41 44 51 68 95 102 105 106 117 130 131 140 141 142 143 144 145 146 147
SEMICOLON            : 5 11 13 14 15 16 17 18 19 20 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30
STRING               : 126
STRING_TYPE          : 59 159
SUB_ASSIGN           : 72
TIMES                : 66 80
TRUE                 : 112
UNSET                : 63
VAR                  : 
VARIABLE             : 21 22 31 32 49 115 120 127 137 150 151 152 153 154 155 156
WHILE                : 10 11
error                : 

Nonterminals, with rules where they appear

ampersand_variable   : 40 41 41
arithmetic_expr      : 64 64 65 65 66 66 67 67 68
arithmetic_operator  : 101
array_pair           : 171 172 204 205
array_pair_ATTR_EXPR_OPT : 174
array_pair_EXPR_ATTR_OPT : 175
array_pair_list      : 105
array_pair_list_ARR_PAIR : 171 204
assign_operator      : 99 100
assignment_list_element : 51 190 192
assignment_list_element_COLON_ASSIGNMENT : 51 192
base_variable        : 45 132
common_scalar        : 165
comparission_operator : 98
compound_variable    : 136
encaps               : 194
encaps_var           : 114
encaps_var_OPT       : 120
encaps_var_offset    : 124
exit_expr            : 128
expr                 : 5 13 15 17 33 36 40 41 42 43 94 95 96 97 97 97 98 98 99 100 101 101 102 121 122 130 138 173 174 183 184 202 206 208
expr_EXIT            : 103 104
expr_paren           : 10 11 37 38
expr_without_variable_COLON_ASSIGNMENT : 190
expr_without_variable_ENCAPS : 194
for_expr_COLON_EXPR  : 42 183
for_expr_OPT         : 24 25 25 26 26 27 28 28 29 30 30 30
function_call        : 107 133
function_call_list_COLON_FUNCTION : 46 188
function_call_parameter : 46 188
function_call_parameter_list : 44
function_declaration_statement : 3
global_var           : 19 20 34 35
inner_statement      : 177 178 179 180
inner_statement_MUL  : 143 144 146 147 179
main                 : 0
main_INNER           : 1 177
parameter            : 148 149 196 197
parameter_list       : 142 144 145 147
parameter_list_COLON_PARAMETER : 148 196
parameter_type       : 152 153 156
reference_variable   : 134 135
reference_variable_SELECTOR : 136 198
selector             : 198
selector_EXPR        : 139
simple_indirect_reference_DOLAR : 135 200
statement            : 4 181 182 185
statement_BLOCK_OPT  : 10 11 12 37 38 39 40 41
statement_COLON_GLOBAL : 19 34
statement_MUL        : 181 186
statement_else       : 7 9
statement_elseif     : 6 7
statement_for        : 12
statement_foreach    : 
statement_if         : 6 7 8 9
static_scalar        : 151 155 156 166 167
type_cast_operator   : 102
unary_operator       : 96
variable             : 48 50 90 91 92 93 94 99 100 108 123 175 176

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (177) main_INNER -> . inner_statement main_INNER
    (178) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (140) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (141) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (145) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 43


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (177) main_INNER -> inner_statement . main_INNER
    (178) main_INNER -> inner_statement .
    (177) main_INNER -> . inner_statement main_INNER
    (178) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (140) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (141) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (145) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     reduce using rule 178 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 44
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 6

    (3) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 3 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 3 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 3 (inner_statement -> function_declaration_statement .)


state 7

    (4) inner_statement -> statement .

    FUNCTION        reduce using rule 4 (inner_statement -> statement .)
    WHILE           reduce using rule 4 (inner_statement -> statement .)
    DO              reduce using rule 4 (inner_statement -> statement .)
    FOR             reduce using rule 4 (inner_statement -> statement .)
    BREAK           reduce using rule 4 (inner_statement -> statement .)
    CONTINUE        reduce using rule 4 (inner_statement -> statement .)
    RETURN          reduce using rule 4 (inner_statement -> statement .)
    GLOBAL          reduce using rule 4 (inner_statement -> statement .)
    INCREMENT       reduce using rule 4 (inner_statement -> statement .)
    DECREMENT       reduce using rule 4 (inner_statement -> statement .)
    LPAREN          reduce using rule 4 (inner_statement -> statement .)
    EXIT            reduce using rule 4 (inner_statement -> statement .)
    DIE             reduce using rule 4 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 4 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 4 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 4 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (inner_statement -> statement .)
    TRUE            reduce using rule 4 (inner_statement -> statement .)
    FALSE           reduce using rule 4 (inner_statement -> statement .)
    IF              reduce using rule 4 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 4 (inner_statement -> statement .)
    PLUS            reduce using rule 4 (inner_statement -> statement .)
    MINUS           reduce using rule 4 (inner_statement -> statement .)
    ID              reduce using rule 4 (inner_statement -> statement .)
    DOLAR           reduce using rule 4 (inner_statement -> statement .)
    VARIABLE        reduce using rule 4 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 4 (inner_statement -> statement .)
    RKEY            reduce using rule 4 (inner_statement -> statement .)


state 8

    (140) function_declaration_statement -> FUNCTION . ID LPAREN RPAREN LKEY RKEY
    (141) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (145) function_declaration_statement -> FUNCTION . ID LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> FUNCTION . ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> FUNCTION . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 45
    AMPERSAND       shift and go to state 46


state 9

    (44) function_call -> ID . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 47


state 10

    (95) expr -> LPAREN . expr RPAREN
    (102) expr -> LPAREN . type_cast_operator RPAREN expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (55) type_cast_operator -> . INT_TYPE
    (56) type_cast_operator -> . DOUBLE_TYPE
    (57) type_cast_operator -> . FLOAT_TYPE
    (58) type_cast_operator -> . REAL_TYPE
    (59) type_cast_operator -> . STRING_TYPE
    (60) type_cast_operator -> . ARRAY_TYPE
    (61) type_cast_operator -> . BOOLEAN_TYPE
    (62) type_cast_operator -> . BOOL_TYPE
    (63) type_cast_operator -> . UNSET
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 50
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    INT_TYPE        shift and go to state 51
    DOUBLE_TYPE     shift and go to state 52
    FLOAT_TYPE      shift and go to state 53
    REAL_TYPE       shift and go to state 54
    STRING_TYPE     shift and go to state 55
    BOOLEAN_TYPE    shift and go to state 56
    BOOL_TYPE       shift and go to state 57
    UNSET           shift and go to state 58
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 48
    type_cast_operator             shift and go to state 49
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 11

    (5) statement -> expr . SEMICOLON
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 59
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 12

    (6) statement -> statement_if . statement_elseif
    (7) statement -> statement_if . statement_elseif statement_else
    (8) statement -> statement_if .
    (9) statement -> statement_if . statement_else
    (38) statement_elseif -> . ELSEIF expr_paren statement_BLOCK_OPT
    (39) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 8 (statement -> statement_if .)
    WHILE           reduce using rule 8 (statement -> statement_if .)
    DO              reduce using rule 8 (statement -> statement_if .)
    FOR             reduce using rule 8 (statement -> statement_if .)
    BREAK           reduce using rule 8 (statement -> statement_if .)
    CONTINUE        reduce using rule 8 (statement -> statement_if .)
    RETURN          reduce using rule 8 (statement -> statement_if .)
    GLOBAL          reduce using rule 8 (statement -> statement_if .)
    INCREMENT       reduce using rule 8 (statement -> statement_if .)
    DECREMENT       reduce using rule 8 (statement -> statement_if .)
    LPAREN          reduce using rule 8 (statement -> statement_if .)
    EXIT            reduce using rule 8 (statement -> statement_if .)
    DIE             reduce using rule 8 (statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 8 (statement -> statement_if .)
    NUMBER_REAL     reduce using rule 8 (statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (statement -> statement_if .)
    TRUE            reduce using rule 8 (statement -> statement_if .)
    FALSE           reduce using rule 8 (statement -> statement_if .)
    IF              reduce using rule 8 (statement -> statement_if .)
    EXC_DOT         reduce using rule 8 (statement -> statement_if .)
    PLUS            reduce using rule 8 (statement -> statement_if .)
    MINUS           reduce using rule 8 (statement -> statement_if .)
    ID              reduce using rule 8 (statement -> statement_if .)
    DOLAR           reduce using rule 8 (statement -> statement_if .)
    VARIABLE        reduce using rule 8 (statement -> statement_if .)
    END_PROGRAM     reduce using rule 8 (statement -> statement_if .)
    RKEY            reduce using rule 8 (statement -> statement_if .)
    ELSEIF          shift and go to state 78
    ELSE            shift and go to state 79

  ! ELSE            [ reduce using rule 8 (statement -> statement_if .) ]
  ! ELSEIF          [ reduce using rule 8 (statement -> statement_if .) ]

    statement_elseif               shift and go to state 76
    statement_else                 shift and go to state 77

state 13

    (10) statement -> WHILE . expr_paren statement_BLOCK_OPT
    (36) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 81

    expr_paren                     shift and go to state 80

state 14

    (11) statement -> DO . statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (185) statement_BLOCK_OPT -> . statement
    (186) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (187) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 82
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 15

    (12) statement -> FOR . LPAREN statement_for RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 85


state 16

    (13) statement -> BREAK . expr SEMICOLON
    (14) statement -> BREAK . SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       shift and go to state 87
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 86
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 17

    (15) statement -> CONTINUE . expr SEMICOLON
    (16) statement -> CONTINUE . SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       shift and go to state 89
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 88
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 18

    (17) statement -> RETURN . expr SEMICOLON
    (18) statement -> RETURN . SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       shift and go to state 91
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 90
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 19

    (19) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> GLOBAL . global_var SEMICOLON
    (31) global_var -> . VARIABLE
    (32) global_var -> . DOLAR VARIABLE
    (33) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 93
    DOLAR           shift and go to state 94

    global_var                     shift and go to state 92

state 20

    (90) expr -> INCREMENT . variable
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 95
    base_variable                  shift and go to state 34
    function_call                  shift and go to state 96
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 21

    (91) expr -> variable . INCREMENT
    (93) expr -> variable . DECREMENT
    (94) expr -> variable . LBRACKET expr RBRACKET
    (99) expr -> variable . assign_operator expr
    (100) expr -> variable . assign_operator AMPERSAND expr
    (108) expr -> variable .
    (71) assign_operator -> . ADD_ASSIGN
    (72) assign_operator -> . SUB_ASSIGN
    (73) assign_operator -> . MOD_ASSIGN
    (74) assign_operator -> . PLUS_ASSIGN
    (75) assign_operator -> . DIVIDE_ASSIGN
    (76) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 97
    DECREMENT       shift and go to state 98
    LBRACKET        shift and go to state 99
    SEMICOLON       reduce using rule 108 (expr -> variable .)
    INTE_DOT        reduce using rule 108 (expr -> variable .)
    EQUALS          reduce using rule 108 (expr -> variable .)
    GREAT_THAN      reduce using rule 108 (expr -> variable .)
    LESS_THAN       reduce using rule 108 (expr -> variable .)
    LESS_EQUAL      reduce using rule 108 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 108 (expr -> variable .)
    NOT_EQUAL       reduce using rule 108 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 108 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 108 (expr -> variable .)
    PLUS            reduce using rule 108 (expr -> variable .)
    DIVIDE          reduce using rule 108 (expr -> variable .)
    PERCENT         reduce using rule 108 (expr -> variable .)
    TIMES           reduce using rule 108 (expr -> variable .)
    MINUS           reduce using rule 108 (expr -> variable .)
    RPAREN          reduce using rule 108 (expr -> variable .)
    DDOT            reduce using rule 108 (expr -> variable .)
    COLON           reduce using rule 108 (expr -> variable .)
    RBRACKET        reduce using rule 108 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 108 (expr -> variable .)
    RKEY            reduce using rule 108 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 101
    SUB_ASSIGN      shift and go to state 102
    MOD_ASSIGN      shift and go to state 103
    PLUS_ASSIGN     shift and go to state 104
    DIVIDE_ASSIGN   shift and go to state 105
    ASSIGN          shift and go to state 106

    assign_operator                shift and go to state 100

state 22

    (92) expr -> DECREMENT . variable
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 107
    base_variable                  shift and go to state 34
    function_call                  shift and go to state 96
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 23

    (96) expr -> unary_operator . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    unary_operator                 shift and go to state 23
    expr                           shift and go to state 108
    variable                       shift and go to state 21
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 24

    (103) expr -> EXIT . expr_EXIT
    (128) expr_EXIT -> . exit_expr
    (129) expr_EXIT -> .
    (130) exit_expr -> . LPAREN expr RPAREN
    (131) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 129 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 129 (expr_EXIT -> .)
    EQUALS          reduce using rule 129 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 129 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 129 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 129 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 129 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 129 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 129 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 129 (expr_EXIT -> .)
    PLUS            reduce using rule 129 (expr_EXIT -> .)
    DIVIDE          reduce using rule 129 (expr_EXIT -> .)
    PERCENT         reduce using rule 129 (expr_EXIT -> .)
    TIMES           reduce using rule 129 (expr_EXIT -> .)
    MINUS           reduce using rule 129 (expr_EXIT -> .)
    RPAREN          reduce using rule 129 (expr_EXIT -> .)
    DDOT            reduce using rule 129 (expr_EXIT -> .)
    COLON           reduce using rule 129 (expr_EXIT -> .)
    RBRACKET        reduce using rule 129 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 129 (expr_EXIT -> .)
    RKEY            reduce using rule 129 (expr_EXIT -> .)
    LPAREN          shift and go to state 111

    expr_EXIT                      shift and go to state 109
    exit_expr                      shift and go to state 110

state 25

    (104) expr -> DIE . expr_EXIT
    (128) expr_EXIT -> . exit_expr
    (129) expr_EXIT -> .
    (130) exit_expr -> . LPAREN expr RPAREN
    (131) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 129 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 129 (expr_EXIT -> .)
    EQUALS          reduce using rule 129 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 129 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 129 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 129 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 129 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 129 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 129 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 129 (expr_EXIT -> .)
    PLUS            reduce using rule 129 (expr_EXIT -> .)
    DIVIDE          reduce using rule 129 (expr_EXIT -> .)
    PERCENT         reduce using rule 129 (expr_EXIT -> .)
    TIMES           reduce using rule 129 (expr_EXIT -> .)
    MINUS           reduce using rule 129 (expr_EXIT -> .)
    RPAREN          reduce using rule 129 (expr_EXIT -> .)
    DDOT            reduce using rule 129 (expr_EXIT -> .)
    COLON           reduce using rule 129 (expr_EXIT -> .)
    RBRACKET        reduce using rule 129 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 129 (expr_EXIT -> .)
    RKEY            reduce using rule 129 (expr_EXIT -> .)
    LPAREN          shift and go to state 111

    expr_EXIT                      shift and go to state 112
    exit_expr                      shift and go to state 110

state 26

    (105) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (106) expr -> ARRAY_TYPE . LPAREN RPAREN

    LPAREN          shift and go to state 113


state 27

    (107) expr -> function_call .
    (133) variable -> function_call .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for PLUS resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for PERCENT resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for TIMES resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for MINUS resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for DDOT resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for COLON resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 107 (expr -> function_call .)
  ! reduce/reduce conflict for RKEY resolved using rule 107 (expr -> function_call .)
    SEMICOLON       reduce using rule 107 (expr -> function_call .)
    INTE_DOT        reduce using rule 107 (expr -> function_call .)
    EQUALS          reduce using rule 107 (expr -> function_call .)
    GREAT_THAN      reduce using rule 107 (expr -> function_call .)
    LESS_THAN       reduce using rule 107 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 107 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 107 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 107 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 107 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 107 (expr -> function_call .)
    PLUS            reduce using rule 107 (expr -> function_call .)
    DIVIDE          reduce using rule 107 (expr -> function_call .)
    PERCENT         reduce using rule 107 (expr -> function_call .)
    TIMES           reduce using rule 107 (expr -> function_call .)
    MINUS           reduce using rule 107 (expr -> function_call .)
    RPAREN          reduce using rule 107 (expr -> function_call .)
    DDOT            reduce using rule 107 (expr -> function_call .)
    COLON           reduce using rule 107 (expr -> function_call .)
    RBRACKET        reduce using rule 107 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 107 (expr -> function_call .)
    RKEY            reduce using rule 107 (expr -> function_call .)
    INCREMENT       reduce using rule 133 (variable -> function_call .)
    DECREMENT       reduce using rule 133 (variable -> function_call .)
    LBRACKET        reduce using rule 133 (variable -> function_call .)
    ADD_ASSIGN      reduce using rule 133 (variable -> function_call .)
    SUB_ASSIGN      reduce using rule 133 (variable -> function_call .)
    MOD_ASSIGN      reduce using rule 133 (variable -> function_call .)
    PLUS_ASSIGN     reduce using rule 133 (variable -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 133 (variable -> function_call .)
    ASSIGN          reduce using rule 133 (variable -> function_call .)

  ! SEMICOLON       [ reduce using rule 133 (variable -> function_call .) ]
  ! INTE_DOT        [ reduce using rule 133 (variable -> function_call .) ]
  ! EQUALS          [ reduce using rule 133 (variable -> function_call .) ]
  ! GREAT_THAN      [ reduce using rule 133 (variable -> function_call .) ]
  ! LESS_THAN       [ reduce using rule 133 (variable -> function_call .) ]
  ! LESS_EQUAL      [ reduce using rule 133 (variable -> function_call .) ]
  ! GREAT_EQUAL     [ reduce using rule 133 (variable -> function_call .) ]
  ! NOT_EQUAL       [ reduce using rule 133 (variable -> function_call .) ]
  ! LEFT_LOGICAL    [ reduce using rule 133 (variable -> function_call .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 133 (variable -> function_call .) ]
  ! PLUS            [ reduce using rule 133 (variable -> function_call .) ]
  ! DIVIDE          [ reduce using rule 133 (variable -> function_call .) ]
  ! PERCENT         [ reduce using rule 133 (variable -> function_call .) ]
  ! TIMES           [ reduce using rule 133 (variable -> function_call .) ]
  ! MINUS           [ reduce using rule 133 (variable -> function_call .) ]
  ! RPAREN          [ reduce using rule 133 (variable -> function_call .) ]
  ! DDOT            [ reduce using rule 133 (variable -> function_call .) ]
  ! COLON           [ reduce using rule 133 (variable -> function_call .) ]
  ! RBRACKET        [ reduce using rule 133 (variable -> function_call .) ]
  ! ATTR_ASSOC      [ reduce using rule 133 (variable -> function_call .) ]
  ! RKEY            [ reduce using rule 133 (variable -> function_call .) ]


state 28

    (109) expr -> NUMBER_REAL .

    SEMICOLON       reduce using rule 109 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 109 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 109 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 109 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 109 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 109 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 109 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 109 (expr -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 109 (expr -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 109 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 109 (expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 109 (expr -> NUMBER_REAL .)
    PERCENT         reduce using rule 109 (expr -> NUMBER_REAL .)
    TIMES           reduce using rule 109 (expr -> NUMBER_REAL .)
    MINUS           reduce using rule 109 (expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 109 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 109 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 109 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 109 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 109 (expr -> NUMBER_REAL .)
    RKEY            reduce using rule 109 (expr -> NUMBER_REAL .)


state 29

    (110) expr -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 110 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 110 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 110 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 110 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 110 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 110 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 110 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 110 (expr -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 110 (expr -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 110 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 110 (expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 110 (expr -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 110 (expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 110 (expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 110 (expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 110 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 110 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 110 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 110 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 110 (expr -> NUMBER_INTEGER .)
    RKEY            reduce using rule 110 (expr -> NUMBER_INTEGER .)


state 30

    (111) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 111 (expr -> CONSTANT_ENCAPSED_STRING .)


state 31

    (112) expr -> TRUE .

    SEMICOLON       reduce using rule 112 (expr -> TRUE .)
    INTE_DOT        reduce using rule 112 (expr -> TRUE .)
    EQUALS          reduce using rule 112 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 112 (expr -> TRUE .)
    LESS_THAN       reduce using rule 112 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 112 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 112 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 112 (expr -> TRUE .)
    LEFT_LOGICAL    reduce using rule 112 (expr -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 112 (expr -> TRUE .)
    PLUS            reduce using rule 112 (expr -> TRUE .)
    DIVIDE          reduce using rule 112 (expr -> TRUE .)
    PERCENT         reduce using rule 112 (expr -> TRUE .)
    TIMES           reduce using rule 112 (expr -> TRUE .)
    MINUS           reduce using rule 112 (expr -> TRUE .)
    RPAREN          reduce using rule 112 (expr -> TRUE .)
    DDOT            reduce using rule 112 (expr -> TRUE .)
    COLON           reduce using rule 112 (expr -> TRUE .)
    RBRACKET        reduce using rule 112 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 112 (expr -> TRUE .)
    RKEY            reduce using rule 112 (expr -> TRUE .)


state 32

    (113) expr -> FALSE .

    SEMICOLON       reduce using rule 113 (expr -> FALSE .)
    INTE_DOT        reduce using rule 113 (expr -> FALSE .)
    EQUALS          reduce using rule 113 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 113 (expr -> FALSE .)
    LESS_THAN       reduce using rule 113 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 113 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 113 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 113 (expr -> FALSE .)
    LEFT_LOGICAL    reduce using rule 113 (expr -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 113 (expr -> FALSE .)
    PLUS            reduce using rule 113 (expr -> FALSE .)
    DIVIDE          reduce using rule 113 (expr -> FALSE .)
    PERCENT         reduce using rule 113 (expr -> FALSE .)
    TIMES           reduce using rule 113 (expr -> FALSE .)
    MINUS           reduce using rule 113 (expr -> FALSE .)
    RPAREN          reduce using rule 113 (expr -> FALSE .)
    DDOT            reduce using rule 113 (expr -> FALSE .)
    COLON           reduce using rule 113 (expr -> FALSE .)
    RBRACKET        reduce using rule 113 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 113 (expr -> FALSE .)
    RKEY            reduce using rule 113 (expr -> FALSE .)


state 33

    (37) statement_if -> IF . expr_paren statement_BLOCK_OPT
    (36) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 81

    expr_paren                     shift and go to state 114

state 34

    (132) variable -> base_variable .
    (45) function_call -> base_variable .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for EQUALS resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for PERCENT resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for TIMES resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for MINUS resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for ADD_ASSIGN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for SUB_ASSIGN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for MOD_ASSIGN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS_ASSIGN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE_ASSIGN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for DDOT resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for COLON resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 45 (function_call -> base_variable .)
  ! reduce/reduce conflict for RKEY resolved using rule 45 (function_call -> base_variable .)
    SEMICOLON       reduce using rule 45 (function_call -> base_variable .)
    INTE_DOT        reduce using rule 45 (function_call -> base_variable .)
    EQUALS          reduce using rule 45 (function_call -> base_variable .)
    GREAT_THAN      reduce using rule 45 (function_call -> base_variable .)
    LESS_THAN       reduce using rule 45 (function_call -> base_variable .)
    LESS_EQUAL      reduce using rule 45 (function_call -> base_variable .)
    GREAT_EQUAL     reduce using rule 45 (function_call -> base_variable .)
    NOT_EQUAL       reduce using rule 45 (function_call -> base_variable .)
    LEFT_LOGICAL    reduce using rule 45 (function_call -> base_variable .)
    RIGHT_LOGICAL   reduce using rule 45 (function_call -> base_variable .)
    PLUS            reduce using rule 45 (function_call -> base_variable .)
    DIVIDE          reduce using rule 45 (function_call -> base_variable .)
    PERCENT         reduce using rule 45 (function_call -> base_variable .)
    TIMES           reduce using rule 45 (function_call -> base_variable .)
    MINUS           reduce using rule 45 (function_call -> base_variable .)
    INCREMENT       reduce using rule 45 (function_call -> base_variable .)
    DECREMENT       reduce using rule 45 (function_call -> base_variable .)
    LBRACKET        reduce using rule 45 (function_call -> base_variable .)
    ADD_ASSIGN      reduce using rule 45 (function_call -> base_variable .)
    SUB_ASSIGN      reduce using rule 45 (function_call -> base_variable .)
    MOD_ASSIGN      reduce using rule 45 (function_call -> base_variable .)
    PLUS_ASSIGN     reduce using rule 45 (function_call -> base_variable .)
    DIVIDE_ASSIGN   reduce using rule 45 (function_call -> base_variable .)
    ASSIGN          reduce using rule 45 (function_call -> base_variable .)
    RPAREN          reduce using rule 45 (function_call -> base_variable .)
    DDOT            reduce using rule 45 (function_call -> base_variable .)
    COLON           reduce using rule 45 (function_call -> base_variable .)
    RBRACKET        reduce using rule 45 (function_call -> base_variable .)
    ATTR_ASSOC      reduce using rule 45 (function_call -> base_variable .)
    RKEY            reduce using rule 45 (function_call -> base_variable .)

  ! INCREMENT       [ reduce using rule 132 (variable -> base_variable .) ]
  ! DECREMENT       [ reduce using rule 132 (variable -> base_variable .) ]
  ! LBRACKET        [ reduce using rule 132 (variable -> base_variable .) ]
  ! ADD_ASSIGN      [ reduce using rule 132 (variable -> base_variable .) ]
  ! SUB_ASSIGN      [ reduce using rule 132 (variable -> base_variable .) ]
  ! MOD_ASSIGN      [ reduce using rule 132 (variable -> base_variable .) ]
  ! PLUS_ASSIGN     [ reduce using rule 132 (variable -> base_variable .) ]
  ! DIVIDE_ASSIGN   [ reduce using rule 132 (variable -> base_variable .) ]
  ! ASSIGN          [ reduce using rule 132 (variable -> base_variable .) ]
  ! SEMICOLON       [ reduce using rule 132 (variable -> base_variable .) ]
  ! INTE_DOT        [ reduce using rule 132 (variable -> base_variable .) ]
  ! EQUALS          [ reduce using rule 132 (variable -> base_variable .) ]
  ! GREAT_THAN      [ reduce using rule 132 (variable -> base_variable .) ]
  ! LESS_THAN       [ reduce using rule 132 (variable -> base_variable .) ]
  ! LESS_EQUAL      [ reduce using rule 132 (variable -> base_variable .) ]
  ! GREAT_EQUAL     [ reduce using rule 132 (variable -> base_variable .) ]
  ! NOT_EQUAL       [ reduce using rule 132 (variable -> base_variable .) ]
  ! LEFT_LOGICAL    [ reduce using rule 132 (variable -> base_variable .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 132 (variable -> base_variable .) ]
  ! PLUS            [ reduce using rule 132 (variable -> base_variable .) ]
  ! DIVIDE          [ reduce using rule 132 (variable -> base_variable .) ]
  ! PERCENT         [ reduce using rule 132 (variable -> base_variable .) ]
  ! TIMES           [ reduce using rule 132 (variable -> base_variable .) ]
  ! MINUS           [ reduce using rule 132 (variable -> base_variable .) ]
  ! RPAREN          [ reduce using rule 132 (variable -> base_variable .) ]
  ! DDOT            [ reduce using rule 132 (variable -> base_variable .) ]
  ! COLON           [ reduce using rule 132 (variable -> base_variable .) ]
  ! RBRACKET        [ reduce using rule 132 (variable -> base_variable .) ]
  ! ATTR_ASSOC      [ reduce using rule 132 (variable -> base_variable .) ]
  ! RKEY            [ reduce using rule 132 (variable -> base_variable .) ]


state 35

    (52) unary_operator -> EXC_DOT .

    INCREMENT       reduce using rule 52 (unary_operator -> EXC_DOT .)
    DECREMENT       reduce using rule 52 (unary_operator -> EXC_DOT .)
    LPAREN          reduce using rule 52 (unary_operator -> EXC_DOT .)
    EXIT            reduce using rule 52 (unary_operator -> EXC_DOT .)
    DIE             reduce using rule 52 (unary_operator -> EXC_DOT .)
    ARRAY_TYPE      reduce using rule 52 (unary_operator -> EXC_DOT .)
    NUMBER_REAL     reduce using rule 52 (unary_operator -> EXC_DOT .)
    NUMBER_INTEGER  reduce using rule 52 (unary_operator -> EXC_DOT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 52 (unary_operator -> EXC_DOT .)
    TRUE            reduce using rule 52 (unary_operator -> EXC_DOT .)
    FALSE           reduce using rule 52 (unary_operator -> EXC_DOT .)
    EXC_DOT         reduce using rule 52 (unary_operator -> EXC_DOT .)
    PLUS            reduce using rule 52 (unary_operator -> EXC_DOT .)
    MINUS           reduce using rule 52 (unary_operator -> EXC_DOT .)
    ID              reduce using rule 52 (unary_operator -> EXC_DOT .)
    DOLAR           reduce using rule 52 (unary_operator -> EXC_DOT .)
    VARIABLE        reduce using rule 52 (unary_operator -> EXC_DOT .)


state 36

    (53) unary_operator -> PLUS .

    INCREMENT       reduce using rule 53 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 53 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 53 (unary_operator -> PLUS .)
    EXIT            reduce using rule 53 (unary_operator -> PLUS .)
    DIE             reduce using rule 53 (unary_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 53 (unary_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 53 (unary_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 53 (unary_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (unary_operator -> PLUS .)
    TRUE            reduce using rule 53 (unary_operator -> PLUS .)
    FALSE           reduce using rule 53 (unary_operator -> PLUS .)
    EXC_DOT         reduce using rule 53 (unary_operator -> PLUS .)
    PLUS            reduce using rule 53 (unary_operator -> PLUS .)
    MINUS           reduce using rule 53 (unary_operator -> PLUS .)
    ID              reduce using rule 53 (unary_operator -> PLUS .)
    DOLAR           reduce using rule 53 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 53 (unary_operator -> PLUS .)


state 37

    (54) unary_operator -> MINUS .

    INCREMENT       reduce using rule 54 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 54 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 54 (unary_operator -> MINUS .)
    EXIT            reduce using rule 54 (unary_operator -> MINUS .)
    DIE             reduce using rule 54 (unary_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 54 (unary_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 54 (unary_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 54 (unary_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (unary_operator -> MINUS .)
    TRUE            reduce using rule 54 (unary_operator -> MINUS .)
    FALSE           reduce using rule 54 (unary_operator -> MINUS .)
    EXC_DOT         reduce using rule 54 (unary_operator -> MINUS .)
    PLUS            reduce using rule 54 (unary_operator -> MINUS .)
    MINUS           reduce using rule 54 (unary_operator -> MINUS .)
    ID              reduce using rule 54 (unary_operator -> MINUS .)
    DOLAR           reduce using rule 54 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 54 (unary_operator -> MINUS .)


state 38

    (134) base_variable -> reference_variable .

    INCREMENT       reduce using rule 134 (base_variable -> reference_variable .)
    DECREMENT       reduce using rule 134 (base_variable -> reference_variable .)
    LBRACKET        reduce using rule 134 (base_variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 134 (base_variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 134 (base_variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 134 (base_variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 134 (base_variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 134 (base_variable -> reference_variable .)
    ASSIGN          reduce using rule 134 (base_variable -> reference_variable .)
    SEMICOLON       reduce using rule 134 (base_variable -> reference_variable .)
    INTE_DOT        reduce using rule 134 (base_variable -> reference_variable .)
    EQUALS          reduce using rule 134 (base_variable -> reference_variable .)
    GREAT_THAN      reduce using rule 134 (base_variable -> reference_variable .)
    LESS_THAN       reduce using rule 134 (base_variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 134 (base_variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 134 (base_variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 134 (base_variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 134 (base_variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 134 (base_variable -> reference_variable .)
    PLUS            reduce using rule 134 (base_variable -> reference_variable .)
    DIVIDE          reduce using rule 134 (base_variable -> reference_variable .)
    PERCENT         reduce using rule 134 (base_variable -> reference_variable .)
    TIMES           reduce using rule 134 (base_variable -> reference_variable .)
    MINUS           reduce using rule 134 (base_variable -> reference_variable .)
    RPAREN          reduce using rule 134 (base_variable -> reference_variable .)
    DDOT            reduce using rule 134 (base_variable -> reference_variable .)
    COLON           reduce using rule 134 (base_variable -> reference_variable .)
    RBRACKET        reduce using rule 134 (base_variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 134 (base_variable -> reference_variable .)
    RKEY            reduce using rule 134 (base_variable -> reference_variable .)


state 39

    (135) base_variable -> simple_indirect_reference_DOLAR . reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 42
    DOLAR           shift and go to state 116

    reference_variable             shift and go to state 115
    compound_variable              shift and go to state 40

state 40

    (136) reference_variable -> compound_variable . reference_variable_SELECTOR
    (198) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (199) reference_variable_SELECTOR -> .
    (139) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 199 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 199 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 199 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 199 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 199 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 199 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 199 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 199 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 199 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 199 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 199 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 199 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 199 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 199 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 199 (reference_variable_SELECTOR -> .)
    PLUS            reduce using rule 199 (reference_variable_SELECTOR -> .)
    DIVIDE          reduce using rule 199 (reference_variable_SELECTOR -> .)
    PERCENT         reduce using rule 199 (reference_variable_SELECTOR -> .)
    TIMES           reduce using rule 199 (reference_variable_SELECTOR -> .)
    MINUS           reduce using rule 199 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 199 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 199 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 199 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 199 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 199 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 199 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 119

  ! LBRACKET        [ reduce using rule 199 (reference_variable_SELECTOR -> .) ]

    reference_variable_SELECTOR    shift and go to state 117
    selector                       shift and go to state 118

state 41

    (200) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (138) compound_variable -> DOLAR . LKEY expr RKEY
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    LKEY            shift and go to state 122
    DOLAR           shift and go to state 120
    VARIABLE        reduce using rule 201 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 121

state 42

    (137) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 137 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 137 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 137 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 137 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 137 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 137 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 137 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 137 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 137 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 137 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 137 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 137 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 137 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 137 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 137 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 137 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 137 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 137 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 137 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 137 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 137 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 137 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 137 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 137 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 137 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 137 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 137 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 137 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 137 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 137 (compound_variable -> VARIABLE .)


state 43

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 44

    (177) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 177 (main_INNER -> inner_statement main_INNER .)


state 45

    (140) function_declaration_statement -> FUNCTION ID . LPAREN RPAREN LKEY RKEY
    (145) function_declaration_statement -> FUNCTION ID . LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> FUNCTION ID . LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> FUNCTION ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 123


state 46

    (141) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 124


state 47

    (44) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (46) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (47) function_call_parameter_list -> .
    (48) function_call_parameter -> . variable
    (49) function_call_parameter -> . AMPERSAND VARIABLE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 47 (function_call_parameter_list -> .)
    AMPERSAND       shift and go to state 128
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter_list   shift and go to state 125
    function_call_parameter        shift and go to state 126
    variable                       shift and go to state 127
    base_variable                  shift and go to state 34
    function_call                  shift and go to state 96
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 48

    (95) expr -> LPAREN expr . RPAREN
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 129
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 49

    (102) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 130


state 50

    (105) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (106) expr -> ARRAY_TYPE . LPAREN RPAREN
    (60) type_cast_operator -> ARRAY_TYPE .

    LPAREN          shift and go to state 113
    RPAREN          reduce using rule 60 (type_cast_operator -> ARRAY_TYPE .)


state 51

    (55) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 55 (type_cast_operator -> INT_TYPE .)


state 52

    (56) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 56 (type_cast_operator -> DOUBLE_TYPE .)


state 53

    (57) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 57 (type_cast_operator -> FLOAT_TYPE .)


state 54

    (58) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 58 (type_cast_operator -> REAL_TYPE .)


state 55

    (59) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 59 (type_cast_operator -> STRING_TYPE .)


state 56

    (61) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 61 (type_cast_operator -> BOOLEAN_TYPE .)


state 57

    (62) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 62 (type_cast_operator -> BOOL_TYPE .)


state 58

    (63) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 63 (type_cast_operator -> UNSET .)


state 59

    (5) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 5 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expr SEMICOLON .)
    DO              reduce using rule 5 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 5 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 5 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 5 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 5 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 5 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 5 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 5 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 5 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 5 (statement -> expr SEMICOLON .)
    IF              reduce using rule 5 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 5 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 5 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 5 (statement -> expr SEMICOLON .)
    ID              reduce using rule 5 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 5 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 5 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 5 (statement -> expr SEMICOLON .)


state 60

    (97) expr -> expr INTE_DOT . expr DDOT expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 131
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 61

    (98) expr -> expr comparission_operator . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 132
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 62

    (101) expr -> expr arithmetic_operator . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 133
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 63

    (82) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 82 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 82 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 82 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 82 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 82 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 82 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 82 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 82 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 82 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 82 (comparission_operator -> EQUALS .)
    EXC_DOT         reduce using rule 82 (comparission_operator -> EQUALS .)
    PLUS            reduce using rule 82 (comparission_operator -> EQUALS .)
    MINUS           reduce using rule 82 (comparission_operator -> EQUALS .)
    ID              reduce using rule 82 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 82 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 82 (comparission_operator -> EQUALS .)


state 64

    (83) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    EXC_DOT         reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    PLUS            reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    MINUS           reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 83 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 83 (comparission_operator -> GREAT_THAN .)


state 65

    (84) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 84 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 84 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 84 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 84 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 84 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 84 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 84 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 84 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 84 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 84 (comparission_operator -> LESS_THAN .)
    EXC_DOT         reduce using rule 84 (comparission_operator -> LESS_THAN .)
    PLUS            reduce using rule 84 (comparission_operator -> LESS_THAN .)
    MINUS           reduce using rule 84 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 84 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 84 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 84 (comparission_operator -> LESS_THAN .)


state 66

    (85) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    EXC_DOT         reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    PLUS            reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    MINUS           reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 85 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 85 (comparission_operator -> LESS_EQUAL .)


state 67

    (86) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    EXC_DOT         reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    PLUS            reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    MINUS           reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 86 (comparission_operator -> GREAT_EQUAL .)


state 68

    (87) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    EXC_DOT         reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    PLUS            reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    MINUS           reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 87 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 87 (comparission_operator -> NOT_EQUAL .)


state 69

    (88) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    EXC_DOT         reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    PLUS            reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    MINUS           reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 88 (comparission_operator -> LEFT_LOGICAL .)


state 70

    (89) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    EXC_DOT         reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    PLUS            reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    MINUS           reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 89 (comparission_operator -> RIGHT_LOGICAL .)


state 71

    (77) arithmetic_operator -> PLUS .

    INCREMENT       reduce using rule 77 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 77 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 77 (arithmetic_operator -> PLUS .)
    EXIT            reduce using rule 77 (arithmetic_operator -> PLUS .)
    DIE             reduce using rule 77 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 77 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 77 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 77 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 77 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 77 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 77 (arithmetic_operator -> PLUS .)
    EXC_DOT         reduce using rule 77 (arithmetic_operator -> PLUS .)
    PLUS            reduce using rule 77 (arithmetic_operator -> PLUS .)
    MINUS           reduce using rule 77 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 77 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 77 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 77 (arithmetic_operator -> PLUS .)


state 72

    (78) arithmetic_operator -> DIVIDE .

    INCREMENT       reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    EXIT            reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    DIE             reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    EXC_DOT         reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    PLUS            reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    MINUS           reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 78 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 78 (arithmetic_operator -> DIVIDE .)


state 73

    (79) arithmetic_operator -> PERCENT .

    INCREMENT       reduce using rule 79 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 79 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 79 (arithmetic_operator -> PERCENT .)
    EXIT            reduce using rule 79 (arithmetic_operator -> PERCENT .)
    DIE             reduce using rule 79 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 79 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 79 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 79 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 79 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 79 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 79 (arithmetic_operator -> PERCENT .)
    EXC_DOT         reduce using rule 79 (arithmetic_operator -> PERCENT .)
    PLUS            reduce using rule 79 (arithmetic_operator -> PERCENT .)
    MINUS           reduce using rule 79 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 79 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 79 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 79 (arithmetic_operator -> PERCENT .)


state 74

    (80) arithmetic_operator -> TIMES .

    INCREMENT       reduce using rule 80 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 80 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 80 (arithmetic_operator -> TIMES .)
    EXIT            reduce using rule 80 (arithmetic_operator -> TIMES .)
    DIE             reduce using rule 80 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 80 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 80 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 80 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 80 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 80 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 80 (arithmetic_operator -> TIMES .)
    EXC_DOT         reduce using rule 80 (arithmetic_operator -> TIMES .)
    PLUS            reduce using rule 80 (arithmetic_operator -> TIMES .)
    MINUS           reduce using rule 80 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 80 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 80 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 80 (arithmetic_operator -> TIMES .)


state 75

    (81) arithmetic_operator -> MINUS .

    INCREMENT       reduce using rule 81 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 81 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 81 (arithmetic_operator -> MINUS .)
    EXIT            reduce using rule 81 (arithmetic_operator -> MINUS .)
    DIE             reduce using rule 81 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 81 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 81 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 81 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 81 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 81 (arithmetic_operator -> MINUS .)
    EXC_DOT         reduce using rule 81 (arithmetic_operator -> MINUS .)
    PLUS            reduce using rule 81 (arithmetic_operator -> MINUS .)
    MINUS           reduce using rule 81 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 81 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 81 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 81 (arithmetic_operator -> MINUS .)


state 76

    (6) statement -> statement_if statement_elseif .
    (7) statement -> statement_if statement_elseif . statement_else
    (39) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 6 (statement -> statement_if statement_elseif .)
    WHILE           reduce using rule 6 (statement -> statement_if statement_elseif .)
    DO              reduce using rule 6 (statement -> statement_if statement_elseif .)
    FOR             reduce using rule 6 (statement -> statement_if statement_elseif .)
    BREAK           reduce using rule 6 (statement -> statement_if statement_elseif .)
    CONTINUE        reduce using rule 6 (statement -> statement_if statement_elseif .)
    RETURN          reduce using rule 6 (statement -> statement_if statement_elseif .)
    GLOBAL          reduce using rule 6 (statement -> statement_if statement_elseif .)
    INCREMENT       reduce using rule 6 (statement -> statement_if statement_elseif .)
    DECREMENT       reduce using rule 6 (statement -> statement_if statement_elseif .)
    LPAREN          reduce using rule 6 (statement -> statement_if statement_elseif .)
    EXIT            reduce using rule 6 (statement -> statement_if statement_elseif .)
    DIE             reduce using rule 6 (statement -> statement_if statement_elseif .)
    ARRAY_TYPE      reduce using rule 6 (statement -> statement_if statement_elseif .)
    NUMBER_REAL     reduce using rule 6 (statement -> statement_if statement_elseif .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> statement_if statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (statement -> statement_if statement_elseif .)
    TRUE            reduce using rule 6 (statement -> statement_if statement_elseif .)
    FALSE           reduce using rule 6 (statement -> statement_if statement_elseif .)
    IF              reduce using rule 6 (statement -> statement_if statement_elseif .)
    EXC_DOT         reduce using rule 6 (statement -> statement_if statement_elseif .)
    PLUS            reduce using rule 6 (statement -> statement_if statement_elseif .)
    MINUS           reduce using rule 6 (statement -> statement_if statement_elseif .)
    ID              reduce using rule 6 (statement -> statement_if statement_elseif .)
    DOLAR           reduce using rule 6 (statement -> statement_if statement_elseif .)
    VARIABLE        reduce using rule 6 (statement -> statement_if statement_elseif .)
    END_PROGRAM     reduce using rule 6 (statement -> statement_if statement_elseif .)
    RKEY            reduce using rule 6 (statement -> statement_if statement_elseif .)
    ELSEIF          reduce using rule 6 (statement -> statement_if statement_elseif .)
    ELSE            shift and go to state 79

  ! ELSE            [ reduce using rule 6 (statement -> statement_if statement_elseif .) ]

    statement_else                 shift and go to state 134

state 77

    (9) statement -> statement_if statement_else .

    FUNCTION        reduce using rule 9 (statement -> statement_if statement_else .)
    WHILE           reduce using rule 9 (statement -> statement_if statement_else .)
    DO              reduce using rule 9 (statement -> statement_if statement_else .)
    FOR             reduce using rule 9 (statement -> statement_if statement_else .)
    BREAK           reduce using rule 9 (statement -> statement_if statement_else .)
    CONTINUE        reduce using rule 9 (statement -> statement_if statement_else .)
    RETURN          reduce using rule 9 (statement -> statement_if statement_else .)
    GLOBAL          reduce using rule 9 (statement -> statement_if statement_else .)
    INCREMENT       reduce using rule 9 (statement -> statement_if statement_else .)
    DECREMENT       reduce using rule 9 (statement -> statement_if statement_else .)
    LPAREN          reduce using rule 9 (statement -> statement_if statement_else .)
    EXIT            reduce using rule 9 (statement -> statement_if statement_else .)
    DIE             reduce using rule 9 (statement -> statement_if statement_else .)
    ARRAY_TYPE      reduce using rule 9 (statement -> statement_if statement_else .)
    NUMBER_REAL     reduce using rule 9 (statement -> statement_if statement_else .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> statement_if statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (statement -> statement_if statement_else .)
    TRUE            reduce using rule 9 (statement -> statement_if statement_else .)
    FALSE           reduce using rule 9 (statement -> statement_if statement_else .)
    IF              reduce using rule 9 (statement -> statement_if statement_else .)
    EXC_DOT         reduce using rule 9 (statement -> statement_if statement_else .)
    PLUS            reduce using rule 9 (statement -> statement_if statement_else .)
    MINUS           reduce using rule 9 (statement -> statement_if statement_else .)
    ID              reduce using rule 9 (statement -> statement_if statement_else .)
    DOLAR           reduce using rule 9 (statement -> statement_if statement_else .)
    VARIABLE        reduce using rule 9 (statement -> statement_if statement_else .)
    END_PROGRAM     reduce using rule 9 (statement -> statement_if statement_else .)
    ELSE            reduce using rule 9 (statement -> statement_if statement_else .)
    RKEY            reduce using rule 9 (statement -> statement_if statement_else .)
    ELSEIF          reduce using rule 9 (statement -> statement_if statement_else .)


state 78

    (38) statement_elseif -> ELSEIF . expr_paren statement_BLOCK_OPT
    (36) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 81

    expr_paren                     shift and go to state 135

state 79

    (39) statement_else -> ELSE . statement_BLOCK_OPT
    (185) statement_BLOCK_OPT -> . statement
    (186) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (187) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 136
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 80

    (10) statement -> WHILE expr_paren . statement_BLOCK_OPT
    (185) statement_BLOCK_OPT -> . statement
    (186) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (187) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 137
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 81

    (36) expr_paren -> LPAREN . expr RPAREN
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 138
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 82

    (11) statement -> DO statement_BLOCK_OPT . WHILE expr_paren SEMICOLON

    WHILE           shift and go to state 139


state 83

    (185) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    EXC_DOT         reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    PLUS            reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 185 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 185 (statement_BLOCK_OPT -> statement .)


state 84

    (186) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (187) statement_BLOCK_OPT -> LKEY . RKEY
    (181) statement_MUL -> . statement statement_MUL
    (182) statement_MUL -> . statement
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 141
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement_MUL                  shift and go to state 140
    statement                      shift and go to state 142
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 85

    (12) statement -> FOR LPAREN . statement_for RPAREN statement_BLOCK_OPT
    (23) statement_for -> . SEMICOLON SEMICOLON
    (24) statement_for -> . for_expr_OPT SEMICOLON SEMICOLON
    (25) statement_for -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (26) statement_for -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (27) statement_for -> . SEMICOLON for_expr_OPT SEMICOLON
    (28) statement_for -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (29) statement_for -> . SEMICOLON SEMICOLON for_expr_OPT
    (30) statement_for -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (42) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (43) for_expr_OPT -> . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       shift and go to state 144
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement_for                  shift and go to state 143
    for_expr_OPT                   shift and go to state 145
    expr                           shift and go to state 146
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 86

    (13) statement -> BREAK expr . SEMICOLON
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 147
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 87

    (14) statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 14 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> BREAK SEMICOLON .)
    DO              reduce using rule 14 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 14 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 14 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 14 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 14 (statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 14 (statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 14 (statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 14 (statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 14 (statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 14 (statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 14 (statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 14 (statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 14 (statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 14 (statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 14 (statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 14 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 14 (statement -> BREAK SEMICOLON .)
    EXC_DOT         reduce using rule 14 (statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 14 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> BREAK SEMICOLON .)
    ID              reduce using rule 14 (statement -> BREAK SEMICOLON .)
    DOLAR           reduce using rule 14 (statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 14 (statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 14 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 14 (statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 14 (statement -> BREAK SEMICOLON .)


state 88

    (15) statement -> CONTINUE expr . SEMICOLON
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 148
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 89

    (16) statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    EXC_DOT         reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    DOLAR           reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 16 (statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 16 (statement -> CONTINUE SEMICOLON .)


state 90

    (17) statement -> RETURN expr . SEMICOLON
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 149
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 91

    (18) statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 18 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> RETURN SEMICOLON .)
    DO              reduce using rule 18 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 18 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 18 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 18 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 18 (statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 18 (statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 18 (statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 18 (statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 18 (statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 18 (statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 18 (statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 18 (statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 18 (statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 18 (statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 18 (statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 18 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 18 (statement -> RETURN SEMICOLON .)
    EXC_DOT         reduce using rule 18 (statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 18 (statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 18 (statement -> RETURN SEMICOLON .)
    ID              reduce using rule 18 (statement -> RETURN SEMICOLON .)
    DOLAR           reduce using rule 18 (statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 18 (statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 18 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 18 (statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 18 (statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 18 (statement -> RETURN SEMICOLON .)


state 92

    (19) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (20) statement -> GLOBAL global_var . SEMICOLON
    (34) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (35) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       shift and go to state 151
    COLON           shift and go to state 152

    statement_COLON_GLOBAL         shift and go to state 150

state 93

    (31) global_var -> VARIABLE .

    SEMICOLON       reduce using rule 31 (global_var -> VARIABLE .)
    COLON           reduce using rule 31 (global_var -> VARIABLE .)


state 94

    (32) global_var -> DOLAR . VARIABLE
    (33) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 153
    LKEY            shift and go to state 154


state 95

    (90) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 90 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 90 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 90 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 90 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 90 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 90 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 90 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 90 (expr -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 90 (expr -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 90 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 90 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 90 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 90 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 90 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 90 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 90 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 90 (expr -> INCREMENT variable .)
    COLON           reduce using rule 90 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 90 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 90 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 90 (expr -> INCREMENT variable .)


state 96

    (133) variable -> function_call .

    SEMICOLON       reduce using rule 133 (variable -> function_call .)
    INTE_DOT        reduce using rule 133 (variable -> function_call .)
    EQUALS          reduce using rule 133 (variable -> function_call .)
    GREAT_THAN      reduce using rule 133 (variable -> function_call .)
    LESS_THAN       reduce using rule 133 (variable -> function_call .)
    LESS_EQUAL      reduce using rule 133 (variable -> function_call .)
    GREAT_EQUAL     reduce using rule 133 (variable -> function_call .)
    NOT_EQUAL       reduce using rule 133 (variable -> function_call .)
    LEFT_LOGICAL    reduce using rule 133 (variable -> function_call .)
    RIGHT_LOGICAL   reduce using rule 133 (variable -> function_call .)
    PLUS            reduce using rule 133 (variable -> function_call .)
    DIVIDE          reduce using rule 133 (variable -> function_call .)
    PERCENT         reduce using rule 133 (variable -> function_call .)
    TIMES           reduce using rule 133 (variable -> function_call .)
    MINUS           reduce using rule 133 (variable -> function_call .)
    RPAREN          reduce using rule 133 (variable -> function_call .)
    DDOT            reduce using rule 133 (variable -> function_call .)
    COLON           reduce using rule 133 (variable -> function_call .)
    RBRACKET        reduce using rule 133 (variable -> function_call .)
    ATTR_ASSOC      reduce using rule 133 (variable -> function_call .)
    RKEY            reduce using rule 133 (variable -> function_call .)


state 97

    (91) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 91 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 91 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 91 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 91 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 91 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 91 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 91 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 91 (expr -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 91 (expr -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 91 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 91 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 91 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 91 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 91 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 91 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 91 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 91 (expr -> variable INCREMENT .)
    COLON           reduce using rule 91 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 91 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 91 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 91 (expr -> variable INCREMENT .)


state 98

    (93) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 93 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 93 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 93 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 93 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 93 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 93 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 93 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 93 (expr -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 93 (expr -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 93 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 93 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 93 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 93 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 93 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 93 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 93 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 93 (expr -> variable DECREMENT .)
    COLON           reduce using rule 93 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 93 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 93 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 93 (expr -> variable DECREMENT .)


state 99

    (94) expr -> variable LBRACKET . expr RBRACKET
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 21
    expr                           shift and go to state 155
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 100

    (99) expr -> variable assign_operator . expr
    (100) expr -> variable assign_operator . AMPERSAND expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 157
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 21
    expr                           shift and go to state 156
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 101

    (71) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    EXC_DOT         reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 71 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 71 (assign_operator -> ADD_ASSIGN .)


state 102

    (72) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    EXC_DOT         reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 72 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 72 (assign_operator -> SUB_ASSIGN .)


state 103

    (73) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    EXC_DOT         reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 73 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 73 (assign_operator -> MOD_ASSIGN .)


state 104

    (74) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    EXC_DOT         reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 74 (assign_operator -> PLUS_ASSIGN .)


state 105

    (75) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    EXC_DOT         reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 75 (assign_operator -> DIVIDE_ASSIGN .)


state 106

    (76) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 76 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 76 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 76 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 76 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 76 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 76 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 76 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 76 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 76 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 76 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 76 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 76 (assign_operator -> ASSIGN .)
    EXC_DOT         reduce using rule 76 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 76 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 76 (assign_operator -> ASSIGN .)
    ID              reduce using rule 76 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 76 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 76 (assign_operator -> ASSIGN .)


state 107

    (92) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 92 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 92 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 92 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 92 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 92 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 92 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 92 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 92 (expr -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 92 (expr -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 92 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 92 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 92 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 92 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 92 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 92 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 92 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 92 (expr -> DECREMENT variable .)
    COLON           reduce using rule 92 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 92 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 92 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 92 (expr -> DECREMENT variable .)


state 108

    (96) expr -> unary_operator expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 96 (expr -> unary_operator expr .)
    RPAREN          reduce using rule 96 (expr -> unary_operator expr .)
    DDOT            reduce using rule 96 (expr -> unary_operator expr .)
    COLON           reduce using rule 96 (expr -> unary_operator expr .)
    RBRACKET        reduce using rule 96 (expr -> unary_operator expr .)
    ATTR_ASSOC      reduce using rule 96 (expr -> unary_operator expr .)
    RKEY            reduce using rule 96 (expr -> unary_operator expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

  ! INTE_DOT        [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! EQUALS          [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! PLUS            [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! DIVIDE          [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! PERCENT         [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! TIMES           [ reduce using rule 96 (expr -> unary_operator expr .) ]
  ! MINUS           [ reduce using rule 96 (expr -> unary_operator expr .) ]

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 109

    (103) expr -> EXIT expr_EXIT .

    SEMICOLON       reduce using rule 103 (expr -> EXIT expr_EXIT .)
    INTE_DOT        reduce using rule 103 (expr -> EXIT expr_EXIT .)
    EQUALS          reduce using rule 103 (expr -> EXIT expr_EXIT .)
    GREAT_THAN      reduce using rule 103 (expr -> EXIT expr_EXIT .)
    LESS_THAN       reduce using rule 103 (expr -> EXIT expr_EXIT .)
    LESS_EQUAL      reduce using rule 103 (expr -> EXIT expr_EXIT .)
    GREAT_EQUAL     reduce using rule 103 (expr -> EXIT expr_EXIT .)
    NOT_EQUAL       reduce using rule 103 (expr -> EXIT expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 103 (expr -> EXIT expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 103 (expr -> EXIT expr_EXIT .)
    PLUS            reduce using rule 103 (expr -> EXIT expr_EXIT .)
    DIVIDE          reduce using rule 103 (expr -> EXIT expr_EXIT .)
    PERCENT         reduce using rule 103 (expr -> EXIT expr_EXIT .)
    TIMES           reduce using rule 103 (expr -> EXIT expr_EXIT .)
    MINUS           reduce using rule 103 (expr -> EXIT expr_EXIT .)
    RPAREN          reduce using rule 103 (expr -> EXIT expr_EXIT .)
    DDOT            reduce using rule 103 (expr -> EXIT expr_EXIT .)
    COLON           reduce using rule 103 (expr -> EXIT expr_EXIT .)
    RBRACKET        reduce using rule 103 (expr -> EXIT expr_EXIT .)
    ATTR_ASSOC      reduce using rule 103 (expr -> EXIT expr_EXIT .)
    RKEY            reduce using rule 103 (expr -> EXIT expr_EXIT .)


state 110

    (128) expr_EXIT -> exit_expr .

    SEMICOLON       reduce using rule 128 (expr_EXIT -> exit_expr .)
    INTE_DOT        reduce using rule 128 (expr_EXIT -> exit_expr .)
    EQUALS          reduce using rule 128 (expr_EXIT -> exit_expr .)
    GREAT_THAN      reduce using rule 128 (expr_EXIT -> exit_expr .)
    LESS_THAN       reduce using rule 128 (expr_EXIT -> exit_expr .)
    LESS_EQUAL      reduce using rule 128 (expr_EXIT -> exit_expr .)
    GREAT_EQUAL     reduce using rule 128 (expr_EXIT -> exit_expr .)
    NOT_EQUAL       reduce using rule 128 (expr_EXIT -> exit_expr .)
    LEFT_LOGICAL    reduce using rule 128 (expr_EXIT -> exit_expr .)
    RIGHT_LOGICAL   reduce using rule 128 (expr_EXIT -> exit_expr .)
    PLUS            reduce using rule 128 (expr_EXIT -> exit_expr .)
    DIVIDE          reduce using rule 128 (expr_EXIT -> exit_expr .)
    PERCENT         reduce using rule 128 (expr_EXIT -> exit_expr .)
    TIMES           reduce using rule 128 (expr_EXIT -> exit_expr .)
    MINUS           reduce using rule 128 (expr_EXIT -> exit_expr .)
    RPAREN          reduce using rule 128 (expr_EXIT -> exit_expr .)
    DDOT            reduce using rule 128 (expr_EXIT -> exit_expr .)
    COLON           reduce using rule 128 (expr_EXIT -> exit_expr .)
    RBRACKET        reduce using rule 128 (expr_EXIT -> exit_expr .)
    ATTR_ASSOC      reduce using rule 128 (expr_EXIT -> exit_expr .)
    RKEY            reduce using rule 128 (expr_EXIT -> exit_expr .)


state 111

    (130) exit_expr -> LPAREN . expr RPAREN
    (131) exit_expr -> LPAREN . RPAREN
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          shift and go to state 159
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 158
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 112

    (104) expr -> DIE expr_EXIT .

    SEMICOLON       reduce using rule 104 (expr -> DIE expr_EXIT .)
    INTE_DOT        reduce using rule 104 (expr -> DIE expr_EXIT .)
    EQUALS          reduce using rule 104 (expr -> DIE expr_EXIT .)
    GREAT_THAN      reduce using rule 104 (expr -> DIE expr_EXIT .)
    LESS_THAN       reduce using rule 104 (expr -> DIE expr_EXIT .)
    LESS_EQUAL      reduce using rule 104 (expr -> DIE expr_EXIT .)
    GREAT_EQUAL     reduce using rule 104 (expr -> DIE expr_EXIT .)
    NOT_EQUAL       reduce using rule 104 (expr -> DIE expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 104 (expr -> DIE expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 104 (expr -> DIE expr_EXIT .)
    PLUS            reduce using rule 104 (expr -> DIE expr_EXIT .)
    DIVIDE          reduce using rule 104 (expr -> DIE expr_EXIT .)
    PERCENT         reduce using rule 104 (expr -> DIE expr_EXIT .)
    TIMES           reduce using rule 104 (expr -> DIE expr_EXIT .)
    MINUS           reduce using rule 104 (expr -> DIE expr_EXIT .)
    RPAREN          reduce using rule 104 (expr -> DIE expr_EXIT .)
    DDOT            reduce using rule 104 (expr -> DIE expr_EXIT .)
    COLON           reduce using rule 104 (expr -> DIE expr_EXIT .)
    RBRACKET        reduce using rule 104 (expr -> DIE expr_EXIT .)
    ATTR_ASSOC      reduce using rule 104 (expr -> DIE expr_EXIT .)
    RKEY            reduce using rule 104 (expr -> DIE expr_EXIT .)


state 113

    (105) expr -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (106) expr -> ARRAY_TYPE LPAREN . RPAREN
    (171) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (172) array_pair_list -> . array_pair
    (173) array_pair -> . expr
    (174) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (175) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (176) array_pair -> . AMPERSAND variable
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (208) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          shift and go to state 161
    AMPERSAND       shift and go to state 165
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    array_pair_list                shift and go to state 160
    array_pair                     shift and go to state 162
    expr                           shift and go to state 163
    array_pair_EXPR_ATTR_OPT       shift and go to state 164
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 114

    (37) statement_if -> IF expr_paren . statement_BLOCK_OPT
    (185) statement_BLOCK_OPT -> . statement
    (186) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (187) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 166
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 115

    (135) base_variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LBRACKET        reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 135 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)


state 116

    (138) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 122


state 117

    (136) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 136 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 118

    (198) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (198) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (199) reference_variable_SELECTOR -> .
    (139) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 199 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 199 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 199 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 199 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 199 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 199 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 199 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 199 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 199 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 199 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 199 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 199 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 199 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 199 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 199 (reference_variable_SELECTOR -> .)
    PLUS            reduce using rule 199 (reference_variable_SELECTOR -> .)
    DIVIDE          reduce using rule 199 (reference_variable_SELECTOR -> .)
    PERCENT         reduce using rule 199 (reference_variable_SELECTOR -> .)
    TIMES           reduce using rule 199 (reference_variable_SELECTOR -> .)
    MINUS           reduce using rule 199 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 199 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 199 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 199 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 199 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 199 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 199 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 119

  ! LBRACKET        [ reduce using rule 199 (reference_variable_SELECTOR -> .) ]

    selector                       shift and go to state 118
    reference_variable_SELECTOR    shift and go to state 167

state 119

    (139) selector -> LBRACKET . selector_EXPR RBRACKET
    (202) selector_EXPR -> . expr
    (203) selector_EXPR -> .
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RBRACKET        reduce using rule 203 (selector_EXPR -> .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    selector_EXPR                  shift and go to state 168
    expr                           shift and go to state 169
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 120

    (200) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    DOLAR           shift and go to state 120
    VARIABLE        reduce using rule 201 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 121

state 121

    (200) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 200 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 200 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 122

    (138) compound_variable -> DOLAR LKEY . expr RKEY
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 170
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 123

    (140) function_declaration_statement -> FUNCTION ID LPAREN . RPAREN LKEY RKEY
    (145) function_declaration_statement -> FUNCTION ID LPAREN . parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> FUNCTION ID LPAREN . RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> FUNCTION ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (148) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (149) parameter_list -> . parameter
    (150) parameter -> . VARIABLE
    (151) parameter -> . VARIABLE ASSIGN static_scalar
    (152) parameter -> . parameter_type VARIABLE
    (153) parameter -> . parameter_type AMPERSAND VARIABLE
    (154) parameter -> . AMPERSAND VARIABLE
    (155) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (156) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (157) parameter_type -> . INT_TYPE
    (158) parameter_type -> . BOOLEAN_TYPE
    (159) parameter_type -> . STRING_TYPE
    (160) parameter_type -> . FLOAT_TYPE
    (161) parameter_type -> . ARRAY_TYPE
    (162) parameter_type -> . BOOL_TYPE
    (163) parameter_type -> . REAL_TYPE
    (164) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 171
    VARIABLE        shift and go to state 174
    AMPERSAND       shift and go to state 176
    INT_TYPE        shift and go to state 177
    BOOLEAN_TYPE    shift and go to state 178
    STRING_TYPE     shift and go to state 179
    FLOAT_TYPE      shift and go to state 180
    ARRAY_TYPE      shift and go to state 181
    BOOL_TYPE       shift and go to state 182
    REAL_TYPE       shift and go to state 183
    DOUBLE_TYPE     shift and go to state 184

    parameter_list                 shift and go to state 172
    parameter                      shift and go to state 173
    parameter_type                 shift and go to state 175

state 124

    (141) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 185


state 125

    (44) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 186


state 126

    (46) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (188) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (189) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 188
    RPAREN          reduce using rule 189 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 187

state 127

    (48) function_call_parameter -> variable .

    COLON           reduce using rule 48 (function_call_parameter -> variable .)
    RPAREN          reduce using rule 48 (function_call_parameter -> variable .)


state 128

    (49) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 189


state 129

    (95) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 95 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 95 (expr -> LPAREN expr RPAREN .)


state 130

    (102) expr -> LPAREN type_cast_operator RPAREN . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 190
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 131

    (97) expr -> expr INTE_DOT expr . DDOT expr
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    DDOT            shift and go to state 191
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 132

    (98) expr -> expr comparission_operator expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 98 (expr -> expr comparission_operator expr .)
    RPAREN          reduce using rule 98 (expr -> expr comparission_operator expr .)
    DDOT            reduce using rule 98 (expr -> expr comparission_operator expr .)
    COLON           reduce using rule 98 (expr -> expr comparission_operator expr .)
    RBRACKET        reduce using rule 98 (expr -> expr comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 98 (expr -> expr comparission_operator expr .)
    RKEY            reduce using rule 98 (expr -> expr comparission_operator expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

  ! INTE_DOT        [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! EQUALS          [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! PLUS            [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! DIVIDE          [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! PERCENT         [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! TIMES           [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]
  ! MINUS           [ reduce using rule 98 (expr -> expr comparission_operator expr .) ]

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 133

    (101) expr -> expr arithmetic_operator expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 101 (expr -> expr arithmetic_operator expr .)
    RPAREN          reduce using rule 101 (expr -> expr arithmetic_operator expr .)
    DDOT            reduce using rule 101 (expr -> expr arithmetic_operator expr .)
    COLON           reduce using rule 101 (expr -> expr arithmetic_operator expr .)
    RBRACKET        reduce using rule 101 (expr -> expr arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 101 (expr -> expr arithmetic_operator expr .)
    RKEY            reduce using rule 101 (expr -> expr arithmetic_operator expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

  ! INTE_DOT        [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! EQUALS          [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! PLUS            [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! DIVIDE          [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! PERCENT         [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! TIMES           [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]
  ! MINUS           [ reduce using rule 101 (expr -> expr arithmetic_operator expr .) ]

    arithmetic_operator            shift and go to state 62
    comparission_operator          shift and go to state 61

state 134

    (7) statement -> statement_if statement_elseif statement_else .

    FUNCTION        reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    WHILE           reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    DO              reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    FOR             reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    BREAK           reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    CONTINUE        reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    RETURN          reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    GLOBAL          reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    INCREMENT       reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    DECREMENT       reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    LPAREN          reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    EXIT            reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    DIE             reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    TRUE            reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    FALSE           reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    IF              reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    EXC_DOT         reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    PLUS            reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    MINUS           reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    ID              reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    DOLAR           reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    VARIABLE        reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    ELSE            reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    RKEY            reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)
    ELSEIF          reduce using rule 7 (statement -> statement_if statement_elseif statement_else .)


state 135

    (38) statement_elseif -> ELSEIF expr_paren . statement_BLOCK_OPT
    (185) statement_BLOCK_OPT -> . statement
    (186) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (187) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 192
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 136

    (39) statement_else -> ELSE statement_BLOCK_OPT .

    ELSE            reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    PLUS            reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 39 (statement_else -> ELSE statement_BLOCK_OPT .)


state 137

    (10) statement -> WHILE expr_paren statement_BLOCK_OPT .

    FUNCTION        reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ELSE            reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 10 (statement -> WHILE expr_paren statement_BLOCK_OPT .)


state 138

    (36) expr_paren -> LPAREN expr . RPAREN
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 193
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 139

    (11) statement -> DO statement_BLOCK_OPT WHILE . expr_paren SEMICOLON
    (36) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 81

    expr_paren                     shift and go to state 194

state 140

    (186) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 195


state 141

    (187) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    INCREMENT       reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    DECREMENT       reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXC_DOT         reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    PLUS            reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    MINUS           reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    DOLAR           reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 187 (statement_BLOCK_OPT -> LKEY RKEY .)


state 142

    (181) statement_MUL -> statement . statement_MUL
    (182) statement_MUL -> statement .
    (181) statement_MUL -> . statement statement_MUL
    (182) statement_MUL -> . statement
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 182 (statement_MUL -> statement .)
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement                      shift and go to state 142
    statement_MUL                  shift and go to state 196
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 143

    (12) statement -> FOR LPAREN statement_for . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 197


state 144

    (23) statement_for -> SEMICOLON . SEMICOLON
    (27) statement_for -> SEMICOLON . for_expr_OPT SEMICOLON
    (28) statement_for -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (29) statement_for -> SEMICOLON . SEMICOLON for_expr_OPT
    (42) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (43) for_expr_OPT -> . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       shift and go to state 198
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 199
    expr                           shift and go to state 146
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 145

    (24) statement_for -> for_expr_OPT . SEMICOLON SEMICOLON
    (25) statement_for -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (26) statement_for -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (30) statement_for -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 200


state 146

    (42) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (43) for_expr_OPT -> expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (183) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (184) for_expr_COLON_EXPR -> . COLON expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 43 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 43 (for_expr_OPT -> expr .)
    INTE_DOT        shift and go to state 60
    COLON           shift and go to state 202
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    for_expr_COLON_EXPR            shift and go to state 201
    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 147

    (13) statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    EXC_DOT         reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    PLUS            reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    MINUS           reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    DOLAR           reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 13 (statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 13 (statement -> BREAK expr SEMICOLON .)


state 148

    (15) statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    EXC_DOT         reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    PLUS            reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    MINUS           reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    DOLAR           reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 15 (statement -> CONTINUE expr SEMICOLON .)


state 149

    (17) statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    EXC_DOT         reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    DOLAR           reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 17 (statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 17 (statement -> RETURN expr SEMICOLON .)


state 150

    (19) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 203


state 151

    (20) statement -> GLOBAL global_var SEMICOLON .

    FUNCTION        reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    DO              reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    FOR             reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    BREAK           reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    CONTINUE        reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    GLOBAL          reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    INCREMENT       reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    DECREMENT       reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    LPAREN          reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    EXIT            reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    DIE             reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    ARRAY_TYPE      reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_REAL     reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    TRUE            reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    FALSE           reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    IF              reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    EXC_DOT         reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    PLUS            reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    MINUS           reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    ID              reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    DOLAR           reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    VARIABLE        reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    END_PROGRAM     reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    ELSE            reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    RKEY            reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)
    ELSEIF          reduce using rule 20 (statement -> GLOBAL global_var SEMICOLON .)


state 152

    (34) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (35) statement_COLON_GLOBAL -> COLON . global_var
    (31) global_var -> . VARIABLE
    (32) global_var -> . DOLAR VARIABLE
    (33) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 93
    DOLAR           shift and go to state 94

    global_var                     shift and go to state 204

state 153

    (32) global_var -> DOLAR VARIABLE .

    SEMICOLON       reduce using rule 32 (global_var -> DOLAR VARIABLE .)
    COLON           reduce using rule 32 (global_var -> DOLAR VARIABLE .)


state 154

    (33) global_var -> DOLAR LKEY . expr RKEY
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 205
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 155

    (94) expr -> variable LBRACKET expr . RBRACKET
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    RBRACKET        shift and go to state 206
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 156

    (99) expr -> variable assign_operator expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 99 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 99 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 99 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 99 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 99 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 99 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 99 (expr -> variable assign_operator expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

  ! INTE_DOT        [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! PLUS            [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! DIVIDE          [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! PERCENT         [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! TIMES           [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! MINUS           [ reduce using rule 99 (expr -> variable assign_operator expr .) ]

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 157

    (100) expr -> variable assign_operator AMPERSAND . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 21
    expr                           shift and go to state 207
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 158

    (130) exit_expr -> LPAREN expr . RPAREN
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 208
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 159

    (131) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    INTE_DOT        reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    EQUALS          reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    PLUS            reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    PERCENT         reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    TIMES           reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    RPAREN          reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    DDOT            reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    COLON           reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 131 (exit_expr -> LPAREN RPAREN .)
    RKEY            reduce using rule 131 (exit_expr -> LPAREN RPAREN .)


state 160

    (105) expr -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 209


state 161

    (106) expr -> ARRAY_TYPE LPAREN RPAREN .

    SEMICOLON       reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    INTE_DOT        reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    EQUALS          reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_THAN       reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    PLUS            reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    DIVIDE          reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    PERCENT         reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    TIMES           reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    MINUS           reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RPAREN          reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    DDOT            reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    COLON           reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RBRACKET        reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RKEY            reduce using rule 106 (expr -> ARRAY_TYPE LPAREN RPAREN .)


state 162

    (171) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (172) array_pair_list -> array_pair .
    (204) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (205) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 172 (array_pair_list -> array_pair .)
    COLON           shift and go to state 211

    array_pair_list_ARR_PAIR       shift and go to state 210

state 163

    (173) array_pair -> expr .
    (174) array_pair -> expr . array_pair_ATTR_EXPR_OPT
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (208) array_pair_EXPR_ATTR_OPT -> expr . ATTR_ASSOC
    (206) array_pair_ATTR_EXPR_OPT -> . ATTR_ASSOC expr
    (207) array_pair_ATTR_EXPR_OPT -> .
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

  ! reduce/reduce conflict for COLON resolved using rule 173 (array_pair -> expr .)
  ! reduce/reduce conflict for RPAREN resolved using rule 173 (array_pair -> expr .)
    COLON           reduce using rule 173 (array_pair -> expr .)
    RPAREN          reduce using rule 173 (array_pair -> expr .)
    INTE_DOT        shift and go to state 60
    ATTR_ASSOC      shift and go to state 213
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

  ! COLON           [ reduce using rule 207 (array_pair_ATTR_EXPR_OPT -> .) ]
  ! RPAREN          [ reduce using rule 207 (array_pair_ATTR_EXPR_OPT -> .) ]

    array_pair_ATTR_EXPR_OPT       shift and go to state 212
    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 164

    (175) array_pair -> array_pair_EXPR_ATTR_OPT . AMPERSAND variable

    AMPERSAND       shift and go to state 214


state 165

    (176) array_pair -> AMPERSAND . variable
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 215
    base_variable                  shift and go to state 34
    function_call                  shift and go to state 96
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 166

    (37) statement_if -> IF expr_paren statement_BLOCK_OPT .

    ELSEIF          reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ELSE            reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 37 (statement_if -> IF expr_paren statement_BLOCK_OPT .)


state 167

    (198) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 198 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 168

    (139) selector -> LBRACKET selector_EXPR . RBRACKET

    RBRACKET        shift and go to state 216


state 169

    (202) selector_EXPR -> expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    RBRACKET        reduce using rule 202 (selector_EXPR -> expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 170

    (138) compound_variable -> DOLAR LKEY expr . RKEY
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 217
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 171

    (140) function_declaration_statement -> FUNCTION ID LPAREN RPAREN . LKEY RKEY
    (146) function_declaration_statement -> FUNCTION ID LPAREN RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 218


state 172

    (145) function_declaration_statement -> FUNCTION ID LPAREN parameter_list . RPAREN LKEY RKEY
    (147) function_declaration_statement -> FUNCTION ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 219


state 173

    (148) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (149) parameter_list -> parameter .
    (196) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (197) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 149 (parameter_list -> parameter .)
    COLON           shift and go to state 221

    parameter_list_COLON_PARAMETER shift and go to state 220

state 174

    (150) parameter -> VARIABLE .
    (151) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 150 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 150 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 222


state 175

    (152) parameter -> parameter_type . VARIABLE
    (153) parameter -> parameter_type . AMPERSAND VARIABLE
    (156) parameter -> parameter_type . AMPERSAND VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 223
    AMPERSAND       shift and go to state 224


state 176

    (154) parameter -> AMPERSAND . VARIABLE
    (155) parameter -> AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 225


state 177

    (157) parameter_type -> INT_TYPE .

    VARIABLE        reduce using rule 157 (parameter_type -> INT_TYPE .)
    AMPERSAND       reduce using rule 157 (parameter_type -> INT_TYPE .)


state 178

    (158) parameter_type -> BOOLEAN_TYPE .

    VARIABLE        reduce using rule 158 (parameter_type -> BOOLEAN_TYPE .)
    AMPERSAND       reduce using rule 158 (parameter_type -> BOOLEAN_TYPE .)


state 179

    (159) parameter_type -> STRING_TYPE .

    VARIABLE        reduce using rule 159 (parameter_type -> STRING_TYPE .)
    AMPERSAND       reduce using rule 159 (parameter_type -> STRING_TYPE .)


state 180

    (160) parameter_type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 160 (parameter_type -> FLOAT_TYPE .)
    AMPERSAND       reduce using rule 160 (parameter_type -> FLOAT_TYPE .)


state 181

    (161) parameter_type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 161 (parameter_type -> ARRAY_TYPE .)
    AMPERSAND       reduce using rule 161 (parameter_type -> ARRAY_TYPE .)


state 182

    (162) parameter_type -> BOOL_TYPE .

    VARIABLE        reduce using rule 162 (parameter_type -> BOOL_TYPE .)
    AMPERSAND       reduce using rule 162 (parameter_type -> BOOL_TYPE .)


state 183

    (163) parameter_type -> REAL_TYPE .

    VARIABLE        reduce using rule 163 (parameter_type -> REAL_TYPE .)
    AMPERSAND       reduce using rule 163 (parameter_type -> REAL_TYPE .)


state 184

    (164) parameter_type -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 164 (parameter_type -> DOUBLE_TYPE .)
    AMPERSAND       reduce using rule 164 (parameter_type -> DOUBLE_TYPE .)


state 185

    (141) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . RPAREN LKEY RKEY
    (142) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (148) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (149) parameter_list -> . parameter
    (150) parameter -> . VARIABLE
    (151) parameter -> . VARIABLE ASSIGN static_scalar
    (152) parameter -> . parameter_type VARIABLE
    (153) parameter -> . parameter_type AMPERSAND VARIABLE
    (154) parameter -> . AMPERSAND VARIABLE
    (155) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (156) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (157) parameter_type -> . INT_TYPE
    (158) parameter_type -> . BOOLEAN_TYPE
    (159) parameter_type -> . STRING_TYPE
    (160) parameter_type -> . FLOAT_TYPE
    (161) parameter_type -> . ARRAY_TYPE
    (162) parameter_type -> . BOOL_TYPE
    (163) parameter_type -> . REAL_TYPE
    (164) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 226
    VARIABLE        shift and go to state 174
    AMPERSAND       shift and go to state 176
    INT_TYPE        shift and go to state 177
    BOOLEAN_TYPE    shift and go to state 178
    STRING_TYPE     shift and go to state 179
    FLOAT_TYPE      shift and go to state 180
    ARRAY_TYPE      shift and go to state 181
    BOOL_TYPE       shift and go to state 182
    REAL_TYPE       shift and go to state 183
    DOUBLE_TYPE     shift and go to state 184

    parameter_list                 shift and go to state 227
    parameter                      shift and go to state 173
    parameter_type                 shift and go to state 175

state 186

    (44) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INCREMENT       reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DECREMENT       reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ADD_ASSIGN      reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    SUB_ASSIGN      reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MOD_ASSIGN      reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS_ASSIGN     reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ASSIGN          reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 44 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 187

    (46) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 46 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 188

    (188) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (48) function_call_parameter -> . variable
    (49) function_call_parameter -> . AMPERSAND VARIABLE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 128
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter        shift and go to state 228
    variable                       shift and go to state 127
    base_variable                  shift and go to state 34
    function_call                  shift and go to state 96
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 189

    (49) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 49 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 49 (function_call_parameter -> AMPERSAND VARIABLE .)


state 190

    (102) expr -> LPAREN type_cast_operator RPAREN expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

  ! INTE_DOT        [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PLUS            [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! TIMES           [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! MINUS           [ reduce using rule 102 (expr -> LPAREN type_cast_operator RPAREN expr .) ]

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 191

    (97) expr -> expr INTE_DOT expr DDOT . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 229
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 192

    (38) statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .

    ELSE            reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 38 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)


state 193

    (36) expr_paren -> LPAREN expr RPAREN .

    LKEY            reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    DO              reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    FOR             reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    DIE             reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    IF              reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    EXC_DOT         reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    ID              reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 36 (expr_paren -> LPAREN expr RPAREN .)


state 194

    (11) statement -> DO statement_BLOCK_OPT WHILE expr_paren . SEMICOLON

    SEMICOLON       shift and go to state 230


state 195

    (186) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PLUS            reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 186 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 196

    (181) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 181 (statement_MUL -> statement statement_MUL .)


state 197

    (12) statement -> FOR LPAREN statement_for RPAREN . statement_BLOCK_OPT
    (185) statement_BLOCK_OPT -> . statement
    (186) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (187) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 84
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 231
    statement                      shift and go to state 83
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 198

    (23) statement_for -> SEMICOLON SEMICOLON .
    (29) statement_for -> SEMICOLON SEMICOLON . for_expr_OPT
    (42) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (43) for_expr_OPT -> . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 23 (statement_for -> SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 232
    expr                           shift and go to state 146
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 199

    (27) statement_for -> SEMICOLON for_expr_OPT . SEMICOLON
    (28) statement_for -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 233


state 200

    (24) statement_for -> for_expr_OPT SEMICOLON . SEMICOLON
    (25) statement_for -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (26) statement_for -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (30) statement_for -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (42) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (43) for_expr_OPT -> . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       shift and go to state 235
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 234
    expr                           shift and go to state 146
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 201

    (42) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 42 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 42 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 202

    (183) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (184) for_expr_COLON_EXPR -> COLON . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 236
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 203

    (19) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXC_DOT         reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    PLUS            reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    MINUS           reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 19 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 204

    (34) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (35) statement_COLON_GLOBAL -> COLON global_var .
    (34) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (35) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 35 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 152

    statement_COLON_GLOBAL         shift and go to state 237

state 205

    (33) global_var -> DOLAR LKEY expr . RKEY
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 238
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 206

    (94) expr -> variable LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    COLON           reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 94 (expr -> variable LBRACKET expr RBRACKET .)


state 207

    (100) expr -> variable assign_operator AMPERSAND expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

  ! INTE_DOT        [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PLUS            [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! DIVIDE          [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PERCENT         [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 208

    (130) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 130 (exit_expr -> LPAREN expr RPAREN .)


state 209

    (105) expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 105 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 210

    (171) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 171 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 211

    (204) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (205) array_pair_list_ARR_PAIR -> COLON . array_pair
    (173) array_pair -> . expr
    (174) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (175) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (176) array_pair -> . AMPERSAND variable
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (208) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 165
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    array_pair                     shift and go to state 239
    expr                           shift and go to state 163
    array_pair_EXPR_ATTR_OPT       shift and go to state 164
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 212

    (174) array_pair -> expr array_pair_ATTR_EXPR_OPT .

    COLON           reduce using rule 174 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)
    RPAREN          reduce using rule 174 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)


state 213

    (208) array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .
    (206) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       reduce using rule 208 (array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 240
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 214

    (175) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND . variable
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 241
    base_variable                  shift and go to state 34
    function_call                  shift and go to state 96
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 215

    (176) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 176 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 176 (array_pair -> AMPERSAND variable .)


state 216

    (139) selector -> LBRACKET selector_EXPR RBRACKET .

    LBRACKET        reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INCREMENT       reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DECREMENT       reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ADD_ASSIGN      reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SUB_ASSIGN      reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MOD_ASSIGN      reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS_ASSIGN     reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ASSIGN          reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SEMICOLON       reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INTE_DOT        reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    EQUALS          reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_THAN      reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_THAN       reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_EQUAL      reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_EQUAL     reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    NOT_EQUAL       reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LEFT_LOGICAL    reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS            reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE          reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PERCENT         reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    TIMES           reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MINUS           reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RPAREN          reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DDOT            reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    COLON           reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RBRACKET        reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ATTR_ASSOC      reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RKEY            reduce using rule 139 (selector -> LBRACKET selector_EXPR RBRACKET .)


state 217

    (138) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)


state 218

    (140) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY . RKEY
    (146) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY . inner_statement_MUL RKEY
    (179) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (180) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (140) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (141) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (145) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 242
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 243
    inner_statement                shift and go to state 244
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 219

    (145) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN . LKEY RKEY
    (147) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 245


state 220

    (148) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 148 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 221

    (196) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (197) parameter_list_COLON_PARAMETER -> COLON . parameter
    (150) parameter -> . VARIABLE
    (151) parameter -> . VARIABLE ASSIGN static_scalar
    (152) parameter -> . parameter_type VARIABLE
    (153) parameter -> . parameter_type AMPERSAND VARIABLE
    (154) parameter -> . AMPERSAND VARIABLE
    (155) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (156) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (157) parameter_type -> . INT_TYPE
    (158) parameter_type -> . BOOLEAN_TYPE
    (159) parameter_type -> . STRING_TYPE
    (160) parameter_type -> . FLOAT_TYPE
    (161) parameter_type -> . ARRAY_TYPE
    (162) parameter_type -> . BOOL_TYPE
    (163) parameter_type -> . REAL_TYPE
    (164) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 174
    AMPERSAND       shift and go to state 176
    INT_TYPE        shift and go to state 177
    BOOLEAN_TYPE    shift and go to state 178
    STRING_TYPE     shift and go to state 179
    FLOAT_TYPE      shift and go to state 180
    ARRAY_TYPE      shift and go to state 181
    BOOL_TYPE       shift and go to state 182
    REAL_TYPE       shift and go to state 183
    DOUBLE_TYPE     shift and go to state 184

    parameter                      shift and go to state 246
    parameter_type                 shift and go to state 175

state 222

    (151) parameter -> VARIABLE ASSIGN . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 249
    MINUS           shift and go to state 250
    NUMBER_REAL     shift and go to state 251
    NUMBER_INTEGER  shift and go to state 252
    CONSTANT_ENCAPSED_STRING shift and go to state 253

    static_scalar                  shift and go to state 247
    common_scalar                  shift and go to state 248

state 223

    (152) parameter -> parameter_type VARIABLE .

    COLON           reduce using rule 152 (parameter -> parameter_type VARIABLE .)
    RPAREN          reduce using rule 152 (parameter -> parameter_type VARIABLE .)


state 224

    (153) parameter -> parameter_type AMPERSAND . VARIABLE
    (156) parameter -> parameter_type AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 254


state 225

    (154) parameter -> AMPERSAND VARIABLE .
    (155) parameter -> AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 154 (parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 154 (parameter -> AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 255


state 226

    (141) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN . LKEY RKEY
    (143) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 256


state 227

    (142) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list . RPAREN LKEY RKEY
    (144) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 257


state 228

    (188) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (188) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (189) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 188
    RPAREN          reduce using rule 189 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 258

state 229

    (97) expr -> expr INTE_DOT expr DDOT expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

  ! INTE_DOT        [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PLUS            [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 97 (expr -> expr INTE_DOT expr DDOT expr .) ]

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 230

    (11) statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .

    FUNCTION        reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DO              reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FOR             reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    CONTINUE        reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    GLOBAL          reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    INCREMENT       reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DECREMENT       reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    LPAREN          reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    EXIT            reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DIE             reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ARRAY_TYPE      reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    NUMBER_REAL     reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    TRUE            reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FALSE           reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    IF              reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    EXC_DOT         reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    PLUS            reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    MINUS           reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ID              reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DOLAR           reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    VARIABLE        reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    END_PROGRAM     reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    RKEY            reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ELSEIF          reduce using rule 11 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)


state 231

    (12) statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 12 (statement -> FOR LPAREN statement_for RPAREN statement_BLOCK_OPT .)


state 232

    (29) statement_for -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 29 (statement_for -> SEMICOLON SEMICOLON for_expr_OPT .)


state 233

    (27) statement_for -> SEMICOLON for_expr_OPT SEMICOLON .
    (28) statement_for -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (42) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (43) for_expr_OPT -> . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 27 (statement_for -> SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 259
    expr                           shift and go to state 146
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 234

    (25) statement_for -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (30) statement_for -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 260


state 235

    (24) statement_for -> for_expr_OPT SEMICOLON SEMICOLON .
    (26) statement_for -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (42) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (43) for_expr_OPT -> . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 24 (statement_for -> for_expr_OPT SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 261
    expr                           shift and go to state 146
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 236

    (183) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (184) for_expr_COLON_EXPR -> COLON expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (183) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (184) for_expr_COLON_EXPR -> . COLON expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 184 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 184 (for_expr_COLON_EXPR -> COLON expr .)
    INTE_DOT        shift and go to state 60
    COLON           shift and go to state 202
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    for_expr_COLON_EXPR            shift and go to state 262
    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 237

    (34) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 34 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 238

    (33) global_var -> DOLAR LKEY expr RKEY .

    SEMICOLON       reduce using rule 33 (global_var -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 33 (global_var -> DOLAR LKEY expr RKEY .)


state 239

    (204) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (205) array_pair_list_ARR_PAIR -> COLON array_pair .
    (204) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (205) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 205 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 211

    array_pair_list_ARR_PAIR       shift and go to state 263

state 240

    (206) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .
    (97) expr -> expr . INTE_DOT expr DDOT expr
    (98) expr -> expr . comparission_operator expr
    (101) expr -> expr . arithmetic_operator expr
    (82) comparission_operator -> . EQUALS
    (83) comparission_operator -> . GREAT_THAN
    (84) comparission_operator -> . LESS_THAN
    (85) comparission_operator -> . LESS_EQUAL
    (86) comparission_operator -> . GREAT_EQUAL
    (87) comparission_operator -> . NOT_EQUAL
    (88) comparission_operator -> . LEFT_LOGICAL
    (89) comparission_operator -> . RIGHT_LOGICAL
    (77) arithmetic_operator -> . PLUS
    (78) arithmetic_operator -> . DIVIDE
    (79) arithmetic_operator -> . PERCENT
    (80) arithmetic_operator -> . TIMES
    (81) arithmetic_operator -> . MINUS

    COLON           reduce using rule 206 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    RPAREN          reduce using rule 206 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    INTE_DOT        shift and go to state 60
    EQUALS          shift and go to state 63
    GREAT_THAN      shift and go to state 64
    LESS_THAN       shift and go to state 65
    LESS_EQUAL      shift and go to state 66
    GREAT_EQUAL     shift and go to state 67
    NOT_EQUAL       shift and go to state 68
    LEFT_LOGICAL    shift and go to state 69
    RIGHT_LOGICAL   shift and go to state 70
    PLUS            shift and go to state 71
    DIVIDE          shift and go to state 72
    PERCENT         shift and go to state 73
    TIMES           shift and go to state 74
    MINUS           shift and go to state 75

    comparission_operator          shift and go to state 61
    arithmetic_operator            shift and go to state 62

state 241

    (175) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .

    COLON           reduce using rule 175 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)
    RPAREN          reduce using rule 175 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)


state 242

    (140) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    WHILE           reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DO              reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FOR             reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    BREAK           reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    RETURN          reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    EXIT            reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DIE             reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    TRUE            reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FALSE           reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    IF              reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    PLUS            reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    MINUS           reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    ID              reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    RKEY            reduce using rule 140 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)


state 243

    (146) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 264


state 244

    (179) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (180) inner_statement_MUL -> inner_statement .
    (179) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (180) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (140) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (141) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (145) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 180 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 244
    inner_statement_MUL            shift and go to state 265
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 245

    (145) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY . RKEY
    (147) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (179) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (180) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (140) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (141) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (145) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 266
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 267
    inner_statement                shift and go to state 244
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 246

    (196) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (197) parameter_list_COLON_PARAMETER -> COLON parameter .
    (196) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (197) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 197 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 221

    parameter_list_COLON_PARAMETER shift and go to state 268

state 247

    (151) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 151 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 151 (parameter -> VARIABLE ASSIGN static_scalar .)


state 248

    (165) static_scalar -> common_scalar .

    COLON           reduce using rule 165 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 165 (static_scalar -> common_scalar .)


state 249

    (166) static_scalar -> PLUS . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 249
    MINUS           shift and go to state 250
    NUMBER_REAL     shift and go to state 251
    NUMBER_INTEGER  shift and go to state 252
    CONSTANT_ENCAPSED_STRING shift and go to state 253

    static_scalar                  shift and go to state 269
    common_scalar                  shift and go to state 248

state 250

    (167) static_scalar -> MINUS . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 249
    MINUS           shift and go to state 250
    NUMBER_REAL     shift and go to state 251
    NUMBER_INTEGER  shift and go to state 252
    CONSTANT_ENCAPSED_STRING shift and go to state 253

    static_scalar                  shift and go to state 270
    common_scalar                  shift and go to state 248

state 251

    (168) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 168 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 168 (common_scalar -> NUMBER_REAL .)


state 252

    (169) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 169 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 169 (common_scalar -> NUMBER_INTEGER .)


state 253

    (170) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 170 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 170 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 254

    (153) parameter -> parameter_type AMPERSAND VARIABLE .
    (156) parameter -> parameter_type AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 153 (parameter -> parameter_type AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 153 (parameter -> parameter_type AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 271


state 255

    (155) parameter -> AMPERSAND VARIABLE ASSIGN . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 249
    MINUS           shift and go to state 250
    NUMBER_REAL     shift and go to state 251
    NUMBER_INTEGER  shift and go to state 252
    CONSTANT_ENCAPSED_STRING shift and go to state 253

    static_scalar                  shift and go to state 272
    common_scalar                  shift and go to state 248

state 256

    (141) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY . RKEY
    (143) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY . inner_statement_MUL RKEY
    (179) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (180) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (140) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (141) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (145) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 273
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 274
    inner_statement                shift and go to state 244
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 257

    (142) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN . LKEY RKEY
    (144) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 275


state 258

    (188) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 188 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 259

    (28) statement_for -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 28 (statement_for -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 260

    (25) statement_for -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (30) statement_for -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (42) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (43) for_expr_OPT -> . expr
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 25 (statement_for -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 276
    expr                           shift and go to state 146
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 261

    (26) statement_for -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 26 (statement_for -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 262

    (183) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 183 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 183 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 263

    (204) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 204 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 264

    (146) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 146 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)


state 265

    (179) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 179 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 266

    (145) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    WHILE           reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DO              reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOR             reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    BREAK           reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RETURN          reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXIT            reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DIE             reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    TRUE            reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FALSE           reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    IF              reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    PLUS            reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    MINUS           reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ID              reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RKEY            reduce using rule 145 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)


state 267

    (147) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 277


state 268

    (196) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 196 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 269

    (166) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 166 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 166 (static_scalar -> PLUS static_scalar .)


state 270

    (167) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 167 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 167 (static_scalar -> MINUS static_scalar .)


state 271

    (156) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 249
    MINUS           shift and go to state 250
    NUMBER_REAL     shift and go to state 251
    NUMBER_INTEGER  shift and go to state 252
    CONSTANT_ENCAPSED_STRING shift and go to state 253

    static_scalar                  shift and go to state 278
    common_scalar                  shift and go to state 248

state 272

    (155) parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 155 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 155 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)


state 273

    (141) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    WHILE           reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DO              reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FOR             reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    BREAK           reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    RETURN          reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    EXIT            reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DIE             reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    TRUE            reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FALSE           reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    IF              reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    PLUS            reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    MINUS           reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    ID              reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    RKEY            reduce using rule 141 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)


state 274

    (143) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 279


state 275

    (142) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY . RKEY
    (144) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (179) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (180) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (140) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (141) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (142) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (143) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (144) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (145) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (146) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (147) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif
    (7) statement -> . statement_if statement_elseif statement_else
    (8) statement -> . statement_if
    (9) statement -> . statement_if statement_else
    (10) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (11) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (12) statement -> . FOR LPAREN statement_for RPAREN statement_BLOCK_OPT
    (13) statement -> . BREAK expr SEMICOLON
    (14) statement -> . BREAK SEMICOLON
    (15) statement -> . CONTINUE expr SEMICOLON
    (16) statement -> . CONTINUE SEMICOLON
    (17) statement -> . RETURN expr SEMICOLON
    (18) statement -> . RETURN SEMICOLON
    (19) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (20) statement -> . GLOBAL global_var SEMICOLON
    (90) expr -> . INCREMENT variable
    (91) expr -> . variable INCREMENT
    (92) expr -> . DECREMENT variable
    (93) expr -> . variable DECREMENT
    (94) expr -> . variable LBRACKET expr RBRACKET
    (95) expr -> . LPAREN expr RPAREN
    (96) expr -> . unary_operator expr
    (97) expr -> . expr INTE_DOT expr DDOT expr
    (98) expr -> . expr comparission_operator expr
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . expr arithmetic_operator expr
    (102) expr -> . LPAREN type_cast_operator RPAREN expr
    (103) expr -> . EXIT expr_EXIT
    (104) expr -> . DIE expr_EXIT
    (105) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (106) expr -> . ARRAY_TYPE LPAREN RPAREN
    (107) expr -> . function_call
    (108) expr -> . variable
    (109) expr -> . NUMBER_REAL
    (110) expr -> . NUMBER_INTEGER
    (111) expr -> . CONSTANT_ENCAPSED_STRING
    (112) expr -> . TRUE
    (113) expr -> . FALSE
    (37) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (132) variable -> . base_variable
    (133) variable -> . function_call
    (52) unary_operator -> . EXC_DOT
    (53) unary_operator -> . PLUS
    (54) unary_operator -> . MINUS
    (44) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (45) function_call -> . base_variable
    (134) base_variable -> . reference_variable
    (135) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (136) reference_variable -> . compound_variable reference_variable_SELECTOR
    (200) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (201) simple_indirect_reference_DOLAR -> .
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            shift and go to state 280
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    IF              shift and go to state 33
    EXC_DOT         shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    ID              shift and go to state 9
    DOLAR           shift and go to state 41
    VARIABLE        shift and go to state 42

  ! VARIABLE        [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 201 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 281
    inner_statement                shift and go to state 244
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 34
    reference_variable             shift and go to state 38
    simple_indirect_reference_DOLAR shift and go to state 39
    compound_variable              shift and go to state 40

state 276

    (30) statement_for -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 30 (statement_for -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 277

    (147) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 147 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 278

    (156) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 156 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 156 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)


state 279

    (143) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 143 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)


state 280

    (142) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    WHILE           reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DO              reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOR             reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    BREAK           reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RETURN          reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXIT            reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DIE             reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    TRUE            reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FALSE           reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    IF              reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    PLUS            reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    MINUS           reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ID              reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RKEY            reduce using rule 142 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)


state 281

    (144) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 282


state 282

    (144) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 144 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOLAR in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 5 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 5 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 10 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 10 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 12 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 12 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 14 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 14 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 16 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 16 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 17 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 17 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 18 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 18 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 20 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 20 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 22 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 22 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 23 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 23 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 40 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 41 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 47 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 47 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 60 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 60 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 61 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 61 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 62 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 62 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 76 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 79 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 79 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 80 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 80 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 81 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 81 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 84 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 84 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 85 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 85 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 99 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 99 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 100 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 100 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 108 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 108 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 111 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 111 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 113 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 113 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 114 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 114 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 118 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 119 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 119 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 120 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 122 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 122 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 130 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 130 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 132 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 132 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 132 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 132 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 133 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 135 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 135 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 142 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 142 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 144 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 144 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 154 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 154 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 156 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 156 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 156 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 156 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 156 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 156 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 156 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 156 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 156 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 156 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 156 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 157 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 157 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 165 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 165 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 188 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 188 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 190 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 190 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 190 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 190 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 190 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 190 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 190 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 190 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 190 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 191 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 191 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 197 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 197 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 198 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 198 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 200 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 200 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 202 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 202 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 207 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 207 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 207 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 207 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 207 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 207 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 207 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 207 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 207 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 207 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 207 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 207 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 207 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 207 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 211 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 211 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 213 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 213 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 214 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 214 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 218 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 218 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 229 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 229 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 229 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 229 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 229 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 229 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 229 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 229 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 229 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 229 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 229 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 229 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 229 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 233 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 233 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 235 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 235 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 244 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 244 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 245 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 245 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 256 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 256 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 260 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 260 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 275 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 275 resolved as shift
WARNING: reduce/reduce conflict in state 27 resolved using rule (expr -> function_call)
WARNING: rejected rule (variable -> function_call) in state 27
WARNING: reduce/reduce conflict in state 34 resolved using rule (function_call -> base_variable)
WARNING: rejected rule (variable -> base_variable) in state 34
WARNING: reduce/reduce conflict in state 163 resolved using rule (array_pair -> expr)
WARNING: rejected rule (array_pair_ATTR_EXPR_OPT -> <empty>) in state 163
WARNING: Rule (variable -> base_variable) is never reduced
WARNING: Rule (array_pair_ATTR_EXPR_OPT -> <empty>) is never reduced

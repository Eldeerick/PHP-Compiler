Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    OR
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     inner_statement -> function_declaration_statement
Rule 4     inner_statement -> statement
Rule 5     statement -> expr SEMICOLON
Rule 6     statement -> if_statement
Rule 7     statement -> while_statement
Rule 8     statement -> do_statement
Rule 9     statement -> for_statement
Rule 10    statement -> break_statement
Rule 11    statement -> continue_statement
Rule 12    statement -> return_statement
Rule 13    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 14    statement -> GLOBAL global_var SEMICOLON
Rule 15    if_statement -> statement_if if_statement_complement
Rule 16    if_statement -> statement_if
Rule 17    if_statement_complement -> statement_elseif
Rule 18    if_statement_complement -> statement_elseif statement_else
Rule 19    if_statement_complement -> statement_else
Rule 20    while_statement -> WHILE expr_parentheses statement_BLOCK_OPT
Rule 21    do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
Rule 22    break_statement -> BREAK expr SEMICOLON
Rule 23    break_statement -> BREAK SEMICOLON
Rule 24    continue_statement -> CONTINUE expr SEMICOLON
Rule 25    continue_statement -> CONTINUE SEMICOLON
Rule 26    return_statement -> RETURN expr SEMICOLON
Rule 27    return_statement -> RETURN SEMICOLON
Rule 28    for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
Rule 29    for_parameters -> SEMICOLON SEMICOLON
Rule 30    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 31    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 32    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 33    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 34    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 35    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 36    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 37    global_var -> VARIABLE
Rule 38    global_var -> DOLAR VARIABLE
Rule 39    global_var -> DOLAR LKEY expr RKEY
Rule 40    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 41    statement_COLON_GLOBAL -> COLON global_var
Rule 42    ampersand_variable -> AMPERSAND VARIABLE
Rule 43    ampersand_variable -> VARIABLE
Rule 44    expr_parentheses -> LPAREN expr RPAREN
Rule 45    statement_if -> IF expr_parentheses statement_BLOCK_OPT
Rule 46    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT
Rule 47    statement_else -> ELSE statement_BLOCK_OPT
Rule 48    statement_foreach -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 49    statement_foreach -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 50    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 51    for_expr_OPT -> expr
Rule 52    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 53    function_call -> ID LPAREN RPAREN
Rule 54    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 55    function_call_parameter_list -> function_call_parameter
Rule 56    function_call_parameter -> variable
Rule 57    function_call_parameter -> expr
Rule 58    function_call_parameter -> AMPERSAND VARIABLE
Rule 59    assignment_list_element -> variable
Rule 60    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 61    unary_operator -> EXC_DOT
Rule 62    unary_operator -> PLUS
Rule 63    unary_operator -> MINUS
Rule 64    type_cast_operator -> INT_TYPE
Rule 65    type_cast_operator -> DOUBLE_TYPE
Rule 66    type_cast_operator -> FLOAT_TYPE
Rule 67    type_cast_operator -> REAL_TYPE
Rule 68    type_cast_operator -> STRING_TYPE
Rule 69    type_cast_operator -> ARRAY_TYPE
Rule 70    type_cast_operator -> BOOLEAN_TYPE
Rule 71    type_cast_operator -> BOOL_TYPE
Rule 72    type_cast_operator -> UNSET
Rule 73    arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr
Rule 74    arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr
Rule 75    arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr
Rule 76    arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr
Rule 77    arithmetic_expr -> LPAREN arithmetic_expr RPAREN
Rule 78    arithmetic_expr -> NUMBER_INTEGER
Rule 79    arithmetic_expr -> NUMBER_REAL
Rule 80    assign_operator -> ADD_ASSIGN
Rule 81    assign_operator -> SUB_ASSIGN
Rule 82    assign_operator -> MOD_ASSIGN
Rule 83    assign_operator -> PLUS_ASSIGN
Rule 84    assign_operator -> DIVIDE_ASSIGN
Rule 85    assign_operator -> ASSIGN
Rule 86    arithmetic_operator -> PLUS
Rule 87    arithmetic_operator -> DIVIDE
Rule 88    arithmetic_operator -> PERCENT
Rule 89    arithmetic_operator -> TIMES
Rule 90    arithmetic_operator -> MINUS
Rule 91    comparission_operator -> EQUALS
Rule 92    comparission_operator -> GREAT_THAN
Rule 93    comparission_operator -> LESS_THAN
Rule 94    comparission_operator -> LESS_EQUAL
Rule 95    comparission_operator -> GREAT_EQUAL
Rule 96    comparission_operator -> NOT_EQUAL
Rule 97    comparission_operator -> LEFT_LOGICAL
Rule 98    comparission_operator -> RIGHT_LOGICAL
Rule 99    expr -> INCREMENT variable
Rule 100   expr -> variable INCREMENT
Rule 101   expr -> DECREMENT variable
Rule 102   expr -> variable DECREMENT
Rule 103   expr -> variable LBRACKET expr RBRACKET
Rule 104   expr -> LPAREN expr RPAREN
Rule 105   expr -> unary_operator expr
Rule 106   expr -> expr INTE_DOT expr DDOT expr
Rule 107   expr -> expr comparission_operator expr
Rule 108   expr -> variable assign_operator expr
Rule 109   expr -> variable assign_operator AMPERSAND expr
Rule 110   expr -> expr arithmetic_operator expr
Rule 111   expr -> LPAREN type_cast_operator RPAREN expr
Rule 112   expr -> EXIT expr_EXIT
Rule 113   expr -> DIE expr_EXIT
Rule 114   expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 115   expr -> ARRAY_TYPE LPAREN RPAREN
Rule 116   expr -> variable
Rule 117   expr -> function_call
Rule 118   expr -> NUMBER_REAL
Rule 119   expr -> NUMBER_INTEGER
Rule 120   expr -> CONSTANT_ENCAPSED_STRING
Rule 121   expr -> TRUE
Rule 122   expr -> FALSE
Rule 123   encaps -> encaps_var
Rule 124   encaps -> VARIABLE
Rule 125   encaps -> LPAREN
Rule 126   encaps -> RPAREN
Rule 127   encaps -> LKEY
Rule 128   encaps -> RKEY
Rule 129   encaps_var -> VARIABLE encaps_var_OPT
Rule 130   encaps_var -> DOLAR LBRACKET expr RBRACKET
Rule 131   encaps_var -> DOLAR LKEY ID LBRACKET expr RBRACKET RKEY
Rule 132   encaps_var -> LKEY variable RKEY
Rule 133   encaps_var_OPT -> LBRACKET encaps_var_offset RBRACKET
Rule 134   encaps_var_OPT -> <empty>
Rule 135   encaps_var_offset -> STRING
Rule 136   encaps_var_offset -> VARIABLE
Rule 137   expr_EXIT -> exit_expr
Rule 138   expr_EXIT -> <empty>
Rule 139   exit_expr -> LPAREN expr RPAREN
Rule 140   exit_expr -> LPAREN RPAREN
Rule 141   variable -> base_variable
Rule 142   base_variable -> reference_variable
Rule 143   base_variable -> simple_indirect_reference_DOLAR reference_variable
Rule 144   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 145   reference_variable -> compound_variable
Rule 146   compound_variable -> VARIABLE
Rule 147   compound_variable -> DOLAR LKEY expr RKEY
Rule 148   selector -> LBRACKET expr RBRACKET
Rule 149   selector -> LBRACKET RBRACKET
Rule 150   function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY
Rule 151   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
Rule 152   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
Rule 153   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
Rule 154   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 155   function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
Rule 156   function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
Rule 157   function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 158   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 159   parameter_list -> parameter
Rule 160   parameter -> VARIABLE
Rule 161   parameter -> VARIABLE ASSIGN static_scalar
Rule 162   parameter -> parameter_type VARIABLE
Rule 163   parameter -> parameter_type AMPERSAND VARIABLE
Rule 164   parameter -> AMPERSAND VARIABLE
Rule 165   parameter -> AMPERSAND VARIABLE ASSIGN static_scalar
Rule 166   parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
Rule 167   parameter_type -> INT_TYPE
Rule 168   parameter_type -> BOOLEAN_TYPE
Rule 169   parameter_type -> STRING_TYPE
Rule 170   parameter_type -> FLOAT_TYPE
Rule 171   parameter_type -> ARRAY_TYPE
Rule 172   parameter_type -> BOOL_TYPE
Rule 173   parameter_type -> REAL_TYPE
Rule 174   parameter_type -> DOUBLE_TYPE
Rule 175   static_scalar -> common_scalar
Rule 176   static_scalar -> PLUS static_scalar
Rule 177   static_scalar -> MINUS static_scalar
Rule 178   common_scalar -> NUMBER_REAL
Rule 179   common_scalar -> NUMBER_INTEGER
Rule 180   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 181   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 182   array_pair_list -> array_pair
Rule 183   array_pair -> expr
Rule 184   array_pair -> expr ATTR_ASSOC expr
Rule 185   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 186   array_pair -> AMPERSAND variable
Rule 187   main_INNER -> inner_statement main_INNER
Rule 188   main_INNER -> inner_statement
Rule 189   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 190   inner_statement_MUL -> inner_statement
Rule 191   statement_MUL -> statement statement_MUL
Rule 192   statement_MUL -> statement
Rule 193   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 194   for_expr_COLON_EXPR -> COLON expr
Rule 195   statement_BLOCK_OPT -> statement
Rule 196   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 197   statement_BLOCK_OPT -> LKEY RKEY
Rule 198   function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 199   function_call_list_COLON_FUNCTION -> COLON function_call_parameter
Rule 200   assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 201   assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 202   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 203   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 204   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 205   reference_variable_SELECTOR -> selector
Rule 206   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 207   simple_indirect_reference_DOLAR -> DOLAR
Rule 208   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 209   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 80
AMPERSAND            : 42 58 109 151 152 153 154 163 164 165 166 185 186
AND                  : 
APOSTROFE            : 
ARRAY_TYPE           : 69 114 115 171
ARROBA               : 
AS                   : 48 49
ASPAS                : 
ASSIGN               : 85 161 165 166
ATTR_ASSOC           : 49 184 185
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 70 168
BOOL_TYPE            : 71 172
BREAK                : 22 23
CASE                 : 
CLONE                : 
COLON                : 40 41 193 194 198 199 200 202 203 208 209
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 120 180
CONTINUE             : 24 25
CRASE                : 
DDOT                 : 106
DECLARE              : 
DECREMENT            : 101 102
DIE                  : 113
DIVIDE               : 76 87
DIVIDE_ASSIGN        : 84
DO                   : 21
DOLAR                : 38 39 130 131 147 206 207
DOUBLE_TYPE          : 65 174
ELSE                 : 47
ELSEIF               : 46
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 91
EXC_DOT              : 61
EXIT                 : 112
FALSE                : 122
FLOAT_TYPE           : 66 170
FOR                  : 28
FOREACH              : 48 49
FUNCTION             : 150 151 152 153 154 155 156 157
GLOBAL               : 13 14
GREAT_EQUAL          : 95
GREAT_THAN           : 92
ID                   : 52 53 131 150 151 152 153 154 155 156 157
IDENTATION           : 
IF                   : 45
INCREMENT            : 99 100
INTE_DOT             : 106
INT_TYPE             : 64 167
LBRACKET             : 103 130 131 133 148 149
LEFT_LOGICAL         : 97
LESS_EQUAL           : 94
LESS_THAN            : 93
LIST                 : 60
LKEY                 : 39 127 131 132 147 150 151 152 153 154 155 156 157 196 197
LPAREN               : 28 44 48 49 52 53 60 77 104 111 114 115 125 139 140 150 151 152 153 154 155 156 157
MINUS                : 63 74 90 177
MOD_ASSIGN           : 82
NOT_EQUAL            : 96
NUMBER_INTEGER       : 78 119 179
NUMBER_REAL          : 79 118 178
OR                   : 
PERCENT              : 88
PLUS                 : 62 73 86 176
PLUS_ASSIGN          : 83
RBRACKET             : 103 130 131 133 148 149
REAL_TYPE            : 67 173
RETURN               : 26 27
RIGHT_LOGICAL        : 98
RKEY                 : 39 128 131 132 147 150 151 152 153 154 155 156 157 196 197
RPAREN               : 28 44 48 49 52 53 60 77 104 111 114 115 126 139 140 150 151 152 153 154 155 156 157
SEMICOLON            : 5 13 14 21 22 23 24 25 26 27 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36
STRING               : 135
STRING_TYPE          : 68 169
SUB_ASSIGN           : 81
TIMES                : 75 89
TRUE                 : 121
UNSET                : 72
VAR                  : 
VARIABLE             : 37 38 42 43 58 124 129 136 146 160 161 162 163 164 165 166
WHILE                : 20 21
error                : 

Nonterminals, with rules where they appear

ampersand_variable   : 48 49 49
arithmetic_expr      : 73 73 74 74 75 75 76 76 77
arithmetic_operator  : 110
array_pair           : 181 182 208 209
array_pair_list      : 114
array_pair_list_ARR_PAIR : 181 208
assign_operator      : 108 109
assignment_list_element : 60 200
assignment_list_element_COLON_ASSIGNMENT : 60 200
base_variable        : 141
break_statement      : 10
common_scalar        : 175
comparission_operator : 107
compound_variable    : 144 145
continue_statement   : 11
do_statement         : 8
encaps               : 
encaps_var           : 123
encaps_var_OPT       : 129
encaps_var_offset    : 133
exit_expr            : 137
expr                 : 5 22 24 26 39 44 48 49 50 51 57 103 104 105 106 106 106 107 107 108 109 110 110 111 130 131 139 147 148 183 184 184 185 193 194
expr_EXIT            : 112 113
expr_parentheses     : 20 21 45 46
for_expr_COLON_EXPR  : 50 193
for_expr_OPT         : 30 31 31 32 32 33 34 34 35 36 36 36
for_parameters       : 28
for_statement        : 9
function_call        : 117
function_call_list_COLON_FUNCTION : 54 198
function_call_parameter : 54 55 198 199
function_call_parameter_list : 52
function_declaration_statement : 3
global_var           : 13 14 40 41
if_statement         : 6
if_statement_complement : 15
inner_statement      : 187 188 189 190
inner_statement_MUL  : 153 154 156 157 189
main                 : 0
main_INNER           : 1 187
parameter            : 158 159 202 203
parameter_list       : 152 154 155 157
parameter_list_COLON_PARAMETER : 158 202
parameter_type       : 162 163 166
reference_variable   : 142 143
reference_variable_SELECTOR : 144 204
return_statement     : 12
selector             : 204 205
simple_indirect_reference_DOLAR : 143 206
statement            : 4 191 192 195
statement_BLOCK_OPT  : 20 21 28 45 46 47 48 49
statement_COLON_GLOBAL : 13 40
statement_MUL        : 191 196
statement_else       : 18 19
statement_elseif     : 17 18
statement_foreach    : 
statement_if         : 15 16
static_scalar        : 161 165 166 176 177
type_cast_operator   : 111
unary_operator       : 105
variable             : 56 59 99 100 101 102 103 108 109 116 132 185 186
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (187) main_INNER -> . inner_statement main_INNER
    (188) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (150) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (151) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 50


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (187) main_INNER -> inner_statement . main_INNER
    (188) main_INNER -> inner_statement .
    (187) main_INNER -> . inner_statement main_INNER
    (188) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (150) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (151) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     reduce using rule 188 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 51
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 6

    (3) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 3 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 3 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 3 (inner_statement -> function_declaration_statement .)


state 7

    (4) inner_statement -> statement .

    FUNCTION        reduce using rule 4 (inner_statement -> statement .)
    GLOBAL          reduce using rule 4 (inner_statement -> statement .)
    INCREMENT       reduce using rule 4 (inner_statement -> statement .)
    DECREMENT       reduce using rule 4 (inner_statement -> statement .)
    LPAREN          reduce using rule 4 (inner_statement -> statement .)
    EXIT            reduce using rule 4 (inner_statement -> statement .)
    DIE             reduce using rule 4 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 4 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 4 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 4 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (inner_statement -> statement .)
    TRUE            reduce using rule 4 (inner_statement -> statement .)
    FALSE           reduce using rule 4 (inner_statement -> statement .)
    WHILE           reduce using rule 4 (inner_statement -> statement .)
    DO              reduce using rule 4 (inner_statement -> statement .)
    FOR             reduce using rule 4 (inner_statement -> statement .)
    BREAK           reduce using rule 4 (inner_statement -> statement .)
    CONTINUE        reduce using rule 4 (inner_statement -> statement .)
    RETURN          reduce using rule 4 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 4 (inner_statement -> statement .)
    PLUS            reduce using rule 4 (inner_statement -> statement .)
    MINUS           reduce using rule 4 (inner_statement -> statement .)
    ID              reduce using rule 4 (inner_statement -> statement .)
    IF              reduce using rule 4 (inner_statement -> statement .)
    DOLAR           reduce using rule 4 (inner_statement -> statement .)
    VARIABLE        reduce using rule 4 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 4 (inner_statement -> statement .)
    RKEY            reduce using rule 4 (inner_statement -> statement .)


state 8

    (150) function_declaration_statement -> FUNCTION . ID LPAREN RPAREN LKEY RKEY
    (151) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) function_declaration_statement -> FUNCTION . ID LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> FUNCTION . ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> FUNCTION . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 52
    AMPERSAND       shift and go to state 53


state 9

    (52) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (53) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 54


state 10

    (104) expr -> LPAREN . expr RPAREN
    (111) expr -> LPAREN . type_cast_operator RPAREN expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (64) type_cast_operator -> . INT_TYPE
    (65) type_cast_operator -> . DOUBLE_TYPE
    (66) type_cast_operator -> . FLOAT_TYPE
    (67) type_cast_operator -> . REAL_TYPE
    (68) type_cast_operator -> . STRING_TYPE
    (69) type_cast_operator -> . ARRAY_TYPE
    (70) type_cast_operator -> . BOOLEAN_TYPE
    (71) type_cast_operator -> . BOOL_TYPE
    (72) type_cast_operator -> . UNSET
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 57
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    INT_TYPE        shift and go to state 58
    DOUBLE_TYPE     shift and go to state 59
    FLOAT_TYPE      shift and go to state 60
    REAL_TYPE       shift and go to state 61
    STRING_TYPE     shift and go to state 62
    BOOLEAN_TYPE    shift and go to state 63
    BOOL_TYPE       shift and go to state 64
    UNSET           shift and go to state 65
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 55
    type_cast_operator             shift and go to state 56
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 11

    (5) statement -> expr . SEMICOLON
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 66
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 12

    (6) statement -> if_statement .

    FUNCTION        reduce using rule 6 (statement -> if_statement .)
    GLOBAL          reduce using rule 6 (statement -> if_statement .)
    INCREMENT       reduce using rule 6 (statement -> if_statement .)
    DECREMENT       reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    EXIT            reduce using rule 6 (statement -> if_statement .)
    DIE             reduce using rule 6 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 6 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 6 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (statement -> if_statement .)
    TRUE            reduce using rule 6 (statement -> if_statement .)
    FALSE           reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    DO              reduce using rule 6 (statement -> if_statement .)
    FOR             reduce using rule 6 (statement -> if_statement .)
    BREAK           reduce using rule 6 (statement -> if_statement .)
    CONTINUE        reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    EXC_DOT         reduce using rule 6 (statement -> if_statement .)
    PLUS            reduce using rule 6 (statement -> if_statement .)
    MINUS           reduce using rule 6 (statement -> if_statement .)
    ID              reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    DOLAR           reduce using rule 6 (statement -> if_statement .)
    VARIABLE        reduce using rule 6 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 6 (statement -> if_statement .)
    RKEY            reduce using rule 6 (statement -> if_statement .)
    ELSEIF          reduce using rule 6 (statement -> if_statement .)
    ELSE            reduce using rule 6 (statement -> if_statement .)


state 13

    (7) statement -> while_statement .

    FUNCTION        reduce using rule 7 (statement -> while_statement .)
    GLOBAL          reduce using rule 7 (statement -> while_statement .)
    INCREMENT       reduce using rule 7 (statement -> while_statement .)
    DECREMENT       reduce using rule 7 (statement -> while_statement .)
    LPAREN          reduce using rule 7 (statement -> while_statement .)
    EXIT            reduce using rule 7 (statement -> while_statement .)
    DIE             reduce using rule 7 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 7 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 7 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (statement -> while_statement .)
    TRUE            reduce using rule 7 (statement -> while_statement .)
    FALSE           reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    DO              reduce using rule 7 (statement -> while_statement .)
    FOR             reduce using rule 7 (statement -> while_statement .)
    BREAK           reduce using rule 7 (statement -> while_statement .)
    CONTINUE        reduce using rule 7 (statement -> while_statement .)
    RETURN          reduce using rule 7 (statement -> while_statement .)
    EXC_DOT         reduce using rule 7 (statement -> while_statement .)
    PLUS            reduce using rule 7 (statement -> while_statement .)
    MINUS           reduce using rule 7 (statement -> while_statement .)
    ID              reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    DOLAR           reduce using rule 7 (statement -> while_statement .)
    VARIABLE        reduce using rule 7 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 7 (statement -> while_statement .)
    RKEY            reduce using rule 7 (statement -> while_statement .)
    ELSEIF          reduce using rule 7 (statement -> while_statement .)
    ELSE            reduce using rule 7 (statement -> while_statement .)


state 14

    (8) statement -> do_statement .

    FUNCTION        reduce using rule 8 (statement -> do_statement .)
    GLOBAL          reduce using rule 8 (statement -> do_statement .)
    INCREMENT       reduce using rule 8 (statement -> do_statement .)
    DECREMENT       reduce using rule 8 (statement -> do_statement .)
    LPAREN          reduce using rule 8 (statement -> do_statement .)
    EXIT            reduce using rule 8 (statement -> do_statement .)
    DIE             reduce using rule 8 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 8 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 8 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (statement -> do_statement .)
    TRUE            reduce using rule 8 (statement -> do_statement .)
    FALSE           reduce using rule 8 (statement -> do_statement .)
    WHILE           reduce using rule 8 (statement -> do_statement .)
    DO              reduce using rule 8 (statement -> do_statement .)
    FOR             reduce using rule 8 (statement -> do_statement .)
    BREAK           reduce using rule 8 (statement -> do_statement .)
    CONTINUE        reduce using rule 8 (statement -> do_statement .)
    RETURN          reduce using rule 8 (statement -> do_statement .)
    EXC_DOT         reduce using rule 8 (statement -> do_statement .)
    PLUS            reduce using rule 8 (statement -> do_statement .)
    MINUS           reduce using rule 8 (statement -> do_statement .)
    ID              reduce using rule 8 (statement -> do_statement .)
    IF              reduce using rule 8 (statement -> do_statement .)
    DOLAR           reduce using rule 8 (statement -> do_statement .)
    VARIABLE        reduce using rule 8 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 8 (statement -> do_statement .)
    RKEY            reduce using rule 8 (statement -> do_statement .)
    ELSEIF          reduce using rule 8 (statement -> do_statement .)
    ELSE            reduce using rule 8 (statement -> do_statement .)


state 15

    (9) statement -> for_statement .

    FUNCTION        reduce using rule 9 (statement -> for_statement .)
    GLOBAL          reduce using rule 9 (statement -> for_statement .)
    INCREMENT       reduce using rule 9 (statement -> for_statement .)
    DECREMENT       reduce using rule 9 (statement -> for_statement .)
    LPAREN          reduce using rule 9 (statement -> for_statement .)
    EXIT            reduce using rule 9 (statement -> for_statement .)
    DIE             reduce using rule 9 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 9 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 9 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (statement -> for_statement .)
    TRUE            reduce using rule 9 (statement -> for_statement .)
    FALSE           reduce using rule 9 (statement -> for_statement .)
    WHILE           reduce using rule 9 (statement -> for_statement .)
    DO              reduce using rule 9 (statement -> for_statement .)
    FOR             reduce using rule 9 (statement -> for_statement .)
    BREAK           reduce using rule 9 (statement -> for_statement .)
    CONTINUE        reduce using rule 9 (statement -> for_statement .)
    RETURN          reduce using rule 9 (statement -> for_statement .)
    EXC_DOT         reduce using rule 9 (statement -> for_statement .)
    PLUS            reduce using rule 9 (statement -> for_statement .)
    MINUS           reduce using rule 9 (statement -> for_statement .)
    ID              reduce using rule 9 (statement -> for_statement .)
    IF              reduce using rule 9 (statement -> for_statement .)
    DOLAR           reduce using rule 9 (statement -> for_statement .)
    VARIABLE        reduce using rule 9 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 9 (statement -> for_statement .)
    RKEY            reduce using rule 9 (statement -> for_statement .)
    ELSEIF          reduce using rule 9 (statement -> for_statement .)
    ELSE            reduce using rule 9 (statement -> for_statement .)


state 16

    (10) statement -> break_statement .

    FUNCTION        reduce using rule 10 (statement -> break_statement .)
    GLOBAL          reduce using rule 10 (statement -> break_statement .)
    INCREMENT       reduce using rule 10 (statement -> break_statement .)
    DECREMENT       reduce using rule 10 (statement -> break_statement .)
    LPAREN          reduce using rule 10 (statement -> break_statement .)
    EXIT            reduce using rule 10 (statement -> break_statement .)
    DIE             reduce using rule 10 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 10 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 10 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 10 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (statement -> break_statement .)
    TRUE            reduce using rule 10 (statement -> break_statement .)
    FALSE           reduce using rule 10 (statement -> break_statement .)
    WHILE           reduce using rule 10 (statement -> break_statement .)
    DO              reduce using rule 10 (statement -> break_statement .)
    FOR             reduce using rule 10 (statement -> break_statement .)
    BREAK           reduce using rule 10 (statement -> break_statement .)
    CONTINUE        reduce using rule 10 (statement -> break_statement .)
    RETURN          reduce using rule 10 (statement -> break_statement .)
    EXC_DOT         reduce using rule 10 (statement -> break_statement .)
    PLUS            reduce using rule 10 (statement -> break_statement .)
    MINUS           reduce using rule 10 (statement -> break_statement .)
    ID              reduce using rule 10 (statement -> break_statement .)
    IF              reduce using rule 10 (statement -> break_statement .)
    DOLAR           reduce using rule 10 (statement -> break_statement .)
    VARIABLE        reduce using rule 10 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 10 (statement -> break_statement .)
    RKEY            reduce using rule 10 (statement -> break_statement .)
    ELSEIF          reduce using rule 10 (statement -> break_statement .)
    ELSE            reduce using rule 10 (statement -> break_statement .)


state 17

    (11) statement -> continue_statement .

    FUNCTION        reduce using rule 11 (statement -> continue_statement .)
    GLOBAL          reduce using rule 11 (statement -> continue_statement .)
    INCREMENT       reduce using rule 11 (statement -> continue_statement .)
    DECREMENT       reduce using rule 11 (statement -> continue_statement .)
    LPAREN          reduce using rule 11 (statement -> continue_statement .)
    EXIT            reduce using rule 11 (statement -> continue_statement .)
    DIE             reduce using rule 11 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 11 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 11 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 11 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (statement -> continue_statement .)
    TRUE            reduce using rule 11 (statement -> continue_statement .)
    FALSE           reduce using rule 11 (statement -> continue_statement .)
    WHILE           reduce using rule 11 (statement -> continue_statement .)
    DO              reduce using rule 11 (statement -> continue_statement .)
    FOR             reduce using rule 11 (statement -> continue_statement .)
    BREAK           reduce using rule 11 (statement -> continue_statement .)
    CONTINUE        reduce using rule 11 (statement -> continue_statement .)
    RETURN          reduce using rule 11 (statement -> continue_statement .)
    EXC_DOT         reduce using rule 11 (statement -> continue_statement .)
    PLUS            reduce using rule 11 (statement -> continue_statement .)
    MINUS           reduce using rule 11 (statement -> continue_statement .)
    ID              reduce using rule 11 (statement -> continue_statement .)
    IF              reduce using rule 11 (statement -> continue_statement .)
    DOLAR           reduce using rule 11 (statement -> continue_statement .)
    VARIABLE        reduce using rule 11 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 11 (statement -> continue_statement .)
    RKEY            reduce using rule 11 (statement -> continue_statement .)
    ELSEIF          reduce using rule 11 (statement -> continue_statement .)
    ELSE            reduce using rule 11 (statement -> continue_statement .)


state 18

    (12) statement -> return_statement .

    FUNCTION        reduce using rule 12 (statement -> return_statement .)
    GLOBAL          reduce using rule 12 (statement -> return_statement .)
    INCREMENT       reduce using rule 12 (statement -> return_statement .)
    DECREMENT       reduce using rule 12 (statement -> return_statement .)
    LPAREN          reduce using rule 12 (statement -> return_statement .)
    EXIT            reduce using rule 12 (statement -> return_statement .)
    DIE             reduce using rule 12 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 12 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 12 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 12 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (statement -> return_statement .)
    TRUE            reduce using rule 12 (statement -> return_statement .)
    FALSE           reduce using rule 12 (statement -> return_statement .)
    WHILE           reduce using rule 12 (statement -> return_statement .)
    DO              reduce using rule 12 (statement -> return_statement .)
    FOR             reduce using rule 12 (statement -> return_statement .)
    BREAK           reduce using rule 12 (statement -> return_statement .)
    CONTINUE        reduce using rule 12 (statement -> return_statement .)
    RETURN          reduce using rule 12 (statement -> return_statement .)
    EXC_DOT         reduce using rule 12 (statement -> return_statement .)
    PLUS            reduce using rule 12 (statement -> return_statement .)
    MINUS           reduce using rule 12 (statement -> return_statement .)
    ID              reduce using rule 12 (statement -> return_statement .)
    IF              reduce using rule 12 (statement -> return_statement .)
    DOLAR           reduce using rule 12 (statement -> return_statement .)
    VARIABLE        reduce using rule 12 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 12 (statement -> return_statement .)
    RKEY            reduce using rule 12 (statement -> return_statement .)
    ELSEIF          reduce using rule 12 (statement -> return_statement .)
    ELSE            reduce using rule 12 (statement -> return_statement .)


state 19

    (13) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> GLOBAL . global_var SEMICOLON
    (37) global_var -> . VARIABLE
    (38) global_var -> . DOLAR VARIABLE
    (39) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 84
    DOLAR           shift and go to state 85

    global_var                     shift and go to state 83

state 20

    (99) expr -> INCREMENT . variable
    (141) variable -> . base_variable
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 86
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 21

    (100) expr -> variable . INCREMENT
    (102) expr -> variable . DECREMENT
    (103) expr -> variable . LBRACKET expr RBRACKET
    (108) expr -> variable . assign_operator expr
    (109) expr -> variable . assign_operator AMPERSAND expr
    (116) expr -> variable .
    (80) assign_operator -> . ADD_ASSIGN
    (81) assign_operator -> . SUB_ASSIGN
    (82) assign_operator -> . MOD_ASSIGN
    (83) assign_operator -> . PLUS_ASSIGN
    (84) assign_operator -> . DIVIDE_ASSIGN
    (85) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 87
    DECREMENT       shift and go to state 88
    LBRACKET        shift and go to state 89
    SEMICOLON       reduce using rule 116 (expr -> variable .)
    INTE_DOT        reduce using rule 116 (expr -> variable .)
    EQUALS          reduce using rule 116 (expr -> variable .)
    GREAT_THAN      reduce using rule 116 (expr -> variable .)
    LESS_THAN       reduce using rule 116 (expr -> variable .)
    LESS_EQUAL      reduce using rule 116 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 116 (expr -> variable .)
    NOT_EQUAL       reduce using rule 116 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 116 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 116 (expr -> variable .)
    PLUS            reduce using rule 116 (expr -> variable .)
    DIVIDE          reduce using rule 116 (expr -> variable .)
    PERCENT         reduce using rule 116 (expr -> variable .)
    TIMES           reduce using rule 116 (expr -> variable .)
    MINUS           reduce using rule 116 (expr -> variable .)
    RPAREN          reduce using rule 116 (expr -> variable .)
    COLON           reduce using rule 116 (expr -> variable .)
    DDOT            reduce using rule 116 (expr -> variable .)
    RBRACKET        reduce using rule 116 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 116 (expr -> variable .)
    RKEY            reduce using rule 116 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 91
    SUB_ASSIGN      shift and go to state 92
    MOD_ASSIGN      shift and go to state 93
    PLUS_ASSIGN     shift and go to state 94
    DIVIDE_ASSIGN   shift and go to state 95
    ASSIGN          shift and go to state 96

    assign_operator                shift and go to state 90

state 22

    (101) expr -> DECREMENT . variable
    (141) variable -> . base_variable
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 97
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 23

    (105) expr -> unary_operator . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    unary_operator                 shift and go to state 23
    expr                           shift and go to state 98
    variable                       shift and go to state 21
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 24

    (112) expr -> EXIT . expr_EXIT
    (137) expr_EXIT -> . exit_expr
    (138) expr_EXIT -> .
    (139) exit_expr -> . LPAREN expr RPAREN
    (140) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 138 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 138 (expr_EXIT -> .)
    EQUALS          reduce using rule 138 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 138 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 138 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 138 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 138 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 138 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 138 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 138 (expr_EXIT -> .)
    PLUS            reduce using rule 138 (expr_EXIT -> .)
    DIVIDE          reduce using rule 138 (expr_EXIT -> .)
    PERCENT         reduce using rule 138 (expr_EXIT -> .)
    TIMES           reduce using rule 138 (expr_EXIT -> .)
    MINUS           reduce using rule 138 (expr_EXIT -> .)
    RPAREN          reduce using rule 138 (expr_EXIT -> .)
    COLON           reduce using rule 138 (expr_EXIT -> .)
    DDOT            reduce using rule 138 (expr_EXIT -> .)
    RBRACKET        reduce using rule 138 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 138 (expr_EXIT -> .)
    RKEY            reduce using rule 138 (expr_EXIT -> .)
    LPAREN          shift and go to state 101

    expr_EXIT                      shift and go to state 99
    exit_expr                      shift and go to state 100

state 25

    (113) expr -> DIE . expr_EXIT
    (137) expr_EXIT -> . exit_expr
    (138) expr_EXIT -> .
    (139) exit_expr -> . LPAREN expr RPAREN
    (140) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 138 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 138 (expr_EXIT -> .)
    EQUALS          reduce using rule 138 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 138 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 138 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 138 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 138 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 138 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 138 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 138 (expr_EXIT -> .)
    PLUS            reduce using rule 138 (expr_EXIT -> .)
    DIVIDE          reduce using rule 138 (expr_EXIT -> .)
    PERCENT         reduce using rule 138 (expr_EXIT -> .)
    TIMES           reduce using rule 138 (expr_EXIT -> .)
    MINUS           reduce using rule 138 (expr_EXIT -> .)
    RPAREN          reduce using rule 138 (expr_EXIT -> .)
    COLON           reduce using rule 138 (expr_EXIT -> .)
    DDOT            reduce using rule 138 (expr_EXIT -> .)
    RBRACKET        reduce using rule 138 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 138 (expr_EXIT -> .)
    RKEY            reduce using rule 138 (expr_EXIT -> .)
    LPAREN          shift and go to state 101

    expr_EXIT                      shift and go to state 102
    exit_expr                      shift and go to state 100

state 26

    (114) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (115) expr -> ARRAY_TYPE . LPAREN RPAREN

    LPAREN          shift and go to state 103


state 27

    (117) expr -> function_call .

    SEMICOLON       reduce using rule 117 (expr -> function_call .)
    INTE_DOT        reduce using rule 117 (expr -> function_call .)
    EQUALS          reduce using rule 117 (expr -> function_call .)
    GREAT_THAN      reduce using rule 117 (expr -> function_call .)
    LESS_THAN       reduce using rule 117 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 117 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 117 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 117 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 117 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 117 (expr -> function_call .)
    PLUS            reduce using rule 117 (expr -> function_call .)
    DIVIDE          reduce using rule 117 (expr -> function_call .)
    PERCENT         reduce using rule 117 (expr -> function_call .)
    TIMES           reduce using rule 117 (expr -> function_call .)
    MINUS           reduce using rule 117 (expr -> function_call .)
    RPAREN          reduce using rule 117 (expr -> function_call .)
    COLON           reduce using rule 117 (expr -> function_call .)
    DDOT            reduce using rule 117 (expr -> function_call .)
    RBRACKET        reduce using rule 117 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 117 (expr -> function_call .)
    RKEY            reduce using rule 117 (expr -> function_call .)


state 28

    (118) expr -> NUMBER_REAL .

    SEMICOLON       reduce using rule 118 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 118 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 118 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 118 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 118 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 118 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 118 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 118 (expr -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 118 (expr -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 118 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 118 (expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 118 (expr -> NUMBER_REAL .)
    PERCENT         reduce using rule 118 (expr -> NUMBER_REAL .)
    TIMES           reduce using rule 118 (expr -> NUMBER_REAL .)
    MINUS           reduce using rule 118 (expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 118 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 118 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 118 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 118 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 118 (expr -> NUMBER_REAL .)
    RKEY            reduce using rule 118 (expr -> NUMBER_REAL .)


state 29

    (119) expr -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 119 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 119 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 119 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 119 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 119 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 119 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 119 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 119 (expr -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 119 (expr -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 119 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 119 (expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 119 (expr -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 119 (expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 119 (expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 119 (expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 119 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 119 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 119 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 119 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 119 (expr -> NUMBER_INTEGER .)
    RKEY            reduce using rule 119 (expr -> NUMBER_INTEGER .)


state 30

    (120) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 120 (expr -> CONSTANT_ENCAPSED_STRING .)


state 31

    (121) expr -> TRUE .

    SEMICOLON       reduce using rule 121 (expr -> TRUE .)
    INTE_DOT        reduce using rule 121 (expr -> TRUE .)
    EQUALS          reduce using rule 121 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 121 (expr -> TRUE .)
    LESS_THAN       reduce using rule 121 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 121 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 121 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 121 (expr -> TRUE .)
    LEFT_LOGICAL    reduce using rule 121 (expr -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 121 (expr -> TRUE .)
    PLUS            reduce using rule 121 (expr -> TRUE .)
    DIVIDE          reduce using rule 121 (expr -> TRUE .)
    PERCENT         reduce using rule 121 (expr -> TRUE .)
    TIMES           reduce using rule 121 (expr -> TRUE .)
    MINUS           reduce using rule 121 (expr -> TRUE .)
    RPAREN          reduce using rule 121 (expr -> TRUE .)
    COLON           reduce using rule 121 (expr -> TRUE .)
    DDOT            reduce using rule 121 (expr -> TRUE .)
    RBRACKET        reduce using rule 121 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 121 (expr -> TRUE .)
    RKEY            reduce using rule 121 (expr -> TRUE .)


state 32

    (122) expr -> FALSE .

    SEMICOLON       reduce using rule 122 (expr -> FALSE .)
    INTE_DOT        reduce using rule 122 (expr -> FALSE .)
    EQUALS          reduce using rule 122 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 122 (expr -> FALSE .)
    LESS_THAN       reduce using rule 122 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 122 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 122 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 122 (expr -> FALSE .)
    LEFT_LOGICAL    reduce using rule 122 (expr -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 122 (expr -> FALSE .)
    PLUS            reduce using rule 122 (expr -> FALSE .)
    DIVIDE          reduce using rule 122 (expr -> FALSE .)
    PERCENT         reduce using rule 122 (expr -> FALSE .)
    TIMES           reduce using rule 122 (expr -> FALSE .)
    MINUS           reduce using rule 122 (expr -> FALSE .)
    RPAREN          reduce using rule 122 (expr -> FALSE .)
    COLON           reduce using rule 122 (expr -> FALSE .)
    DDOT            reduce using rule 122 (expr -> FALSE .)
    RBRACKET        reduce using rule 122 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 122 (expr -> FALSE .)
    RKEY            reduce using rule 122 (expr -> FALSE .)


state 33

    (15) if_statement -> statement_if . if_statement_complement
    (16) if_statement -> statement_if .
    (17) if_statement_complement -> . statement_elseif
    (18) if_statement_complement -> . statement_elseif statement_else
    (19) if_statement_complement -> . statement_else
    (46) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT
    (47) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 16 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 16 (if_statement -> statement_if .)
    INCREMENT       reduce using rule 16 (if_statement -> statement_if .)
    DECREMENT       reduce using rule 16 (if_statement -> statement_if .)
    LPAREN          reduce using rule 16 (if_statement -> statement_if .)
    EXIT            reduce using rule 16 (if_statement -> statement_if .)
    DIE             reduce using rule 16 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 16 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 16 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 16 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 16 (if_statement -> statement_if .)
    TRUE            reduce using rule 16 (if_statement -> statement_if .)
    FALSE           reduce using rule 16 (if_statement -> statement_if .)
    WHILE           reduce using rule 16 (if_statement -> statement_if .)
    DO              reduce using rule 16 (if_statement -> statement_if .)
    FOR             reduce using rule 16 (if_statement -> statement_if .)
    BREAK           reduce using rule 16 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 16 (if_statement -> statement_if .)
    RETURN          reduce using rule 16 (if_statement -> statement_if .)
    EXC_DOT         reduce using rule 16 (if_statement -> statement_if .)
    PLUS            reduce using rule 16 (if_statement -> statement_if .)
    MINUS           reduce using rule 16 (if_statement -> statement_if .)
    ID              reduce using rule 16 (if_statement -> statement_if .)
    IF              reduce using rule 16 (if_statement -> statement_if .)
    DOLAR           reduce using rule 16 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 16 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 16 (if_statement -> statement_if .)
    RKEY            reduce using rule 16 (if_statement -> statement_if .)
    ELSEIF          shift and go to state 107
    ELSE            shift and go to state 108

  ! ELSEIF          [ reduce using rule 16 (if_statement -> statement_if .) ]
  ! ELSE            [ reduce using rule 16 (if_statement -> statement_if .) ]

    if_statement_complement        shift and go to state 104
    statement_elseif               shift and go to state 105
    statement_else                 shift and go to state 106

state 34

    (20) while_statement -> WHILE . expr_parentheses statement_BLOCK_OPT
    (44) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 110

    expr_parentheses               shift and go to state 109

state 35

    (21) do_statement -> DO . statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (195) statement_BLOCK_OPT -> . statement
    (196) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (197) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 113
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 111
    statement                      shift and go to state 112
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 36

    (28) for_statement -> FOR . LPAREN for_parameters RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 114


state 37

    (22) break_statement -> BREAK . expr SEMICOLON
    (23) break_statement -> BREAK . SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 116
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 115
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 38

    (24) continue_statement -> CONTINUE . expr SEMICOLON
    (25) continue_statement -> CONTINUE . SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 118
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 117
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 39

    (26) return_statement -> RETURN . expr SEMICOLON
    (27) return_statement -> RETURN . SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 120
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 119
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 40

    (141) variable -> base_variable .

    INCREMENT       reduce using rule 141 (variable -> base_variable .)
    DECREMENT       reduce using rule 141 (variable -> base_variable .)
    LBRACKET        reduce using rule 141 (variable -> base_variable .)
    ADD_ASSIGN      reduce using rule 141 (variable -> base_variable .)
    SUB_ASSIGN      reduce using rule 141 (variable -> base_variable .)
    MOD_ASSIGN      reduce using rule 141 (variable -> base_variable .)
    PLUS_ASSIGN     reduce using rule 141 (variable -> base_variable .)
    DIVIDE_ASSIGN   reduce using rule 141 (variable -> base_variable .)
    ASSIGN          reduce using rule 141 (variable -> base_variable .)
    SEMICOLON       reduce using rule 141 (variable -> base_variable .)
    INTE_DOT        reduce using rule 141 (variable -> base_variable .)
    EQUALS          reduce using rule 141 (variable -> base_variable .)
    GREAT_THAN      reduce using rule 141 (variable -> base_variable .)
    LESS_THAN       reduce using rule 141 (variable -> base_variable .)
    LESS_EQUAL      reduce using rule 141 (variable -> base_variable .)
    GREAT_EQUAL     reduce using rule 141 (variable -> base_variable .)
    NOT_EQUAL       reduce using rule 141 (variable -> base_variable .)
    LEFT_LOGICAL    reduce using rule 141 (variable -> base_variable .)
    RIGHT_LOGICAL   reduce using rule 141 (variable -> base_variable .)
    PLUS            reduce using rule 141 (variable -> base_variable .)
    DIVIDE          reduce using rule 141 (variable -> base_variable .)
    PERCENT         reduce using rule 141 (variable -> base_variable .)
    TIMES           reduce using rule 141 (variable -> base_variable .)
    MINUS           reduce using rule 141 (variable -> base_variable .)
    RPAREN          reduce using rule 141 (variable -> base_variable .)
    COLON           reduce using rule 141 (variable -> base_variable .)
    DDOT            reduce using rule 141 (variable -> base_variable .)
    RBRACKET        reduce using rule 141 (variable -> base_variable .)
    ATTR_ASSOC      reduce using rule 141 (variable -> base_variable .)
    RKEY            reduce using rule 141 (variable -> base_variable .)


state 41

    (61) unary_operator -> EXC_DOT .

    INCREMENT       reduce using rule 61 (unary_operator -> EXC_DOT .)
    DECREMENT       reduce using rule 61 (unary_operator -> EXC_DOT .)
    LPAREN          reduce using rule 61 (unary_operator -> EXC_DOT .)
    EXIT            reduce using rule 61 (unary_operator -> EXC_DOT .)
    DIE             reduce using rule 61 (unary_operator -> EXC_DOT .)
    ARRAY_TYPE      reduce using rule 61 (unary_operator -> EXC_DOT .)
    NUMBER_REAL     reduce using rule 61 (unary_operator -> EXC_DOT .)
    NUMBER_INTEGER  reduce using rule 61 (unary_operator -> EXC_DOT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (unary_operator -> EXC_DOT .)
    TRUE            reduce using rule 61 (unary_operator -> EXC_DOT .)
    FALSE           reduce using rule 61 (unary_operator -> EXC_DOT .)
    EXC_DOT         reduce using rule 61 (unary_operator -> EXC_DOT .)
    PLUS            reduce using rule 61 (unary_operator -> EXC_DOT .)
    MINUS           reduce using rule 61 (unary_operator -> EXC_DOT .)
    ID              reduce using rule 61 (unary_operator -> EXC_DOT .)
    DOLAR           reduce using rule 61 (unary_operator -> EXC_DOT .)
    VARIABLE        reduce using rule 61 (unary_operator -> EXC_DOT .)


state 42

    (62) unary_operator -> PLUS .

    INCREMENT       reduce using rule 62 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 62 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 62 (unary_operator -> PLUS .)
    EXIT            reduce using rule 62 (unary_operator -> PLUS .)
    DIE             reduce using rule 62 (unary_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 62 (unary_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 62 (unary_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 62 (unary_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (unary_operator -> PLUS .)
    TRUE            reduce using rule 62 (unary_operator -> PLUS .)
    FALSE           reduce using rule 62 (unary_operator -> PLUS .)
    EXC_DOT         reduce using rule 62 (unary_operator -> PLUS .)
    PLUS            reduce using rule 62 (unary_operator -> PLUS .)
    MINUS           reduce using rule 62 (unary_operator -> PLUS .)
    ID              reduce using rule 62 (unary_operator -> PLUS .)
    DOLAR           reduce using rule 62 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 62 (unary_operator -> PLUS .)


state 43

    (63) unary_operator -> MINUS .

    INCREMENT       reduce using rule 63 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 63 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 63 (unary_operator -> MINUS .)
    EXIT            reduce using rule 63 (unary_operator -> MINUS .)
    DIE             reduce using rule 63 (unary_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 63 (unary_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 63 (unary_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 63 (unary_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (unary_operator -> MINUS .)
    TRUE            reduce using rule 63 (unary_operator -> MINUS .)
    FALSE           reduce using rule 63 (unary_operator -> MINUS .)
    EXC_DOT         reduce using rule 63 (unary_operator -> MINUS .)
    PLUS            reduce using rule 63 (unary_operator -> MINUS .)
    MINUS           reduce using rule 63 (unary_operator -> MINUS .)
    ID              reduce using rule 63 (unary_operator -> MINUS .)
    DOLAR           reduce using rule 63 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 63 (unary_operator -> MINUS .)


state 44

    (45) statement_if -> IF . expr_parentheses statement_BLOCK_OPT
    (44) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 110

    expr_parentheses               shift and go to state 121

state 45

    (142) base_variable -> reference_variable .

    INCREMENT       reduce using rule 142 (base_variable -> reference_variable .)
    DECREMENT       reduce using rule 142 (base_variable -> reference_variable .)
    LBRACKET        reduce using rule 142 (base_variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 142 (base_variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 142 (base_variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 142 (base_variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 142 (base_variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 142 (base_variable -> reference_variable .)
    ASSIGN          reduce using rule 142 (base_variable -> reference_variable .)
    SEMICOLON       reduce using rule 142 (base_variable -> reference_variable .)
    INTE_DOT        reduce using rule 142 (base_variable -> reference_variable .)
    EQUALS          reduce using rule 142 (base_variable -> reference_variable .)
    GREAT_THAN      reduce using rule 142 (base_variable -> reference_variable .)
    LESS_THAN       reduce using rule 142 (base_variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 142 (base_variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 142 (base_variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 142 (base_variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 142 (base_variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 142 (base_variable -> reference_variable .)
    PLUS            reduce using rule 142 (base_variable -> reference_variable .)
    DIVIDE          reduce using rule 142 (base_variable -> reference_variable .)
    PERCENT         reduce using rule 142 (base_variable -> reference_variable .)
    TIMES           reduce using rule 142 (base_variable -> reference_variable .)
    MINUS           reduce using rule 142 (base_variable -> reference_variable .)
    RPAREN          reduce using rule 142 (base_variable -> reference_variable .)
    COLON           reduce using rule 142 (base_variable -> reference_variable .)
    DDOT            reduce using rule 142 (base_variable -> reference_variable .)
    RBRACKET        reduce using rule 142 (base_variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 142 (base_variable -> reference_variable .)
    RKEY            reduce using rule 142 (base_variable -> reference_variable .)


state 46

    (143) base_variable -> simple_indirect_reference_DOLAR . reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 49
    DOLAR           shift and go to state 123

    reference_variable             shift and go to state 122
    compound_variable              shift and go to state 47

state 47

    (144) reference_variable -> compound_variable . reference_variable_SELECTOR
    (145) reference_variable -> compound_variable .
    (204) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (205) reference_variable_SELECTOR -> . selector
    (148) selector -> . LBRACKET expr RBRACKET
    (149) selector -> . LBRACKET RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 145 (reference_variable -> compound_variable .)
    DECREMENT       reduce using rule 145 (reference_variable -> compound_variable .)
    ADD_ASSIGN      reduce using rule 145 (reference_variable -> compound_variable .)
    SUB_ASSIGN      reduce using rule 145 (reference_variable -> compound_variable .)
    MOD_ASSIGN      reduce using rule 145 (reference_variable -> compound_variable .)
    PLUS_ASSIGN     reduce using rule 145 (reference_variable -> compound_variable .)
    DIVIDE_ASSIGN   reduce using rule 145 (reference_variable -> compound_variable .)
    ASSIGN          reduce using rule 145 (reference_variable -> compound_variable .)
    SEMICOLON       reduce using rule 145 (reference_variable -> compound_variable .)
    INTE_DOT        reduce using rule 145 (reference_variable -> compound_variable .)
    EQUALS          reduce using rule 145 (reference_variable -> compound_variable .)
    GREAT_THAN      reduce using rule 145 (reference_variable -> compound_variable .)
    LESS_THAN       reduce using rule 145 (reference_variable -> compound_variable .)
    LESS_EQUAL      reduce using rule 145 (reference_variable -> compound_variable .)
    GREAT_EQUAL     reduce using rule 145 (reference_variable -> compound_variable .)
    NOT_EQUAL       reduce using rule 145 (reference_variable -> compound_variable .)
    LEFT_LOGICAL    reduce using rule 145 (reference_variable -> compound_variable .)
    RIGHT_LOGICAL   reduce using rule 145 (reference_variable -> compound_variable .)
    PLUS            reduce using rule 145 (reference_variable -> compound_variable .)
    DIVIDE          reduce using rule 145 (reference_variable -> compound_variable .)
    PERCENT         reduce using rule 145 (reference_variable -> compound_variable .)
    TIMES           reduce using rule 145 (reference_variable -> compound_variable .)
    MINUS           reduce using rule 145 (reference_variable -> compound_variable .)
    RPAREN          reduce using rule 145 (reference_variable -> compound_variable .)
    COLON           reduce using rule 145 (reference_variable -> compound_variable .)
    DDOT            reduce using rule 145 (reference_variable -> compound_variable .)
    RBRACKET        reduce using rule 145 (reference_variable -> compound_variable .)
    ATTR_ASSOC      reduce using rule 145 (reference_variable -> compound_variable .)
    RKEY            reduce using rule 145 (reference_variable -> compound_variable .)
    LBRACKET        shift and go to state 126

  ! LBRACKET        [ reduce using rule 145 (reference_variable -> compound_variable .) ]

    reference_variable_SELECTOR    shift and go to state 124
    selector                       shift and go to state 125

state 48

    (206) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> DOLAR .
    (147) compound_variable -> DOLAR . LKEY expr RKEY
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 207 (simple_indirect_reference_DOLAR -> DOLAR .)
    LKEY            shift and go to state 129
    DOLAR           shift and go to state 127

  ! DOLAR           [ reduce using rule 207 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 128

state 49

    (146) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 146 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 146 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 146 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 146 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 146 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 146 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 146 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 146 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 146 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 146 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 146 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 146 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 146 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 146 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 146 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 146 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 146 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 146 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 146 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 146 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 146 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 146 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 146 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 146 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 146 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 146 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 146 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 146 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 146 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 146 (compound_variable -> VARIABLE .)


state 50

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 51

    (187) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 187 (main_INNER -> inner_statement main_INNER .)


state 52

    (150) function_declaration_statement -> FUNCTION ID . LPAREN RPAREN LKEY RKEY
    (155) function_declaration_statement -> FUNCTION ID . LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> FUNCTION ID . LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> FUNCTION ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 130


state 53

    (151) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 131


state 54

    (52) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (53) function_call -> ID LPAREN . RPAREN
    (54) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (55) function_call_parameter_list -> . function_call_parameter
    (56) function_call_parameter -> . variable
    (57) function_call_parameter -> . expr
    (58) function_call_parameter -> . AMPERSAND VARIABLE
    (141) variable -> . base_variable
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 133
    AMPERSAND       shift and go to state 137
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    function_call_parameter_list   shift and go to state 132
    function_call_parameter        shift and go to state 134
    variable                       shift and go to state 135
    expr                           shift and go to state 136
    base_variable                  shift and go to state 40
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 55

    (104) expr -> LPAREN expr . RPAREN
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 138
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 56

    (111) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 139


state 57

    (114) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (115) expr -> ARRAY_TYPE . LPAREN RPAREN
    (69) type_cast_operator -> ARRAY_TYPE .

    LPAREN          shift and go to state 103
    RPAREN          reduce using rule 69 (type_cast_operator -> ARRAY_TYPE .)


state 58

    (64) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 64 (type_cast_operator -> INT_TYPE .)


state 59

    (65) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 65 (type_cast_operator -> DOUBLE_TYPE .)


state 60

    (66) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 66 (type_cast_operator -> FLOAT_TYPE .)


state 61

    (67) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 67 (type_cast_operator -> REAL_TYPE .)


state 62

    (68) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 68 (type_cast_operator -> STRING_TYPE .)


state 63

    (70) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 70 (type_cast_operator -> BOOLEAN_TYPE .)


state 64

    (71) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 71 (type_cast_operator -> BOOL_TYPE .)


state 65

    (72) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 72 (type_cast_operator -> UNSET .)


state 66

    (5) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 5 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 5 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 5 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 5 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 5 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 5 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 5 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 5 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expr SEMICOLON .)
    DO              reduce using rule 5 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 5 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 5 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 5 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 5 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 5 (statement -> expr SEMICOLON .)
    ID              reduce using rule 5 (statement -> expr SEMICOLON .)
    IF              reduce using rule 5 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 5 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 5 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 5 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> expr SEMICOLON .)


state 67

    (106) expr -> expr INTE_DOT . expr DDOT expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 140
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 68

    (107) expr -> expr comparission_operator . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 141
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 69

    (110) expr -> expr arithmetic_operator . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 142
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 70

    (91) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 91 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 91 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 91 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 91 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 91 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 91 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 91 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 91 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 91 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 91 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 91 (comparission_operator -> EQUALS .)
    EXC_DOT         reduce using rule 91 (comparission_operator -> EQUALS .)
    PLUS            reduce using rule 91 (comparission_operator -> EQUALS .)
    MINUS           reduce using rule 91 (comparission_operator -> EQUALS .)
    ID              reduce using rule 91 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 91 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 91 (comparission_operator -> EQUALS .)


state 71

    (92) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    EXC_DOT         reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    PLUS            reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    MINUS           reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 92 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 92 (comparission_operator -> GREAT_THAN .)


state 72

    (93) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 93 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 93 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 93 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 93 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 93 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 93 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 93 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 93 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 93 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 93 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 93 (comparission_operator -> LESS_THAN .)
    EXC_DOT         reduce using rule 93 (comparission_operator -> LESS_THAN .)
    PLUS            reduce using rule 93 (comparission_operator -> LESS_THAN .)
    MINUS           reduce using rule 93 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 93 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 93 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 93 (comparission_operator -> LESS_THAN .)


state 73

    (94) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    EXC_DOT         reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    PLUS            reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    MINUS           reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 94 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 94 (comparission_operator -> LESS_EQUAL .)


state 74

    (95) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    EXC_DOT         reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    PLUS            reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    MINUS           reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 95 (comparission_operator -> GREAT_EQUAL .)


state 75

    (96) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    EXC_DOT         reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    PLUS            reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    MINUS           reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 96 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 96 (comparission_operator -> NOT_EQUAL .)


state 76

    (97) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    EXC_DOT         reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    PLUS            reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    MINUS           reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 97 (comparission_operator -> LEFT_LOGICAL .)


state 77

    (98) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    EXC_DOT         reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    PLUS            reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    MINUS           reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 98 (comparission_operator -> RIGHT_LOGICAL .)


state 78

    (86) arithmetic_operator -> PLUS .

    INCREMENT       reduce using rule 86 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 86 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 86 (arithmetic_operator -> PLUS .)
    EXIT            reduce using rule 86 (arithmetic_operator -> PLUS .)
    DIE             reduce using rule 86 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 86 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 86 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 86 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 86 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 86 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 86 (arithmetic_operator -> PLUS .)
    EXC_DOT         reduce using rule 86 (arithmetic_operator -> PLUS .)
    PLUS            reduce using rule 86 (arithmetic_operator -> PLUS .)
    MINUS           reduce using rule 86 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 86 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 86 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 86 (arithmetic_operator -> PLUS .)


state 79

    (87) arithmetic_operator -> DIVIDE .

    INCREMENT       reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    EXIT            reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    DIE             reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    EXC_DOT         reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    PLUS            reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    MINUS           reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 87 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 87 (arithmetic_operator -> DIVIDE .)


state 80

    (88) arithmetic_operator -> PERCENT .

    INCREMENT       reduce using rule 88 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 88 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 88 (arithmetic_operator -> PERCENT .)
    EXIT            reduce using rule 88 (arithmetic_operator -> PERCENT .)
    DIE             reduce using rule 88 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 88 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 88 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 88 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 88 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 88 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 88 (arithmetic_operator -> PERCENT .)
    EXC_DOT         reduce using rule 88 (arithmetic_operator -> PERCENT .)
    PLUS            reduce using rule 88 (arithmetic_operator -> PERCENT .)
    MINUS           reduce using rule 88 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 88 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 88 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 88 (arithmetic_operator -> PERCENT .)


state 81

    (89) arithmetic_operator -> TIMES .

    INCREMENT       reduce using rule 89 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 89 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 89 (arithmetic_operator -> TIMES .)
    EXIT            reduce using rule 89 (arithmetic_operator -> TIMES .)
    DIE             reduce using rule 89 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 89 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 89 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 89 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 89 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 89 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 89 (arithmetic_operator -> TIMES .)
    EXC_DOT         reduce using rule 89 (arithmetic_operator -> TIMES .)
    PLUS            reduce using rule 89 (arithmetic_operator -> TIMES .)
    MINUS           reduce using rule 89 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 89 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 89 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 89 (arithmetic_operator -> TIMES .)


state 82

    (90) arithmetic_operator -> MINUS .

    INCREMENT       reduce using rule 90 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 90 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 90 (arithmetic_operator -> MINUS .)
    EXIT            reduce using rule 90 (arithmetic_operator -> MINUS .)
    DIE             reduce using rule 90 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 90 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 90 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 90 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 90 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 90 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 90 (arithmetic_operator -> MINUS .)
    EXC_DOT         reduce using rule 90 (arithmetic_operator -> MINUS .)
    PLUS            reduce using rule 90 (arithmetic_operator -> MINUS .)
    MINUS           reduce using rule 90 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 90 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 90 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 90 (arithmetic_operator -> MINUS .)


state 83

    (13) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (14) statement -> GLOBAL global_var . SEMICOLON
    (40) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (41) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       shift and go to state 144
    COLON           shift and go to state 145

    statement_COLON_GLOBAL         shift and go to state 143

state 84

    (37) global_var -> VARIABLE .

    SEMICOLON       reduce using rule 37 (global_var -> VARIABLE .)
    COLON           reduce using rule 37 (global_var -> VARIABLE .)


state 85

    (38) global_var -> DOLAR . VARIABLE
    (39) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 146
    LKEY            shift and go to state 147


state 86

    (99) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 99 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 99 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 99 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 99 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 99 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 99 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 99 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 99 (expr -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 99 (expr -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 99 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 99 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 99 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 99 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 99 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 99 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 99 (expr -> INCREMENT variable .)
    COLON           reduce using rule 99 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 99 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 99 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 99 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 99 (expr -> INCREMENT variable .)


state 87

    (100) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 100 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 100 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 100 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 100 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 100 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 100 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 100 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 100 (expr -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 100 (expr -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 100 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 100 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 100 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 100 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 100 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 100 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 100 (expr -> variable INCREMENT .)
    COLON           reduce using rule 100 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 100 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 100 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 100 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 100 (expr -> variable INCREMENT .)


state 88

    (102) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 102 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 102 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 102 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 102 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 102 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 102 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 102 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 102 (expr -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 102 (expr -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 102 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 102 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 102 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 102 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 102 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 102 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 102 (expr -> variable DECREMENT .)
    COLON           reduce using rule 102 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 102 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 102 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 102 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 102 (expr -> variable DECREMENT .)


state 89

    (103) expr -> variable LBRACKET . expr RBRACKET
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 21
    expr                           shift and go to state 148
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 90

    (108) expr -> variable assign_operator . expr
    (109) expr -> variable assign_operator . AMPERSAND expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 150
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 21
    expr                           shift and go to state 149
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 91

    (80) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    EXC_DOT         reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 80 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 80 (assign_operator -> ADD_ASSIGN .)


state 92

    (81) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    EXC_DOT         reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 81 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 81 (assign_operator -> SUB_ASSIGN .)


state 93

    (82) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    EXC_DOT         reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 82 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 82 (assign_operator -> MOD_ASSIGN .)


state 94

    (83) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    EXC_DOT         reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 83 (assign_operator -> PLUS_ASSIGN .)


state 95

    (84) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    EXC_DOT         reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 84 (assign_operator -> DIVIDE_ASSIGN .)


state 96

    (85) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 85 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 85 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 85 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 85 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 85 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 85 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 85 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 85 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 85 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 85 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 85 (assign_operator -> ASSIGN .)
    EXC_DOT         reduce using rule 85 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 85 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 85 (assign_operator -> ASSIGN .)
    ID              reduce using rule 85 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 85 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 85 (assign_operator -> ASSIGN .)


state 97

    (101) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 101 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 101 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 101 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 101 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 101 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 101 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 101 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 101 (expr -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 101 (expr -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 101 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 101 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 101 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 101 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 101 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 101 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 101 (expr -> DECREMENT variable .)
    COLON           reduce using rule 101 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 101 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 101 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 101 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 101 (expr -> DECREMENT variable .)


state 98

    (105) expr -> unary_operator expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 105 (expr -> unary_operator expr .)
    RPAREN          reduce using rule 105 (expr -> unary_operator expr .)
    COLON           reduce using rule 105 (expr -> unary_operator expr .)
    DDOT            reduce using rule 105 (expr -> unary_operator expr .)
    RBRACKET        reduce using rule 105 (expr -> unary_operator expr .)
    ATTR_ASSOC      reduce using rule 105 (expr -> unary_operator expr .)
    RKEY            reduce using rule 105 (expr -> unary_operator expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

  ! INTE_DOT        [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! EQUALS          [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! PLUS            [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! DIVIDE          [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! PERCENT         [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! TIMES           [ reduce using rule 105 (expr -> unary_operator expr .) ]
  ! MINUS           [ reduce using rule 105 (expr -> unary_operator expr .) ]

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 99

    (112) expr -> EXIT expr_EXIT .

    SEMICOLON       reduce using rule 112 (expr -> EXIT expr_EXIT .)
    INTE_DOT        reduce using rule 112 (expr -> EXIT expr_EXIT .)
    EQUALS          reduce using rule 112 (expr -> EXIT expr_EXIT .)
    GREAT_THAN      reduce using rule 112 (expr -> EXIT expr_EXIT .)
    LESS_THAN       reduce using rule 112 (expr -> EXIT expr_EXIT .)
    LESS_EQUAL      reduce using rule 112 (expr -> EXIT expr_EXIT .)
    GREAT_EQUAL     reduce using rule 112 (expr -> EXIT expr_EXIT .)
    NOT_EQUAL       reduce using rule 112 (expr -> EXIT expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 112 (expr -> EXIT expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 112 (expr -> EXIT expr_EXIT .)
    PLUS            reduce using rule 112 (expr -> EXIT expr_EXIT .)
    DIVIDE          reduce using rule 112 (expr -> EXIT expr_EXIT .)
    PERCENT         reduce using rule 112 (expr -> EXIT expr_EXIT .)
    TIMES           reduce using rule 112 (expr -> EXIT expr_EXIT .)
    MINUS           reduce using rule 112 (expr -> EXIT expr_EXIT .)
    RPAREN          reduce using rule 112 (expr -> EXIT expr_EXIT .)
    COLON           reduce using rule 112 (expr -> EXIT expr_EXIT .)
    DDOT            reduce using rule 112 (expr -> EXIT expr_EXIT .)
    RBRACKET        reduce using rule 112 (expr -> EXIT expr_EXIT .)
    ATTR_ASSOC      reduce using rule 112 (expr -> EXIT expr_EXIT .)
    RKEY            reduce using rule 112 (expr -> EXIT expr_EXIT .)


state 100

    (137) expr_EXIT -> exit_expr .

    SEMICOLON       reduce using rule 137 (expr_EXIT -> exit_expr .)
    INTE_DOT        reduce using rule 137 (expr_EXIT -> exit_expr .)
    EQUALS          reduce using rule 137 (expr_EXIT -> exit_expr .)
    GREAT_THAN      reduce using rule 137 (expr_EXIT -> exit_expr .)
    LESS_THAN       reduce using rule 137 (expr_EXIT -> exit_expr .)
    LESS_EQUAL      reduce using rule 137 (expr_EXIT -> exit_expr .)
    GREAT_EQUAL     reduce using rule 137 (expr_EXIT -> exit_expr .)
    NOT_EQUAL       reduce using rule 137 (expr_EXIT -> exit_expr .)
    LEFT_LOGICAL    reduce using rule 137 (expr_EXIT -> exit_expr .)
    RIGHT_LOGICAL   reduce using rule 137 (expr_EXIT -> exit_expr .)
    PLUS            reduce using rule 137 (expr_EXIT -> exit_expr .)
    DIVIDE          reduce using rule 137 (expr_EXIT -> exit_expr .)
    PERCENT         reduce using rule 137 (expr_EXIT -> exit_expr .)
    TIMES           reduce using rule 137 (expr_EXIT -> exit_expr .)
    MINUS           reduce using rule 137 (expr_EXIT -> exit_expr .)
    RPAREN          reduce using rule 137 (expr_EXIT -> exit_expr .)
    COLON           reduce using rule 137 (expr_EXIT -> exit_expr .)
    DDOT            reduce using rule 137 (expr_EXIT -> exit_expr .)
    RBRACKET        reduce using rule 137 (expr_EXIT -> exit_expr .)
    ATTR_ASSOC      reduce using rule 137 (expr_EXIT -> exit_expr .)
    RKEY            reduce using rule 137 (expr_EXIT -> exit_expr .)


state 101

    (139) exit_expr -> LPAREN . expr RPAREN
    (140) exit_expr -> LPAREN . RPAREN
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 152
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 151
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 102

    (113) expr -> DIE expr_EXIT .

    SEMICOLON       reduce using rule 113 (expr -> DIE expr_EXIT .)
    INTE_DOT        reduce using rule 113 (expr -> DIE expr_EXIT .)
    EQUALS          reduce using rule 113 (expr -> DIE expr_EXIT .)
    GREAT_THAN      reduce using rule 113 (expr -> DIE expr_EXIT .)
    LESS_THAN       reduce using rule 113 (expr -> DIE expr_EXIT .)
    LESS_EQUAL      reduce using rule 113 (expr -> DIE expr_EXIT .)
    GREAT_EQUAL     reduce using rule 113 (expr -> DIE expr_EXIT .)
    NOT_EQUAL       reduce using rule 113 (expr -> DIE expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 113 (expr -> DIE expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 113 (expr -> DIE expr_EXIT .)
    PLUS            reduce using rule 113 (expr -> DIE expr_EXIT .)
    DIVIDE          reduce using rule 113 (expr -> DIE expr_EXIT .)
    PERCENT         reduce using rule 113 (expr -> DIE expr_EXIT .)
    TIMES           reduce using rule 113 (expr -> DIE expr_EXIT .)
    MINUS           reduce using rule 113 (expr -> DIE expr_EXIT .)
    RPAREN          reduce using rule 113 (expr -> DIE expr_EXIT .)
    COLON           reduce using rule 113 (expr -> DIE expr_EXIT .)
    DDOT            reduce using rule 113 (expr -> DIE expr_EXIT .)
    RBRACKET        reduce using rule 113 (expr -> DIE expr_EXIT .)
    ATTR_ASSOC      reduce using rule 113 (expr -> DIE expr_EXIT .)
    RKEY            reduce using rule 113 (expr -> DIE expr_EXIT .)


state 103

    (114) expr -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (115) expr -> ARRAY_TYPE LPAREN . RPAREN
    (181) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (182) array_pair_list -> . array_pair
    (183) array_pair -> . expr
    (184) array_pair -> . expr ATTR_ASSOC expr
    (185) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (186) array_pair -> . AMPERSAND variable
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 154
    AMPERSAND       shift and go to state 157
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    array_pair_list                shift and go to state 153
    array_pair                     shift and go to state 155
    expr                           shift and go to state 156
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 104

    (15) if_statement -> statement_if if_statement_complement .

    FUNCTION        reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    GLOBAL          reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    INCREMENT       reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    DECREMENT       reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    LPAREN          reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    EXIT            reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    DIE             reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    ARRAY_TYPE      reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    NUMBER_REAL     reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    NUMBER_INTEGER  reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    TRUE            reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    FALSE           reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    WHILE           reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    DO              reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    FOR             reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    BREAK           reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    CONTINUE        reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    RETURN          reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    EXC_DOT         reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    PLUS            reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    MINUS           reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    ID              reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    IF              reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    DOLAR           reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    VARIABLE        reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    END_PROGRAM     reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    RKEY            reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    ELSEIF          reduce using rule 15 (if_statement -> statement_if if_statement_complement .)
    ELSE            reduce using rule 15 (if_statement -> statement_if if_statement_complement .)


state 105

    (17) if_statement_complement -> statement_elseif .
    (18) if_statement_complement -> statement_elseif . statement_else
    (47) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 17 (if_statement_complement -> statement_elseif .)
    GLOBAL          reduce using rule 17 (if_statement_complement -> statement_elseif .)
    INCREMENT       reduce using rule 17 (if_statement_complement -> statement_elseif .)
    DECREMENT       reduce using rule 17 (if_statement_complement -> statement_elseif .)
    LPAREN          reduce using rule 17 (if_statement_complement -> statement_elseif .)
    EXIT            reduce using rule 17 (if_statement_complement -> statement_elseif .)
    DIE             reduce using rule 17 (if_statement_complement -> statement_elseif .)
    ARRAY_TYPE      reduce using rule 17 (if_statement_complement -> statement_elseif .)
    NUMBER_REAL     reduce using rule 17 (if_statement_complement -> statement_elseif .)
    NUMBER_INTEGER  reduce using rule 17 (if_statement_complement -> statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 17 (if_statement_complement -> statement_elseif .)
    TRUE            reduce using rule 17 (if_statement_complement -> statement_elseif .)
    FALSE           reduce using rule 17 (if_statement_complement -> statement_elseif .)
    WHILE           reduce using rule 17 (if_statement_complement -> statement_elseif .)
    DO              reduce using rule 17 (if_statement_complement -> statement_elseif .)
    FOR             reduce using rule 17 (if_statement_complement -> statement_elseif .)
    BREAK           reduce using rule 17 (if_statement_complement -> statement_elseif .)
    CONTINUE        reduce using rule 17 (if_statement_complement -> statement_elseif .)
    RETURN          reduce using rule 17 (if_statement_complement -> statement_elseif .)
    EXC_DOT         reduce using rule 17 (if_statement_complement -> statement_elseif .)
    PLUS            reduce using rule 17 (if_statement_complement -> statement_elseif .)
    MINUS           reduce using rule 17 (if_statement_complement -> statement_elseif .)
    ID              reduce using rule 17 (if_statement_complement -> statement_elseif .)
    IF              reduce using rule 17 (if_statement_complement -> statement_elseif .)
    DOLAR           reduce using rule 17 (if_statement_complement -> statement_elseif .)
    VARIABLE        reduce using rule 17 (if_statement_complement -> statement_elseif .)
    END_PROGRAM     reduce using rule 17 (if_statement_complement -> statement_elseif .)
    RKEY            reduce using rule 17 (if_statement_complement -> statement_elseif .)
    ELSEIF          reduce using rule 17 (if_statement_complement -> statement_elseif .)
    ELSE            shift and go to state 108

  ! ELSE            [ reduce using rule 17 (if_statement_complement -> statement_elseif .) ]

    statement_else                 shift and go to state 158

state 106

    (19) if_statement_complement -> statement_else .

    FUNCTION        reduce using rule 19 (if_statement_complement -> statement_else .)
    GLOBAL          reduce using rule 19 (if_statement_complement -> statement_else .)
    INCREMENT       reduce using rule 19 (if_statement_complement -> statement_else .)
    DECREMENT       reduce using rule 19 (if_statement_complement -> statement_else .)
    LPAREN          reduce using rule 19 (if_statement_complement -> statement_else .)
    EXIT            reduce using rule 19 (if_statement_complement -> statement_else .)
    DIE             reduce using rule 19 (if_statement_complement -> statement_else .)
    ARRAY_TYPE      reduce using rule 19 (if_statement_complement -> statement_else .)
    NUMBER_REAL     reduce using rule 19 (if_statement_complement -> statement_else .)
    NUMBER_INTEGER  reduce using rule 19 (if_statement_complement -> statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 19 (if_statement_complement -> statement_else .)
    TRUE            reduce using rule 19 (if_statement_complement -> statement_else .)
    FALSE           reduce using rule 19 (if_statement_complement -> statement_else .)
    WHILE           reduce using rule 19 (if_statement_complement -> statement_else .)
    DO              reduce using rule 19 (if_statement_complement -> statement_else .)
    FOR             reduce using rule 19 (if_statement_complement -> statement_else .)
    BREAK           reduce using rule 19 (if_statement_complement -> statement_else .)
    CONTINUE        reduce using rule 19 (if_statement_complement -> statement_else .)
    RETURN          reduce using rule 19 (if_statement_complement -> statement_else .)
    EXC_DOT         reduce using rule 19 (if_statement_complement -> statement_else .)
    PLUS            reduce using rule 19 (if_statement_complement -> statement_else .)
    MINUS           reduce using rule 19 (if_statement_complement -> statement_else .)
    ID              reduce using rule 19 (if_statement_complement -> statement_else .)
    IF              reduce using rule 19 (if_statement_complement -> statement_else .)
    DOLAR           reduce using rule 19 (if_statement_complement -> statement_else .)
    VARIABLE        reduce using rule 19 (if_statement_complement -> statement_else .)
    END_PROGRAM     reduce using rule 19 (if_statement_complement -> statement_else .)
    RKEY            reduce using rule 19 (if_statement_complement -> statement_else .)
    ELSEIF          reduce using rule 19 (if_statement_complement -> statement_else .)
    ELSE            reduce using rule 19 (if_statement_complement -> statement_else .)


state 107

    (46) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT
    (44) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 110

    expr_parentheses               shift and go to state 159

state 108

    (47) statement_else -> ELSE . statement_BLOCK_OPT
    (195) statement_BLOCK_OPT -> . statement
    (196) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (197) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 113
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 160
    statement                      shift and go to state 112
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 109

    (20) while_statement -> WHILE expr_parentheses . statement_BLOCK_OPT
    (195) statement_BLOCK_OPT -> . statement
    (196) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (197) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 113
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 161
    statement                      shift and go to state 112
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 110

    (44) expr_parentheses -> LPAREN . expr RPAREN
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 162
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 111

    (21) do_statement -> DO statement_BLOCK_OPT . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 163


state 112

    (195) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    EXC_DOT         reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    PLUS            reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 195 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 195 (statement_BLOCK_OPT -> statement .)


state 113

    (196) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (197) statement_BLOCK_OPT -> LKEY . RKEY
    (191) statement_MUL -> . statement statement_MUL
    (192) statement_MUL -> . statement
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 165
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_MUL                  shift and go to state 164
    statement                      shift and go to state 166
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 114

    (28) for_statement -> FOR LPAREN . for_parameters RPAREN statement_BLOCK_OPT
    (29) for_parameters -> . SEMICOLON SEMICOLON
    (30) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (31) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (32) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (33) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (34) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (35) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (36) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (50) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (51) for_expr_OPT -> . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 168
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_parameters                 shift and go to state 167
    for_expr_OPT                   shift and go to state 169
    expr                           shift and go to state 170
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 115

    (22) break_statement -> BREAK expr . SEMICOLON
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 171
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 116

    (23) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    EXC_DOT         reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    DOLAR           reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 23 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 23 (break_statement -> BREAK SEMICOLON .)


state 117

    (24) continue_statement -> CONTINUE expr . SEMICOLON
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 172
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 118

    (25) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    EXC_DOT         reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    DOLAR           reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 25 (continue_statement -> CONTINUE SEMICOLON .)


state 119

    (26) return_statement -> RETURN expr . SEMICOLON
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 173
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 120

    (27) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    EXC_DOT         reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    DOLAR           reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 27 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 27 (return_statement -> RETURN SEMICOLON .)


state 121

    (45) statement_if -> IF expr_parentheses . statement_BLOCK_OPT
    (195) statement_BLOCK_OPT -> . statement
    (196) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (197) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 113
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 174
    statement                      shift and go to state 112
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 122

    (143) base_variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LBRACKET        reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 143 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)


state 123

    (147) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 129


state 124

    (144) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 144 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 125

    (204) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (205) reference_variable_SELECTOR -> selector .
    (204) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (205) reference_variable_SELECTOR -> . selector
    (148) selector -> . LBRACKET expr RBRACKET
    (149) selector -> . LBRACKET RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    DECREMENT       reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    ADD_ASSIGN      reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    SUB_ASSIGN      reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    MOD_ASSIGN      reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    PLUS_ASSIGN     reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    DIVIDE_ASSIGN   reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    ASSIGN          reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    SEMICOLON       reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    INTE_DOT        reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    EQUALS          reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    GREAT_THAN      reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    LESS_THAN       reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    LESS_EQUAL      reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    GREAT_EQUAL     reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    NOT_EQUAL       reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    LEFT_LOGICAL    reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    RIGHT_LOGICAL   reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    PLUS            reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    DIVIDE          reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    PERCENT         reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    TIMES           reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    MINUS           reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    RPAREN          reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    COLON           reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    DDOT            reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    RBRACKET        reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    ATTR_ASSOC      reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    RKEY            reduce using rule 205 (reference_variable_SELECTOR -> selector .)
    LBRACKET        shift and go to state 126

  ! LBRACKET        [ reduce using rule 205 (reference_variable_SELECTOR -> selector .) ]

    selector                       shift and go to state 125
    reference_variable_SELECTOR    shift and go to state 175

state 126

    (148) selector -> LBRACKET . expr RBRACKET
    (149) selector -> LBRACKET . RBRACKET
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RBRACKET        shift and go to state 177
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 176
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 127

    (206) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> DOLAR .
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 207 (simple_indirect_reference_DOLAR -> DOLAR .)
    DOLAR           shift and go to state 127

  ! DOLAR           [ reduce using rule 207 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 128

state 128

    (206) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 206 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 206 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 129

    (147) compound_variable -> DOLAR LKEY . expr RKEY
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 178
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 130

    (150) function_declaration_statement -> FUNCTION ID LPAREN . RPAREN LKEY RKEY
    (155) function_declaration_statement -> FUNCTION ID LPAREN . parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> FUNCTION ID LPAREN . RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> FUNCTION ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (158) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (159) parameter_list -> . parameter
    (160) parameter -> . VARIABLE
    (161) parameter -> . VARIABLE ASSIGN static_scalar
    (162) parameter -> . parameter_type VARIABLE
    (163) parameter -> . parameter_type AMPERSAND VARIABLE
    (164) parameter -> . AMPERSAND VARIABLE
    (165) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (166) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (167) parameter_type -> . INT_TYPE
    (168) parameter_type -> . BOOLEAN_TYPE
    (169) parameter_type -> . STRING_TYPE
    (170) parameter_type -> . FLOAT_TYPE
    (171) parameter_type -> . ARRAY_TYPE
    (172) parameter_type -> . BOOL_TYPE
    (173) parameter_type -> . REAL_TYPE
    (174) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 179
    VARIABLE        shift and go to state 182
    AMPERSAND       shift and go to state 184
    INT_TYPE        shift and go to state 185
    BOOLEAN_TYPE    shift and go to state 186
    STRING_TYPE     shift and go to state 187
    FLOAT_TYPE      shift and go to state 188
    ARRAY_TYPE      shift and go to state 189
    BOOL_TYPE       shift and go to state 190
    REAL_TYPE       shift and go to state 191
    DOUBLE_TYPE     shift and go to state 192

    parameter_list                 shift and go to state 180
    parameter                      shift and go to state 181
    parameter_type                 shift and go to state 183

state 131

    (151) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 193


state 132

    (52) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 194


state 133

    (53) function_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    INTE_DOT        reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 53 (function_call -> ID LPAREN RPAREN .)
    RKEY            reduce using rule 53 (function_call -> ID LPAREN RPAREN .)


state 134

    (54) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (55) function_call_parameter_list -> function_call_parameter .
    (198) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (199) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter

    RPAREN          reduce using rule 55 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 196

    function_call_list_COLON_FUNCTION shift and go to state 195

state 135

    (56) function_call_parameter -> variable .
    (100) expr -> variable . INCREMENT
    (102) expr -> variable . DECREMENT
    (103) expr -> variable . LBRACKET expr RBRACKET
    (108) expr -> variable . assign_operator expr
    (109) expr -> variable . assign_operator AMPERSAND expr
    (116) expr -> variable .
    (80) assign_operator -> . ADD_ASSIGN
    (81) assign_operator -> . SUB_ASSIGN
    (82) assign_operator -> . MOD_ASSIGN
    (83) assign_operator -> . PLUS_ASSIGN
    (84) assign_operator -> . DIVIDE_ASSIGN
    (85) assign_operator -> . ASSIGN

  ! reduce/reduce conflict for COLON resolved using rule 56 (function_call_parameter -> variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 56 (function_call_parameter -> variable .)
    COLON           reduce using rule 56 (function_call_parameter -> variable .)
    RPAREN          reduce using rule 56 (function_call_parameter -> variable .)
    INCREMENT       shift and go to state 87
    DECREMENT       shift and go to state 88
    LBRACKET        shift and go to state 89
    INTE_DOT        reduce using rule 116 (expr -> variable .)
    EQUALS          reduce using rule 116 (expr -> variable .)
    GREAT_THAN      reduce using rule 116 (expr -> variable .)
    LESS_THAN       reduce using rule 116 (expr -> variable .)
    LESS_EQUAL      reduce using rule 116 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 116 (expr -> variable .)
    NOT_EQUAL       reduce using rule 116 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 116 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 116 (expr -> variable .)
    PLUS            reduce using rule 116 (expr -> variable .)
    DIVIDE          reduce using rule 116 (expr -> variable .)
    PERCENT         reduce using rule 116 (expr -> variable .)
    TIMES           reduce using rule 116 (expr -> variable .)
    MINUS           reduce using rule 116 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 91
    SUB_ASSIGN      shift and go to state 92
    MOD_ASSIGN      shift and go to state 93
    PLUS_ASSIGN     shift and go to state 94
    DIVIDE_ASSIGN   shift and go to state 95
    ASSIGN          shift and go to state 96

  ! COLON           [ reduce using rule 116 (expr -> variable .) ]
  ! RPAREN          [ reduce using rule 116 (expr -> variable .) ]

    assign_operator                shift and go to state 90

state 136

    (57) function_call_parameter -> expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    COLON           reduce using rule 57 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 57 (function_call_parameter -> expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 137

    (58) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 197


state 138

    (104) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 104 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 104 (expr -> LPAREN expr RPAREN .)


state 139

    (111) expr -> LPAREN type_cast_operator RPAREN . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 198
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 140

    (106) expr -> expr INTE_DOT expr . DDOT expr
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    DDOT            shift and go to state 199
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 141

    (107) expr -> expr comparission_operator expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 107 (expr -> expr comparission_operator expr .)
    RPAREN          reduce using rule 107 (expr -> expr comparission_operator expr .)
    COLON           reduce using rule 107 (expr -> expr comparission_operator expr .)
    DDOT            reduce using rule 107 (expr -> expr comparission_operator expr .)
    RBRACKET        reduce using rule 107 (expr -> expr comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 107 (expr -> expr comparission_operator expr .)
    RKEY            reduce using rule 107 (expr -> expr comparission_operator expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

  ! INTE_DOT        [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! EQUALS          [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! PLUS            [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! DIVIDE          [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! PERCENT         [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! TIMES           [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]
  ! MINUS           [ reduce using rule 107 (expr -> expr comparission_operator expr .) ]

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 142

    (110) expr -> expr arithmetic_operator expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 110 (expr -> expr arithmetic_operator expr .)
    RPAREN          reduce using rule 110 (expr -> expr arithmetic_operator expr .)
    COLON           reduce using rule 110 (expr -> expr arithmetic_operator expr .)
    DDOT            reduce using rule 110 (expr -> expr arithmetic_operator expr .)
    RBRACKET        reduce using rule 110 (expr -> expr arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 110 (expr -> expr arithmetic_operator expr .)
    RKEY            reduce using rule 110 (expr -> expr arithmetic_operator expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

  ! INTE_DOT        [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! EQUALS          [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! PLUS            [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! DIVIDE          [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! PERCENT         [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! TIMES           [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]
  ! MINUS           [ reduce using rule 110 (expr -> expr arithmetic_operator expr .) ]

    arithmetic_operator            shift and go to state 69
    comparission_operator          shift and go to state 68

state 143

    (13) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 200


state 144

    (14) statement -> GLOBAL global_var SEMICOLON .

    FUNCTION        reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    GLOBAL          reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    INCREMENT       reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    DECREMENT       reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    LPAREN          reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    EXIT            reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    DIE             reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    ARRAY_TYPE      reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_REAL     reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    TRUE            reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    FALSE           reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    DO              reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    FOR             reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    BREAK           reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    CONTINUE        reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    EXC_DOT         reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    PLUS            reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    ID              reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    IF              reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    DOLAR           reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    VARIABLE        reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    END_PROGRAM     reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    RKEY            reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    ELSEIF          reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> GLOBAL global_var SEMICOLON .)


state 145

    (40) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (41) statement_COLON_GLOBAL -> COLON . global_var
    (37) global_var -> . VARIABLE
    (38) global_var -> . DOLAR VARIABLE
    (39) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 84
    DOLAR           shift and go to state 85

    global_var                     shift and go to state 201

state 146

    (38) global_var -> DOLAR VARIABLE .

    SEMICOLON       reduce using rule 38 (global_var -> DOLAR VARIABLE .)
    COLON           reduce using rule 38 (global_var -> DOLAR VARIABLE .)


state 147

    (39) global_var -> DOLAR LKEY . expr RKEY
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 202
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 148

    (103) expr -> variable LBRACKET expr . RBRACKET
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    RBRACKET        shift and go to state 203
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 149

    (108) expr -> variable assign_operator expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 108 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 108 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 108 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 108 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 108 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 108 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 108 (expr -> variable assign_operator expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

  ! INTE_DOT        [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! PLUS            [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! DIVIDE          [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! PERCENT         [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! TIMES           [ reduce using rule 108 (expr -> variable assign_operator expr .) ]
  ! MINUS           [ reduce using rule 108 (expr -> variable assign_operator expr .) ]

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 150

    (109) expr -> variable assign_operator AMPERSAND . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 21
    expr                           shift and go to state 204
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 151

    (139) exit_expr -> LPAREN expr . RPAREN
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 205
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 152

    (140) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    INTE_DOT        reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    EQUALS          reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    PLUS            reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    PERCENT         reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    TIMES           reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    RPAREN          reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    COLON           reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    DDOT            reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 140 (exit_expr -> LPAREN RPAREN .)
    RKEY            reduce using rule 140 (exit_expr -> LPAREN RPAREN .)


state 153

    (114) expr -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 206


state 154

    (115) expr -> ARRAY_TYPE LPAREN RPAREN .

    SEMICOLON       reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    INTE_DOT        reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    EQUALS          reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_THAN       reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    PLUS            reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    DIVIDE          reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    PERCENT         reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    TIMES           reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    MINUS           reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RPAREN          reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    COLON           reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    DDOT            reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RBRACKET        reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RKEY            reduce using rule 115 (expr -> ARRAY_TYPE LPAREN RPAREN .)


state 155

    (181) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (182) array_pair_list -> array_pair .
    (208) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (209) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 182 (array_pair_list -> array_pair .)
    COLON           shift and go to state 208

    array_pair_list_ARR_PAIR       shift and go to state 207

state 156

    (183) array_pair -> expr .
    (184) array_pair -> expr . ATTR_ASSOC expr
    (185) array_pair -> expr . ATTR_ASSOC AMPERSAND variable
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    COLON           reduce using rule 183 (array_pair -> expr .)
    RPAREN          reduce using rule 183 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 209
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 157

    (186) array_pair -> AMPERSAND . variable
    (141) variable -> . base_variable
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 210
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 158

    (18) if_statement_complement -> statement_elseif statement_else .

    FUNCTION        reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    GLOBAL          reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    INCREMENT       reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    DECREMENT       reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    LPAREN          reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    EXIT            reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    DIE             reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    TRUE            reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    FALSE           reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    WHILE           reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    DO              reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    FOR             reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    BREAK           reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    CONTINUE        reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    RETURN          reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    EXC_DOT         reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    PLUS            reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    MINUS           reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    ID              reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    IF              reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    DOLAR           reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    VARIABLE        reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    RKEY            reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    ELSEIF          reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)
    ELSE            reduce using rule 18 (if_statement_complement -> statement_elseif statement_else .)


state 159

    (46) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT
    (195) statement_BLOCK_OPT -> . statement
    (196) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (197) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 113
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 211
    statement                      shift and go to state 112
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 160

    (47) statement_else -> ELSE statement_BLOCK_OPT .

    FUNCTION        reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    PLUS            reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSE            reduce using rule 47 (statement_else -> ELSE statement_BLOCK_OPT .)


state 161

    (20) while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    PLUS            reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 20 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)


state 162

    (44) expr_parentheses -> LPAREN expr . RPAREN
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 212
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 163

    (21) do_statement -> DO statement_BLOCK_OPT WHILE . expr_parentheses SEMICOLON
    (44) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 110

    expr_parentheses               shift and go to state 213

state 164

    (196) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 214


state 165

    (197) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    INCREMENT       reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    DECREMENT       reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXC_DOT         reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    PLUS            reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    MINUS           reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    DOLAR           reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 197 (statement_BLOCK_OPT -> LKEY RKEY .)


state 166

    (191) statement_MUL -> statement . statement_MUL
    (192) statement_MUL -> statement .
    (191) statement_MUL -> . statement statement_MUL
    (192) statement_MUL -> . statement
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 192 (statement_MUL -> statement .)
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement                      shift and go to state 166
    statement_MUL                  shift and go to state 215
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 167

    (28) for_statement -> FOR LPAREN for_parameters . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 216


state 168

    (29) for_parameters -> SEMICOLON . SEMICOLON
    (33) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (34) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (35) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (50) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (51) for_expr_OPT -> . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 217
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 218
    expr                           shift and go to state 170
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 169

    (30) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (31) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (32) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (36) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 219


state 170

    (50) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (51) for_expr_OPT -> expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (193) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (194) for_expr_COLON_EXPR -> . COLON expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 51 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 51 (for_expr_OPT -> expr .)
    INTE_DOT        shift and go to state 67
    COLON           shift and go to state 221
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    for_expr_COLON_EXPR            shift and go to state 220
    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 171

    (22) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    EXC_DOT         reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    PLUS            reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    MINUS           reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    DOLAR           reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 22 (break_statement -> BREAK expr SEMICOLON .)


state 172

    (24) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXC_DOT         reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    PLUS            reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    MINUS           reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    DOLAR           reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 24 (continue_statement -> CONTINUE expr SEMICOLON .)


state 173

    (26) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    EXC_DOT         reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    DOLAR           reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 26 (return_statement -> RETURN expr SEMICOLON .)


state 174

    (45) statement_if -> IF expr_parentheses statement_BLOCK_OPT .

    ELSEIF          reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    PLUS            reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 45 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)


state 175

    (204) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 204 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 176

    (148) selector -> LBRACKET expr . RBRACKET
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    RBRACKET        shift and go to state 222
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 177

    (149) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    PLUS_ASSIGN     reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    LEFT_LOGICAL    reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 149 (selector -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 149 (selector -> LBRACKET RBRACKET .)


state 178

    (147) compound_variable -> DOLAR LKEY expr . RKEY
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 223
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 179

    (150) function_declaration_statement -> FUNCTION ID LPAREN RPAREN . LKEY RKEY
    (156) function_declaration_statement -> FUNCTION ID LPAREN RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 224


state 180

    (155) function_declaration_statement -> FUNCTION ID LPAREN parameter_list . RPAREN LKEY RKEY
    (157) function_declaration_statement -> FUNCTION ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 225


state 181

    (158) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (159) parameter_list -> parameter .
    (202) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (203) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 159 (parameter_list -> parameter .)
    COLON           shift and go to state 227

    parameter_list_COLON_PARAMETER shift and go to state 226

state 182

    (160) parameter -> VARIABLE .
    (161) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 160 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 160 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 228


state 183

    (162) parameter -> parameter_type . VARIABLE
    (163) parameter -> parameter_type . AMPERSAND VARIABLE
    (166) parameter -> parameter_type . AMPERSAND VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 229
    AMPERSAND       shift and go to state 230


state 184

    (164) parameter -> AMPERSAND . VARIABLE
    (165) parameter -> AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 231


state 185

    (167) parameter_type -> INT_TYPE .

    VARIABLE        reduce using rule 167 (parameter_type -> INT_TYPE .)
    AMPERSAND       reduce using rule 167 (parameter_type -> INT_TYPE .)


state 186

    (168) parameter_type -> BOOLEAN_TYPE .

    VARIABLE        reduce using rule 168 (parameter_type -> BOOLEAN_TYPE .)
    AMPERSAND       reduce using rule 168 (parameter_type -> BOOLEAN_TYPE .)


state 187

    (169) parameter_type -> STRING_TYPE .

    VARIABLE        reduce using rule 169 (parameter_type -> STRING_TYPE .)
    AMPERSAND       reduce using rule 169 (parameter_type -> STRING_TYPE .)


state 188

    (170) parameter_type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 170 (parameter_type -> FLOAT_TYPE .)
    AMPERSAND       reduce using rule 170 (parameter_type -> FLOAT_TYPE .)


state 189

    (171) parameter_type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 171 (parameter_type -> ARRAY_TYPE .)
    AMPERSAND       reduce using rule 171 (parameter_type -> ARRAY_TYPE .)


state 190

    (172) parameter_type -> BOOL_TYPE .

    VARIABLE        reduce using rule 172 (parameter_type -> BOOL_TYPE .)
    AMPERSAND       reduce using rule 172 (parameter_type -> BOOL_TYPE .)


state 191

    (173) parameter_type -> REAL_TYPE .

    VARIABLE        reduce using rule 173 (parameter_type -> REAL_TYPE .)
    AMPERSAND       reduce using rule 173 (parameter_type -> REAL_TYPE .)


state 192

    (174) parameter_type -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 174 (parameter_type -> DOUBLE_TYPE .)
    AMPERSAND       reduce using rule 174 (parameter_type -> DOUBLE_TYPE .)


state 193

    (151) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . RPAREN LKEY RKEY
    (152) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (158) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (159) parameter_list -> . parameter
    (160) parameter -> . VARIABLE
    (161) parameter -> . VARIABLE ASSIGN static_scalar
    (162) parameter -> . parameter_type VARIABLE
    (163) parameter -> . parameter_type AMPERSAND VARIABLE
    (164) parameter -> . AMPERSAND VARIABLE
    (165) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (166) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (167) parameter_type -> . INT_TYPE
    (168) parameter_type -> . BOOLEAN_TYPE
    (169) parameter_type -> . STRING_TYPE
    (170) parameter_type -> . FLOAT_TYPE
    (171) parameter_type -> . ARRAY_TYPE
    (172) parameter_type -> . BOOL_TYPE
    (173) parameter_type -> . REAL_TYPE
    (174) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 232
    VARIABLE        shift and go to state 182
    AMPERSAND       shift and go to state 184
    INT_TYPE        shift and go to state 185
    BOOLEAN_TYPE    shift and go to state 186
    STRING_TYPE     shift and go to state 187
    FLOAT_TYPE      shift and go to state 188
    ARRAY_TYPE      shift and go to state 189
    BOOL_TYPE       shift and go to state 190
    REAL_TYPE       shift and go to state 191
    DOUBLE_TYPE     shift and go to state 192

    parameter_list                 shift and go to state 233
    parameter                      shift and go to state 181
    parameter_type                 shift and go to state 183

state 194

    (52) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 52 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 195

    (54) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 54 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 196

    (198) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (199) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter
    (56) function_call_parameter -> . variable
    (57) function_call_parameter -> . expr
    (58) function_call_parameter -> . AMPERSAND VARIABLE
    (141) variable -> . base_variable
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 137
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    function_call_parameter        shift and go to state 234
    variable                       shift and go to state 135
    expr                           shift and go to state 136
    base_variable                  shift and go to state 40
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 197

    (58) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 58 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 58 (function_call_parameter -> AMPERSAND VARIABLE .)


state 198

    (111) expr -> LPAREN type_cast_operator RPAREN expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

  ! INTE_DOT        [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PLUS            [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! TIMES           [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! MINUS           [ reduce using rule 111 (expr -> LPAREN type_cast_operator RPAREN expr .) ]

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 199

    (106) expr -> expr INTE_DOT expr DDOT . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 235
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 200

    (13) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXC_DOT         reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    PLUS            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    MINUS           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 201

    (40) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (41) statement_COLON_GLOBAL -> COLON global_var .
    (40) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (41) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 41 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 145

    statement_COLON_GLOBAL         shift and go to state 236

state 202

    (39) global_var -> DOLAR LKEY expr . RKEY
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 237
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 203

    (103) expr -> variable LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    COLON           reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 103 (expr -> variable LBRACKET expr RBRACKET .)


state 204

    (109) expr -> variable assign_operator AMPERSAND expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

  ! INTE_DOT        [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PLUS            [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! DIVIDE          [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PERCENT         [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 109 (expr -> variable assign_operator AMPERSAND expr .) ]

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 205

    (139) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 139 (exit_expr -> LPAREN expr RPAREN .)


state 206

    (114) expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 114 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 207

    (181) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 181 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 208

    (208) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (209) array_pair_list_ARR_PAIR -> COLON . array_pair
    (183) array_pair -> . expr
    (184) array_pair -> . expr ATTR_ASSOC expr
    (185) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (186) array_pair -> . AMPERSAND variable
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 157
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    array_pair                     shift and go to state 238
    expr                           shift and go to state 156
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 209

    (184) array_pair -> expr ATTR_ASSOC . expr
    (185) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 240
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 239
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 210

    (186) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 186 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 186 (array_pair -> AMPERSAND variable .)


state 211

    (46) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    PLUS            reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 46 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)


state 212

    (44) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    EXC_DOT         reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 44 (expr_parentheses -> LPAREN expr RPAREN .)


state 213

    (21) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 241


state 214

    (196) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PLUS            reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 196 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 215

    (191) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 191 (statement_MUL -> statement statement_MUL .)


state 216

    (28) for_statement -> FOR LPAREN for_parameters RPAREN . statement_BLOCK_OPT
    (195) statement_BLOCK_OPT -> . statement
    (196) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (197) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 113
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    statement_BLOCK_OPT            shift and go to state 242
    statement                      shift and go to state 112
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 217

    (29) for_parameters -> SEMICOLON SEMICOLON .
    (35) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (50) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (51) for_expr_OPT -> . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 29 (for_parameters -> SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 243
    expr                           shift and go to state 170
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 218

    (33) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (34) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 244


state 219

    (30) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (31) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (32) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (36) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (50) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (51) for_expr_OPT -> . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 246
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 245
    expr                           shift and go to state 170
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 220

    (50) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 50 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 50 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 221

    (193) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (194) for_expr_COLON_EXPR -> COLON . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    expr                           shift and go to state 247
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 222

    (148) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    PLUS_ASSIGN     reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 148 (selector -> LBRACKET expr RBRACKET .)


state 223

    (147) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 147 (compound_variable -> DOLAR LKEY expr RKEY .)


state 224

    (150) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY . RKEY
    (156) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY . inner_statement_MUL RKEY
    (189) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (190) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (150) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (151) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 248
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement_MUL            shift and go to state 249
    inner_statement                shift and go to state 250
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 225

    (155) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN . LKEY RKEY
    (157) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 251


state 226

    (158) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 158 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 227

    (202) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (203) parameter_list_COLON_PARAMETER -> COLON . parameter
    (160) parameter -> . VARIABLE
    (161) parameter -> . VARIABLE ASSIGN static_scalar
    (162) parameter -> . parameter_type VARIABLE
    (163) parameter -> . parameter_type AMPERSAND VARIABLE
    (164) parameter -> . AMPERSAND VARIABLE
    (165) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (166) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (167) parameter_type -> . INT_TYPE
    (168) parameter_type -> . BOOLEAN_TYPE
    (169) parameter_type -> . STRING_TYPE
    (170) parameter_type -> . FLOAT_TYPE
    (171) parameter_type -> . ARRAY_TYPE
    (172) parameter_type -> . BOOL_TYPE
    (173) parameter_type -> . REAL_TYPE
    (174) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 182
    AMPERSAND       shift and go to state 184
    INT_TYPE        shift and go to state 185
    BOOLEAN_TYPE    shift and go to state 186
    STRING_TYPE     shift and go to state 187
    FLOAT_TYPE      shift and go to state 188
    ARRAY_TYPE      shift and go to state 189
    BOOL_TYPE       shift and go to state 190
    REAL_TYPE       shift and go to state 191
    DOUBLE_TYPE     shift and go to state 192

    parameter                      shift and go to state 252
    parameter_type                 shift and go to state 183

state 228

    (161) parameter -> VARIABLE ASSIGN . static_scalar
    (175) static_scalar -> . common_scalar
    (176) static_scalar -> . PLUS static_scalar
    (177) static_scalar -> . MINUS static_scalar
    (178) common_scalar -> . NUMBER_REAL
    (179) common_scalar -> . NUMBER_INTEGER
    (180) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 255
    MINUS           shift and go to state 256
    NUMBER_REAL     shift and go to state 257
    NUMBER_INTEGER  shift and go to state 258
    CONSTANT_ENCAPSED_STRING shift and go to state 259

    static_scalar                  shift and go to state 253
    common_scalar                  shift and go to state 254

state 229

    (162) parameter -> parameter_type VARIABLE .

    COLON           reduce using rule 162 (parameter -> parameter_type VARIABLE .)
    RPAREN          reduce using rule 162 (parameter -> parameter_type VARIABLE .)


state 230

    (163) parameter -> parameter_type AMPERSAND . VARIABLE
    (166) parameter -> parameter_type AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 260


state 231

    (164) parameter -> AMPERSAND VARIABLE .
    (165) parameter -> AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 164 (parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 164 (parameter -> AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 261


state 232

    (151) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN . LKEY RKEY
    (153) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 262


state 233

    (152) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list . RPAREN LKEY RKEY
    (154) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 263


state 234

    (198) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (199) function_call_list_COLON_FUNCTION -> COLON function_call_parameter .
    (198) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (199) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter

    RPAREN          reduce using rule 199 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter .)
    COLON           shift and go to state 196

    function_call_list_COLON_FUNCTION shift and go to state 264

state 235

    (106) expr -> expr INTE_DOT expr DDOT expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

  ! INTE_DOT        [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PLUS            [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 106 (expr -> expr INTE_DOT expr DDOT expr .) ]

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 236

    (40) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 40 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 237

    (39) global_var -> DOLAR LKEY expr RKEY .

    SEMICOLON       reduce using rule 39 (global_var -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 39 (global_var -> DOLAR LKEY expr RKEY .)


state 238

    (208) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (209) array_pair_list_ARR_PAIR -> COLON array_pair .
    (208) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (209) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 209 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 208

    array_pair_list_ARR_PAIR       shift and go to state 265

state 239

    (184) array_pair -> expr ATTR_ASSOC expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    COLON           reduce using rule 184 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 184 (array_pair -> expr ATTR_ASSOC expr .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 240

    (185) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (141) variable -> . base_variable
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    variable                       shift and go to state 266
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 241

    (21) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    INCREMENT       reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DECREMENT       reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXC_DOT         reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    PLUS            reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    MINUS           reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DOLAR           reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 21 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)


state 242

    (28) for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 28 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)


state 243

    (35) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 35 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 244

    (33) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (34) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (50) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (51) for_expr_OPT -> . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 33 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 267
    expr                           shift and go to state 170
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 245

    (31) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (36) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 268


state 246

    (30) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (32) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (50) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (51) for_expr_OPT -> . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 30 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 269
    expr                           shift and go to state 170
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 247

    (193) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (194) for_expr_COLON_EXPR -> COLON expr .
    (106) expr -> expr . INTE_DOT expr DDOT expr
    (107) expr -> expr . comparission_operator expr
    (110) expr -> expr . arithmetic_operator expr
    (193) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (194) for_expr_COLON_EXPR -> . COLON expr
    (91) comparission_operator -> . EQUALS
    (92) comparission_operator -> . GREAT_THAN
    (93) comparission_operator -> . LESS_THAN
    (94) comparission_operator -> . LESS_EQUAL
    (95) comparission_operator -> . GREAT_EQUAL
    (96) comparission_operator -> . NOT_EQUAL
    (97) comparission_operator -> . LEFT_LOGICAL
    (98) comparission_operator -> . RIGHT_LOGICAL
    (86) arithmetic_operator -> . PLUS
    (87) arithmetic_operator -> . DIVIDE
    (88) arithmetic_operator -> . PERCENT
    (89) arithmetic_operator -> . TIMES
    (90) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 194 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 194 (for_expr_COLON_EXPR -> COLON expr .)
    INTE_DOT        shift and go to state 67
    COLON           shift and go to state 221
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    PLUS            shift and go to state 78
    DIVIDE          shift and go to state 79
    PERCENT         shift and go to state 80
    TIMES           shift and go to state 81
    MINUS           shift and go to state 82

    for_expr_COLON_EXPR            shift and go to state 270
    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 248

    (150) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    EXIT            reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DIE             reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    TRUE            reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FALSE           reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    WHILE           reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DO              reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FOR             reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    BREAK           reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    RETURN          reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    PLUS            reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    MINUS           reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    ID              reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    IF              reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    RKEY            reduce using rule 150 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)


state 249

    (156) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 271


state 250

    (189) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (190) inner_statement_MUL -> inner_statement .
    (189) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (190) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (150) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (151) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 190 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement                shift and go to state 250
    inner_statement_MUL            shift and go to state 272
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 251

    (155) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY . RKEY
    (157) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (189) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (190) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (150) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (151) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 273
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement_MUL            shift and go to state 274
    inner_statement                shift and go to state 250
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 252

    (202) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (203) parameter_list_COLON_PARAMETER -> COLON parameter .
    (202) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (203) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 203 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 227

    parameter_list_COLON_PARAMETER shift and go to state 275

state 253

    (161) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 161 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 161 (parameter -> VARIABLE ASSIGN static_scalar .)


state 254

    (175) static_scalar -> common_scalar .

    COLON           reduce using rule 175 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 175 (static_scalar -> common_scalar .)


state 255

    (176) static_scalar -> PLUS . static_scalar
    (175) static_scalar -> . common_scalar
    (176) static_scalar -> . PLUS static_scalar
    (177) static_scalar -> . MINUS static_scalar
    (178) common_scalar -> . NUMBER_REAL
    (179) common_scalar -> . NUMBER_INTEGER
    (180) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 255
    MINUS           shift and go to state 256
    NUMBER_REAL     shift and go to state 257
    NUMBER_INTEGER  shift and go to state 258
    CONSTANT_ENCAPSED_STRING shift and go to state 259

    static_scalar                  shift and go to state 276
    common_scalar                  shift and go to state 254

state 256

    (177) static_scalar -> MINUS . static_scalar
    (175) static_scalar -> . common_scalar
    (176) static_scalar -> . PLUS static_scalar
    (177) static_scalar -> . MINUS static_scalar
    (178) common_scalar -> . NUMBER_REAL
    (179) common_scalar -> . NUMBER_INTEGER
    (180) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 255
    MINUS           shift and go to state 256
    NUMBER_REAL     shift and go to state 257
    NUMBER_INTEGER  shift and go to state 258
    CONSTANT_ENCAPSED_STRING shift and go to state 259

    static_scalar                  shift and go to state 277
    common_scalar                  shift and go to state 254

state 257

    (178) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 178 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 178 (common_scalar -> NUMBER_REAL .)


state 258

    (179) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 179 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 179 (common_scalar -> NUMBER_INTEGER .)


state 259

    (180) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 180 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 180 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 260

    (163) parameter -> parameter_type AMPERSAND VARIABLE .
    (166) parameter -> parameter_type AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 163 (parameter -> parameter_type AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 163 (parameter -> parameter_type AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 278


state 261

    (165) parameter -> AMPERSAND VARIABLE ASSIGN . static_scalar
    (175) static_scalar -> . common_scalar
    (176) static_scalar -> . PLUS static_scalar
    (177) static_scalar -> . MINUS static_scalar
    (178) common_scalar -> . NUMBER_REAL
    (179) common_scalar -> . NUMBER_INTEGER
    (180) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 255
    MINUS           shift and go to state 256
    NUMBER_REAL     shift and go to state 257
    NUMBER_INTEGER  shift and go to state 258
    CONSTANT_ENCAPSED_STRING shift and go to state 259

    static_scalar                  shift and go to state 279
    common_scalar                  shift and go to state 254

state 262

    (151) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY . RKEY
    (153) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY . inner_statement_MUL RKEY
    (189) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (190) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (150) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (151) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 280
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement_MUL            shift and go to state 281
    inner_statement                shift and go to state 250
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 263

    (152) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN . LKEY RKEY
    (154) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 282


state 264

    (198) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 198 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 265

    (208) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 208 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 266

    (185) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 185 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 185 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 267

    (34) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 34 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 268

    (31) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (36) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (50) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (51) for_expr_OPT -> . expr
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 31 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    for_expr_OPT                   shift and go to state 283
    expr                           shift and go to state 170
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 269

    (32) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 32 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 270

    (193) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 193 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 193 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 271

    (156) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 156 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)


state 272

    (189) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 189 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 273

    (155) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXIT            reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DIE             reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    TRUE            reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FALSE           reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    WHILE           reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DO              reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOR             reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    BREAK           reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RETURN          reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    PLUS            reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    MINUS           reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ID              reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    IF              reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RKEY            reduce using rule 155 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)


state 274

    (157) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 284


state 275

    (202) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 202 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 276

    (176) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 176 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 176 (static_scalar -> PLUS static_scalar .)


state 277

    (177) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 177 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 177 (static_scalar -> MINUS static_scalar .)


state 278

    (166) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN . static_scalar
    (175) static_scalar -> . common_scalar
    (176) static_scalar -> . PLUS static_scalar
    (177) static_scalar -> . MINUS static_scalar
    (178) common_scalar -> . NUMBER_REAL
    (179) common_scalar -> . NUMBER_INTEGER
    (180) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 255
    MINUS           shift and go to state 256
    NUMBER_REAL     shift and go to state 257
    NUMBER_INTEGER  shift and go to state 258
    CONSTANT_ENCAPSED_STRING shift and go to state 259

    static_scalar                  shift and go to state 285
    common_scalar                  shift and go to state 254

state 279

    (165) parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 165 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 165 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)


state 280

    (151) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    EXIT            reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DIE             reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    TRUE            reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FALSE           reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    WHILE           reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DO              reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FOR             reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    BREAK           reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    RETURN          reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    PLUS            reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    MINUS           reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    ID              reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    IF              reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    RKEY            reduce using rule 151 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)


state 281

    (153) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 286


state 282

    (152) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY . RKEY
    (154) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (189) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (190) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (150) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (151) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (152) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (153) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (154) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (155) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (156) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (157) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . break_statement
    (11) statement -> . continue_statement
    (12) statement -> . return_statement
    (13) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (14) statement -> . GLOBAL global_var SEMICOLON
    (99) expr -> . INCREMENT variable
    (100) expr -> . variable INCREMENT
    (101) expr -> . DECREMENT variable
    (102) expr -> . variable DECREMENT
    (103) expr -> . variable LBRACKET expr RBRACKET
    (104) expr -> . LPAREN expr RPAREN
    (105) expr -> . unary_operator expr
    (106) expr -> . expr INTE_DOT expr DDOT expr
    (107) expr -> . expr comparission_operator expr
    (108) expr -> . variable assign_operator expr
    (109) expr -> . variable assign_operator AMPERSAND expr
    (110) expr -> . expr arithmetic_operator expr
    (111) expr -> . LPAREN type_cast_operator RPAREN expr
    (112) expr -> . EXIT expr_EXIT
    (113) expr -> . DIE expr_EXIT
    (114) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (115) expr -> . ARRAY_TYPE LPAREN RPAREN
    (116) expr -> . variable
    (117) expr -> . function_call
    (118) expr -> . NUMBER_REAL
    (119) expr -> . NUMBER_INTEGER
    (120) expr -> . CONSTANT_ENCAPSED_STRING
    (121) expr -> . TRUE
    (122) expr -> . FALSE
    (15) if_statement -> . statement_if if_statement_complement
    (16) if_statement -> . statement_if
    (20) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (21) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (28) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (22) break_statement -> . BREAK expr SEMICOLON
    (23) break_statement -> . BREAK SEMICOLON
    (24) continue_statement -> . CONTINUE expr SEMICOLON
    (25) continue_statement -> . CONTINUE SEMICOLON
    (26) return_statement -> . RETURN expr SEMICOLON
    (27) return_statement -> . RETURN SEMICOLON
    (141) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (52) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (53) function_call -> . ID LPAREN RPAREN
    (45) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (142) base_variable -> . reference_variable
    (143) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (144) reference_variable -> . compound_variable reference_variable_SELECTOR
    (145) reference_variable -> . compound_variable
    (206) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (207) simple_indirect_reference_DOLAR -> . DOLAR
    (146) compound_variable -> . VARIABLE
    (147) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 287
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 19
    INCREMENT       shift and go to state 20
    DECREMENT       shift and go to state 22
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    NUMBER_REAL     shift and go to state 28
    NUMBER_INTEGER  shift and go to state 29
    CONSTANT_ENCAPSED_STRING shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    WHILE           shift and go to state 34
    DO              shift and go to state 35
    FOR             shift and go to state 36
    BREAK           shift and go to state 37
    CONTINUE        shift and go to state 38
    RETURN          shift and go to state 39
    EXC_DOT         shift and go to state 41
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    ID              shift and go to state 9
    IF              shift and go to state 44
    DOLAR           shift and go to state 48
    VARIABLE        shift and go to state 49

    inner_statement_MUL            shift and go to state 288
    inner_statement                shift and go to state 250
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    break_statement                shift and go to state 16
    continue_statement             shift and go to state 17
    return_statement               shift and go to state 18
    variable                       shift and go to state 21
    unary_operator                 shift and go to state 23
    function_call                  shift and go to state 27
    statement_if                   shift and go to state 33
    base_variable                  shift and go to state 40
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 47

state 283

    (36) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 36 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 284

    (157) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 157 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 285

    (166) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 166 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 166 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)


state 286

    (153) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 153 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)


state 287

    (152) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXIT            reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DIE             reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    TRUE            reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FALSE           reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    WHILE           reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DO              reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOR             reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    BREAK           reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RETURN          reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    PLUS            reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    MINUS           reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ID              reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    IF              reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RKEY            reduce using rule 152 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)


state 288

    (154) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 289


state 289

    (154) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 154 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 33 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 33 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 47 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 48 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 98 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 98 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 98 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 105 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 125 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 127 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 141 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 141 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 141 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 141 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 141 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 141 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 141 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 141 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 141 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 141 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 142 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 142 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 142 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 142 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 142 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 142 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 142 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 149 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 149 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 149 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 149 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 149 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 149 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 149 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 149 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 149 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 149 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 149 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 149 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 149 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 198 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 198 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 198 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 198 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 198 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 198 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 198 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 198 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 198 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 198 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 198 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 198 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 198 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 198 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 204 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 204 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 204 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 204 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 204 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 204 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 204 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 204 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 204 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 204 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 204 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 204 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 204 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 204 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 235 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 235 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 235 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 235 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 235 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 235 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 235 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 235 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 235 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 235 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 235 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 235 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 235 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 235 resolved as shift
WARNING: reduce/reduce conflict in state 135 resolved using rule (function_call_parameter -> variable)
WARNING: rejected rule (expr -> variable) in state 135

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT_MULTI
    COMMENT_SINGLE
    DOLAR
    IDENTATION

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_program END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     main_program -> inner_statement main_program
Rule 4     main_program -> inner_statement
Rule 5     inner_statement -> function_declaration_statement
Rule 6     inner_statement -> statement
Rule 7     inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 8     inner_statement_MUL -> inner_statement
Rule 9     expr -> expr PLUS expr
Rule 10    expr -> expr MINUS expr
Rule 11    expr -> MINUS expr
Rule 12    expr -> expr DIVIDE expr
Rule 13    expr -> expr PERCENT expr
Rule 14    expr -> expr TIMES expr
Rule 15    expr -> expr EQUALS expr
Rule 16    expr -> expr NOT_EQUAL expr
Rule 17    expr -> expr GREAT_THAN expr
Rule 18    expr -> expr GREAT_EQUAL expr
Rule 19    expr -> expr LESS_THAN expr
Rule 20    expr -> expr LESS_EQUAL expr
Rule 21    expr -> expr AND expr
Rule 22    expr -> expr OR expr
Rule 23    expr -> EXC_DOT expr
Rule 24    expr -> INCREMENT variable
Rule 25    expr -> variable INCREMENT
Rule 26    expr -> DECREMENT variable
Rule 27    expr -> variable DECREMENT
Rule 28    expr -> variable
Rule 29    expr -> LPAREN expr RPAREN
Rule 30    expr -> ARRAY_TYPE array_declaration
Rule 31    expr -> LPAREN typecast_operator RPAREN expr
Rule 32    expr -> function_call
Rule 33    expr -> expr INTE_DOT expr DDOT expr
Rule 34    expr -> variable ADD_ASSIGN expr
Rule 35    expr -> variable SUB_ASSIGN expr
Rule 36    expr -> variable MOD_ASSIGN expr
Rule 37    expr -> variable TIMES_ASSIGN expr
Rule 38    expr -> variable DIVIDE_ASSIGN expr
Rule 39    expr -> variable CONCAT_ASSIGN expr
Rule 40    expr -> variable ASSIGN expr
Rule 41    expr -> NUMBER_INTEGER
Rule 42    expr -> NUMBER_REAL
Rule 43    expr -> CONSTANT_ENCAPSED_STRING
Rule 44    expr -> TRUE
Rule 45    expr -> FALSE
Rule 46    typecast_operator -> INT_TYPE
Rule 47    typecast_operator -> FLOAT_TYPE
Rule 48    typecast_operator -> ARRAY_TYPE
Rule 49    typecast_operator -> STRING_TYPE
Rule 50    typecast_operator -> BOOL_TYPE
Rule 51    exit_statement -> EXIT exit_expr
Rule 52    exit_statement -> EXIT
Rule 53    die_statement -> DIE exit_expr
Rule 54    die_statement -> DIE
Rule 55    exit_expr -> LPAREN expr RPAREN
Rule 56    exit_expr -> LPAREN RPAREN
Rule 57    array_declaration -> LPAREN array_pair_list RPAREN
Rule 58    array_declaration -> LPAREN RPAREN
Rule 59    statement -> expr SEMICOLON
Rule 60    statement -> while_statement
Rule 61    statement -> if_statement
Rule 62    statement -> do_statement
Rule 63    statement -> for_statement
Rule 64    statement -> foreach_statement
Rule 65    statement -> break_statement
Rule 66    statement -> continue_statement
Rule 67    statement -> return_statement
Rule 68    statement -> exit_statement SEMICOLON
Rule 69    statement -> die_statement SEMICOLON
Rule 70    statement -> global_statement SEMICOLON
Rule 71    if_statement -> statement_if
Rule 72    if_statement -> statement_if statement_else
Rule 73    if_statement -> statement_if statement_elseif
Rule 74    if_statement -> statement_if statement_elseif statement_else
Rule 75    statement_if -> IF expr_parentheses statement_block_optional statement_if
Rule 76    statement_if -> IF expr_parentheses statement_block_optional
Rule 77    statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif
Rule 78    statement_elseif -> ELSEIF expr_parentheses statement_block_optional
Rule 79    statement_else -> ELSE statement_block_optional
Rule 80    global_statement -> GLOBAL global_var statement_COLON_GLOBAL
Rule 81    global_statement -> GLOBAL global_var
Rule 82    while_statement -> WHILE expr_parentheses statement_block_optional
Rule 83    do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON
Rule 84    break_statement -> BREAK expr SEMICOLON
Rule 85    break_statement -> BREAK SEMICOLON
Rule 86    continue_statement -> CONTINUE expr SEMICOLON
Rule 87    continue_statement -> CONTINUE SEMICOLON
Rule 88    return_statement -> RETURN expr SEMICOLON
Rule 89    return_statement -> RETURN SEMICOLON
Rule 90    for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional
Rule 91    for_parameters -> SEMICOLON SEMICOLON
Rule 92    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 93    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 94    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 95    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 96    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 97    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 98    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 99    global_var -> VARIABLE
Rule 100   statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 101   statement_COLON_GLOBAL -> COLON global_var
Rule 102   ampersand_variable -> AMPERSAND VARIABLE
Rule 103   ampersand_variable -> VARIABLE
Rule 104   expr_parentheses -> LPAREN expr RPAREN
Rule 105   foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
Rule 106   foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
Rule 107   for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 108   for_expr_OPT -> expr
Rule 109   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 110   for_expr_COLON_EXPR -> COLON expr
Rule 111   function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 112   function_call -> ID LPAREN RPAREN
Rule 113   function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 114   function_call_parameter_list -> function_call_parameter
Rule 115   fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 116   fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter
Rule 117   function_call_parameter -> expr
Rule 118   function_call_parameter -> AMPERSAND VARIABLE
Rule 119   variable -> VARIABLE variable_array_selector
Rule 120   variable -> VARIABLE
Rule 121   selector -> LBRACKET expr RBRACKET
Rule 122   selector -> LBRACKET RBRACKET
Rule 123   function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements
Rule 124   fds_statements -> LKEY inner_statement_MUL RKEY
Rule 125   fds_statements -> LKEY RKEY
Rule 126   fds_id -> AMPERSAND ID
Rule 127   fds_id -> ID
Rule 128   fds_parameter -> LPAREN parameter_list RPAREN
Rule 129   fds_parameter -> LPAREN RPAREN
Rule 130   parameter_list -> parameter parameter_list_colon_parameter
Rule 131   parameter_list -> parameter
Rule 132   parameter -> VARIABLE
Rule 133   parameter -> parameter_prefix VARIABLE
Rule 134   parameter -> VARIABLE ASSIGN expr
Rule 135   parameter -> parameter_prefix VARIABLE ASSIGN expr
Rule 136   parameter_prefix -> parameter_type AMPERSAND
Rule 137   parameter_prefix -> AMPERSAND
Rule 138   parameter_prefix -> parameter_type
Rule 139   parameter_type -> INT_TYPE
Rule 140   parameter_type -> STRING_TYPE
Rule 141   parameter_type -> FLOAT_TYPE
Rule 142   parameter_type -> ARRAY_TYPE
Rule 143   parameter_type -> BOOL_TYPE
Rule 144   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 145   array_pair_list -> array_pair
Rule 146   array_pair -> expr
Rule 147   array_pair -> AMPERSAND variable
Rule 148   array_pair -> expr ATTR_ASSOC expr
Rule 149   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 150   statement_MUL -> statement statement_MUL
Rule 151   statement_MUL -> statement
Rule 152   statement_block_optional -> statement
Rule 153   statement_block_optional -> LKEY statement_MUL RKEY
Rule 154   statement_block_optional -> LKEY RKEY
Rule 155   parameter_list_colon_parameter -> COLON parameter parameter_list_colon_parameter
Rule 156   parameter_list_colon_parameter -> COLON parameter
Rule 157   variable_array_selector -> selector variable_array_selector
Rule 158   variable_array_selector -> selector
Rule 159   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 160   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 34
AMPERSAND            : 102 118 126 136 137 147 149
AND                  : 21
ARRAY_TYPE           : 30 48 142
AS                   : 105 106
ASSIGN               : 40 134 135
ATTR_ASSOC           : 106 148 149
BEGIN_PROGRAM        : 1 2
BOOL_TYPE            : 50 143
BREAK                : 84 85
COLON                : 100 101 109 110 115 116 155 156 159 160
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCAT_ASSIGN        : 39
CONSTANT_ENCAPSED_STRING : 43
CONTINUE             : 86 87
DDOT                 : 33
DECREMENT            : 26 27
DIE                  : 53 54
DIVIDE               : 12
DIVIDE_ASSIGN        : 38
DO                   : 83
DOLAR                : 
ELSE                 : 79
ELSEIF               : 77 78
END_PROGRAM          : 1 2
EQUALS               : 15
EXC_DOT              : 23
EXIT                 : 51 52
FALSE                : 45
FLOAT_TYPE           : 47 141
FOR                  : 90
FOREACH              : 105 106
FUNCTION             : 123
GLOBAL               : 80 81
GREAT_EQUAL          : 18
GREAT_THAN           : 17
ID                   : 111 112 126 127
IDENTATION           : 
IF                   : 75 76
INCREMENT            : 24 25
INTE_DOT             : 33
INT_TYPE             : 46 139
LBRACKET             : 121 122
LESS_EQUAL           : 20
LESS_THAN            : 19
LKEY                 : 124 125 153 154
LPAREN               : 29 31 55 56 57 58 90 104 105 106 111 112 128 129
MINUS                : 10 11
MOD_ASSIGN           : 36
NOT_EQUAL            : 16
NUMBER_INTEGER       : 41
NUMBER_REAL          : 42
OR                   : 22
PERCENT              : 13
PLUS                 : 9
RBRACKET             : 121 122
RETURN               : 88 89
RKEY                 : 124 125 153 154
RPAREN               : 29 31 55 56 57 58 90 104 105 106 111 112 128 129
SEMICOLON            : 59 68 69 70 83 84 85 86 87 88 89 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98
STRING_TYPE          : 49 140
SUB_ASSIGN           : 35
TIMES                : 14
TIMES_ASSIGN         : 37
TRUE                 : 44
VARIABLE             : 99 102 103 118 119 120 132 133 134 135
WHILE                : 82 83
error                : 

Nonterminals, with rules where they appear

ampersand_variable   : 105 106 106
array_declaration    : 30
array_pair           : 144 145 159 160
array_pair_list      : 57
array_pair_list_ARR_PAIR : 144 159
break_statement      : 65
continue_statement   : 66
die_statement        : 69
do_statement         : 62
exit_expr            : 51 53
exit_statement       : 68
expr                 : 9 9 10 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 29 31 33 33 33 34 35 36 37 38 39 40 55 59 84 86 88 104 105 106 107 108 109 110 117 121 134 135 146 148 148 149
expr_parentheses     : 75 76 77 78 82 83
fc_parameter_list_COLON_PARAMETER : 113 115
fds_id               : 123
fds_parameter        : 123
fds_statements       : 123
for_expr_COLON_EXPR  : 107 109
for_expr_OPT         : 92 93 93 94 94 95 96 96 97 98 98 98
for_parameters       : 90
for_statement        : 63
foreach_statement    : 64
function_call        : 32
function_call_parameter : 113 114 115 116
function_call_parameter_list : 111
function_declaration_statement : 5
global_statement     : 70
global_var           : 80 81 100 101
if_statement         : 61
inner_statement      : 3 4 7 8
inner_statement_MUL  : 7 124
main                 : 0
main_program         : 1 3
parameter            : 130 131 155 156
parameter_list       : 128
parameter_list_colon_parameter : 130 155
parameter_prefix     : 133 135
parameter_type       : 136 138
return_statement     : 67
selector             : 157 158
statement            : 6 150 151 152
statement_COLON_GLOBAL : 80 100
statement_MUL        : 150 153
statement_block_optional : 75 76 77 78 79 82 83 90 105 106
statement_else       : 72 74
statement_elseif     : 73 74 77
statement_if         : 71 72 73 74 75
typecast_operator    : 31
variable             : 24 25 26 27 28 34 35 36 37 38 39 40 147 149
variable_array_selector : 119 157
while_statement      : 60

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_program END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_program END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (3) main_program -> . inner_statement main_program
    (4) main_program -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (123) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    main_program                   shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 3

    (1) main -> BEGIN_PROGRAM main_program . END_PROGRAM

    END_PROGRAM     shift and go to state 48


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (3) main_program -> inner_statement . main_program
    (4) main_program -> inner_statement .
    (3) main_program -> . inner_statement main_program
    (4) main_program -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (123) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    END_PROGRAM     reduce using rule 4 (main_program -> inner_statement .)
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    inner_statement                shift and go to state 5
    main_program                   shift and go to state 49
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 6

    (5) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 5 (inner_statement -> function_declaration_statement .)


state 7

    (6) inner_statement -> statement .

    FUNCTION        reduce using rule 6 (inner_statement -> statement .)
    MINUS           reduce using rule 6 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 6 (inner_statement -> statement .)
    INCREMENT       reduce using rule 6 (inner_statement -> statement .)
    DECREMENT       reduce using rule 6 (inner_statement -> statement .)
    LPAREN          reduce using rule 6 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 6 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 6 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 6 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (inner_statement -> statement .)
    TRUE            reduce using rule 6 (inner_statement -> statement .)
    FALSE           reduce using rule 6 (inner_statement -> statement .)
    WHILE           reduce using rule 6 (inner_statement -> statement .)
    DO              reduce using rule 6 (inner_statement -> statement .)
    FOR             reduce using rule 6 (inner_statement -> statement .)
    FOREACH         reduce using rule 6 (inner_statement -> statement .)
    BREAK           reduce using rule 6 (inner_statement -> statement .)
    CONTINUE        reduce using rule 6 (inner_statement -> statement .)
    RETURN          reduce using rule 6 (inner_statement -> statement .)
    EXIT            reduce using rule 6 (inner_statement -> statement .)
    DIE             reduce using rule 6 (inner_statement -> statement .)
    GLOBAL          reduce using rule 6 (inner_statement -> statement .)
    VARIABLE        reduce using rule 6 (inner_statement -> statement .)
    ID              reduce using rule 6 (inner_statement -> statement .)
    IF              reduce using rule 6 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 6 (inner_statement -> statement .)
    RKEY            reduce using rule 6 (inner_statement -> statement .)


state 8

    (123) function_declaration_statement -> FUNCTION . fds_id fds_parameter fds_statements
    (126) fds_id -> . AMPERSAND ID
    (127) fds_id -> . ID

    AMPERSAND       shift and go to state 51
    ID              shift and go to state 52

    fds_id                         shift and go to state 50

state 9

    (59) statement -> expr . SEMICOLON
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 10

    (60) statement -> while_statement .

    FUNCTION        reduce using rule 60 (statement -> while_statement .)
    MINUS           reduce using rule 60 (statement -> while_statement .)
    EXC_DOT         reduce using rule 60 (statement -> while_statement .)
    INCREMENT       reduce using rule 60 (statement -> while_statement .)
    DECREMENT       reduce using rule 60 (statement -> while_statement .)
    LPAREN          reduce using rule 60 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 60 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 60 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 60 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (statement -> while_statement .)
    TRUE            reduce using rule 60 (statement -> while_statement .)
    FALSE           reduce using rule 60 (statement -> while_statement .)
    WHILE           reduce using rule 60 (statement -> while_statement .)
    DO              reduce using rule 60 (statement -> while_statement .)
    FOR             reduce using rule 60 (statement -> while_statement .)
    FOREACH         reduce using rule 60 (statement -> while_statement .)
    BREAK           reduce using rule 60 (statement -> while_statement .)
    CONTINUE        reduce using rule 60 (statement -> while_statement .)
    RETURN          reduce using rule 60 (statement -> while_statement .)
    EXIT            reduce using rule 60 (statement -> while_statement .)
    DIE             reduce using rule 60 (statement -> while_statement .)
    GLOBAL          reduce using rule 60 (statement -> while_statement .)
    VARIABLE        reduce using rule 60 (statement -> while_statement .)
    ID              reduce using rule 60 (statement -> while_statement .)
    IF              reduce using rule 60 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 60 (statement -> while_statement .)
    RKEY            reduce using rule 60 (statement -> while_statement .)
    ELSE            reduce using rule 60 (statement -> while_statement .)
    ELSEIF          reduce using rule 60 (statement -> while_statement .)


state 11

    (61) statement -> if_statement .

    FUNCTION        reduce using rule 61 (statement -> if_statement .)
    MINUS           reduce using rule 61 (statement -> if_statement .)
    EXC_DOT         reduce using rule 61 (statement -> if_statement .)
    INCREMENT       reduce using rule 61 (statement -> if_statement .)
    DECREMENT       reduce using rule 61 (statement -> if_statement .)
    LPAREN          reduce using rule 61 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 61 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 61 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 61 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (statement -> if_statement .)
    TRUE            reduce using rule 61 (statement -> if_statement .)
    FALSE           reduce using rule 61 (statement -> if_statement .)
    WHILE           reduce using rule 61 (statement -> if_statement .)
    DO              reduce using rule 61 (statement -> if_statement .)
    FOR             reduce using rule 61 (statement -> if_statement .)
    FOREACH         reduce using rule 61 (statement -> if_statement .)
    BREAK           reduce using rule 61 (statement -> if_statement .)
    CONTINUE        reduce using rule 61 (statement -> if_statement .)
    RETURN          reduce using rule 61 (statement -> if_statement .)
    EXIT            reduce using rule 61 (statement -> if_statement .)
    DIE             reduce using rule 61 (statement -> if_statement .)
    GLOBAL          reduce using rule 61 (statement -> if_statement .)
    VARIABLE        reduce using rule 61 (statement -> if_statement .)
    ID              reduce using rule 61 (statement -> if_statement .)
    IF              reduce using rule 61 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 61 (statement -> if_statement .)
    RKEY            reduce using rule 61 (statement -> if_statement .)
    ELSE            reduce using rule 61 (statement -> if_statement .)
    ELSEIF          reduce using rule 61 (statement -> if_statement .)


state 12

    (62) statement -> do_statement .

    FUNCTION        reduce using rule 62 (statement -> do_statement .)
    MINUS           reduce using rule 62 (statement -> do_statement .)
    EXC_DOT         reduce using rule 62 (statement -> do_statement .)
    INCREMENT       reduce using rule 62 (statement -> do_statement .)
    DECREMENT       reduce using rule 62 (statement -> do_statement .)
    LPAREN          reduce using rule 62 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 62 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 62 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 62 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (statement -> do_statement .)
    TRUE            reduce using rule 62 (statement -> do_statement .)
    FALSE           reduce using rule 62 (statement -> do_statement .)
    WHILE           reduce using rule 62 (statement -> do_statement .)
    DO              reduce using rule 62 (statement -> do_statement .)
    FOR             reduce using rule 62 (statement -> do_statement .)
    FOREACH         reduce using rule 62 (statement -> do_statement .)
    BREAK           reduce using rule 62 (statement -> do_statement .)
    CONTINUE        reduce using rule 62 (statement -> do_statement .)
    RETURN          reduce using rule 62 (statement -> do_statement .)
    EXIT            reduce using rule 62 (statement -> do_statement .)
    DIE             reduce using rule 62 (statement -> do_statement .)
    GLOBAL          reduce using rule 62 (statement -> do_statement .)
    VARIABLE        reduce using rule 62 (statement -> do_statement .)
    ID              reduce using rule 62 (statement -> do_statement .)
    IF              reduce using rule 62 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 62 (statement -> do_statement .)
    RKEY            reduce using rule 62 (statement -> do_statement .)
    ELSE            reduce using rule 62 (statement -> do_statement .)
    ELSEIF          reduce using rule 62 (statement -> do_statement .)


state 13

    (63) statement -> for_statement .

    FUNCTION        reduce using rule 63 (statement -> for_statement .)
    MINUS           reduce using rule 63 (statement -> for_statement .)
    EXC_DOT         reduce using rule 63 (statement -> for_statement .)
    INCREMENT       reduce using rule 63 (statement -> for_statement .)
    DECREMENT       reduce using rule 63 (statement -> for_statement .)
    LPAREN          reduce using rule 63 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 63 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 63 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 63 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (statement -> for_statement .)
    TRUE            reduce using rule 63 (statement -> for_statement .)
    FALSE           reduce using rule 63 (statement -> for_statement .)
    WHILE           reduce using rule 63 (statement -> for_statement .)
    DO              reduce using rule 63 (statement -> for_statement .)
    FOR             reduce using rule 63 (statement -> for_statement .)
    FOREACH         reduce using rule 63 (statement -> for_statement .)
    BREAK           reduce using rule 63 (statement -> for_statement .)
    CONTINUE        reduce using rule 63 (statement -> for_statement .)
    RETURN          reduce using rule 63 (statement -> for_statement .)
    EXIT            reduce using rule 63 (statement -> for_statement .)
    DIE             reduce using rule 63 (statement -> for_statement .)
    GLOBAL          reduce using rule 63 (statement -> for_statement .)
    VARIABLE        reduce using rule 63 (statement -> for_statement .)
    ID              reduce using rule 63 (statement -> for_statement .)
    IF              reduce using rule 63 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 63 (statement -> for_statement .)
    RKEY            reduce using rule 63 (statement -> for_statement .)
    ELSE            reduce using rule 63 (statement -> for_statement .)
    ELSEIF          reduce using rule 63 (statement -> for_statement .)


state 14

    (64) statement -> foreach_statement .

    FUNCTION        reduce using rule 64 (statement -> foreach_statement .)
    MINUS           reduce using rule 64 (statement -> foreach_statement .)
    EXC_DOT         reduce using rule 64 (statement -> foreach_statement .)
    INCREMENT       reduce using rule 64 (statement -> foreach_statement .)
    DECREMENT       reduce using rule 64 (statement -> foreach_statement .)
    LPAREN          reduce using rule 64 (statement -> foreach_statement .)
    ARRAY_TYPE      reduce using rule 64 (statement -> foreach_statement .)
    NUMBER_INTEGER  reduce using rule 64 (statement -> foreach_statement .)
    NUMBER_REAL     reduce using rule 64 (statement -> foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (statement -> foreach_statement .)
    TRUE            reduce using rule 64 (statement -> foreach_statement .)
    FALSE           reduce using rule 64 (statement -> foreach_statement .)
    WHILE           reduce using rule 64 (statement -> foreach_statement .)
    DO              reduce using rule 64 (statement -> foreach_statement .)
    FOR             reduce using rule 64 (statement -> foreach_statement .)
    FOREACH         reduce using rule 64 (statement -> foreach_statement .)
    BREAK           reduce using rule 64 (statement -> foreach_statement .)
    CONTINUE        reduce using rule 64 (statement -> foreach_statement .)
    RETURN          reduce using rule 64 (statement -> foreach_statement .)
    EXIT            reduce using rule 64 (statement -> foreach_statement .)
    DIE             reduce using rule 64 (statement -> foreach_statement .)
    GLOBAL          reduce using rule 64 (statement -> foreach_statement .)
    VARIABLE        reduce using rule 64 (statement -> foreach_statement .)
    ID              reduce using rule 64 (statement -> foreach_statement .)
    IF              reduce using rule 64 (statement -> foreach_statement .)
    END_PROGRAM     reduce using rule 64 (statement -> foreach_statement .)
    RKEY            reduce using rule 64 (statement -> foreach_statement .)
    ELSE            reduce using rule 64 (statement -> foreach_statement .)
    ELSEIF          reduce using rule 64 (statement -> foreach_statement .)


state 15

    (65) statement -> break_statement .

    FUNCTION        reduce using rule 65 (statement -> break_statement .)
    MINUS           reduce using rule 65 (statement -> break_statement .)
    EXC_DOT         reduce using rule 65 (statement -> break_statement .)
    INCREMENT       reduce using rule 65 (statement -> break_statement .)
    DECREMENT       reduce using rule 65 (statement -> break_statement .)
    LPAREN          reduce using rule 65 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 65 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 65 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 65 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (statement -> break_statement .)
    TRUE            reduce using rule 65 (statement -> break_statement .)
    FALSE           reduce using rule 65 (statement -> break_statement .)
    WHILE           reduce using rule 65 (statement -> break_statement .)
    DO              reduce using rule 65 (statement -> break_statement .)
    FOR             reduce using rule 65 (statement -> break_statement .)
    FOREACH         reduce using rule 65 (statement -> break_statement .)
    BREAK           reduce using rule 65 (statement -> break_statement .)
    CONTINUE        reduce using rule 65 (statement -> break_statement .)
    RETURN          reduce using rule 65 (statement -> break_statement .)
    EXIT            reduce using rule 65 (statement -> break_statement .)
    DIE             reduce using rule 65 (statement -> break_statement .)
    GLOBAL          reduce using rule 65 (statement -> break_statement .)
    VARIABLE        reduce using rule 65 (statement -> break_statement .)
    ID              reduce using rule 65 (statement -> break_statement .)
    IF              reduce using rule 65 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 65 (statement -> break_statement .)
    RKEY            reduce using rule 65 (statement -> break_statement .)
    ELSE            reduce using rule 65 (statement -> break_statement .)
    ELSEIF          reduce using rule 65 (statement -> break_statement .)


state 16

    (66) statement -> continue_statement .

    FUNCTION        reduce using rule 66 (statement -> continue_statement .)
    MINUS           reduce using rule 66 (statement -> continue_statement .)
    EXC_DOT         reduce using rule 66 (statement -> continue_statement .)
    INCREMENT       reduce using rule 66 (statement -> continue_statement .)
    DECREMENT       reduce using rule 66 (statement -> continue_statement .)
    LPAREN          reduce using rule 66 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 66 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 66 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 66 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 66 (statement -> continue_statement .)
    TRUE            reduce using rule 66 (statement -> continue_statement .)
    FALSE           reduce using rule 66 (statement -> continue_statement .)
    WHILE           reduce using rule 66 (statement -> continue_statement .)
    DO              reduce using rule 66 (statement -> continue_statement .)
    FOR             reduce using rule 66 (statement -> continue_statement .)
    FOREACH         reduce using rule 66 (statement -> continue_statement .)
    BREAK           reduce using rule 66 (statement -> continue_statement .)
    CONTINUE        reduce using rule 66 (statement -> continue_statement .)
    RETURN          reduce using rule 66 (statement -> continue_statement .)
    EXIT            reduce using rule 66 (statement -> continue_statement .)
    DIE             reduce using rule 66 (statement -> continue_statement .)
    GLOBAL          reduce using rule 66 (statement -> continue_statement .)
    VARIABLE        reduce using rule 66 (statement -> continue_statement .)
    ID              reduce using rule 66 (statement -> continue_statement .)
    IF              reduce using rule 66 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 66 (statement -> continue_statement .)
    RKEY            reduce using rule 66 (statement -> continue_statement .)
    ELSE            reduce using rule 66 (statement -> continue_statement .)
    ELSEIF          reduce using rule 66 (statement -> continue_statement .)


state 17

    (67) statement -> return_statement .

    FUNCTION        reduce using rule 67 (statement -> return_statement .)
    MINUS           reduce using rule 67 (statement -> return_statement .)
    EXC_DOT         reduce using rule 67 (statement -> return_statement .)
    INCREMENT       reduce using rule 67 (statement -> return_statement .)
    DECREMENT       reduce using rule 67 (statement -> return_statement .)
    LPAREN          reduce using rule 67 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 67 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 67 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 67 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 67 (statement -> return_statement .)
    TRUE            reduce using rule 67 (statement -> return_statement .)
    FALSE           reduce using rule 67 (statement -> return_statement .)
    WHILE           reduce using rule 67 (statement -> return_statement .)
    DO              reduce using rule 67 (statement -> return_statement .)
    FOR             reduce using rule 67 (statement -> return_statement .)
    FOREACH         reduce using rule 67 (statement -> return_statement .)
    BREAK           reduce using rule 67 (statement -> return_statement .)
    CONTINUE        reduce using rule 67 (statement -> return_statement .)
    RETURN          reduce using rule 67 (statement -> return_statement .)
    EXIT            reduce using rule 67 (statement -> return_statement .)
    DIE             reduce using rule 67 (statement -> return_statement .)
    GLOBAL          reduce using rule 67 (statement -> return_statement .)
    VARIABLE        reduce using rule 67 (statement -> return_statement .)
    ID              reduce using rule 67 (statement -> return_statement .)
    IF              reduce using rule 67 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 67 (statement -> return_statement .)
    RKEY            reduce using rule 67 (statement -> return_statement .)
    ELSE            reduce using rule 67 (statement -> return_statement .)
    ELSEIF          reduce using rule 67 (statement -> return_statement .)


state 18

    (68) statement -> exit_statement . SEMICOLON

    SEMICOLON       shift and go to state 68


state 19

    (69) statement -> die_statement . SEMICOLON

    SEMICOLON       shift and go to state 69


state 20

    (70) statement -> global_statement . SEMICOLON

    SEMICOLON       shift and go to state 70


state 21

    (11) expr -> MINUS . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 71
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 22

    (23) expr -> EXC_DOT . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 72
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 23

    (24) expr -> INCREMENT . variable
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 73

state 24

    (25) expr -> variable . INCREMENT
    (27) expr -> variable . DECREMENT
    (28) expr -> variable .
    (34) expr -> variable . ADD_ASSIGN expr
    (35) expr -> variable . SUB_ASSIGN expr
    (36) expr -> variable . MOD_ASSIGN expr
    (37) expr -> variable . TIMES_ASSIGN expr
    (38) expr -> variable . DIVIDE_ASSIGN expr
    (39) expr -> variable . CONCAT_ASSIGN expr
    (40) expr -> variable . ASSIGN expr

    INCREMENT       shift and go to state 74
    DECREMENT       shift and go to state 75
    SEMICOLON       reduce using rule 28 (expr -> variable .)
    PLUS            reduce using rule 28 (expr -> variable .)
    MINUS           reduce using rule 28 (expr -> variable .)
    DIVIDE          reduce using rule 28 (expr -> variable .)
    PERCENT         reduce using rule 28 (expr -> variable .)
    TIMES           reduce using rule 28 (expr -> variable .)
    EQUALS          reduce using rule 28 (expr -> variable .)
    NOT_EQUAL       reduce using rule 28 (expr -> variable .)
    GREAT_THAN      reduce using rule 28 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 28 (expr -> variable .)
    LESS_THAN       reduce using rule 28 (expr -> variable .)
    LESS_EQUAL      reduce using rule 28 (expr -> variable .)
    AND             reduce using rule 28 (expr -> variable .)
    OR              reduce using rule 28 (expr -> variable .)
    INTE_DOT        reduce using rule 28 (expr -> variable .)
    RPAREN          reduce using rule 28 (expr -> variable .)
    DDOT            reduce using rule 28 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 28 (expr -> variable .)
    COLON           reduce using rule 28 (expr -> variable .)
    AS              reduce using rule 28 (expr -> variable .)
    RBRACKET        reduce using rule 28 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 77
    MOD_ASSIGN      shift and go to state 78
    TIMES_ASSIGN    shift and go to state 79
    DIVIDE_ASSIGN   shift and go to state 80
    CONCAT_ASSIGN   shift and go to state 81
    ASSIGN          shift and go to state 82


state 25

    (26) expr -> DECREMENT . variable
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 83

state 26

    (29) expr -> LPAREN . expr RPAREN
    (31) expr -> LPAREN . typecast_operator RPAREN expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (46) typecast_operator -> . INT_TYPE
    (47) typecast_operator -> . FLOAT_TYPE
    (48) typecast_operator -> . ARRAY_TYPE
    (49) typecast_operator -> . STRING_TYPE
    (50) typecast_operator -> . BOOL_TYPE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 86
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    INT_TYPE        shift and go to state 87
    FLOAT_TYPE      shift and go to state 88
    STRING_TYPE     shift and go to state 89
    BOOL_TYPE       shift and go to state 90
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 84
    typecast_operator              shift and go to state 85
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 27

    (30) expr -> ARRAY_TYPE . array_declaration
    (57) array_declaration -> . LPAREN array_pair_list RPAREN
    (58) array_declaration -> . LPAREN RPAREN

    LPAREN          shift and go to state 92

    array_declaration              shift and go to state 91

state 28

    (32) expr -> function_call .

    SEMICOLON       reduce using rule 32 (expr -> function_call .)
    PLUS            reduce using rule 32 (expr -> function_call .)
    MINUS           reduce using rule 32 (expr -> function_call .)
    DIVIDE          reduce using rule 32 (expr -> function_call .)
    PERCENT         reduce using rule 32 (expr -> function_call .)
    TIMES           reduce using rule 32 (expr -> function_call .)
    EQUALS          reduce using rule 32 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 32 (expr -> function_call .)
    GREAT_THAN      reduce using rule 32 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 32 (expr -> function_call .)
    LESS_THAN       reduce using rule 32 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 32 (expr -> function_call .)
    AND             reduce using rule 32 (expr -> function_call .)
    OR              reduce using rule 32 (expr -> function_call .)
    INTE_DOT        reduce using rule 32 (expr -> function_call .)
    RPAREN          reduce using rule 32 (expr -> function_call .)
    DDOT            reduce using rule 32 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 32 (expr -> function_call .)
    COLON           reduce using rule 32 (expr -> function_call .)
    AS              reduce using rule 32 (expr -> function_call .)
    RBRACKET        reduce using rule 32 (expr -> function_call .)


state 29

    (41) expr -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 41 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 41 (expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 41 (expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 41 (expr -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 41 (expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 41 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 41 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 41 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 41 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 41 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 41 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 41 (expr -> NUMBER_INTEGER .)
    AND             reduce using rule 41 (expr -> NUMBER_INTEGER .)
    OR              reduce using rule 41 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 41 (expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 41 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 41 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 41 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 41 (expr -> NUMBER_INTEGER .)
    AS              reduce using rule 41 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 41 (expr -> NUMBER_INTEGER .)


state 30

    (42) expr -> NUMBER_REAL .

    SEMICOLON       reduce using rule 42 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 42 (expr -> NUMBER_REAL .)
    MINUS           reduce using rule 42 (expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 42 (expr -> NUMBER_REAL .)
    PERCENT         reduce using rule 42 (expr -> NUMBER_REAL .)
    TIMES           reduce using rule 42 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 42 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 42 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 42 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 42 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 42 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 42 (expr -> NUMBER_REAL .)
    AND             reduce using rule 42 (expr -> NUMBER_REAL .)
    OR              reduce using rule 42 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 42 (expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 42 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 42 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 42 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 42 (expr -> NUMBER_REAL .)
    AS              reduce using rule 42 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 42 (expr -> NUMBER_REAL .)


state 31

    (43) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 43 (expr -> CONSTANT_ENCAPSED_STRING .)


state 32

    (44) expr -> TRUE .

    SEMICOLON       reduce using rule 44 (expr -> TRUE .)
    PLUS            reduce using rule 44 (expr -> TRUE .)
    MINUS           reduce using rule 44 (expr -> TRUE .)
    DIVIDE          reduce using rule 44 (expr -> TRUE .)
    PERCENT         reduce using rule 44 (expr -> TRUE .)
    TIMES           reduce using rule 44 (expr -> TRUE .)
    EQUALS          reduce using rule 44 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 44 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 44 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 44 (expr -> TRUE .)
    LESS_THAN       reduce using rule 44 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 44 (expr -> TRUE .)
    AND             reduce using rule 44 (expr -> TRUE .)
    OR              reduce using rule 44 (expr -> TRUE .)
    INTE_DOT        reduce using rule 44 (expr -> TRUE .)
    RPAREN          reduce using rule 44 (expr -> TRUE .)
    DDOT            reduce using rule 44 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 44 (expr -> TRUE .)
    COLON           reduce using rule 44 (expr -> TRUE .)
    AS              reduce using rule 44 (expr -> TRUE .)
    RBRACKET        reduce using rule 44 (expr -> TRUE .)


state 33

    (45) expr -> FALSE .

    SEMICOLON       reduce using rule 45 (expr -> FALSE .)
    PLUS            reduce using rule 45 (expr -> FALSE .)
    MINUS           reduce using rule 45 (expr -> FALSE .)
    DIVIDE          reduce using rule 45 (expr -> FALSE .)
    PERCENT         reduce using rule 45 (expr -> FALSE .)
    TIMES           reduce using rule 45 (expr -> FALSE .)
    EQUALS          reduce using rule 45 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 45 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 45 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 45 (expr -> FALSE .)
    LESS_THAN       reduce using rule 45 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 45 (expr -> FALSE .)
    AND             reduce using rule 45 (expr -> FALSE .)
    OR              reduce using rule 45 (expr -> FALSE .)
    INTE_DOT        reduce using rule 45 (expr -> FALSE .)
    RPAREN          reduce using rule 45 (expr -> FALSE .)
    DDOT            reduce using rule 45 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 45 (expr -> FALSE .)
    COLON           reduce using rule 45 (expr -> FALSE .)
    AS              reduce using rule 45 (expr -> FALSE .)
    RBRACKET        reduce using rule 45 (expr -> FALSE .)


state 34

    (82) while_statement -> WHILE . expr_parentheses statement_block_optional
    (104) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 94

    expr_parentheses               shift and go to state 93

state 35

    (71) if_statement -> statement_if .
    (72) if_statement -> statement_if . statement_else
    (73) if_statement -> statement_if . statement_elseif
    (74) if_statement -> statement_if . statement_elseif statement_else
    (79) statement_else -> . ELSE statement_block_optional
    (77) statement_elseif -> . ELSEIF expr_parentheses statement_block_optional statement_elseif
    (78) statement_elseif -> . ELSEIF expr_parentheses statement_block_optional

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    FUNCTION        reduce using rule 71 (if_statement -> statement_if .)
    MINUS           reduce using rule 71 (if_statement -> statement_if .)
    EXC_DOT         reduce using rule 71 (if_statement -> statement_if .)
    INCREMENT       reduce using rule 71 (if_statement -> statement_if .)
    DECREMENT       reduce using rule 71 (if_statement -> statement_if .)
    LPAREN          reduce using rule 71 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 71 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 71 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 71 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (if_statement -> statement_if .)
    TRUE            reduce using rule 71 (if_statement -> statement_if .)
    FALSE           reduce using rule 71 (if_statement -> statement_if .)
    WHILE           reduce using rule 71 (if_statement -> statement_if .)
    DO              reduce using rule 71 (if_statement -> statement_if .)
    FOR             reduce using rule 71 (if_statement -> statement_if .)
    FOREACH         reduce using rule 71 (if_statement -> statement_if .)
    BREAK           reduce using rule 71 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 71 (if_statement -> statement_if .)
    RETURN          reduce using rule 71 (if_statement -> statement_if .)
    EXIT            reduce using rule 71 (if_statement -> statement_if .)
    DIE             reduce using rule 71 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 71 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 71 (if_statement -> statement_if .)
    ID              reduce using rule 71 (if_statement -> statement_if .)
    IF              reduce using rule 71 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 71 (if_statement -> statement_if .)
    RKEY            reduce using rule 71 (if_statement -> statement_if .)
    ELSE            shift and go to state 97
    ELSEIF          shift and go to state 98

  ! ELSE            [ reduce using rule 71 (if_statement -> statement_if .) ]
  ! ELSEIF          [ reduce using rule 71 (if_statement -> statement_if .) ]

    statement_else                 shift and go to state 95
    statement_elseif               shift and go to state 96

state 36

    (83) do_statement -> DO . statement_block_optional WHILE expr_parentheses SEMICOLON
    (152) statement_block_optional -> . statement
    (153) statement_block_optional -> . LKEY statement_MUL RKEY
    (154) statement_block_optional -> . LKEY RKEY
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    LKEY            shift and go to state 101
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_block_optional       shift and go to state 99
    statement                      shift and go to state 100
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 37

    (90) for_statement -> FOR . LPAREN for_parameters RPAREN statement_block_optional

    LPAREN          shift and go to state 102


state 38

    (105) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional

    LPAREN          shift and go to state 103


state 39

    (84) break_statement -> BREAK . expr SEMICOLON
    (85) break_statement -> BREAK . SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 105
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 104
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 40

    (86) continue_statement -> CONTINUE . expr SEMICOLON
    (87) continue_statement -> CONTINUE . SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 107
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 106
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 41

    (88) return_statement -> RETURN . expr SEMICOLON
    (89) return_statement -> RETURN . SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 109
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 108
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 42

    (51) exit_statement -> EXIT . exit_expr
    (52) exit_statement -> EXIT .
    (55) exit_expr -> . LPAREN expr RPAREN
    (56) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 52 (exit_statement -> EXIT .)
    LPAREN          shift and go to state 111

    exit_expr                      shift and go to state 110

state 43

    (53) die_statement -> DIE . exit_expr
    (54) die_statement -> DIE .
    (55) exit_expr -> . LPAREN expr RPAREN
    (56) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 54 (die_statement -> DIE .)
    LPAREN          shift and go to state 111

    exit_expr                      shift and go to state 112

state 44

    (80) global_statement -> GLOBAL . global_var statement_COLON_GLOBAL
    (81) global_statement -> GLOBAL . global_var
    (99) global_var -> . VARIABLE

    VARIABLE        shift and go to state 114

    global_var                     shift and go to state 113

state 45

    (119) variable -> VARIABLE . variable_array_selector
    (120) variable -> VARIABLE .
    (157) variable_array_selector -> . selector variable_array_selector
    (158) variable_array_selector -> . selector
    (121) selector -> . LBRACKET expr RBRACKET
    (122) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 120 (variable -> VARIABLE .)
    DECREMENT       reduce using rule 120 (variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 120 (variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 120 (variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 120 (variable -> VARIABLE .)
    TIMES_ASSIGN    reduce using rule 120 (variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 120 (variable -> VARIABLE .)
    CONCAT_ASSIGN   reduce using rule 120 (variable -> VARIABLE .)
    ASSIGN          reduce using rule 120 (variable -> VARIABLE .)
    SEMICOLON       reduce using rule 120 (variable -> VARIABLE .)
    PLUS            reduce using rule 120 (variable -> VARIABLE .)
    MINUS           reduce using rule 120 (variable -> VARIABLE .)
    DIVIDE          reduce using rule 120 (variable -> VARIABLE .)
    PERCENT         reduce using rule 120 (variable -> VARIABLE .)
    TIMES           reduce using rule 120 (variable -> VARIABLE .)
    EQUALS          reduce using rule 120 (variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 120 (variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 120 (variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 120 (variable -> VARIABLE .)
    LESS_THAN       reduce using rule 120 (variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 120 (variable -> VARIABLE .)
    AND             reduce using rule 120 (variable -> VARIABLE .)
    OR              reduce using rule 120 (variable -> VARIABLE .)
    INTE_DOT        reduce using rule 120 (variable -> VARIABLE .)
    RPAREN          reduce using rule 120 (variable -> VARIABLE .)
    DDOT            reduce using rule 120 (variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 120 (variable -> VARIABLE .)
    COLON           reduce using rule 120 (variable -> VARIABLE .)
    AS              reduce using rule 120 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 120 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 117

    variable_array_selector        shift and go to state 115
    selector                       shift and go to state 116

state 46

    (111) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (112) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 118


state 47

    (75) statement_if -> IF . expr_parentheses statement_block_optional statement_if
    (76) statement_if -> IF . expr_parentheses statement_block_optional
    (104) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 94

    expr_parentheses               shift and go to state 119

state 48

    (1) main -> BEGIN_PROGRAM main_program END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_program END_PROGRAM .)


state 49

    (3) main_program -> inner_statement main_program .

    END_PROGRAM     reduce using rule 3 (main_program -> inner_statement main_program .)


state 50

    (123) function_declaration_statement -> FUNCTION fds_id . fds_parameter fds_statements
    (128) fds_parameter -> . LPAREN parameter_list RPAREN
    (129) fds_parameter -> . LPAREN RPAREN

    LPAREN          shift and go to state 121

    fds_parameter                  shift and go to state 120

state 51

    (126) fds_id -> AMPERSAND . ID

    ID              shift and go to state 122


state 52

    (127) fds_id -> ID .

    LPAREN          reduce using rule 127 (fds_id -> ID .)


state 53

    (59) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 59 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 59 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 59 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 59 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 59 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 59 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 59 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 59 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 59 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 59 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 59 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 59 (statement -> expr SEMICOLON .)
    DO              reduce using rule 59 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 59 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 59 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 59 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 59 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 59 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 59 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 59 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 59 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 59 (statement -> expr SEMICOLON .)
    ID              reduce using rule 59 (statement -> expr SEMICOLON .)
    IF              reduce using rule 59 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 59 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 59 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 59 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 59 (statement -> expr SEMICOLON .)


state 54

    (9) expr -> expr PLUS . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 123
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 55

    (10) expr -> expr MINUS . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 124
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 56

    (12) expr -> expr DIVIDE . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 125
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 57

    (13) expr -> expr PERCENT . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 126
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 58

    (14) expr -> expr TIMES . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 127
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 59

    (15) expr -> expr EQUALS . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 128
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 60

    (16) expr -> expr NOT_EQUAL . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 129
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 61

    (17) expr -> expr GREAT_THAN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 130
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 62

    (18) expr -> expr GREAT_EQUAL . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 131
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 63

    (19) expr -> expr LESS_THAN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 132
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 64

    (20) expr -> expr LESS_EQUAL . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 133
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 65

    (21) expr -> expr AND . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 134
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 66

    (22) expr -> expr OR . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 135
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 67

    (33) expr -> expr INTE_DOT . expr DDOT expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 136
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 68

    (68) statement -> exit_statement SEMICOLON .

    FUNCTION        reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    MINUS           reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    EXC_DOT         reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    INCREMENT       reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    DECREMENT       reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    LPAREN          reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    TRUE            reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    FALSE           reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    WHILE           reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    DO              reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    FOR             reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    FOREACH         reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    BREAK           reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    CONTINUE        reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    RETURN          reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    EXIT            reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    DIE             reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    GLOBAL          reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    VARIABLE        reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    ID              reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    IF              reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    RKEY            reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    ELSE            reduce using rule 68 (statement -> exit_statement SEMICOLON .)
    ELSEIF          reduce using rule 68 (statement -> exit_statement SEMICOLON .)


state 69

    (69) statement -> die_statement SEMICOLON .

    FUNCTION        reduce using rule 69 (statement -> die_statement SEMICOLON .)
    MINUS           reduce using rule 69 (statement -> die_statement SEMICOLON .)
    EXC_DOT         reduce using rule 69 (statement -> die_statement SEMICOLON .)
    INCREMENT       reduce using rule 69 (statement -> die_statement SEMICOLON .)
    DECREMENT       reduce using rule 69 (statement -> die_statement SEMICOLON .)
    LPAREN          reduce using rule 69 (statement -> die_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 69 (statement -> die_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 69 (statement -> die_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 69 (statement -> die_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 69 (statement -> die_statement SEMICOLON .)
    TRUE            reduce using rule 69 (statement -> die_statement SEMICOLON .)
    FALSE           reduce using rule 69 (statement -> die_statement SEMICOLON .)
    WHILE           reduce using rule 69 (statement -> die_statement SEMICOLON .)
    DO              reduce using rule 69 (statement -> die_statement SEMICOLON .)
    FOR             reduce using rule 69 (statement -> die_statement SEMICOLON .)
    FOREACH         reduce using rule 69 (statement -> die_statement SEMICOLON .)
    BREAK           reduce using rule 69 (statement -> die_statement SEMICOLON .)
    CONTINUE        reduce using rule 69 (statement -> die_statement SEMICOLON .)
    RETURN          reduce using rule 69 (statement -> die_statement SEMICOLON .)
    EXIT            reduce using rule 69 (statement -> die_statement SEMICOLON .)
    DIE             reduce using rule 69 (statement -> die_statement SEMICOLON .)
    GLOBAL          reduce using rule 69 (statement -> die_statement SEMICOLON .)
    VARIABLE        reduce using rule 69 (statement -> die_statement SEMICOLON .)
    ID              reduce using rule 69 (statement -> die_statement SEMICOLON .)
    IF              reduce using rule 69 (statement -> die_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 69 (statement -> die_statement SEMICOLON .)
    RKEY            reduce using rule 69 (statement -> die_statement SEMICOLON .)
    ELSE            reduce using rule 69 (statement -> die_statement SEMICOLON .)
    ELSEIF          reduce using rule 69 (statement -> die_statement SEMICOLON .)


state 70

    (70) statement -> global_statement SEMICOLON .

    FUNCTION        reduce using rule 70 (statement -> global_statement SEMICOLON .)
    MINUS           reduce using rule 70 (statement -> global_statement SEMICOLON .)
    EXC_DOT         reduce using rule 70 (statement -> global_statement SEMICOLON .)
    INCREMENT       reduce using rule 70 (statement -> global_statement SEMICOLON .)
    DECREMENT       reduce using rule 70 (statement -> global_statement SEMICOLON .)
    LPAREN          reduce using rule 70 (statement -> global_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 70 (statement -> global_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 70 (statement -> global_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 70 (statement -> global_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 70 (statement -> global_statement SEMICOLON .)
    TRUE            reduce using rule 70 (statement -> global_statement SEMICOLON .)
    FALSE           reduce using rule 70 (statement -> global_statement SEMICOLON .)
    WHILE           reduce using rule 70 (statement -> global_statement SEMICOLON .)
    DO              reduce using rule 70 (statement -> global_statement SEMICOLON .)
    FOR             reduce using rule 70 (statement -> global_statement SEMICOLON .)
    FOREACH         reduce using rule 70 (statement -> global_statement SEMICOLON .)
    BREAK           reduce using rule 70 (statement -> global_statement SEMICOLON .)
    CONTINUE        reduce using rule 70 (statement -> global_statement SEMICOLON .)
    RETURN          reduce using rule 70 (statement -> global_statement SEMICOLON .)
    EXIT            reduce using rule 70 (statement -> global_statement SEMICOLON .)
    DIE             reduce using rule 70 (statement -> global_statement SEMICOLON .)
    GLOBAL          reduce using rule 70 (statement -> global_statement SEMICOLON .)
    VARIABLE        reduce using rule 70 (statement -> global_statement SEMICOLON .)
    ID              reduce using rule 70 (statement -> global_statement SEMICOLON .)
    IF              reduce using rule 70 (statement -> global_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 70 (statement -> global_statement SEMICOLON .)
    RKEY            reduce using rule 70 (statement -> global_statement SEMICOLON .)
    ELSE            reduce using rule 70 (statement -> global_statement SEMICOLON .)
    ELSEIF          reduce using rule 70 (statement -> global_statement SEMICOLON .)


state 71

    (11) expr -> MINUS expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 11 (expr -> MINUS expr .)
    PLUS            reduce using rule 11 (expr -> MINUS expr .)
    MINUS           reduce using rule 11 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 11 (expr -> MINUS expr .)
    PERCENT         reduce using rule 11 (expr -> MINUS expr .)
    TIMES           reduce using rule 11 (expr -> MINUS expr .)
    EQUALS          reduce using rule 11 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 11 (expr -> MINUS expr .)
    GREAT_THAN      reduce using rule 11 (expr -> MINUS expr .)
    GREAT_EQUAL     reduce using rule 11 (expr -> MINUS expr .)
    LESS_THAN       reduce using rule 11 (expr -> MINUS expr .)
    LESS_EQUAL      reduce using rule 11 (expr -> MINUS expr .)
    AND             reduce using rule 11 (expr -> MINUS expr .)
    OR              reduce using rule 11 (expr -> MINUS expr .)
    INTE_DOT        reduce using rule 11 (expr -> MINUS expr .)
    RPAREN          reduce using rule 11 (expr -> MINUS expr .)
    DDOT            reduce using rule 11 (expr -> MINUS expr .)
    ATTR_ASSOC      reduce using rule 11 (expr -> MINUS expr .)
    COLON           reduce using rule 11 (expr -> MINUS expr .)
    AS              reduce using rule 11 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 11 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 72

    (23) expr -> EXC_DOT expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 23 (expr -> EXC_DOT expr .)
    PLUS            reduce using rule 23 (expr -> EXC_DOT expr .)
    MINUS           reduce using rule 23 (expr -> EXC_DOT expr .)
    DIVIDE          reduce using rule 23 (expr -> EXC_DOT expr .)
    PERCENT         reduce using rule 23 (expr -> EXC_DOT expr .)
    TIMES           reduce using rule 23 (expr -> EXC_DOT expr .)
    EQUALS          reduce using rule 23 (expr -> EXC_DOT expr .)
    NOT_EQUAL       reduce using rule 23 (expr -> EXC_DOT expr .)
    GREAT_THAN      reduce using rule 23 (expr -> EXC_DOT expr .)
    GREAT_EQUAL     reduce using rule 23 (expr -> EXC_DOT expr .)
    LESS_THAN       reduce using rule 23 (expr -> EXC_DOT expr .)
    LESS_EQUAL      reduce using rule 23 (expr -> EXC_DOT expr .)
    AND             reduce using rule 23 (expr -> EXC_DOT expr .)
    OR              reduce using rule 23 (expr -> EXC_DOT expr .)
    INTE_DOT        reduce using rule 23 (expr -> EXC_DOT expr .)
    RPAREN          reduce using rule 23 (expr -> EXC_DOT expr .)
    DDOT            reduce using rule 23 (expr -> EXC_DOT expr .)
    ATTR_ASSOC      reduce using rule 23 (expr -> EXC_DOT expr .)
    COLON           reduce using rule 23 (expr -> EXC_DOT expr .)
    AS              reduce using rule 23 (expr -> EXC_DOT expr .)
    RBRACKET        reduce using rule 23 (expr -> EXC_DOT expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 73

    (24) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 24 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 24 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 24 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 24 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 24 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 24 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 24 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 24 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 24 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 24 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 24 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 24 (expr -> INCREMENT variable .)
    AND             reduce using rule 24 (expr -> INCREMENT variable .)
    OR              reduce using rule 24 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 24 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 24 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 24 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 24 (expr -> INCREMENT variable .)
    COLON           reduce using rule 24 (expr -> INCREMENT variable .)
    AS              reduce using rule 24 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 24 (expr -> INCREMENT variable .)


state 74

    (25) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 25 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 25 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 25 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 25 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 25 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 25 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 25 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 25 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 25 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 25 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 25 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 25 (expr -> variable INCREMENT .)
    AND             reduce using rule 25 (expr -> variable INCREMENT .)
    OR              reduce using rule 25 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 25 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 25 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 25 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 25 (expr -> variable INCREMENT .)
    COLON           reduce using rule 25 (expr -> variable INCREMENT .)
    AS              reduce using rule 25 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 25 (expr -> variable INCREMENT .)


state 75

    (27) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 27 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 27 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 27 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 27 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 27 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 27 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 27 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 27 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 27 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 27 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 27 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 27 (expr -> variable DECREMENT .)
    AND             reduce using rule 27 (expr -> variable DECREMENT .)
    OR              reduce using rule 27 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 27 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 27 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 27 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 27 (expr -> variable DECREMENT .)
    COLON           reduce using rule 27 (expr -> variable DECREMENT .)
    AS              reduce using rule 27 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 27 (expr -> variable DECREMENT .)


state 76

    (34) expr -> variable ADD_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 137
    function_call                  shift and go to state 28

state 77

    (35) expr -> variable SUB_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 138
    function_call                  shift and go to state 28

state 78

    (36) expr -> variable MOD_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 139
    function_call                  shift and go to state 28

state 79

    (37) expr -> variable TIMES_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 140
    function_call                  shift and go to state 28

state 80

    (38) expr -> variable DIVIDE_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 141
    function_call                  shift and go to state 28

state 81

    (39) expr -> variable CONCAT_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 142
    function_call                  shift and go to state 28

state 82

    (40) expr -> variable ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 143
    function_call                  shift and go to state 28

state 83

    (26) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 26 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 26 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 26 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 26 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 26 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 26 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 26 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 26 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 26 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 26 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 26 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 26 (expr -> DECREMENT variable .)
    AND             reduce using rule 26 (expr -> DECREMENT variable .)
    OR              reduce using rule 26 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 26 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 26 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 26 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 26 (expr -> DECREMENT variable .)
    COLON           reduce using rule 26 (expr -> DECREMENT variable .)
    AS              reduce using rule 26 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 26 (expr -> DECREMENT variable .)


state 84

    (29) expr -> LPAREN expr . RPAREN
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 144
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 85

    (31) expr -> LPAREN typecast_operator . RPAREN expr

    RPAREN          shift and go to state 145


state 86

    (30) expr -> ARRAY_TYPE . array_declaration
    (48) typecast_operator -> ARRAY_TYPE .
    (57) array_declaration -> . LPAREN array_pair_list RPAREN
    (58) array_declaration -> . LPAREN RPAREN

    RPAREN          reduce using rule 48 (typecast_operator -> ARRAY_TYPE .)
    LPAREN          shift and go to state 92

    array_declaration              shift and go to state 91

state 87

    (46) typecast_operator -> INT_TYPE .

    RPAREN          reduce using rule 46 (typecast_operator -> INT_TYPE .)


state 88

    (47) typecast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 47 (typecast_operator -> FLOAT_TYPE .)


state 89

    (49) typecast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 49 (typecast_operator -> STRING_TYPE .)


state 90

    (50) typecast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 50 (typecast_operator -> BOOL_TYPE .)


state 91

    (30) expr -> ARRAY_TYPE array_declaration .

    SEMICOLON       reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    PLUS            reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    MINUS           reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    DIVIDE          reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    PERCENT         reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    TIMES           reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    EQUALS          reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    NOT_EQUAL       reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    GREAT_THAN      reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    GREAT_EQUAL     reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    LESS_THAN       reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    LESS_EQUAL      reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    AND             reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    OR              reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    INTE_DOT        reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    RPAREN          reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    DDOT            reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    ATTR_ASSOC      reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    COLON           reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    AS              reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    RBRACKET        reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)


state 92

    (57) array_declaration -> LPAREN . array_pair_list RPAREN
    (58) array_declaration -> LPAREN . RPAREN
    (144) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (145) array_pair_list -> . array_pair
    (146) array_pair -> . expr
    (147) array_pair -> . AMPERSAND variable
    (148) array_pair -> . expr ATTR_ASSOC expr
    (149) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 147
    AMPERSAND       shift and go to state 150
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    array_pair_list                shift and go to state 146
    array_pair                     shift and go to state 148
    expr                           shift and go to state 149
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 93

    (82) while_statement -> WHILE expr_parentheses . statement_block_optional
    (152) statement_block_optional -> . statement
    (153) statement_block_optional -> . LKEY statement_MUL RKEY
    (154) statement_block_optional -> . LKEY RKEY
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    LKEY            shift and go to state 101
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_block_optional       shift and go to state 151
    statement                      shift and go to state 100
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 94

    (104) expr_parentheses -> LPAREN . expr RPAREN
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 152
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 95

    (72) if_statement -> statement_if statement_else .

    FUNCTION        reduce using rule 72 (if_statement -> statement_if statement_else .)
    MINUS           reduce using rule 72 (if_statement -> statement_if statement_else .)
    EXC_DOT         reduce using rule 72 (if_statement -> statement_if statement_else .)
    INCREMENT       reduce using rule 72 (if_statement -> statement_if statement_else .)
    DECREMENT       reduce using rule 72 (if_statement -> statement_if statement_else .)
    LPAREN          reduce using rule 72 (if_statement -> statement_if statement_else .)
    ARRAY_TYPE      reduce using rule 72 (if_statement -> statement_if statement_else .)
    NUMBER_INTEGER  reduce using rule 72 (if_statement -> statement_if statement_else .)
    NUMBER_REAL     reduce using rule 72 (if_statement -> statement_if statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 72 (if_statement -> statement_if statement_else .)
    TRUE            reduce using rule 72 (if_statement -> statement_if statement_else .)
    FALSE           reduce using rule 72 (if_statement -> statement_if statement_else .)
    WHILE           reduce using rule 72 (if_statement -> statement_if statement_else .)
    DO              reduce using rule 72 (if_statement -> statement_if statement_else .)
    FOR             reduce using rule 72 (if_statement -> statement_if statement_else .)
    FOREACH         reduce using rule 72 (if_statement -> statement_if statement_else .)
    BREAK           reduce using rule 72 (if_statement -> statement_if statement_else .)
    CONTINUE        reduce using rule 72 (if_statement -> statement_if statement_else .)
    RETURN          reduce using rule 72 (if_statement -> statement_if statement_else .)
    EXIT            reduce using rule 72 (if_statement -> statement_if statement_else .)
    DIE             reduce using rule 72 (if_statement -> statement_if statement_else .)
    GLOBAL          reduce using rule 72 (if_statement -> statement_if statement_else .)
    VARIABLE        reduce using rule 72 (if_statement -> statement_if statement_else .)
    ID              reduce using rule 72 (if_statement -> statement_if statement_else .)
    IF              reduce using rule 72 (if_statement -> statement_if statement_else .)
    END_PROGRAM     reduce using rule 72 (if_statement -> statement_if statement_else .)
    RKEY            reduce using rule 72 (if_statement -> statement_if statement_else .)
    ELSE            reduce using rule 72 (if_statement -> statement_if statement_else .)
    ELSEIF          reduce using rule 72 (if_statement -> statement_if statement_else .)


state 96

    (73) if_statement -> statement_if statement_elseif .
    (74) if_statement -> statement_if statement_elseif . statement_else
    (79) statement_else -> . ELSE statement_block_optional

  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    MINUS           reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    EXC_DOT         reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    INCREMENT       reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    DECREMENT       reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    LPAREN          reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    ARRAY_TYPE      reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    NUMBER_INTEGER  reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    NUMBER_REAL     reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    TRUE            reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    FALSE           reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    WHILE           reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    DO              reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    FOR             reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    FOREACH         reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    BREAK           reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    CONTINUE        reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    RETURN          reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    EXIT            reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    DIE             reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    GLOBAL          reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    VARIABLE        reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    ID              reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    IF              reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    END_PROGRAM     reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    RKEY            reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    ELSEIF          reduce using rule 73 (if_statement -> statement_if statement_elseif .)
    ELSE            shift and go to state 97

  ! ELSE            [ reduce using rule 73 (if_statement -> statement_if statement_elseif .) ]

    statement_else                 shift and go to state 153

state 97

    (79) statement_else -> ELSE . statement_block_optional
    (152) statement_block_optional -> . statement
    (153) statement_block_optional -> . LKEY statement_MUL RKEY
    (154) statement_block_optional -> . LKEY RKEY
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    LKEY            shift and go to state 101
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_block_optional       shift and go to state 154
    statement                      shift and go to state 100
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 98

    (77) statement_elseif -> ELSEIF . expr_parentheses statement_block_optional statement_elseif
    (78) statement_elseif -> ELSEIF . expr_parentheses statement_block_optional
    (104) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 94

    expr_parentheses               shift and go to state 155

state 99

    (83) do_statement -> DO statement_block_optional . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 156


state 100

    (152) statement_block_optional -> statement .

    WHILE           reduce using rule 152 (statement_block_optional -> statement .)
    FUNCTION        reduce using rule 152 (statement_block_optional -> statement .)
    MINUS           reduce using rule 152 (statement_block_optional -> statement .)
    EXC_DOT         reduce using rule 152 (statement_block_optional -> statement .)
    INCREMENT       reduce using rule 152 (statement_block_optional -> statement .)
    DECREMENT       reduce using rule 152 (statement_block_optional -> statement .)
    LPAREN          reduce using rule 152 (statement_block_optional -> statement .)
    ARRAY_TYPE      reduce using rule 152 (statement_block_optional -> statement .)
    NUMBER_INTEGER  reduce using rule 152 (statement_block_optional -> statement .)
    NUMBER_REAL     reduce using rule 152 (statement_block_optional -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 152 (statement_block_optional -> statement .)
    TRUE            reduce using rule 152 (statement_block_optional -> statement .)
    FALSE           reduce using rule 152 (statement_block_optional -> statement .)
    DO              reduce using rule 152 (statement_block_optional -> statement .)
    FOR             reduce using rule 152 (statement_block_optional -> statement .)
    FOREACH         reduce using rule 152 (statement_block_optional -> statement .)
    BREAK           reduce using rule 152 (statement_block_optional -> statement .)
    CONTINUE        reduce using rule 152 (statement_block_optional -> statement .)
    RETURN          reduce using rule 152 (statement_block_optional -> statement .)
    EXIT            reduce using rule 152 (statement_block_optional -> statement .)
    DIE             reduce using rule 152 (statement_block_optional -> statement .)
    GLOBAL          reduce using rule 152 (statement_block_optional -> statement .)
    VARIABLE        reduce using rule 152 (statement_block_optional -> statement .)
    ID              reduce using rule 152 (statement_block_optional -> statement .)
    IF              reduce using rule 152 (statement_block_optional -> statement .)
    END_PROGRAM     reduce using rule 152 (statement_block_optional -> statement .)
    RKEY            reduce using rule 152 (statement_block_optional -> statement .)
    ELSE            reduce using rule 152 (statement_block_optional -> statement .)
    ELSEIF          reduce using rule 152 (statement_block_optional -> statement .)


state 101

    (153) statement_block_optional -> LKEY . statement_MUL RKEY
    (154) statement_block_optional -> LKEY . RKEY
    (150) statement_MUL -> . statement statement_MUL
    (151) statement_MUL -> . statement
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    RKEY            shift and go to state 158
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_MUL                  shift and go to state 157
    statement                      shift and go to state 159
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 102

    (90) for_statement -> FOR LPAREN . for_parameters RPAREN statement_block_optional
    (91) for_parameters -> . SEMICOLON SEMICOLON
    (92) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (93) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (94) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (95) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (96) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (97) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (98) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (107) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (108) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 161
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_parameters                 shift and go to state 160
    for_expr_OPT                   shift and go to state 162
    expr                           shift and go to state 163
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 103

    (105) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 164
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 104

    (84) break_statement -> BREAK expr . SEMICOLON
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 165
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 105

    (85) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    EXC_DOT         reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 85 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 85 (break_statement -> BREAK SEMICOLON .)


state 106

    (86) continue_statement -> CONTINUE expr . SEMICOLON
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 166
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 107

    (87) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    EXC_DOT         reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 87 (continue_statement -> CONTINUE SEMICOLON .)


state 108

    (88) return_statement -> RETURN expr . SEMICOLON
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 167
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 109

    (89) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    EXC_DOT         reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 89 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 89 (return_statement -> RETURN SEMICOLON .)


state 110

    (51) exit_statement -> EXIT exit_expr .

    SEMICOLON       reduce using rule 51 (exit_statement -> EXIT exit_expr .)


state 111

    (55) exit_expr -> LPAREN . expr RPAREN
    (56) exit_expr -> LPAREN . RPAREN
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 169
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 168
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 112

    (53) die_statement -> DIE exit_expr .

    SEMICOLON       reduce using rule 53 (die_statement -> DIE exit_expr .)


state 113

    (80) global_statement -> GLOBAL global_var . statement_COLON_GLOBAL
    (81) global_statement -> GLOBAL global_var .
    (100) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (101) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 81 (global_statement -> GLOBAL global_var .)
    COLON           shift and go to state 171

    statement_COLON_GLOBAL         shift and go to state 170

state 114

    (99) global_var -> VARIABLE .

    COLON           reduce using rule 99 (global_var -> VARIABLE .)
    SEMICOLON       reduce using rule 99 (global_var -> VARIABLE .)


state 115

    (119) variable -> VARIABLE variable_array_selector .

    INCREMENT       reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    DECREMENT       reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    ADD_ASSIGN      reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    SUB_ASSIGN      reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    MOD_ASSIGN      reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    TIMES_ASSIGN    reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    DIVIDE_ASSIGN   reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    CONCAT_ASSIGN   reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    ASSIGN          reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    SEMICOLON       reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    PLUS            reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    MINUS           reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    DIVIDE          reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    PERCENT         reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    TIMES           reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    EQUALS          reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    NOT_EQUAL       reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    GREAT_THAN      reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    GREAT_EQUAL     reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    LESS_THAN       reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    LESS_EQUAL      reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    AND             reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    OR              reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    INTE_DOT        reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    RPAREN          reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    DDOT            reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    ATTR_ASSOC      reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    COLON           reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    AS              reduce using rule 119 (variable -> VARIABLE variable_array_selector .)
    RBRACKET        reduce using rule 119 (variable -> VARIABLE variable_array_selector .)


state 116

    (157) variable_array_selector -> selector . variable_array_selector
    (158) variable_array_selector -> selector .
    (157) variable_array_selector -> . selector variable_array_selector
    (158) variable_array_selector -> . selector
    (121) selector -> . LBRACKET expr RBRACKET
    (122) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 158 (variable_array_selector -> selector .)
    DECREMENT       reduce using rule 158 (variable_array_selector -> selector .)
    ADD_ASSIGN      reduce using rule 158 (variable_array_selector -> selector .)
    SUB_ASSIGN      reduce using rule 158 (variable_array_selector -> selector .)
    MOD_ASSIGN      reduce using rule 158 (variable_array_selector -> selector .)
    TIMES_ASSIGN    reduce using rule 158 (variable_array_selector -> selector .)
    DIVIDE_ASSIGN   reduce using rule 158 (variable_array_selector -> selector .)
    CONCAT_ASSIGN   reduce using rule 158 (variable_array_selector -> selector .)
    ASSIGN          reduce using rule 158 (variable_array_selector -> selector .)
    SEMICOLON       reduce using rule 158 (variable_array_selector -> selector .)
    PLUS            reduce using rule 158 (variable_array_selector -> selector .)
    MINUS           reduce using rule 158 (variable_array_selector -> selector .)
    DIVIDE          reduce using rule 158 (variable_array_selector -> selector .)
    PERCENT         reduce using rule 158 (variable_array_selector -> selector .)
    TIMES           reduce using rule 158 (variable_array_selector -> selector .)
    EQUALS          reduce using rule 158 (variable_array_selector -> selector .)
    NOT_EQUAL       reduce using rule 158 (variable_array_selector -> selector .)
    GREAT_THAN      reduce using rule 158 (variable_array_selector -> selector .)
    GREAT_EQUAL     reduce using rule 158 (variable_array_selector -> selector .)
    LESS_THAN       reduce using rule 158 (variable_array_selector -> selector .)
    LESS_EQUAL      reduce using rule 158 (variable_array_selector -> selector .)
    AND             reduce using rule 158 (variable_array_selector -> selector .)
    OR              reduce using rule 158 (variable_array_selector -> selector .)
    INTE_DOT        reduce using rule 158 (variable_array_selector -> selector .)
    RPAREN          reduce using rule 158 (variable_array_selector -> selector .)
    DDOT            reduce using rule 158 (variable_array_selector -> selector .)
    ATTR_ASSOC      reduce using rule 158 (variable_array_selector -> selector .)
    COLON           reduce using rule 158 (variable_array_selector -> selector .)
    AS              reduce using rule 158 (variable_array_selector -> selector .)
    RBRACKET        reduce using rule 158 (variable_array_selector -> selector .)
    LBRACKET        shift and go to state 117

    selector                       shift and go to state 116
    variable_array_selector        shift and go to state 172

state 117

    (121) selector -> LBRACKET . expr RBRACKET
    (122) selector -> LBRACKET . RBRACKET
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 174
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 173
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 118

    (111) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (112) function_call -> ID LPAREN . RPAREN
    (113) function_call_parameter_list -> . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (114) function_call_parameter_list -> . function_call_parameter
    (117) function_call_parameter -> . expr
    (118) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 176
    AMPERSAND       shift and go to state 179
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    function_call_parameter_list   shift and go to state 175
    function_call_parameter        shift and go to state 177
    expr                           shift and go to state 178
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 119

    (75) statement_if -> IF expr_parentheses . statement_block_optional statement_if
    (76) statement_if -> IF expr_parentheses . statement_block_optional
    (152) statement_block_optional -> . statement
    (153) statement_block_optional -> . LKEY statement_MUL RKEY
    (154) statement_block_optional -> . LKEY RKEY
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    LKEY            shift and go to state 101
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_block_optional       shift and go to state 180
    statement_if                   shift and go to state 35
    statement                      shift and go to state 100
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 120

    (123) function_declaration_statement -> FUNCTION fds_id fds_parameter . fds_statements
    (124) fds_statements -> . LKEY inner_statement_MUL RKEY
    (125) fds_statements -> . LKEY RKEY

    LKEY            shift and go to state 182

    fds_statements                 shift and go to state 181

state 121

    (128) fds_parameter -> LPAREN . parameter_list RPAREN
    (129) fds_parameter -> LPAREN . RPAREN
    (130) parameter_list -> . parameter parameter_list_colon_parameter
    (131) parameter_list -> . parameter
    (132) parameter -> . VARIABLE
    (133) parameter -> . parameter_prefix VARIABLE
    (134) parameter -> . VARIABLE ASSIGN expr
    (135) parameter -> . parameter_prefix VARIABLE ASSIGN expr
    (136) parameter_prefix -> . parameter_type AMPERSAND
    (137) parameter_prefix -> . AMPERSAND
    (138) parameter_prefix -> . parameter_type
    (139) parameter_type -> . INT_TYPE
    (140) parameter_type -> . STRING_TYPE
    (141) parameter_type -> . FLOAT_TYPE
    (142) parameter_type -> . ARRAY_TYPE
    (143) parameter_type -> . BOOL_TYPE

    RPAREN          shift and go to state 184
    VARIABLE        shift and go to state 186
    AMPERSAND       shift and go to state 189
    INT_TYPE        shift and go to state 190
    STRING_TYPE     shift and go to state 191
    FLOAT_TYPE      shift and go to state 192
    ARRAY_TYPE      shift and go to state 193
    BOOL_TYPE       shift and go to state 194

    parameter_list                 shift and go to state 183
    parameter                      shift and go to state 185
    parameter_prefix               shift and go to state 187
    parameter_type                 shift and go to state 188

state 122

    (126) fds_id -> AMPERSAND ID .

    LPAREN          reduce using rule 126 (fds_id -> AMPERSAND ID .)


state 123

    (9) expr -> expr PLUS expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 9 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 9 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 9 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 9 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 9 (expr -> expr PLUS expr .)
    GREAT_THAN      reduce using rule 9 (expr -> expr PLUS expr .)
    GREAT_EQUAL     reduce using rule 9 (expr -> expr PLUS expr .)
    LESS_THAN       reduce using rule 9 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 9 (expr -> expr PLUS expr .)
    AND             reduce using rule 9 (expr -> expr PLUS expr .)
    OR              reduce using rule 9 (expr -> expr PLUS expr .)
    INTE_DOT        reduce using rule 9 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 9 (expr -> expr PLUS expr .)
    DDOT            reduce using rule 9 (expr -> expr PLUS expr .)
    ATTR_ASSOC      reduce using rule 9 (expr -> expr PLUS expr .)
    COLON           reduce using rule 9 (expr -> expr PLUS expr .)
    AS              reduce using rule 9 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 9 (expr -> expr PLUS expr .)
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! DIVIDE          [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! PERCENT         [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 124

    (10) expr -> expr MINUS expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 10 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 10 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 10 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 10 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 10 (expr -> expr MINUS expr .)
    GREAT_THAN      reduce using rule 10 (expr -> expr MINUS expr .)
    GREAT_EQUAL     reduce using rule 10 (expr -> expr MINUS expr .)
    LESS_THAN       reduce using rule 10 (expr -> expr MINUS expr .)
    LESS_EQUAL      reduce using rule 10 (expr -> expr MINUS expr .)
    AND             reduce using rule 10 (expr -> expr MINUS expr .)
    OR              reduce using rule 10 (expr -> expr MINUS expr .)
    INTE_DOT        reduce using rule 10 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 10 (expr -> expr MINUS expr .)
    DDOT            reduce using rule 10 (expr -> expr MINUS expr .)
    ATTR_ASSOC      reduce using rule 10 (expr -> expr MINUS expr .)
    COLON           reduce using rule 10 (expr -> expr MINUS expr .)
    AS              reduce using rule 10 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 10 (expr -> expr MINUS expr .)
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! DIVIDE          [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! PERCENT         [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 125

    (12) expr -> expr DIVIDE expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 12 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 12 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 12 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 12 (expr -> expr DIVIDE expr .)
    PERCENT         reduce using rule 12 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 12 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 12 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 12 (expr -> expr DIVIDE expr .)
    GREAT_THAN      reduce using rule 12 (expr -> expr DIVIDE expr .)
    GREAT_EQUAL     reduce using rule 12 (expr -> expr DIVIDE expr .)
    LESS_THAN       reduce using rule 12 (expr -> expr DIVIDE expr .)
    LESS_EQUAL      reduce using rule 12 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 12 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 12 (expr -> expr DIVIDE expr .)
    INTE_DOT        reduce using rule 12 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 12 (expr -> expr DIVIDE expr .)
    DDOT            reduce using rule 12 (expr -> expr DIVIDE expr .)
    ATTR_ASSOC      reduce using rule 12 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 12 (expr -> expr DIVIDE expr .)
    AS              reduce using rule 12 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 12 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 126

    (13) expr -> expr PERCENT expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 13 (expr -> expr PERCENT expr .)
    PLUS            reduce using rule 13 (expr -> expr PERCENT expr .)
    MINUS           reduce using rule 13 (expr -> expr PERCENT expr .)
    DIVIDE          reduce using rule 13 (expr -> expr PERCENT expr .)
    PERCENT         reduce using rule 13 (expr -> expr PERCENT expr .)
    TIMES           reduce using rule 13 (expr -> expr PERCENT expr .)
    EQUALS          reduce using rule 13 (expr -> expr PERCENT expr .)
    NOT_EQUAL       reduce using rule 13 (expr -> expr PERCENT expr .)
    GREAT_THAN      reduce using rule 13 (expr -> expr PERCENT expr .)
    GREAT_EQUAL     reduce using rule 13 (expr -> expr PERCENT expr .)
    LESS_THAN       reduce using rule 13 (expr -> expr PERCENT expr .)
    LESS_EQUAL      reduce using rule 13 (expr -> expr PERCENT expr .)
    AND             reduce using rule 13 (expr -> expr PERCENT expr .)
    OR              reduce using rule 13 (expr -> expr PERCENT expr .)
    INTE_DOT        reduce using rule 13 (expr -> expr PERCENT expr .)
    RPAREN          reduce using rule 13 (expr -> expr PERCENT expr .)
    DDOT            reduce using rule 13 (expr -> expr PERCENT expr .)
    ATTR_ASSOC      reduce using rule 13 (expr -> expr PERCENT expr .)
    COLON           reduce using rule 13 (expr -> expr PERCENT expr .)
    AS              reduce using rule 13 (expr -> expr PERCENT expr .)
    RBRACKET        reduce using rule 13 (expr -> expr PERCENT expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 127

    (14) expr -> expr TIMES expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 14 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 14 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 14 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 14 (expr -> expr TIMES expr .)
    PERCENT         reduce using rule 14 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 14 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 14 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 14 (expr -> expr TIMES expr .)
    GREAT_THAN      reduce using rule 14 (expr -> expr TIMES expr .)
    GREAT_EQUAL     reduce using rule 14 (expr -> expr TIMES expr .)
    LESS_THAN       reduce using rule 14 (expr -> expr TIMES expr .)
    LESS_EQUAL      reduce using rule 14 (expr -> expr TIMES expr .)
    AND             reduce using rule 14 (expr -> expr TIMES expr .)
    OR              reduce using rule 14 (expr -> expr TIMES expr .)
    INTE_DOT        reduce using rule 14 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 14 (expr -> expr TIMES expr .)
    DDOT            reduce using rule 14 (expr -> expr TIMES expr .)
    ATTR_ASSOC      reduce using rule 14 (expr -> expr TIMES expr .)
    COLON           reduce using rule 14 (expr -> expr TIMES expr .)
    AS              reduce using rule 14 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 14 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 128

    (15) expr -> expr EQUALS expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 15 (expr -> expr EQUALS expr .)
    EQUALS          reduce using rule 15 (expr -> expr EQUALS expr .)
    NOT_EQUAL       reduce using rule 15 (expr -> expr EQUALS expr .)
    GREAT_THAN      reduce using rule 15 (expr -> expr EQUALS expr .)
    GREAT_EQUAL     reduce using rule 15 (expr -> expr EQUALS expr .)
    LESS_THAN       reduce using rule 15 (expr -> expr EQUALS expr .)
    LESS_EQUAL      reduce using rule 15 (expr -> expr EQUALS expr .)
    AND             reduce using rule 15 (expr -> expr EQUALS expr .)
    OR              reduce using rule 15 (expr -> expr EQUALS expr .)
    INTE_DOT        reduce using rule 15 (expr -> expr EQUALS expr .)
    RPAREN          reduce using rule 15 (expr -> expr EQUALS expr .)
    DDOT            reduce using rule 15 (expr -> expr EQUALS expr .)
    ATTR_ASSOC      reduce using rule 15 (expr -> expr EQUALS expr .)
    COLON           reduce using rule 15 (expr -> expr EQUALS expr .)
    AS              reduce using rule 15 (expr -> expr EQUALS expr .)
    RBRACKET        reduce using rule 15 (expr -> expr EQUALS expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! PERCENT         [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! TIMES           [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 129

    (16) expr -> expr NOT_EQUAL expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    EQUALS          reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    GREAT_THAN      reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    GREAT_EQUAL     reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    LESS_THAN       reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    LESS_EQUAL      reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    INTE_DOT        reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    DDOT            reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    AS              reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    RBRACKET        reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 130

    (17) expr -> expr GREAT_THAN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    EQUALS          reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    NOT_EQUAL       reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    GREAT_THAN      reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    GREAT_EQUAL     reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    LESS_THAN       reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    LESS_EQUAL      reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    AND             reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    OR              reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    INTE_DOT        reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    RPAREN          reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    DDOT            reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    ATTR_ASSOC      reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    COLON           reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    AS              reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    RBRACKET        reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! PERCENT         [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 131

    (18) expr -> expr GREAT_EQUAL expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    EQUALS          reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    GREAT_THAN      reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    GREAT_EQUAL     reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    LESS_THAN       reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    LESS_EQUAL      reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    AND             reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    OR              reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    INTE_DOT        reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    RPAREN          reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    DDOT            reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    COLON           reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    AS              reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    RBRACKET        reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 132

    (19) expr -> expr LESS_THAN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 19 (expr -> expr LESS_THAN expr .)
    EQUALS          reduce using rule 19 (expr -> expr LESS_THAN expr .)
    NOT_EQUAL       reduce using rule 19 (expr -> expr LESS_THAN expr .)
    GREAT_THAN      reduce using rule 19 (expr -> expr LESS_THAN expr .)
    GREAT_EQUAL     reduce using rule 19 (expr -> expr LESS_THAN expr .)
    LESS_THAN       reduce using rule 19 (expr -> expr LESS_THAN expr .)
    LESS_EQUAL      reduce using rule 19 (expr -> expr LESS_THAN expr .)
    AND             reduce using rule 19 (expr -> expr LESS_THAN expr .)
    OR              reduce using rule 19 (expr -> expr LESS_THAN expr .)
    INTE_DOT        reduce using rule 19 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 19 (expr -> expr LESS_THAN expr .)
    DDOT            reduce using rule 19 (expr -> expr LESS_THAN expr .)
    ATTR_ASSOC      reduce using rule 19 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 19 (expr -> expr LESS_THAN expr .)
    AS              reduce using rule 19 (expr -> expr LESS_THAN expr .)
    RBRACKET        reduce using rule 19 (expr -> expr LESS_THAN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! PERCENT         [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 133

    (20) expr -> expr LESS_EQUAL expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    EQUALS          reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    NOT_EQUAL       reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    GREAT_THAN      reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    GREAT_EQUAL     reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    LESS_THAN       reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    LESS_EQUAL      reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    AND             reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    OR              reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    INTE_DOT        reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    DDOT            reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    COLON           reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    AS              reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    RBRACKET        reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 134

    (21) expr -> expr AND expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 21 (expr -> expr AND expr .)
    AND             reduce using rule 21 (expr -> expr AND expr .)
    OR              reduce using rule 21 (expr -> expr AND expr .)
    INTE_DOT        reduce using rule 21 (expr -> expr AND expr .)
    RPAREN          reduce using rule 21 (expr -> expr AND expr .)
    DDOT            reduce using rule 21 (expr -> expr AND expr .)
    ATTR_ASSOC      reduce using rule 21 (expr -> expr AND expr .)
    COLON           reduce using rule 21 (expr -> expr AND expr .)
    AS              reduce using rule 21 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 21 (expr -> expr AND expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64

  ! PLUS            [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! PERCENT         [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! EQUALS          [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! GREAT_THAN      [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 135

    (22) expr -> expr OR expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 22 (expr -> expr OR expr .)
    AND             reduce using rule 22 (expr -> expr OR expr .)
    OR              reduce using rule 22 (expr -> expr OR expr .)
    INTE_DOT        reduce using rule 22 (expr -> expr OR expr .)
    RPAREN          reduce using rule 22 (expr -> expr OR expr .)
    DDOT            reduce using rule 22 (expr -> expr OR expr .)
    ATTR_ASSOC      reduce using rule 22 (expr -> expr OR expr .)
    COLON           reduce using rule 22 (expr -> expr OR expr .)
    AS              reduce using rule 22 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 22 (expr -> expr OR expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64

  ! PLUS            [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! PERCENT         [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! EQUALS          [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! GREAT_THAN      [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 136

    (33) expr -> expr INTE_DOT expr . DDOT expr
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    DDOT            shift and go to state 195
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 137

    (34) expr -> variable ADD_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 34 (expr -> variable ADD_ASSIGN expr .)
    RPAREN          reduce using rule 34 (expr -> variable ADD_ASSIGN expr .)
    DDOT            reduce using rule 34 (expr -> variable ADD_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 34 (expr -> variable ADD_ASSIGN expr .)
    COLON           reduce using rule 34 (expr -> variable ADD_ASSIGN expr .)
    AS              reduce using rule 34 (expr -> variable ADD_ASSIGN expr .)
    RBRACKET        reduce using rule 34 (expr -> variable ADD_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! AND             [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! OR              [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 34 (expr -> variable ADD_ASSIGN expr .) ]


state 138

    (35) expr -> variable SUB_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 35 (expr -> variable SUB_ASSIGN expr .)
    RPAREN          reduce using rule 35 (expr -> variable SUB_ASSIGN expr .)
    DDOT            reduce using rule 35 (expr -> variable SUB_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 35 (expr -> variable SUB_ASSIGN expr .)
    COLON           reduce using rule 35 (expr -> variable SUB_ASSIGN expr .)
    AS              reduce using rule 35 (expr -> variable SUB_ASSIGN expr .)
    RBRACKET        reduce using rule 35 (expr -> variable SUB_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! AND             [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! OR              [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 35 (expr -> variable SUB_ASSIGN expr .) ]


state 139

    (36) expr -> variable MOD_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 36 (expr -> variable MOD_ASSIGN expr .)
    RPAREN          reduce using rule 36 (expr -> variable MOD_ASSIGN expr .)
    DDOT            reduce using rule 36 (expr -> variable MOD_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 36 (expr -> variable MOD_ASSIGN expr .)
    COLON           reduce using rule 36 (expr -> variable MOD_ASSIGN expr .)
    AS              reduce using rule 36 (expr -> variable MOD_ASSIGN expr .)
    RBRACKET        reduce using rule 36 (expr -> variable MOD_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! AND             [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! OR              [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 36 (expr -> variable MOD_ASSIGN expr .) ]


state 140

    (37) expr -> variable TIMES_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .)
    RPAREN          reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .)
    DDOT            reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .)
    COLON           reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .)
    AS              reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .)
    RBRACKET        reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! AND             [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! OR              [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 37 (expr -> variable TIMES_ASSIGN expr .) ]


state 141

    (38) expr -> variable DIVIDE_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .)
    RPAREN          reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .)
    DDOT            reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .)
    COLON           reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .)
    AS              reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .)
    RBRACKET        reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! AND             [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! OR              [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 38 (expr -> variable DIVIDE_ASSIGN expr .) ]


state 142

    (39) expr -> variable CONCAT_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .)
    RPAREN          reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .)
    DDOT            reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .)
    COLON           reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .)
    AS              reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .)
    RBRACKET        reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! AND             [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! OR              [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 39 (expr -> variable CONCAT_ASSIGN expr .) ]


state 143

    (40) expr -> variable ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 40 (expr -> variable ASSIGN expr .)
    RPAREN          reduce using rule 40 (expr -> variable ASSIGN expr .)
    DDOT            reduce using rule 40 (expr -> variable ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 40 (expr -> variable ASSIGN expr .)
    COLON           reduce using rule 40 (expr -> variable ASSIGN expr .)
    AS              reduce using rule 40 (expr -> variable ASSIGN expr .)
    RBRACKET        reduce using rule 40 (expr -> variable ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! AND             [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! OR              [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 40 (expr -> variable ASSIGN expr .) ]


state 144

    (29) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 29 (expr -> LPAREN expr RPAREN .)


state 145

    (31) expr -> LPAREN typecast_operator RPAREN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 196
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 146

    (57) array_declaration -> LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 197


state 147

    (58) array_declaration -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    PLUS            reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    MINUS           reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    PERCENT         reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    TIMES           reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    EQUALS          reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    AND             reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    OR              reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    INTE_DOT        reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    RPAREN          reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    DDOT            reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    COLON           reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    AS              reduce using rule 58 (array_declaration -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 58 (array_declaration -> LPAREN RPAREN .)


state 148

    (144) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (145) array_pair_list -> array_pair .
    (159) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (160) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 145 (array_pair_list -> array_pair .)
    COLON           shift and go to state 199

    array_pair_list_ARR_PAIR       shift and go to state 198

state 149

    (146) array_pair -> expr .
    (148) array_pair -> expr . ATTR_ASSOC expr
    (149) array_pair -> expr . ATTR_ASSOC AMPERSAND variable
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 146 (array_pair -> expr .)
    RPAREN          reduce using rule 146 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 200
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 150

    (147) array_pair -> AMPERSAND . variable
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 201

state 151

    (82) while_statement -> WHILE expr_parentheses statement_block_optional .

    FUNCTION        reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    MINUS           reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    EXC_DOT         reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    INCREMENT       reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    DECREMENT       reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    LPAREN          reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    ARRAY_TYPE      reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    NUMBER_INTEGER  reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    NUMBER_REAL     reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    TRUE            reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    FALSE           reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    WHILE           reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    DO              reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    FOR             reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    FOREACH         reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    BREAK           reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    CONTINUE        reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    RETURN          reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    EXIT            reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    DIE             reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    GLOBAL          reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    VARIABLE        reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    ID              reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    IF              reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    END_PROGRAM     reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    RKEY            reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    ELSE            reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)
    ELSEIF          reduce using rule 82 (while_statement -> WHILE expr_parentheses statement_block_optional .)


state 152

    (104) expr_parentheses -> LPAREN expr . RPAREN
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 202
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 153

    (74) if_statement -> statement_if statement_elseif statement_else .

    FUNCTION        reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    MINUS           reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    EXC_DOT         reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    INCREMENT       reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    DECREMENT       reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    LPAREN          reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    TRUE            reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    FALSE           reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    WHILE           reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    DO              reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    FOR             reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    FOREACH         reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    BREAK           reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    CONTINUE        reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    RETURN          reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    EXIT            reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    DIE             reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    GLOBAL          reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    VARIABLE        reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    ID              reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    IF              reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    RKEY            reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    ELSE            reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)
    ELSEIF          reduce using rule 74 (if_statement -> statement_if statement_elseif statement_else .)


state 154

    (79) statement_else -> ELSE statement_block_optional .

    FUNCTION        reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    MINUS           reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    EXC_DOT         reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    INCREMENT       reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    DECREMENT       reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    LPAREN          reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    ARRAY_TYPE      reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    NUMBER_INTEGER  reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    NUMBER_REAL     reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    CONSTANT_ENCAPSED_STRING reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    TRUE            reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    FALSE           reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    WHILE           reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    DO              reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    FOR             reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    FOREACH         reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    BREAK           reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    CONTINUE        reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    RETURN          reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    EXIT            reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    DIE             reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    GLOBAL          reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    VARIABLE        reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    ID              reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    IF              reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    END_PROGRAM     reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    RKEY            reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    ELSE            reduce using rule 79 (statement_else -> ELSE statement_block_optional .)
    ELSEIF          reduce using rule 79 (statement_else -> ELSE statement_block_optional .)


state 155

    (77) statement_elseif -> ELSEIF expr_parentheses . statement_block_optional statement_elseif
    (78) statement_elseif -> ELSEIF expr_parentheses . statement_block_optional
    (152) statement_block_optional -> . statement
    (153) statement_block_optional -> . LKEY statement_MUL RKEY
    (154) statement_block_optional -> . LKEY RKEY
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    LKEY            shift and go to state 101
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_block_optional       shift and go to state 203
    statement                      shift and go to state 100
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 156

    (83) do_statement -> DO statement_block_optional WHILE . expr_parentheses SEMICOLON
    (104) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 94

    expr_parentheses               shift and go to state 204

state 157

    (153) statement_block_optional -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 205


state 158

    (154) statement_block_optional -> LKEY RKEY .

    WHILE           reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    FUNCTION        reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    MINUS           reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    EXC_DOT         reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    INCREMENT       reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    DECREMENT       reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    LPAREN          reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    TRUE            reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    FALSE           reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    DO              reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    FOR             reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    FOREACH         reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    BREAK           reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    CONTINUE        reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    RETURN          reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    EXIT            reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    DIE             reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    GLOBAL          reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    VARIABLE        reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    ID              reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    IF              reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    RKEY            reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    ELSE            reduce using rule 154 (statement_block_optional -> LKEY RKEY .)
    ELSEIF          reduce using rule 154 (statement_block_optional -> LKEY RKEY .)


state 159

    (150) statement_MUL -> statement . statement_MUL
    (151) statement_MUL -> statement .
    (150) statement_MUL -> . statement statement_MUL
    (151) statement_MUL -> . statement
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    RKEY            reduce using rule 151 (statement_MUL -> statement .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement                      shift and go to state 159
    statement_MUL                  shift and go to state 206
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 160

    (90) for_statement -> FOR LPAREN for_parameters . RPAREN statement_block_optional

    RPAREN          shift and go to state 207


state 161

    (91) for_parameters -> SEMICOLON . SEMICOLON
    (95) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (96) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (97) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (107) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (108) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 208
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 209
    expr                           shift and go to state 163
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 162

    (92) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (93) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (94) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (98) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 210


state 163

    (107) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (108) for_expr_OPT -> expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr
    (109) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (110) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 108 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 108 (for_expr_OPT -> expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67
    COLON           shift and go to state 212

    for_expr_COLON_EXPR            shift and go to state 211

state 164

    (105) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    AS              shift and go to state 213
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 165

    (84) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    MINUS           reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    EXC_DOT         reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    FOREACH         reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 84 (break_statement -> BREAK expr SEMICOLON .)


state 166

    (86) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    MINUS           reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXC_DOT         reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOREACH         reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 86 (continue_statement -> CONTINUE expr SEMICOLON .)


state 167

    (88) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    EXC_DOT         reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 88 (return_statement -> RETURN expr SEMICOLON .)


state 168

    (55) exit_expr -> LPAREN expr . RPAREN
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 214
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 169

    (56) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 56 (exit_expr -> LPAREN RPAREN .)


state 170

    (80) global_statement -> GLOBAL global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 80 (global_statement -> GLOBAL global_var statement_COLON_GLOBAL .)


state 171

    (100) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (101) statement_COLON_GLOBAL -> COLON . global_var
    (99) global_var -> . VARIABLE

    VARIABLE        shift and go to state 114

    global_var                     shift and go to state 215

state 172

    (157) variable_array_selector -> selector variable_array_selector .

    INCREMENT       reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    DECREMENT       reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    ADD_ASSIGN      reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    SUB_ASSIGN      reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    MOD_ASSIGN      reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    TIMES_ASSIGN    reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    DIVIDE_ASSIGN   reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    CONCAT_ASSIGN   reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    ASSIGN          reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    SEMICOLON       reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    PLUS            reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    MINUS           reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    DIVIDE          reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    PERCENT         reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    TIMES           reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    EQUALS          reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    NOT_EQUAL       reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    GREAT_THAN      reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    GREAT_EQUAL     reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    LESS_THAN       reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    LESS_EQUAL      reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    AND             reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    OR              reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    INTE_DOT        reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    RPAREN          reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    DDOT            reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    ATTR_ASSOC      reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    COLON           reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    AS              reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)
    RBRACKET        reduce using rule 157 (variable_array_selector -> selector variable_array_selector .)


state 173

    (121) selector -> LBRACKET expr . RBRACKET
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    RBRACKET        shift and go to state 216
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 174

    (122) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    TIMES_ASSIGN    reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    CONCAT_ASSIGN   reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    AND             reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    OR              reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    AS              reduce using rule 122 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 122 (selector -> LBRACKET RBRACKET .)


state 175

    (111) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 217


state 176

    (112) function_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    INTE_DOT        reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    AS              reduce using rule 112 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 112 (function_call -> ID LPAREN RPAREN .)


state 177

    (113) function_call_parameter_list -> function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (114) function_call_parameter_list -> function_call_parameter .
    (115) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (116) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 114 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 219

    fc_parameter_list_COLON_PARAMETER shift and go to state 218

state 178

    (117) function_call_parameter -> expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 117 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 117 (function_call_parameter -> expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 179

    (118) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 220


state 180

    (75) statement_if -> IF expr_parentheses statement_block_optional . statement_if
    (76) statement_if -> IF expr_parentheses statement_block_optional .
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    ELSEIF          reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    FUNCTION        reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    MINUS           reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    EXC_DOT         reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    INCREMENT       reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    DECREMENT       reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    LPAREN          reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    ARRAY_TYPE      reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    NUMBER_INTEGER  reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    NUMBER_REAL     reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    CONSTANT_ENCAPSED_STRING reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    TRUE            reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    FALSE           reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    WHILE           reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    DO              reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    FOR             reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    FOREACH         reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    BREAK           reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    CONTINUE        reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    RETURN          reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    EXIT            reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    DIE             reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    GLOBAL          reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    VARIABLE        reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    ID              reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    END_PROGRAM     reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    RKEY            reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .)
    IF              shift and go to state 47

  ! IF              [ reduce using rule 76 (statement_if -> IF expr_parentheses statement_block_optional .) ]

    statement_if                   shift and go to state 221

state 181

    (123) function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .

    FUNCTION        reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    MINUS           reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXC_DOT         reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    INCREMENT       reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DECREMENT       reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    LPAREN          reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ARRAY_TYPE      reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_INTEGER  reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_REAL     reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONSTANT_ENCAPSED_STRING reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    TRUE            reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FALSE           reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    WHILE           reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DO              reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOR             reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOREACH         reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    BREAK           reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONTINUE        reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RETURN          reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXIT            reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DIE             reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    GLOBAL          reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    VARIABLE        reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ID              reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    IF              reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    END_PROGRAM     reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RKEY            reduce using rule 123 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)


state 182

    (124) fds_statements -> LKEY . inner_statement_MUL RKEY
    (125) fds_statements -> LKEY . RKEY
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (123) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    RKEY            shift and go to state 223
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    inner_statement_MUL            shift and go to state 222
    inner_statement                shift and go to state 224
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 183

    (128) fds_parameter -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 225


state 184

    (129) fds_parameter -> LPAREN RPAREN .

    LKEY            reduce using rule 129 (fds_parameter -> LPAREN RPAREN .)


state 185

    (130) parameter_list -> parameter . parameter_list_colon_parameter
    (131) parameter_list -> parameter .
    (155) parameter_list_colon_parameter -> . COLON parameter parameter_list_colon_parameter
    (156) parameter_list_colon_parameter -> . COLON parameter

    RPAREN          reduce using rule 131 (parameter_list -> parameter .)
    COLON           shift and go to state 227

    parameter_list_colon_parameter shift and go to state 226

state 186

    (132) parameter -> VARIABLE .
    (134) parameter -> VARIABLE . ASSIGN expr

    COLON           reduce using rule 132 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 132 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 228


state 187

    (133) parameter -> parameter_prefix . VARIABLE
    (135) parameter -> parameter_prefix . VARIABLE ASSIGN expr

    VARIABLE        shift and go to state 229


state 188

    (136) parameter_prefix -> parameter_type . AMPERSAND
    (138) parameter_prefix -> parameter_type .

    AMPERSAND       shift and go to state 230
    VARIABLE        reduce using rule 138 (parameter_prefix -> parameter_type .)


state 189

    (137) parameter_prefix -> AMPERSAND .

    VARIABLE        reduce using rule 137 (parameter_prefix -> AMPERSAND .)


state 190

    (139) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 139 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 139 (parameter_type -> INT_TYPE .)


state 191

    (140) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 140 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 140 (parameter_type -> STRING_TYPE .)


state 192

    (141) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 141 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 141 (parameter_type -> FLOAT_TYPE .)


state 193

    (142) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 142 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 142 (parameter_type -> ARRAY_TYPE .)


state 194

    (143) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 143 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 143 (parameter_type -> BOOL_TYPE .)


state 195

    (33) expr -> expr INTE_DOT expr DDOT . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 231
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 196

    (31) expr -> LPAREN typecast_operator RPAREN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    PLUS            reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    MINUS           reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    DIVIDE          reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    PERCENT         reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    TIMES           reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    EQUALS          reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    NOT_EQUAL       reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    GREAT_THAN      reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    GREAT_EQUAL     reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    LESS_THAN       reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    LESS_EQUAL      reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    AND             reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    OR              reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    INTE_DOT        reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    RPAREN          reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    DDOT            reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    COLON           reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    AS              reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)
    RBRACKET        reduce using rule 31 (expr -> LPAREN typecast_operator RPAREN expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 197

    (57) array_declaration -> LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 57 (array_declaration -> LPAREN array_pair_list RPAREN .)


state 198

    (144) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 144 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 199

    (159) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (160) array_pair_list_ARR_PAIR -> COLON . array_pair
    (146) array_pair -> . expr
    (147) array_pair -> . AMPERSAND variable
    (148) array_pair -> . expr ATTR_ASSOC expr
    (149) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    AMPERSAND       shift and go to state 150
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    array_pair                     shift and go to state 232
    expr                           shift and go to state 149
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 200

    (148) array_pair -> expr ATTR_ASSOC . expr
    (149) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    AMPERSAND       shift and go to state 234
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 233
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 201

    (147) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 147 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 147 (array_pair -> AMPERSAND variable .)


state 202

    (104) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    EXC_DOT         reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 104 (expr_parentheses -> LPAREN expr RPAREN .)


state 203

    (77) statement_elseif -> ELSEIF expr_parentheses statement_block_optional . statement_elseif
    (78) statement_elseif -> ELSEIF expr_parentheses statement_block_optional .
    (77) statement_elseif -> . ELSEIF expr_parentheses statement_block_optional statement_elseif
    (78) statement_elseif -> . ELSEIF expr_parentheses statement_block_optional

  ! shift/reduce conflict for ELSEIF resolved as shift
    FUNCTION        reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    MINUS           reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    EXC_DOT         reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    INCREMENT       reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    DECREMENT       reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    LPAREN          reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    ARRAY_TYPE      reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    NUMBER_INTEGER  reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    NUMBER_REAL     reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    CONSTANT_ENCAPSED_STRING reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    TRUE            reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    FALSE           reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    WHILE           reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    DO              reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    FOR             reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    FOREACH         reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    BREAK           reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    CONTINUE        reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    RETURN          reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    EXIT            reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    DIE             reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    GLOBAL          reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    VARIABLE        reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    ID              reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    IF              reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    END_PROGRAM     reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    RKEY            reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    ELSE            reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .)
    ELSEIF          shift and go to state 98

  ! ELSEIF          [ reduce using rule 78 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional .) ]

    statement_elseif               shift and go to state 235

state 204

    (83) do_statement -> DO statement_block_optional WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 236


state 205

    (153) statement_block_optional -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 153 (statement_block_optional -> LKEY statement_MUL RKEY .)


state 206

    (150) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 150 (statement_MUL -> statement statement_MUL .)


state 207

    (90) for_statement -> FOR LPAREN for_parameters RPAREN . statement_block_optional
    (152) statement_block_optional -> . statement
    (153) statement_block_optional -> . LKEY statement_MUL RKEY
    (154) statement_block_optional -> . LKEY RKEY
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    LKEY            shift and go to state 101
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_block_optional       shift and go to state 237
    statement                      shift and go to state 100
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 208

    (91) for_parameters -> SEMICOLON SEMICOLON .
    (97) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (107) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (108) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 91 (for_parameters -> SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 238
    expr                           shift and go to state 163
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 209

    (95) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (96) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 239


state 210

    (92) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (93) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (94) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (98) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (107) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (108) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 241
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 240
    expr                           shift and go to state 163
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 211

    (107) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 107 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 107 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 212

    (109) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (110) for_expr_COLON_EXPR -> COLON . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 242
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 213

    (105) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (102) ampersand_variable -> . AMPERSAND VARIABLE
    (103) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 244
    VARIABLE        shift and go to state 245

    ampersand_variable             shift and go to state 243

state 214

    (55) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 55 (exit_expr -> LPAREN expr RPAREN .)


state 215

    (100) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (101) statement_COLON_GLOBAL -> COLON global_var .
    (100) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (101) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 101 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 171

    statement_COLON_GLOBAL         shift and go to state 246

state 216

    (121) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    TIMES_ASSIGN    reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    CONCAT_ASSIGN   reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    AS              reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 121 (selector -> LBRACKET expr RBRACKET .)


state 217

    (111) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 111 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 218

    (113) function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 113 (function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 219

    (115) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (116) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter
    (117) function_call_parameter -> . expr
    (118) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    AMPERSAND       shift and go to state 179
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    function_call_parameter        shift and go to state 247
    expr                           shift and go to state 178
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 220

    (118) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 118 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 118 (function_call_parameter -> AMPERSAND VARIABLE .)


state 221

    (75) statement_if -> IF expr_parentheses statement_block_optional statement_if .

    ELSE            reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    ELSEIF          reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    FUNCTION        reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    MINUS           reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    EXC_DOT         reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    INCREMENT       reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    DECREMENT       reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    LPAREN          reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    ARRAY_TYPE      reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    NUMBER_INTEGER  reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    NUMBER_REAL     reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    TRUE            reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    FALSE           reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    WHILE           reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    DO              reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    FOR             reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    FOREACH         reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    BREAK           reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    CONTINUE        reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    RETURN          reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    EXIT            reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    DIE             reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    GLOBAL          reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    VARIABLE        reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    ID              reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    IF              reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    END_PROGRAM     reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)
    RKEY            reduce using rule 75 (statement_if -> IF expr_parentheses statement_block_optional statement_if .)


state 222

    (124) fds_statements -> LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 248


state 223

    (125) fds_statements -> LKEY RKEY .

    FUNCTION        reduce using rule 125 (fds_statements -> LKEY RKEY .)
    MINUS           reduce using rule 125 (fds_statements -> LKEY RKEY .)
    EXC_DOT         reduce using rule 125 (fds_statements -> LKEY RKEY .)
    INCREMENT       reduce using rule 125 (fds_statements -> LKEY RKEY .)
    DECREMENT       reduce using rule 125 (fds_statements -> LKEY RKEY .)
    LPAREN          reduce using rule 125 (fds_statements -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 125 (fds_statements -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 125 (fds_statements -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 125 (fds_statements -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 125 (fds_statements -> LKEY RKEY .)
    TRUE            reduce using rule 125 (fds_statements -> LKEY RKEY .)
    FALSE           reduce using rule 125 (fds_statements -> LKEY RKEY .)
    WHILE           reduce using rule 125 (fds_statements -> LKEY RKEY .)
    DO              reduce using rule 125 (fds_statements -> LKEY RKEY .)
    FOR             reduce using rule 125 (fds_statements -> LKEY RKEY .)
    FOREACH         reduce using rule 125 (fds_statements -> LKEY RKEY .)
    BREAK           reduce using rule 125 (fds_statements -> LKEY RKEY .)
    CONTINUE        reduce using rule 125 (fds_statements -> LKEY RKEY .)
    RETURN          reduce using rule 125 (fds_statements -> LKEY RKEY .)
    EXIT            reduce using rule 125 (fds_statements -> LKEY RKEY .)
    DIE             reduce using rule 125 (fds_statements -> LKEY RKEY .)
    GLOBAL          reduce using rule 125 (fds_statements -> LKEY RKEY .)
    VARIABLE        reduce using rule 125 (fds_statements -> LKEY RKEY .)
    ID              reduce using rule 125 (fds_statements -> LKEY RKEY .)
    IF              reduce using rule 125 (fds_statements -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 125 (fds_statements -> LKEY RKEY .)
    RKEY            reduce using rule 125 (fds_statements -> LKEY RKEY .)


state 224

    (7) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (8) inner_statement_MUL -> inner_statement .
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (123) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    RKEY            reduce using rule 8 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    inner_statement                shift and go to state 224
    inner_statement_MUL            shift and go to state 249
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 225

    (128) fds_parameter -> LPAREN parameter_list RPAREN .

    LKEY            reduce using rule 128 (fds_parameter -> LPAREN parameter_list RPAREN .)


state 226

    (130) parameter_list -> parameter parameter_list_colon_parameter .

    RPAREN          reduce using rule 130 (parameter_list -> parameter parameter_list_colon_parameter .)


state 227

    (155) parameter_list_colon_parameter -> COLON . parameter parameter_list_colon_parameter
    (156) parameter_list_colon_parameter -> COLON . parameter
    (132) parameter -> . VARIABLE
    (133) parameter -> . parameter_prefix VARIABLE
    (134) parameter -> . VARIABLE ASSIGN expr
    (135) parameter -> . parameter_prefix VARIABLE ASSIGN expr
    (136) parameter_prefix -> . parameter_type AMPERSAND
    (137) parameter_prefix -> . AMPERSAND
    (138) parameter_prefix -> . parameter_type
    (139) parameter_type -> . INT_TYPE
    (140) parameter_type -> . STRING_TYPE
    (141) parameter_type -> . FLOAT_TYPE
    (142) parameter_type -> . ARRAY_TYPE
    (143) parameter_type -> . BOOL_TYPE

    VARIABLE        shift and go to state 186
    AMPERSAND       shift and go to state 189
    INT_TYPE        shift and go to state 190
    STRING_TYPE     shift and go to state 191
    FLOAT_TYPE      shift and go to state 192
    ARRAY_TYPE      shift and go to state 193
    BOOL_TYPE       shift and go to state 194

    parameter                      shift and go to state 250
    parameter_prefix               shift and go to state 187
    parameter_type                 shift and go to state 188

state 228

    (134) parameter -> VARIABLE ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 251
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 229

    (133) parameter -> parameter_prefix VARIABLE .
    (135) parameter -> parameter_prefix VARIABLE . ASSIGN expr

    COLON           reduce using rule 133 (parameter -> parameter_prefix VARIABLE .)
    RPAREN          reduce using rule 133 (parameter -> parameter_prefix VARIABLE .)
    ASSIGN          shift and go to state 252


state 230

    (136) parameter_prefix -> parameter_type AMPERSAND .

    VARIABLE        reduce using rule 136 (parameter_prefix -> parameter_type AMPERSAND .)


state 231

    (33) expr -> expr INTE_DOT expr DDOT expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .)
    AS              reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66

  ! PLUS            [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! AND             [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! OR              [ reduce using rule 33 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 232

    (159) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (160) array_pair_list_ARR_PAIR -> COLON array_pair .
    (159) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (160) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 160 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 199

    array_pair_list_ARR_PAIR       shift and go to state 253

state 233

    (148) array_pair -> expr ATTR_ASSOC expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 148 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 148 (array_pair -> expr ATTR_ASSOC expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 234

    (149) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 254

state 235

    (77) statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .

    FUNCTION        reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    MINUS           reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    EXC_DOT         reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    INCREMENT       reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    DECREMENT       reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    LPAREN          reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    ARRAY_TYPE      reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    NUMBER_INTEGER  reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    NUMBER_REAL     reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    TRUE            reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    FALSE           reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    WHILE           reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    DO              reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    FOR             reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    FOREACH         reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    BREAK           reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    CONTINUE        reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    RETURN          reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    EXIT            reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    DIE             reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    GLOBAL          reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    VARIABLE        reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    ID              reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    IF              reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    END_PROGRAM     reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    RKEY            reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    ELSE            reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)
    ELSEIF          reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif .)


state 236

    (83) do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    MINUS           reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    EXC_DOT         reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    INCREMENT       reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    DECREMENT       reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    FOREACH         reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 83 (do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON .)


state 237

    (90) for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .

    FUNCTION        reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    MINUS           reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    EXC_DOT         reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    INCREMENT       reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    DECREMENT       reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    LPAREN          reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    ARRAY_TYPE      reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    NUMBER_INTEGER  reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    NUMBER_REAL     reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    CONSTANT_ENCAPSED_STRING reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    TRUE            reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    FALSE           reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    WHILE           reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    DO              reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    FOR             reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    FOREACH         reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    BREAK           reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    CONTINUE        reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    RETURN          reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    EXIT            reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    DIE             reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    GLOBAL          reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    VARIABLE        reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    ID              reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    IF              reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    END_PROGRAM     reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    RKEY            reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    ELSE            reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)
    ELSEIF          reduce using rule 90 (for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional .)


state 238

    (97) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 97 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 239

    (95) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (96) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (107) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (108) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 95 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 255
    expr                           shift and go to state 163
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 240

    (93) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (98) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 256


state 241

    (92) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (94) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (107) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (108) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 92 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 257
    expr                           shift and go to state 163
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 242

    (109) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (110) for_expr_COLON_EXPR -> COLON expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr
    (109) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (110) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 110 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 110 (for_expr_COLON_EXPR -> COLON expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67
    COLON           shift and go to state 212

    for_expr_COLON_EXPR            shift and go to state 258

state 243

    (105) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . RPAREN statement_block_optional
    (106) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . ATTR_ASSOC ampersand_variable RPAREN statement_block_optional

    RPAREN          shift and go to state 259
    ATTR_ASSOC      shift and go to state 260


state 244

    (102) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 261


state 245

    (103) ampersand_variable -> VARIABLE .

    RPAREN          reduce using rule 103 (ampersand_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 103 (ampersand_variable -> VARIABLE .)


state 246

    (100) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 100 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 247

    (115) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (116) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .
    (115) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (116) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 116 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .)
    COLON           shift and go to state 219

    fc_parameter_list_COLON_PARAMETER shift and go to state 262

state 248

    (124) fds_statements -> LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 124 (fds_statements -> LKEY inner_statement_MUL RKEY .)


state 249

    (7) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 7 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 250

    (155) parameter_list_colon_parameter -> COLON parameter . parameter_list_colon_parameter
    (156) parameter_list_colon_parameter -> COLON parameter .
    (155) parameter_list_colon_parameter -> . COLON parameter parameter_list_colon_parameter
    (156) parameter_list_colon_parameter -> . COLON parameter

    RPAREN          reduce using rule 156 (parameter_list_colon_parameter -> COLON parameter .)
    COLON           shift and go to state 227

    parameter_list_colon_parameter shift and go to state 263

state 251

    (134) parameter -> VARIABLE ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 134 (parameter -> VARIABLE ASSIGN expr .)
    RPAREN          reduce using rule 134 (parameter -> VARIABLE ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 252

    (135) parameter -> parameter_prefix VARIABLE ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 264
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 253

    (159) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 159 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 254

    (149) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 149 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 149 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 255

    (96) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 96 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 256

    (93) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (98) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (107) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (108) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 93 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 265
    expr                           shift and go to state 163
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 257

    (94) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 94 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 258

    (109) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 109 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 109 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 259

    (105) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN . statement_block_optional
    (152) statement_block_optional -> . statement
    (153) statement_block_optional -> . LKEY statement_MUL RKEY
    (154) statement_block_optional -> . LKEY RKEY
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    LKEY            shift and go to state 101
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    expr                           shift and go to state 9
    statement_block_optional       shift and go to state 266
    statement                      shift and go to state 100
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 260

    (106) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC . ampersand_variable RPAREN statement_block_optional
    (102) ampersand_variable -> . AMPERSAND VARIABLE
    (103) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 244
    VARIABLE        shift and go to state 245

    ampersand_variable             shift and go to state 267

state 261

    (102) ampersand_variable -> AMPERSAND VARIABLE .

    RPAREN          reduce using rule 102 (ampersand_variable -> AMPERSAND VARIABLE .)
    ATTR_ASSOC      reduce using rule 102 (ampersand_variable -> AMPERSAND VARIABLE .)


state 262

    (115) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 115 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 263

    (155) parameter_list_colon_parameter -> COLON parameter parameter_list_colon_parameter .

    RPAREN          reduce using rule 155 (parameter_list_colon_parameter -> COLON parameter parameter_list_colon_parameter .)


state 264

    (135) parameter -> parameter_prefix VARIABLE ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (33) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 135 (parameter -> parameter_prefix VARIABLE ASSIGN expr .)
    RPAREN          reduce using rule 135 (parameter -> parameter_prefix VARIABLE ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 265

    (98) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 98 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 266

    (105) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .

    FUNCTION        reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    MINUS           reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    EXC_DOT         reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    INCREMENT       reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    DECREMENT       reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    LPAREN          reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    ARRAY_TYPE      reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    NUMBER_INTEGER  reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    NUMBER_REAL     reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    CONSTANT_ENCAPSED_STRING reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    TRUE            reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    FALSE           reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    WHILE           reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    DO              reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    FOR             reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    FOREACH         reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    BREAK           reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    CONTINUE        reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    RETURN          reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    EXIT            reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    DIE             reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    GLOBAL          reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    VARIABLE        reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    ID              reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    IF              reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    END_PROGRAM     reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    RKEY            reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    ELSE            reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)
    ELSEIF          reduce using rule 105 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional .)


state 267

    (106) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable . RPAREN statement_block_optional

    RPAREN          shift and go to state 268


state 268

    (106) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN . statement_block_optional
    (152) statement_block_optional -> . statement
    (153) statement_block_optional -> . LKEY statement_MUL RKEY
    (154) statement_block_optional -> . LKEY RKEY
    (59) statement -> . expr SEMICOLON
    (60) statement -> . while_statement
    (61) statement -> . if_statement
    (62) statement -> . do_statement
    (63) statement -> . for_statement
    (64) statement -> . foreach_statement
    (65) statement -> . break_statement
    (66) statement -> . continue_statement
    (67) statement -> . return_statement
    (68) statement -> . exit_statement SEMICOLON
    (69) statement -> . die_statement SEMICOLON
    (70) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . INCREMENT variable
    (25) expr -> . variable INCREMENT
    (26) expr -> . DECREMENT variable
    (27) expr -> . variable DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . LPAREN typecast_operator RPAREN expr
    (32) expr -> . function_call
    (33) expr -> . expr INTE_DOT expr DDOT expr
    (34) expr -> . variable ADD_ASSIGN expr
    (35) expr -> . variable SUB_ASSIGN expr
    (36) expr -> . variable MOD_ASSIGN expr
    (37) expr -> . variable TIMES_ASSIGN expr
    (38) expr -> . variable DIVIDE_ASSIGN expr
    (39) expr -> . variable CONCAT_ASSIGN expr
    (40) expr -> . variable ASSIGN expr
    (41) expr -> . NUMBER_INTEGER
    (42) expr -> . NUMBER_REAL
    (43) expr -> . CONSTANT_ENCAPSED_STRING
    (44) expr -> . TRUE
    (45) expr -> . FALSE
    (82) while_statement -> . WHILE expr_parentheses statement_block_optional
    (71) if_statement -> . statement_if
    (72) if_statement -> . statement_if statement_else
    (73) if_statement -> . statement_if statement_elseif
    (74) if_statement -> . statement_if statement_elseif statement_else
    (83) do_statement -> . DO statement_block_optional WHILE expr_parentheses SEMICOLON
    (90) for_statement -> . FOR LPAREN for_parameters RPAREN statement_block_optional
    (105) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional
    (84) break_statement -> . BREAK expr SEMICOLON
    (85) break_statement -> . BREAK SEMICOLON
    (86) continue_statement -> . CONTINUE expr SEMICOLON
    (87) continue_statement -> . CONTINUE SEMICOLON
    (88) return_statement -> . RETURN expr SEMICOLON
    (89) return_statement -> . RETURN SEMICOLON
    (51) exit_statement -> . EXIT exit_expr
    (52) exit_statement -> . EXIT
    (53) die_statement -> . DIE exit_expr
    (54) die_statement -> . DIE
    (80) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (81) global_statement -> . GLOBAL global_var
    (119) variable -> . VARIABLE variable_array_selector
    (120) variable -> . VARIABLE
    (111) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (112) function_call -> . ID LPAREN RPAREN
    (75) statement_if -> . IF expr_parentheses statement_block_optional statement_if
    (76) statement_if -> . IF expr_parentheses statement_block_optional

    LKEY            shift and go to state 101
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    INCREMENT       shift and go to state 23
    DECREMENT       shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 34
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    expr                           shift and go to state 9
    statement_block_optional       shift and go to state 269
    statement                      shift and go to state 100
    while_statement                shift and go to state 10
    if_statement                   shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 35

state 269

    (106) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .

    FUNCTION        reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    MINUS           reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    EXC_DOT         reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    INCREMENT       reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    DECREMENT       reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    LPAREN          reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    ARRAY_TYPE      reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    NUMBER_INTEGER  reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    NUMBER_REAL     reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    CONSTANT_ENCAPSED_STRING reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    TRUE            reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    FALSE           reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    WHILE           reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    DO              reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    FOR             reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    FOREACH         reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    BREAK           reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    CONTINUE        reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    RETURN          reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    EXIT            reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    DIE             reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    GLOBAL          reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    VARIABLE        reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    ID              reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    IF              reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    END_PROGRAM     reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    RKEY            reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    ELSE            reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)
    ELSEIF          reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 35 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 35 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 203 resolved as shift


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightADD_ASSIGNSUB_ASSIGNMOD_ASSIGNPLUS_ASSIGNDIVIDE_ASSIGNASSIGNleftINTE_DOTDDOTleftANDORleftEQUALSNOT_EQUALLESS_THANLESS_EQUALGREAT_THANGREAT_EQUALleftPLUSMINUSleftTIMESDIVIDEPERCENTrightEXC_DOTleftPOS_INCREMENTPOS_DECREMENTrightPRE_INCREMENTPRE_DECREMENTINT_TYPEFLOAT_TYPEARRAY_TYPESTRING_TYPEBOOL_TYPErightUMINUSADD_ASSIGN AMPERSAND AND APOSTROFE ARRAY_TYPE ARROBA AS ASPAS ASSIGN ATTR_ASSOC BEGIN_PROGRAM BOOLEAN_TYPE BOOL_TYPE BREAK CASE CLONE COLON COMMENT_MULTI COMMENT_SINGLE CONCATENATE CONSTANT_ENCAPSED_STRING CONTINUE CRASE DDOT DECLARE DIE DIVIDE DIVIDE_ASSIGN DO DOLAR DOUBLE_TYPE ELSE ELSEIF ENDDECLARE END_PROGRAM EQUALS EXC_DOT EXIT FALSE FLOAT_TYPE FOR FOREACH FUNCTION GLOBAL GREAT_EQUAL GREAT_THAN ID IDENTATION IF INTE_DOT INT_TYPE LBRACKET LEFT_LOGICAL LESS_EQUAL LESS_THAN LIST LKEY LPAREN MINUS MOD_ASSIGN NOT_EQUAL NUMBER_INTEGER NUMBER_REAL OR PERCENT PLUS PLUS_ASSIGN POS_DECREMENT POS_INCREMENT PRE_DECREMENT PRE_INCREMENT RBRACKET REAL_TYPE RETURN RIGHT_LOGICAL RKEY RPAREN SEMICOLON STRING STRING_TYPE SUB_ASSIGN TIMES TRUE UNSET VAR VARIABLE WHILE\n  main : BEGIN_PROGRAM main_INNER END_PROGRAM \n  | BEGIN_PROGRAM END_PROGRAM \n  \n  main_INNER : inner_statement main_INNER\n    | inner_statement\n  \n  inner_statement : function_declaration_statement\n    | statement\n  \n  inner_statement_MUL : inner_statement inner_statement_MUL\n    | inner_statement\n  \n  expr : expr PLUS expr\n    | expr MINUS expr \n    | MINUS expr %prec UMINUS\n    | expr DIVIDE expr\n    | expr PERCENT expr\n    | expr TIMES expr   \n    | expr EQUALS expr\n    | expr NOT_EQUAL expr\n    | expr GREAT_THAN expr \n    | expr GREAT_EQUAL expr\n    | expr LESS_THAN expr\n    | expr LESS_EQUAL expr\n    | expr AND expr\n    | expr OR expr\n    | EXC_DOT expr\n    | PRE_INCREMENT variable\n    | variable POS_INCREMENT\n    | PRE_DECREMENT variable\n    | variable POS_DECREMENT\n    | variable\n    | LPAREN expr RPAREN\n    | ARRAY_TYPE array_declaration\n    | function_call\n    | expr INTE_DOT expr DDOT expr\n    | variable ADD_ASSIGN expr\n    | variable SUB_ASSIGN expr\n    | variable MOD_ASSIGN expr\n    | variable PLUS_ASSIGN expr\n    | variable DIVIDE_ASSIGN expr\n    | variable ASSIGN expr\n    | LPAREN INT_TYPE RPAREN expr\n    | LPAREN FLOAT_TYPE RPAREN expr\n    | LPAREN STRING_TYPE RPAREN expr \n    | LPAREN ARRAY_TYPE RPAREN expr\n    | LPAREN BOOL_TYPE RPAREN expr\n    | NUMBER_INTEGER\n    | NUMBER_REAL\n    | CONSTANT_ENCAPSED_STRING\n    | TRUE\n    | FALSE\n  \n  exit_statement : EXIT exit_expr\n    | EXIT\n  \n  die_statement : DIE exit_expr\n    | DIE\n  \n  exit_expr : LPAREN expr RPAREN\n    | LPAREN RPAREN\n  \n  array_declaration : LPAREN array_pair_list RPAREN\n    | LPAREN RPAREN\n  \n  statement : expr SEMICOLON\n    | if_statement \n    | while_statement\n    | do_statement\n    | for_statement\n    | foreach_statement\n    | break_statement\n    | continue_statement \n    | return_statement\n    | exit_statement SEMICOLON\n    | die_statement SEMICOLON\n    | global_statement SEMICOLON\n  \n  S : IF\n  \n  if_statement : statement_if\n  | statement_if statement_else\n  | statement_if statement_elseif\n  | statement_if statement_elseif statement_else\n   \n  statement_if : IF expr_parentheses statement_BLOCK_OPT statement_if\n   | IF expr_parentheses statement_BLOCK_OPT\n  \n  statement_elseif : ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif\n   | ELSEIF expr_parentheses statement_BLOCK_OPT\n  \n  statement_else : ELSE statement_BLOCK_OPT\n  \n  global_statement : GLOBAL global_var statement_COLON_GLOBAL \n    | GLOBAL global_var \n  \n  while_statement : WHILE expr_parentheses statement_BLOCK_OPT\n  \n  do_statement : DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON\n  \n  break_statement : BREAK expr SEMICOLON\n    | BREAK SEMICOLON\n  \n  continue_statement : CONTINUE expr SEMICOLON\n    | CONTINUE SEMICOLON\n  \n  return_statement : RETURN expr SEMICOLON \n    | RETURN SEMICOLON \n  \n  for_statement : FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT\n  \n  for_parameters : SEMICOLON SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT\n  | SEMICOLON for_expr_OPT SEMICOLON\n  | SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  | SEMICOLON SEMICOLON for_expr_OPT\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  \n  global_var : VARIABLE\n    | DOLAR VARIABLE\n    | DOLAR LKEY expr RKEY \n  \n  statement_COLON_GLOBAL : COLON global_var statement_COLON_GLOBAL\n    | COLON global_var\n  \n  ampersand_variable : AMPERSAND VARIABLE\n    | VARIABLE\n  \n  expr_parentheses : LPAREN expr RPAREN\n  \n  foreach_statement : FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT\n  | FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT\n  \n  for_expr_OPT : expr for_expr_COLON_EXPR\n  | expr\n  \n  for_expr_COLON_EXPR : COLON expr for_expr_COLON_EXPR\n    | COLON expr\n  \n  function_call : ID LPAREN function_call_parameter_list RPAREN\n    | ID LPAREN RPAREN\n  \n  function_call_parameter_list : function_call_parameter fc_parameter_list_COLON_PARAMETER\n    |  function_call_parameter\n  \n  fc_parameter_list_COLON_PARAMETER : COLON function_call_parameter fc_parameter_list_COLON_PARAMETER\n    | COLON function_call_parameter\n  \n  function_call_parameter : expr\n    | AMPERSAND VARIABLE\n  \n  unary_operator : EXC_DOT\n    | PLUS\n    | MINUS\n  \n  variable : VARIABLE reference_variable_SELECTOR\n    | VARIABLE\n  \n  selector : LBRACKET expr RBRACKET \n    | LBRACKET RBRACKET\n  \n  function_declaration_statement : FUNCTION fds_id fds_parameter fds_statements\n  \n  fds_statements : LKEY inner_statement_MUL RKEY\n    | LKEY RKEY\n  \n  fds_id : AMPERSAND ID\n    | ID\n  \n  fds_parameter : LPAREN parameter_list RPAREN\n    | LPAREN RPAREN\n  \n  parameter_list : parameter parameter_list_COLON_PARAMETER \n    | parameter\n   \n  parameter : VARIABLE \n    | parameter_prefix VARIABLE\n    | VARIABLE ASSIGN static_scalar\n    | parameter_prefix VARIABLE ASSIGN static_scalar\n  \n  parameter_prefix : parameter_type AMPERSAND\n    | AMPERSAND\n    | parameter_type\n  \n  parameter_type : INT_TYPE\n    | BOOLEAN_TYPE\n    | STRING_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE\n    | BOOL_TYPE\n  \n  static_scalar : common_scalar \n    | PLUS static_scalar\n    | MINUS static_scalar\n  \n  common_scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  array_pair_list : array_pair array_pair_list_ARR_PAIR \n    | array_pair\n   \n  array_pair : expr\n    | AMPERSAND variable\n    | expr ATTR_ASSOC expr\n    | expr ATTR_ASSOC AMPERSAND variable\n  \n  statement_MUL : statement statement_MUL\n    | statement\n  \n  statement_BLOCK_OPT : statement \n    | LKEY statement_MUL RKEY \n    | LKEY RKEY\n  \n  parameter_list_COLON_PARAMETER : COLON parameter parameter_list_COLON_PARAMETER\n    | COLON parameter\n  \n    reference_variable_SELECTOR : selector reference_variable_SELECTOR\n    | selector\n  \n  array_pair_list_ARR_PAIR : COLON array_pair array_pair_list_ARR_PAIR\n    | COLON array_pair\n  '
    
_lr_action_items = {'BEGIN_PROGRAM':([0,],[2,]),'$end':([1,4,48,],[0,-2,-1,]),'END_PROGRAM':([2,3,5,6,7,10,11,12,13,14,15,16,17,34,49,53,68,69,70,91,92,98,103,105,107,153,154,156,160,167,168,169,184,185,211,214,231,233,245,246,247,259,285,288,],[4,48,-4,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,-3,-57,-66,-67,-68,-71,-72,-163,-84,-86,-88,-73,-78,-81,-165,-83,-85,-87,-75,-127,-77,-164,-74,-129,-76,-82,-89,-128,-106,-107,]),'FUNCTION':([2,5,6,7,10,11,12,13,14,15,16,17,34,53,68,69,70,91,92,98,103,105,107,153,154,156,160,167,168,169,184,185,186,211,214,231,233,234,245,246,247,259,285,288,],[8,8,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,-57,-66,-67,-68,-71,-72,-163,-84,-86,-88,-73,-78,-81,-165,-83,-85,-87,-75,-127,8,-77,-164,-74,-129,8,-76,-82,-89,-128,-106,-107,]),'MINUS':([2,5,6,7,9,10,11,12,13,14,15,16,17,21,22,24,26,28,29,30,31,32,33,34,36,39,40,41,45,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,91,92,93,95,96,98,99,100,101,102,103,104,105,106,107,109,114,115,116,117,118,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,153,154,155,156,157,160,161,163,165,166,167,168,169,170,175,176,177,178,180,182,184,185,186,200,201,202,203,204,205,206,208,209,211,212,214,216,217,219,221,225,226,227,229,231,233,234,238,241,243,245,246,247,249,251,252,259,264,265,269,273,276,285,287,288,],[21,21,-5,-6,55,-58,-59,-60,-61,-62,-63,-64,-65,21,21,-28,21,-31,-44,-45,-46,-47,-48,-70,21,21,21,21,-124,-57,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-66,-67,-68,-11,-23,-24,-25,-27,21,21,21,21,21,21,-26,55,-30,21,-71,-72,21,21,21,-163,21,21,21,55,-84,55,-86,55,-88,21,-123,-169,21,21,21,-9,-10,-12,-13,-14,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-29,21,21,21,21,21,-56,55,-73,-78,21,-81,55,-165,21,21,55,55,-83,-85,-87,55,21,-168,55,-126,-113,55,-75,-127,21,21,55,55,55,55,55,-55,21,21,-77,-105,-164,21,21,21,21,55,-125,-112,21,-74,-129,21,265,55,55,-76,-82,-89,21,21,55,-128,265,265,265,21,21,-106,21,-107,]),'EXC_DOT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,245,246,247,249,251,259,273,276,285,287,288,],[22,22,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,22,22,22,-70,22,22,22,22,-57,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-66,-67,-68,22,22,22,22,22,22,22,-71,-72,22,22,22,-163,22,22,22,-84,-86,-88,22,22,22,22,22,22,22,22,22,-73,-78,22,-81,-165,22,22,-83,-85,-87,22,-75,-127,22,22,22,22,-77,-105,-164,22,22,22,22,22,-74,-129,22,-76,-82,-89,22,22,-128,22,22,-106,22,-107,]),'PRE_INCREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,245,246,247,249,251,259,273,276,285,287,288,],[23,23,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,23,23,23,-70,23,23,23,23,-57,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-66,-67,-68,23,23,23,23,23,23,23,-71,-72,23,23,23,-163,23,23,23,-84,-86,-88,23,23,23,23,23,23,23,23,23,-73,-78,23,-81,-165,23,23,-83,-85,-87,23,-75,-127,23,23,23,23,-77,-105,-164,23,23,23,23,23,-74,-129,23,-76,-82,-89,23,23,-128,23,23,-106,23,-107,]),'PRE_DECREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,245,246,247,249,251,259,273,276,285,287,288,],[25,25,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,25,25,25,-70,25,25,25,25,-57,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-66,-67,-68,25,25,25,25,25,25,25,-71,-72,25,25,25,-163,25,25,25,-84,-86,-88,25,25,25,25,25,25,25,25,25,-73,-78,25,-81,-165,25,25,-83,-85,-87,25,-75,-127,25,25,25,25,-77,-105,-164,25,25,25,25,25,-74,-129,25,-76,-82,-89,25,25,-128,25,25,-106,25,-107,]),'LPAREN':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,27,34,35,36,37,38,39,40,41,42,43,46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,87,90,91,92,93,94,95,96,98,99,100,101,103,105,107,109,116,117,118,121,143,144,145,146,147,153,154,155,156,158,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,245,246,247,249,251,259,273,276,285,287,288,],[26,26,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,26,26,26,90,-70,96,26,100,101,26,26,26,109,109,117,96,120,-131,-57,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-66,-67,-68,26,26,26,26,26,26,90,26,-71,-72,26,96,26,26,-163,26,26,26,-84,-86,-88,26,26,26,26,-130,26,26,26,26,26,-73,-78,26,-81,96,-165,26,26,-83,-85,-87,26,-75,-127,26,26,26,26,-77,-105,-164,26,26,26,26,26,-74,-129,26,-76,-82,-89,26,26,-128,26,26,-106,26,-107,]),'ARRAY_TYPE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,120,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,237,245,246,247,249,251,259,273,276,285,287,288,],[27,27,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,27,27,87,-70,27,27,27,27,-57,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-66,-67,-68,27,27,27,27,27,27,27,-71,-72,27,27,27,-163,27,27,27,-84,-86,-88,27,27,27,27,198,27,27,27,27,27,-73,-78,27,-81,-165,27,27,-83,-85,-87,27,-75,-127,27,27,27,27,-77,-105,-164,27,27,27,27,27,-74,-129,27,198,-76,-82,-89,27,27,-128,27,27,-106,27,-107,]),'NUMBER_INTEGER':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,238,245,246,247,249,251,259,264,265,269,273,276,285,287,288,],[29,29,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,29,29,29,-70,29,29,29,29,-57,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-66,-67,-68,29,29,29,29,29,29,29,-71,-72,29,29,29,-163,29,29,29,-84,-86,-88,29,29,29,29,29,29,29,29,29,-73,-78,29,-81,-165,29,29,-83,-85,-87,29,-75,-127,29,29,29,29,-77,-105,-164,29,29,29,29,29,-74,-129,29,267,-76,-82,-89,29,29,-128,267,267,267,29,29,-106,29,-107,]),'NUMBER_REAL':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,238,245,246,247,249,251,259,264,265,269,273,276,285,287,288,],[30,30,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,30,30,30,-70,30,30,30,30,-57,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-66,-67,-68,30,30,30,30,30,30,30,-71,-72,30,30,30,-163,30,30,30,-84,-86,-88,30,30,30,30,30,30,30,30,30,-73,-78,30,-81,-165,30,30,-83,-85,-87,30,-75,-127,30,30,30,30,-77,-105,-164,30,30,30,30,30,-74,-129,30,266,-76,-82,-89,30,30,-128,266,266,266,30,30,-106,30,-107,]),'CONSTANT_ENCAPSED_STRING':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,238,245,246,247,249,251,259,264,265,269,273,276,285,287,288,],[31,31,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,31,31,31,-70,31,31,31,31,-57,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-66,-67,-68,31,31,31,31,31,31,31,-71,-72,31,31,31,-163,31,31,31,-84,-86,-88,31,31,31,31,31,31,31,31,31,-73,-78,31,-81,-165,31,31,-83,-85,-87,31,-75,-127,31,31,31,31,-77,-105,-164,31,31,31,31,31,-74,-129,31,268,-76,-82,-89,31,31,-128,268,268,268,31,31,-106,31,-107,]),'TRUE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,245,246,247,249,251,259,273,276,285,287,288,],[32,32,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,32,32,32,-70,32,32,32,32,-57,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-66,-67,-68,32,32,32,32,32,32,32,-71,-72,32,32,32,-163,32,32,32,-84,-86,-88,32,32,32,32,32,32,32,32,32,-73,-78,32,-81,-165,32,32,-83,-85,-87,32,-75,-127,32,32,32,32,-77,-105,-164,32,32,32,32,32,-74,-129,32,-76,-82,-89,32,32,-128,32,32,-106,32,-107,]),'FALSE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,245,246,247,249,251,259,273,276,285,287,288,],[33,33,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,33,33,33,-70,33,33,33,33,-57,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-66,-67,-68,33,33,33,33,33,33,33,-71,-72,33,33,33,-163,33,33,33,-84,-86,-88,33,33,33,33,33,33,33,33,33,-73,-78,33,-81,-165,33,33,-83,-85,-87,33,-75,-127,33,33,33,33,-77,-105,-164,33,33,33,33,33,-74,-129,33,-76,-82,-89,33,33,-128,33,33,-106,33,-107,]),'WHILE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,97,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[35,35,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,35,-57,-66,-67,-68,-71,-72,35,35,158,-163,35,-84,-86,-88,35,-73,-78,35,-81,-165,35,-83,-85,-87,-75,-127,35,-77,-105,-164,35,-74,-129,35,-76,-82,-89,-128,35,-106,35,-107,]),'DO':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[36,36,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,36,-57,-66,-67,-68,-71,-72,36,36,-163,36,-84,-86,-88,36,-73,-78,36,-81,-165,36,-83,-85,-87,-75,-127,36,-77,-105,-164,36,-74,-129,36,-76,-82,-89,-128,36,-106,36,-107,]),'FOR':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[37,37,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,37,-57,-66,-67,-68,-71,-72,37,37,-163,37,-84,-86,-88,37,-73,-78,37,-81,-165,37,-83,-85,-87,-75,-127,37,-77,-105,-164,37,-74,-129,37,-76,-82,-89,-128,37,-106,37,-107,]),'FOREACH':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[38,38,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,38,-57,-66,-67,-68,-71,-72,38,38,-163,38,-84,-86,-88,38,-73,-78,38,-81,-165,38,-83,-85,-87,-75,-127,38,-77,-105,-164,38,-74,-129,38,-76,-82,-89,-128,38,-106,38,-107,]),'BREAK':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[39,39,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,39,-57,-66,-67,-68,-71,-72,39,39,-163,39,-84,-86,-88,39,-73,-78,39,-81,-165,39,-83,-85,-87,-75,-127,39,-77,-105,-164,39,-74,-129,39,-76,-82,-89,-128,39,-106,39,-107,]),'CONTINUE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[40,40,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,40,-57,-66,-67,-68,-71,-72,40,40,-163,40,-84,-86,-88,40,-73,-78,40,-81,-165,40,-83,-85,-87,-75,-127,40,-77,-105,-164,40,-74,-129,40,-76,-82,-89,-128,40,-106,40,-107,]),'RETURN':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[41,41,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,41,-57,-66,-67,-68,-71,-72,41,41,-163,41,-84,-86,-88,41,-73,-78,41,-81,-165,41,-83,-85,-87,-75,-127,41,-77,-105,-164,41,-74,-129,41,-76,-82,-89,-128,41,-106,41,-107,]),'EXIT':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[42,42,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,42,-57,-66,-67,-68,-71,-72,42,42,-163,42,-84,-86,-88,42,-73,-78,42,-81,-165,42,-83,-85,-87,-75,-127,42,-77,-105,-164,42,-74,-129,42,-76,-82,-89,-128,42,-106,42,-107,]),'DIE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[43,43,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,43,-57,-66,-67,-68,-71,-72,43,43,-163,43,-84,-86,-88,43,-73,-78,43,-81,-165,43,-83,-85,-87,-75,-127,43,-77,-105,-164,43,-74,-129,43,-76,-82,-89,-128,43,-106,43,-107,]),'GLOBAL':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[44,44,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,44,-57,-66,-67,-68,-71,-72,44,44,-163,44,-84,-86,-88,44,-73,-78,44,-81,-165,44,-83,-85,-87,-75,-127,44,-77,-105,-164,44,-74,-129,44,-76,-82,-89,-128,44,-106,44,-107,]),'VARIABLE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,23,25,26,34,36,39,40,41,44,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,113,116,117,118,120,143,144,145,146,147,152,153,154,155,156,160,161,163,167,168,169,173,175,183,184,185,186,191,192,193,194,195,196,197,198,199,200,208,209,211,212,214,216,217,219,221,222,229,231,233,234,237,240,244,245,246,247,249,251,254,259,273,276,277,285,287,288,],[45,45,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,45,45,45,45,45,-70,45,45,45,45,112,-57,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-66,-67,-68,45,45,45,45,45,45,45,-71,-72,45,45,45,-163,45,45,45,-84,-86,-88,45,174,45,45,45,190,45,45,45,45,45,45,-73,-78,45,-81,-165,45,45,-83,-85,-87,112,45,230,-75,-127,45,239,-142,-141,-143,-144,-145,-146,-147,-148,45,45,45,-77,-105,-164,45,45,45,45,255,45,-74,-129,45,190,-140,45,-76,-82,-89,45,45,278,-128,45,45,255,-106,45,-107,]),'ID':([2,5,6,7,8,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,90,91,92,93,95,96,98,99,100,101,103,105,107,109,116,117,118,143,144,145,146,147,153,154,155,156,160,161,163,167,168,169,175,184,185,186,200,208,209,211,212,214,216,217,219,221,229,231,233,234,245,246,247,249,251,259,273,276,285,287,288,],[46,46,-5,-6,52,-58,-59,-60,-61,-62,-63,-64,-65,46,46,46,-70,46,46,46,46,121,-57,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-66,-67,-68,46,46,46,46,46,46,46,-71,-72,46,46,46,-163,46,46,46,-84,-86,-88,46,46,46,46,46,46,46,46,46,-73,-78,46,-81,-165,46,46,-83,-85,-87,46,-75,-127,46,46,46,46,-77,-105,-164,46,46,46,46,46,-74,-129,46,-76,-82,-89,46,46,-128,46,46,-106,46,-107,]),'IF':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,91,92,93,95,98,99,103,105,107,118,153,154,155,156,160,161,167,168,169,184,185,186,211,212,214,216,231,233,234,245,246,247,259,276,285,287,288,],[47,47,-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-70,47,-57,-66,-67,-68,-71,-72,47,47,-163,47,-84,-86,-88,47,-73,-78,47,-81,-165,47,-83,-85,-87,47,-127,47,-77,-105,-164,47,-74,-129,47,-76,-82,-89,-128,47,-106,47,-107,]),'RKEY':([6,7,10,11,12,13,14,15,16,17,24,28,29,30,31,32,33,34,45,53,68,69,70,71,72,73,74,75,82,89,91,92,98,99,103,105,107,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,142,149,153,154,156,159,160,161,167,168,169,176,178,180,184,185,186,201,202,203,204,205,206,211,214,215,225,226,227,231,232,233,234,241,245,246,247,259,260,285,288,],[-5,-6,-58,-59,-60,-61,-62,-63,-64,-65,-28,-31,-44,-45,-46,-47,-48,-70,-124,-57,-66,-67,-68,-11,-23,-24,-25,-27,-26,-30,-71,-72,-163,160,-84,-86,-88,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-33,-34,-35,-36,-37,-38,-29,-56,-73,-78,-81,214,-165,-162,-83,-85,-87,-168,-126,-113,-75,-127,233,-39,-40,-41,-42,-43,-55,-77,-164,-161,257,-125,-112,-74,259,-129,-8,-32,-76,-82,-89,-128,-7,-106,-107,]),'AMPERSAND':([8,90,117,120,192,194,195,196,197,198,199,208,209,222,229,237,277,],[51,152,183,193,240,-143,-144,-145,-146,-147,-148,152,244,254,183,193,254,]),'SEMICOLON':([9,18,19,20,24,28,29,30,31,32,33,39,40,41,42,43,45,71,72,73,74,75,82,89,100,102,104,106,108,110,111,112,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,142,149,163,164,165,171,172,174,176,178,180,201,202,203,204,205,206,212,213,218,219,220,223,224,226,227,241,250,252,256,257,275,],[53,68,69,70,-28,-31,-44,-45,-46,-47,-48,103,105,107,-50,-52,-124,-11,-23,-24,-25,-27,-26,-30,163,167,168,169,-49,-51,-80,-98,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-33,-34,-35,-36,-37,-38,-29,-56,217,219,-109,-54,-79,-99,-168,-126,-113,-39,-40,-41,-42,-43,-55,-105,246,249,251,-108,-53,-102,-125,-112,-32,273,-111,-101,-100,-110,]),'PLUS':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,238,241,243,252,264,265,269,],[54,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,54,-30,54,54,54,-123,-169,-9,-10,-12,-13,-14,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-29,-56,54,54,54,54,54,-168,54,-126,-113,54,54,54,54,54,54,-55,54,-125,-112,264,54,54,54,264,264,264,]),'DIVIDE':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[56,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,56,-30,56,56,56,-123,-169,56,56,-12,-13,-14,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-29,-56,56,56,56,56,56,-168,56,-126,-113,56,56,56,56,56,56,-55,56,-125,-112,56,56,56,]),'PERCENT':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[57,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,57,-30,57,57,57,-123,-169,57,57,-12,-13,-14,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-29,-56,57,57,57,57,57,-168,57,-126,-113,57,57,57,57,57,57,-55,57,-125,-112,57,57,57,]),'TIMES':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[58,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,58,-30,58,58,58,-123,-169,58,58,-12,-13,-14,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-29,-56,58,58,58,58,58,-168,58,-126,-113,58,58,58,58,58,58,-55,58,-125,-112,58,58,58,]),'EQUALS':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[59,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,59,-30,59,59,59,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,59,59,59,59,59,59,59,59,59,-29,-56,59,59,59,59,59,-168,59,-126,-113,59,59,59,59,59,59,-55,59,-125,-112,59,59,59,]),'NOT_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[60,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,60,-30,60,60,60,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,60,60,60,60,60,60,60,60,60,-29,-56,60,60,60,60,60,-168,60,-126,-113,60,60,60,60,60,60,-55,60,-125,-112,60,60,60,]),'GREAT_THAN':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[61,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,61,-30,61,61,61,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,61,61,61,61,61,61,61,61,61,-29,-56,61,61,61,61,61,-168,61,-126,-113,61,61,61,61,61,61,-55,61,-125,-112,61,61,61,]),'GREAT_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[62,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,62,-30,62,62,62,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,62,62,62,62,62,62,62,62,62,-29,-56,62,62,62,62,62,-168,62,-126,-113,62,62,62,62,62,62,-55,62,-125,-112,62,62,62,]),'LESS_THAN':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[63,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,63,-30,63,63,63,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,63,63,63,63,63,63,63,63,63,-29,-56,63,63,63,63,63,-168,63,-126,-113,63,63,63,63,63,63,-55,63,-125,-112,63,63,63,]),'LESS_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[64,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,64,-30,64,64,64,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,64,64,64,64,64,64,64,64,64,-29,-56,64,64,64,64,64,-168,64,-126,-113,64,64,64,64,64,64,-55,64,-125,-112,64,64,64,]),'AND':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[65,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,65,-30,65,65,65,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,65,65,65,65,65,65,65,-29,-56,65,65,65,65,65,-168,65,-126,-113,65,65,65,65,65,65,-55,65,-125,-112,65,65,65,]),'OR':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[66,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,66,-30,66,66,66,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,66,66,66,66,66,66,66,-29,-56,66,66,66,66,66,-168,66,-126,-113,66,66,66,66,66,66,-55,66,-125,-112,66,66,66,]),'INTE_DOT':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,89,102,104,106,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,151,157,165,166,170,176,177,178,180,182,201,202,203,204,205,206,225,226,227,241,243,252,],[67,-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,67,-30,67,67,67,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,67,67,67,67,67,67,67,-29,-56,67,67,67,67,67,-168,67,-126,-113,67,67,67,67,67,67,-55,67,-125,-112,-32,67,67,]),'ELSE':([10,11,12,13,14,15,16,17,34,53,68,69,70,91,92,98,103,105,107,153,154,156,160,167,168,169,184,211,214,231,245,246,247,285,288,],[-58,-59,-60,-61,-62,-63,-64,-65,93,-57,-66,-67,-68,-71,93,-163,-84,-86,-88,-73,-78,-81,-165,-83,-85,-87,-75,-77,-164,-74,-76,-82,-89,-106,-107,]),'ELSEIF':([10,11,12,13,14,15,16,17,34,53,68,69,70,91,92,98,103,105,107,153,154,156,160,167,168,169,184,211,214,231,245,246,247,285,288,],[-58,-59,-60,-61,-62,-63,-64,-65,94,-57,-66,-67,-68,-71,-72,-163,-84,-86,-88,-73,-78,-81,-165,-83,-85,-87,-75,94,-164,-74,-76,-82,-89,-106,-107,]),'POS_INCREMENT':([24,45,114,115,176,178,226,],[74,-124,-123,-169,-168,-126,-125,]),'POS_DECREMENT':([24,45,114,115,176,178,226,],[75,-124,-123,-169,-168,-126,-125,]),'RPAREN':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,84,85,86,87,88,89,90,109,114,115,117,120,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,142,148,149,150,151,157,162,165,170,176,178,179,180,181,182,187,189,190,201,202,203,204,205,206,207,210,217,220,226,227,228,230,236,239,241,242,243,248,249,251,252,253,255,258,261,262,263,266,267,268,270,271,272,273,274,275,278,279,280,281,282,283,284,286,],[-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,142,143,144,145,146,147,-30,149,171,-123,-169,180,188,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-33,-34,-35,-36,-37,-38,-29,206,-56,-156,-157,212,216,-109,223,-168,-126,227,-113,-115,-118,235,-135,-136,-39,-40,-41,-42,-43,-55,-155,-158,-90,-108,-125,-112,-114,-119,-134,-137,-32,-171,-159,-96,-94,-91,-111,276,-104,-117,-167,-138,-149,-152,-153,-154,-170,-160,-95,-92,-93,-110,-103,-116,-166,-150,-151,-139,-97,287,]),'DDOT':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,89,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,149,176,178,180,201,202,203,204,205,206,226,227,241,],[-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,-30,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,200,-33,-34,-35,-36,-37,-38,-29,-56,-168,-126,-113,-39,-40,-41,-42,-43,-55,-125,-112,-32,]),'ATTR_ASSOC':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,89,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,142,149,151,176,178,180,201,202,203,204,205,206,226,227,241,253,255,278,],[-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,-30,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-33,-34,-35,-36,-37,-38,-29,-56,209,-168,-126,-113,-39,-40,-41,-42,-43,-55,-125,-112,-32,277,-104,-103,]),'COLON':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,89,111,112,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,142,149,150,151,165,174,176,178,180,181,182,189,190,201,202,203,204,205,206,210,224,226,227,230,239,241,242,243,252,257,258,261,262,263,266,267,268,271,281,282,283,],[-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,-30,173,-98,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-33,-34,-35,-36,-37,-38,-29,-56,208,-157,221,-99,-168,-126,-113,229,-118,237,-136,-39,-40,-41,-42,-43,-55,-158,173,-125,-112,-119,-137,-32,208,-159,221,-100,229,237,-138,-149,-152,-153,-154,-160,-150,-151,-139,]),'AS':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,89,114,115,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,142,149,166,176,178,180,201,202,203,204,205,206,226,227,241,],[-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,-30,-123,-169,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-33,-34,-35,-36,-37,-38,-29,-56,222,-168,-126,-113,-39,-40,-41,-42,-43,-55,-125,-112,-32,]),'RBRACKET':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,89,114,115,116,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,142,149,176,177,178,180,201,202,203,204,205,206,226,227,241,],[-28,-31,-44,-45,-46,-47,-48,-124,-11,-23,-24,-25,-27,-26,-30,-123,-169,178,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-33,-34,-35,-36,-37,-38,-29,-56,-168,226,-126,-113,-39,-40,-41,-42,-43,-55,-125,-112,-32,]),'ADD_ASSIGN':([24,45,114,115,176,178,226,],[76,-124,-123,-169,-168,-126,-125,]),'SUB_ASSIGN':([24,45,114,115,176,178,226,],[77,-124,-123,-169,-168,-126,-125,]),'MOD_ASSIGN':([24,45,114,115,176,178,226,],[78,-124,-123,-169,-168,-126,-125,]),'PLUS_ASSIGN':([24,45,114,115,176,178,226,],[79,-124,-123,-169,-168,-126,-125,]),'DIVIDE_ASSIGN':([24,45,114,115,176,178,226,],[80,-124,-123,-169,-168,-126,-125,]),'ASSIGN':([24,45,114,115,176,178,190,226,239,],[81,-124,-123,-169,-168,-126,238,-125,269,]),'INT_TYPE':([26,120,237,],[84,194,194,]),'FLOAT_TYPE':([26,120,237,],[85,197,197,]),'STRING_TYPE':([26,120,237,],[86,196,196,]),'BOOL_TYPE':([26,120,237,],[88,199,199,]),'LKEY':([36,93,95,113,118,119,155,188,212,216,235,276,287,],[99,99,99,175,99,186,99,-133,-105,99,-132,99,99,]),'DOLAR':([44,173,],[113,113,]),'LBRACKET':([45,115,178,226,],[116,116,-126,-125,]),'BOOLEAN_TYPE':([120,237,],[195,195,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'main_INNER':([2,5,],[3,49,]),'inner_statement':([2,5,186,234,],[5,5,234,234,]),'function_declaration_statement':([2,5,186,234,],[6,6,6,6,]),'statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[7,7,98,98,98,161,98,98,161,7,98,7,98,98,]),'expr':([2,5,21,22,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,90,93,95,96,99,100,101,109,116,117,118,143,144,145,146,147,155,161,163,175,186,200,208,209,216,217,219,221,229,234,249,251,273,276,287,],[9,9,71,72,83,9,102,104,106,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,151,9,9,157,9,165,166,170,177,182,9,201,202,203,204,205,9,9,165,225,9,241,151,243,9,165,165,252,182,9,165,165,165,9,9,]),'if_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'while_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'do_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'for_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'foreach_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'break_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'continue_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'return_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'exit_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'die_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'global_statement':([2,5,36,93,95,99,118,155,161,186,216,234,276,287,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'variable':([2,5,21,22,23,25,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,90,93,95,96,99,100,101,109,116,117,118,143,144,145,146,147,152,155,161,163,175,186,200,208,209,216,217,219,221,229,234,244,249,251,273,276,287,],[24,24,24,24,73,82,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,210,24,24,24,24,24,24,24,24,24,24,24,24,24,24,271,24,24,24,24,24,]),'function_call':([2,5,21,22,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,90,93,95,96,99,100,101,109,116,117,118,143,144,145,146,147,155,161,163,175,186,200,208,209,216,217,219,221,229,234,249,251,273,276,287,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'statement_if':([2,5,36,93,95,99,118,155,161,184,186,216,234,276,287,],[34,34,34,34,34,34,34,34,34,231,34,34,34,34,34,]),'fds_id':([8,],[50,]),'array_declaration':([27,87,],[89,89,]),'statement_else':([34,92,],[91,153,]),'statement_elseif':([34,211,],[92,245,]),'expr_parentheses':([35,47,94,158,],[95,118,155,213,]),'statement_BLOCK_OPT':([36,93,95,118,155,216,276,287,],[97,154,156,184,211,247,285,288,]),'exit_expr':([42,43,],[108,110,]),'global_var':([44,173,],[111,224,]),'reference_variable_SELECTOR':([45,115,],[114,176,]),'selector':([45,115,],[115,115,]),'fds_parameter':([50,],[119,]),'array_pair_list':([90,],[148,]),'array_pair':([90,208,],[150,242,]),'statement_MUL':([99,161,],[159,215,]),'for_parameters':([100,],[162,]),'for_expr_OPT':([100,163,217,219,249,251,273,],[164,218,248,250,272,274,284,]),'statement_COLON_GLOBAL':([111,224,],[172,256,]),'function_call_parameter_list':([117,],[179,]),'function_call_parameter':([117,229,],[181,258,]),'fds_statements':([119,],[185,]),'parameter_list':([120,],[187,]),'parameter':([120,237,],[189,261,]),'parameter_prefix':([120,237,],[191,191,]),'parameter_type':([120,237,],[192,192,]),'array_pair_list_ARR_PAIR':([150,242,],[207,270,]),'for_expr_COLON_EXPR':([165,252,],[220,275,]),'fc_parameter_list_COLON_PARAMETER':([181,258,],[228,279,]),'inner_statement_MUL':([186,234,],[232,260,]),'parameter_list_COLON_PARAMETER':([189,261,],[236,280,]),'ampersand_variable':([222,277,],[253,286,]),'static_scalar':([238,264,265,269,],[262,281,282,283,]),'common_scalar':([238,264,265,269,],[263,263,263,263,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> BEGIN_PROGRAM main_INNER END_PROGRAM','main',3,'p_main','Parser.py',26),
  ('main -> BEGIN_PROGRAM END_PROGRAM','main',2,'p_main','Parser.py',27),
  ('main_INNER -> inner_statement main_INNER','main_INNER',2,'p_main_INNER','Parser.py',36),
  ('main_INNER -> inner_statement','main_INNER',1,'p_main_INNER','Parser.py',37),
  ('inner_statement -> function_declaration_statement','inner_statement',1,'p_inner_statement','Parser.py',46),
  ('inner_statement -> statement','inner_statement',1,'p_inner_statement','Parser.py',47),
  ('inner_statement_MUL -> inner_statement inner_statement_MUL','inner_statement_MUL',2,'p_inner_statement_MUL','Parser.py',56),
  ('inner_statement_MUL -> inner_statement','inner_statement_MUL',1,'p_inner_statement_MUL','Parser.py',57),
  ('expr -> expr PLUS expr','expr',3,'p_expr','Parser.py',67),
  ('expr -> expr MINUS expr','expr',3,'p_expr','Parser.py',68),
  ('expr -> MINUS expr','expr',2,'p_expr','Parser.py',69),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','Parser.py',70),
  ('expr -> expr PERCENT expr','expr',3,'p_expr','Parser.py',71),
  ('expr -> expr TIMES expr','expr',3,'p_expr','Parser.py',72),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','Parser.py',73),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr','Parser.py',74),
  ('expr -> expr GREAT_THAN expr','expr',3,'p_expr','Parser.py',75),
  ('expr -> expr GREAT_EQUAL expr','expr',3,'p_expr','Parser.py',76),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','Parser.py',77),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr','Parser.py',78),
  ('expr -> expr AND expr','expr',3,'p_expr','Parser.py',79),
  ('expr -> expr OR expr','expr',3,'p_expr','Parser.py',80),
  ('expr -> EXC_DOT expr','expr',2,'p_expr','Parser.py',81),
  ('expr -> PRE_INCREMENT variable','expr',2,'p_expr','Parser.py',82),
  ('expr -> variable POS_INCREMENT','expr',2,'p_expr','Parser.py',83),
  ('expr -> PRE_DECREMENT variable','expr',2,'p_expr','Parser.py',84),
  ('expr -> variable POS_DECREMENT','expr',2,'p_expr','Parser.py',85),
  ('expr -> variable','expr',1,'p_expr','Parser.py',86),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','Parser.py',87),
  ('expr -> ARRAY_TYPE array_declaration','expr',2,'p_expr','Parser.py',88),
  ('expr -> function_call','expr',1,'p_expr','Parser.py',89),
  ('expr -> expr INTE_DOT expr DDOT expr','expr',5,'p_expr','Parser.py',90),
  ('expr -> variable ADD_ASSIGN expr','expr',3,'p_expr','Parser.py',91),
  ('expr -> variable SUB_ASSIGN expr','expr',3,'p_expr','Parser.py',92),
  ('expr -> variable MOD_ASSIGN expr','expr',3,'p_expr','Parser.py',93),
  ('expr -> variable PLUS_ASSIGN expr','expr',3,'p_expr','Parser.py',94),
  ('expr -> variable DIVIDE_ASSIGN expr','expr',3,'p_expr','Parser.py',95),
  ('expr -> variable ASSIGN expr','expr',3,'p_expr','Parser.py',96),
  ('expr -> LPAREN INT_TYPE RPAREN expr','expr',4,'p_expr','Parser.py',97),
  ('expr -> LPAREN FLOAT_TYPE RPAREN expr','expr',4,'p_expr','Parser.py',98),
  ('expr -> LPAREN STRING_TYPE RPAREN expr','expr',4,'p_expr','Parser.py',99),
  ('expr -> LPAREN ARRAY_TYPE RPAREN expr','expr',4,'p_expr','Parser.py',100),
  ('expr -> LPAREN BOOL_TYPE RPAREN expr','expr',4,'p_expr','Parser.py',101),
  ('expr -> NUMBER_INTEGER','expr',1,'p_expr','Parser.py',102),
  ('expr -> NUMBER_REAL','expr',1,'p_expr','Parser.py',103),
  ('expr -> CONSTANT_ENCAPSED_STRING','expr',1,'p_expr','Parser.py',104),
  ('expr -> TRUE','expr',1,'p_expr','Parser.py',105),
  ('expr -> FALSE','expr',1,'p_expr','Parser.py',106),
  ('exit_statement -> EXIT exit_expr','exit_statement',2,'p_exit_statement','Parser.py',172),
  ('exit_statement -> EXIT','exit_statement',1,'p_exit_statement','Parser.py',173),
  ('die_statement -> DIE exit_expr','die_statement',2,'p_die_statement','Parser.py',182),
  ('die_statement -> DIE','die_statement',1,'p_die_statement','Parser.py',183),
  ('exit_expr -> LPAREN expr RPAREN','exit_expr',3,'p_exit_expr','Parser.py',192),
  ('exit_expr -> LPAREN RPAREN','exit_expr',2,'p_exit_expr','Parser.py',193),
  ('array_declaration -> LPAREN array_pair_list RPAREN','array_declaration',3,'p_array_declaration','Parser.py',202),
  ('array_declaration -> LPAREN RPAREN','array_declaration',2,'p_array_declaration','Parser.py',203),
  ('statement -> expr SEMICOLON','statement',2,'p_statement','Parser.py',212),
  ('statement -> if_statement','statement',1,'p_statement','Parser.py',213),
  ('statement -> while_statement','statement',1,'p_statement','Parser.py',214),
  ('statement -> do_statement','statement',1,'p_statement','Parser.py',215),
  ('statement -> for_statement','statement',1,'p_statement','Parser.py',216),
  ('statement -> foreach_statement','statement',1,'p_statement','Parser.py',217),
  ('statement -> break_statement','statement',1,'p_statement','Parser.py',218),
  ('statement -> continue_statement','statement',1,'p_statement','Parser.py',219),
  ('statement -> return_statement','statement',1,'p_statement','Parser.py',220),
  ('statement -> exit_statement SEMICOLON','statement',2,'p_statement','Parser.py',221),
  ('statement -> die_statement SEMICOLON','statement',2,'p_statement','Parser.py',222),
  ('statement -> global_statement SEMICOLON','statement',2,'p_statement','Parser.py',223),
  ('S -> IF','S',1,'p_IF','Parser.py',252),
  ('if_statement -> statement_if','if_statement',1,'p_if_statement','Parser.py',267),
  ('if_statement -> statement_if statement_else','if_statement',2,'p_if_statement','Parser.py',268),
  ('if_statement -> statement_if statement_elseif','if_statement',2,'p_if_statement','Parser.py',269),
  ('if_statement -> statement_if statement_elseif statement_else','if_statement',3,'p_if_statement','Parser.py',270),
  ('statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if','statement_if',4,'p_statement_if','Parser.py',283),
  ('statement_if -> IF expr_parentheses statement_BLOCK_OPT','statement_if',3,'p_statement_if','Parser.py',284),
  ('statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif','statement_elseif',4,'p_statement_elseif','Parser.py',293),
  ('statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT','statement_elseif',3,'p_statement_elseif','Parser.py',294),
  ('statement_else -> ELSE statement_BLOCK_OPT','statement_else',2,'p_statement_else','Parser.py',303),
  ('global_statement -> GLOBAL global_var statement_COLON_GLOBAL','global_statement',3,'p_global_statement','Parser.py',310),
  ('global_statement -> GLOBAL global_var','global_statement',2,'p_global_statement','Parser.py',311),
  ('while_statement -> WHILE expr_parentheses statement_BLOCK_OPT','while_statement',3,'p_while_statement','Parser.py',321),
  ('do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON','do_statement',5,'p_do_statement','Parser.py',328),
  ('break_statement -> BREAK expr SEMICOLON','break_statement',3,'p_break_statement','Parser.py',334),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','Parser.py',335),
  ('continue_statement -> CONTINUE expr SEMICOLON','continue_statement',3,'p_continue_statement','Parser.py',344),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','Parser.py',345),
  ('return_statement -> RETURN expr SEMICOLON','return_statement',3,'p_return_statement','Parser.py',354),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','Parser.py',355),
  ('for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT','for_statement',5,'p_for_statement','Parser.py',364),
  ('for_parameters -> SEMICOLON SEMICOLON','for_parameters',2,'p_for_parameters','Parser.py',370),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',371),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON','for_parameters',4,'p_for_parameters','Parser.py',372),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',373),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',374),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',375),
  ('for_parameters -> SEMICOLON SEMICOLON for_expr_OPT','for_parameters',3,'p_for_parameters','Parser.py',376),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',5,'p_for_parameters','Parser.py',377),
  ('global_var -> VARIABLE','global_var',1,'p_global_var','Parser.py',399),
  ('global_var -> DOLAR VARIABLE','global_var',2,'p_global_var','Parser.py',400),
  ('global_var -> DOLAR LKEY expr RKEY','global_var',4,'p_global_var','Parser.py',401),
  ('statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL','statement_COLON_GLOBAL',3,'p_statement_COLON_GLOBAL','Parser.py',412),
  ('statement_COLON_GLOBAL -> COLON global_var','statement_COLON_GLOBAL',2,'p_statement_COLON_GLOBAL','Parser.py',413),
  ('ampersand_variable -> AMPERSAND VARIABLE','ampersand_variable',2,'p_ampersand_variable','Parser.py',422),
  ('ampersand_variable -> VARIABLE','ampersand_variable',1,'p_ampersand_variable','Parser.py',423),
  ('expr_parentheses -> LPAREN expr RPAREN','expr_parentheses',3,'p_expr_parentheses','Parser.py',432),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT','foreach_statement',7,'p_foreach_statement','Parser.py',439),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT','foreach_statement',9,'p_foreach_statement','Parser.py',440),
  ('for_expr_OPT -> expr for_expr_COLON_EXPR','for_expr_OPT',2,'p_for_expr_OPT','Parser.py',449),
  ('for_expr_OPT -> expr','for_expr_OPT',1,'p_for_expr_OPT','Parser.py',450),
  ('for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR','for_expr_COLON_EXPR',3,'p_for_expr_COLON_EXPR','Parser.py',459),
  ('for_expr_COLON_EXPR -> COLON expr','for_expr_COLON_EXPR',2,'p_for_expr_COLON_EXPR','Parser.py',460),
  ('function_call -> ID LPAREN function_call_parameter_list RPAREN','function_call',4,'p_function_call','Parser.py',469),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','Parser.py',470),
  ('function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER','function_call_parameter_list',2,'p_function_call_parameter_list','Parser.py',479),
  ('function_call_parameter_list -> function_call_parameter','function_call_parameter_list',1,'p_function_call_parameter_list','Parser.py',480),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER','fc_parameter_list_COLON_PARAMETER',3,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',489),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter','fc_parameter_list_COLON_PARAMETER',2,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',490),
  ('function_call_parameter -> expr','function_call_parameter',1,'p_function_call_parameter','Parser.py',499),
  ('function_call_parameter -> AMPERSAND VARIABLE','function_call_parameter',2,'p_function_call_parameter','Parser.py',500),
  ('unary_operator -> EXC_DOT','unary_operator',1,'p_unary_operator','Parser.py',509),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','Parser.py',510),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','Parser.py',511),
  ('variable -> VARIABLE reference_variable_SELECTOR','variable',2,'p_variable','Parser.py',516),
  ('variable -> VARIABLE','variable',1,'p_variable','Parser.py',517),
  ('selector -> LBRACKET expr RBRACKET','selector',3,'p_selector','Parser.py',526),
  ('selector -> LBRACKET RBRACKET','selector',2,'p_selector','Parser.py',527),
  ('function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements','function_declaration_statement',4,'p_function_declaration_statement','Parser.py',536),
  ('fds_statements -> LKEY inner_statement_MUL RKEY','fds_statements',3,'p_fds_statements','Parser.py',542),
  ('fds_statements -> LKEY RKEY','fds_statements',2,'p_fds_statements','Parser.py',543),
  ('fds_id -> AMPERSAND ID','fds_id',2,'p_fds_id','Parser.py',552),
  ('fds_id -> ID','fds_id',1,'p_fds_id','Parser.py',553),
  ('fds_parameter -> LPAREN parameter_list RPAREN','fds_parameter',3,'p_fds_parameter','Parser.py',562),
  ('fds_parameter -> LPAREN RPAREN','fds_parameter',2,'p_fds_parameter','Parser.py',563),
  ('parameter_list -> parameter parameter_list_COLON_PARAMETER','parameter_list',2,'p_parameter_list','Parser.py',572),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser.py',573),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','Parser.py',582),
  ('parameter -> parameter_prefix VARIABLE','parameter',2,'p_parameter','Parser.py',583),
  ('parameter -> VARIABLE ASSIGN static_scalar','parameter',3,'p_parameter','Parser.py',584),
  ('parameter -> parameter_prefix VARIABLE ASSIGN static_scalar','parameter',4,'p_parameter','Parser.py',585),
  ('parameter_prefix -> parameter_type AMPERSAND','parameter_prefix',2,'p_parameter_prefix','Parser.py',598),
  ('parameter_prefix -> AMPERSAND','parameter_prefix',1,'p_parameter_prefix','Parser.py',599),
  ('parameter_prefix -> parameter_type','parameter_prefix',1,'p_parameter_prefix','Parser.py',600),
  ('parameter_type -> INT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',611),
  ('parameter_type -> BOOLEAN_TYPE','parameter_type',1,'p_parameter_type','Parser.py',612),
  ('parameter_type -> STRING_TYPE','parameter_type',1,'p_parameter_type','Parser.py',613),
  ('parameter_type -> FLOAT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',614),
  ('parameter_type -> ARRAY_TYPE','parameter_type',1,'p_parameter_type','Parser.py',615),
  ('parameter_type -> BOOL_TYPE','parameter_type',1,'p_parameter_type','Parser.py',616),
  ('static_scalar -> common_scalar','static_scalar',1,'p_static_scalar','Parser.py',623),
  ('static_scalar -> PLUS static_scalar','static_scalar',2,'p_static_scalar','Parser.py',624),
  ('static_scalar -> MINUS static_scalar','static_scalar',2,'p_static_scalar','Parser.py',625),
  ('common_scalar -> NUMBER_REAL','common_scalar',1,'p_common_scalar','Parser.py',636),
  ('common_scalar -> NUMBER_INTEGER','common_scalar',1,'p_common_scalar','Parser.py',637),
  ('common_scalar -> CONSTANT_ENCAPSED_STRING','common_scalar',1,'p_common_scalar','Parser.py',638),
  ('array_pair_list -> array_pair array_pair_list_ARR_PAIR','array_pair_list',2,'p_array_pair_list','Parser.py',644),
  ('array_pair_list -> array_pair','array_pair_list',1,'p_array_pair_list','Parser.py',645),
  ('array_pair -> expr','array_pair',1,'p_array_pair','Parser.py',654),
  ('array_pair -> AMPERSAND variable','array_pair',2,'p_array_pair','Parser.py',655),
  ('array_pair -> expr ATTR_ASSOC expr','array_pair',3,'p_array_pair','Parser.py',656),
  ('array_pair -> expr ATTR_ASSOC AMPERSAND variable','array_pair',4,'p_array_pair','Parser.py',657),
  ('statement_MUL -> statement statement_MUL','statement_MUL',2,'p_statement_MUL','Parser.py',673),
  ('statement_MUL -> statement','statement_MUL',1,'p_statement_MUL','Parser.py',674),
  ('statement_BLOCK_OPT -> statement','statement_BLOCK_OPT',1,'p_statement_BLOCK_OPT','Parser.py',683),
  ('statement_BLOCK_OPT -> LKEY statement_MUL RKEY','statement_BLOCK_OPT',3,'p_statement_BLOCK_OPT','Parser.py',684),
  ('statement_BLOCK_OPT -> LKEY RKEY','statement_BLOCK_OPT',2,'p_statement_BLOCK_OPT','Parser.py',685),
  ('parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER','parameter_list_COLON_PARAMETER',3,'p_parameter_list_COLON_PARAMETER','Parser.py',696),
  ('parameter_list_COLON_PARAMETER -> COLON parameter','parameter_list_COLON_PARAMETER',2,'p_parameter_list_COLON_PARAMETER','Parser.py',697),
  ('reference_variable_SELECTOR -> selector reference_variable_SELECTOR','reference_variable_SELECTOR',2,'p_reference_variable_SELECTOR','Parser.py',706),
  ('reference_variable_SELECTOR -> selector','reference_variable_SELECTOR',1,'p_reference_variable_SELECTOR','Parser.py',707),
  ('array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR','array_pair_list_ARR_PAIR',3,'p_array_pair_list_ARR_PAIR','Parser.py',716),
  ('array_pair_list_ARR_PAIR -> COLON array_pair','array_pair_list_ARR_PAIR',2,'p_array_pair_list_ARR_PAIR','Parser.py',717),
]

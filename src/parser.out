Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    STRING
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     inner_statement -> function_declaration_statement
Rule 4     inner_statement -> statement
Rule 5     statement -> expr SEMICOLON
Rule 6     statement -> if_statement
Rule 7     statement -> while_statement
Rule 8     statement -> do_statement
Rule 9     statement -> for_statement
Rule 10    statement -> foreach_statement
Rule 11    statement -> break_statement
Rule 12    statement -> continue_statement
Rule 13    statement -> return_statement
Rule 14    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 15    statement -> GLOBAL global_var SEMICOLON
Rule 16    if_statement -> statement_if if_statement_complement
Rule 17    if_statement -> statement_if
Rule 18    if_statement_complement -> statement_elseif
Rule 19    if_statement_complement -> statement_elseif statement_else
Rule 20    if_statement_complement -> statement_else
Rule 21    while_statement -> WHILE expr_parentheses statement_BLOCK_OPT
Rule 22    do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
Rule 23    break_statement -> BREAK expr SEMICOLON
Rule 24    break_statement -> BREAK SEMICOLON
Rule 25    continue_statement -> CONTINUE expr SEMICOLON
Rule 26    continue_statement -> CONTINUE SEMICOLON
Rule 27    return_statement -> RETURN expr SEMICOLON
Rule 28    return_statement -> RETURN SEMICOLON
Rule 29    for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
Rule 30    for_parameters -> SEMICOLON SEMICOLON
Rule 31    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 32    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 33    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 34    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 35    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 36    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 37    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 38    global_var -> VARIABLE
Rule 39    global_var -> DOLAR VARIABLE
Rule 40    global_var -> DOLAR LKEY expr RKEY
Rule 41    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 42    statement_COLON_GLOBAL -> COLON global_var
Rule 43    ampersand_variable -> AMPERSAND VARIABLE
Rule 44    ampersand_variable -> VARIABLE
Rule 45    expr_parentheses -> LPAREN expr RPAREN
Rule 46    statement_if -> IF expr_parentheses statement_BLOCK_OPT
Rule 47    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT
Rule 48    statement_else -> ELSE statement_BLOCK_OPT
Rule 49    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 50    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 51    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 52    for_expr_OPT -> expr
Rule 53    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 54    function_call -> ID LPAREN RPAREN
Rule 55    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 56    function_call_parameter_list -> function_call_parameter
Rule 57    function_call_parameter -> expr
Rule 58    function_call_parameter -> AMPERSAND VARIABLE
Rule 59    assignment_list_element -> variable
Rule 60    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 61    unary_operator -> EXC_DOT
Rule 62    unary_operator -> PLUS
Rule 63    unary_operator -> MINUS
Rule 64    type_cast_operator -> INT_TYPE
Rule 65    type_cast_operator -> DOUBLE_TYPE
Rule 66    type_cast_operator -> FLOAT_TYPE
Rule 67    type_cast_operator -> REAL_TYPE
Rule 68    type_cast_operator -> STRING_TYPE
Rule 69    type_cast_operator -> ARRAY_TYPE
Rule 70    type_cast_operator -> BOOLEAN_TYPE
Rule 71    type_cast_operator -> BOOL_TYPE
Rule 72    type_cast_operator -> UNSET
Rule 73    assign_operator -> ADD_ASSIGN
Rule 74    assign_operator -> SUB_ASSIGN
Rule 75    assign_operator -> MOD_ASSIGN
Rule 76    assign_operator -> PLUS_ASSIGN
Rule 77    assign_operator -> DIVIDE_ASSIGN
Rule 78    assign_operator -> ASSIGN
Rule 79    arithmetic_operator -> PLUS
Rule 80    arithmetic_operator -> DIVIDE
Rule 81    arithmetic_operator -> PERCENT
Rule 82    arithmetic_operator -> TIMES
Rule 83    arithmetic_operator -> MINUS
Rule 84    comparission_operator -> EQUALS
Rule 85    comparission_operator -> GREAT_THAN
Rule 86    comparission_operator -> LESS_THAN
Rule 87    comparission_operator -> LESS_EQUAL
Rule 88    comparission_operator -> GREAT_EQUAL
Rule 89    comparission_operator -> NOT_EQUAL
Rule 90    comparission_operator -> LEFT_LOGICAL
Rule 91    comparission_operator -> RIGHT_LOGICAL
Rule 92    comparission_operator -> AND
Rule 93    comparission_operator -> OR
Rule 94    expr -> MINUS expr
Rule 95    expr -> INCREMENT variable
Rule 96    expr -> variable INCREMENT
Rule 97    expr -> DECREMENT variable
Rule 98    expr -> variable DECREMENT
Rule 99    expr -> variable assign_operator expr
Rule 100   expr -> variable assign_operator AMPERSAND expr
Rule 101   expr -> variable
Rule 102   expr -> LPAREN expr RPAREN
Rule 103   expr -> unary_operator expr
Rule 104   expr -> expr INTE_DOT expr DDOT expr
Rule 105   expr -> expr comparission_operator expr
Rule 106   expr -> expr arithmetic_operator expr
Rule 107   expr -> LPAREN type_cast_operator RPAREN expr
Rule 108   expr -> EXIT expr_EXIT
Rule 109   expr -> DIE expr_EXIT
Rule 110   expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 111   expr -> ARRAY_TYPE LPAREN RPAREN
Rule 112   expr -> function_call
Rule 113   expr -> NUMBER_REAL
Rule 114   expr -> NUMBER_INTEGER
Rule 115   expr -> CONSTANT_ENCAPSED_STRING
Rule 116   expr -> TRUE
Rule 117   expr -> FALSE
Rule 118   expr_EXIT -> exit_expr
Rule 119   expr_EXIT -> <empty>
Rule 120   exit_expr -> LPAREN expr RPAREN
Rule 121   exit_expr -> LPAREN RPAREN
Rule 122   variable -> base_variable
Rule 123   base_variable -> reference_variable
Rule 124   base_variable -> simple_indirect_reference_DOLAR reference_variable
Rule 125   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 126   reference_variable -> compound_variable
Rule 127   compound_variable -> VARIABLE
Rule 128   compound_variable -> DOLAR LKEY expr RKEY
Rule 129   selector -> LBRACKET expr RBRACKET
Rule 130   selector -> LBRACKET RBRACKET
Rule 131   function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY
Rule 132   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
Rule 133   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
Rule 134   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
Rule 135   function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 136   function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
Rule 137   function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
Rule 138   function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 139   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 140   parameter_list -> parameter
Rule 141   parameter -> VARIABLE
Rule 142   parameter -> VARIABLE ASSIGN static_scalar
Rule 143   parameter -> parameter_type VARIABLE
Rule 144   parameter -> parameter_type AMPERSAND VARIABLE
Rule 145   parameter -> AMPERSAND VARIABLE
Rule 146   parameter -> AMPERSAND VARIABLE ASSIGN static_scalar
Rule 147   parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
Rule 148   parameter_type -> INT_TYPE
Rule 149   parameter_type -> BOOLEAN_TYPE
Rule 150   parameter_type -> STRING_TYPE
Rule 151   parameter_type -> FLOAT_TYPE
Rule 152   parameter_type -> ARRAY_TYPE
Rule 153   parameter_type -> BOOL_TYPE
Rule 154   parameter_type -> REAL_TYPE
Rule 155   parameter_type -> DOUBLE_TYPE
Rule 156   static_scalar -> common_scalar
Rule 157   static_scalar -> PLUS static_scalar
Rule 158   static_scalar -> MINUS static_scalar
Rule 159   common_scalar -> NUMBER_REAL
Rule 160   common_scalar -> NUMBER_INTEGER
Rule 161   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 162   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 163   array_pair_list -> array_pair
Rule 164   array_pair -> expr
Rule 165   array_pair -> expr ATTR_ASSOC expr
Rule 166   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 167   array_pair -> AMPERSAND variable
Rule 168   main_INNER -> inner_statement main_INNER
Rule 169   main_INNER -> inner_statement
Rule 170   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 171   inner_statement_MUL -> inner_statement
Rule 172   statement_MUL -> statement statement_MUL
Rule 173   statement_MUL -> statement
Rule 174   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 175   for_expr_COLON_EXPR -> COLON expr
Rule 176   statement_BLOCK_OPT -> statement
Rule 177   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 178   statement_BLOCK_OPT -> LKEY RKEY
Rule 179   function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 180   function_call_list_COLON_FUNCTION -> COLON function_call_parameter
Rule 181   assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 182   assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 183   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 184   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 185   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 186   reference_variable_SELECTOR -> selector
Rule 187   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 188   simple_indirect_reference_DOLAR -> DOLAR
Rule 189   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 190   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 73
AMPERSAND            : 43 58 100 132 133 134 135 144 145 146 147 166 167
AND                  : 92
APOSTROFE            : 
ARRAY_TYPE           : 69 110 111 152
ARROBA               : 
AS                   : 49 50
ASPAS                : 
ASSIGN               : 78 142 146 147
ATTR_ASSOC           : 50 165 166
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 70 149
BOOL_TYPE            : 71 153
BREAK                : 23 24
CASE                 : 
CLONE                : 
COLON                : 41 42 174 175 179 180 181 183 184 189 190
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 115 161
CONTINUE             : 25 26
CRASE                : 
DDOT                 : 104
DECLARE              : 
DECREMENT            : 97 98
DIE                  : 109
DIVIDE               : 80
DIVIDE_ASSIGN        : 77
DO                   : 22
DOLAR                : 39 40 128 187 188
DOUBLE_TYPE          : 65 155
ELSE                 : 48
ELSEIF               : 47
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 84
EXC_DOT              : 61
EXIT                 : 108
FALSE                : 117
FLOAT_TYPE           : 66 151
FOR                  : 29
FOREACH              : 49 50
FUNCTION             : 131 132 133 134 135 136 137 138
GLOBAL               : 14 15
GREAT_EQUAL          : 88
GREAT_THAN           : 85
ID                   : 53 54 131 132 133 134 135 136 137 138
IDENTATION           : 
IF                   : 46
INCREMENT            : 95 96
INTE_DOT             : 104
INT_TYPE             : 64 148
LBRACKET             : 129 130
LEFT_LOGICAL         : 90
LESS_EQUAL           : 87
LESS_THAN            : 86
LIST                 : 60
LKEY                 : 40 128 131 132 133 134 135 136 137 138 177 178
LPAREN               : 29 45 49 50 53 54 60 102 107 110 111 120 121 131 132 133 134 135 136 137 138
MINUS                : 63 83 94 158
MOD_ASSIGN           : 75
NOT_EQUAL            : 89
NUMBER_INTEGER       : 114 160
NUMBER_REAL          : 113 159
OR                   : 93
PERCENT              : 81
PLUS                 : 62 79 157
PLUS_ASSIGN          : 76
RBRACKET             : 129 130
REAL_TYPE            : 67 154
RETURN               : 27 28
RIGHT_LOGICAL        : 91
RKEY                 : 40 128 131 132 133 134 135 136 137 138 177 178
RPAREN               : 29 45 49 50 53 54 60 102 107 110 111 120 121 131 132 133 134 135 136 137 138
SEMICOLON            : 5 14 15 22 23 24 25 26 27 28 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37
STRING               : 
STRING_TYPE          : 68 150
SUB_ASSIGN           : 74
TIMES                : 82
TRUE                 : 116
UNSET                : 72
VAR                  : 
VARIABLE             : 38 39 43 44 58 127 141 142 143 144 145 146 147
WHILE                : 21 22
error                : 

Nonterminals, with rules where they appear

ampersand_variable   : 49 50 50
arithmetic_operator  : 106
array_pair           : 162 163 189 190
array_pair_list      : 110
array_pair_list_ARR_PAIR : 162 189
assign_operator      : 99 100
assignment_list_element : 60 181
assignment_list_element_COLON_ASSIGNMENT : 60 181
base_variable        : 122
break_statement      : 11
common_scalar        : 156
comparission_operator : 105
compound_variable    : 125 126
continue_statement   : 12
do_statement         : 8
exit_expr            : 118
expr                 : 5 23 25 27 40 45 49 50 51 52 57 94 99 100 102 103 104 104 104 105 105 106 106 107 120 128 129 164 165 165 166 174 175
expr_EXIT            : 108 109
expr_parentheses     : 21 22 46 47
for_expr_COLON_EXPR  : 51 174
for_expr_OPT         : 31 32 32 33 33 34 35 35 36 37 37 37
for_parameters       : 29
for_statement        : 9
foreach_statement    : 10
function_call        : 112
function_call_list_COLON_FUNCTION : 55 179
function_call_parameter : 55 56 179 180
function_call_parameter_list : 53
function_declaration_statement : 3
global_var           : 14 15 41 42
if_statement         : 6
if_statement_complement : 16
inner_statement      : 168 169 170 171
inner_statement_MUL  : 134 135 137 138 170
main                 : 0
main_INNER           : 1 168
parameter            : 139 140 183 184
parameter_list       : 133 135 136 138
parameter_list_COLON_PARAMETER : 139 183
parameter_type       : 143 144 147
reference_variable   : 123 124
reference_variable_SELECTOR : 125 185
return_statement     : 13
selector             : 185 186
simple_indirect_reference_DOLAR : 124 187
statement            : 4 172 173 176
statement_BLOCK_OPT  : 21 22 29 46 47 48 49 50
statement_COLON_GLOBAL : 14 41
statement_MUL        : 172 177
statement_else       : 19 20
statement_elseif     : 18 19
statement_if         : 16 17
static_scalar        : 142 146 147 157 158
type_cast_operator   : 107
unary_operator       : 103
variable             : 59 95 96 97 98 99 100 101 166 167
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (168) main_INNER -> . inner_statement main_INNER
    (169) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (131) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 52


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (168) main_INNER -> inner_statement . main_INNER
    (169) main_INNER -> inner_statement .
    (168) main_INNER -> . inner_statement main_INNER
    (169) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (131) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     reduce using rule 169 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 53
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 6

    (3) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 3 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 3 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 3 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 3 (inner_statement -> function_declaration_statement .)


state 7

    (4) inner_statement -> statement .

    FUNCTION        reduce using rule 4 (inner_statement -> statement .)
    GLOBAL          reduce using rule 4 (inner_statement -> statement .)
    MINUS           reduce using rule 4 (inner_statement -> statement .)
    INCREMENT       reduce using rule 4 (inner_statement -> statement .)
    DECREMENT       reduce using rule 4 (inner_statement -> statement .)
    LPAREN          reduce using rule 4 (inner_statement -> statement .)
    EXIT            reduce using rule 4 (inner_statement -> statement .)
    DIE             reduce using rule 4 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 4 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 4 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 4 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (inner_statement -> statement .)
    TRUE            reduce using rule 4 (inner_statement -> statement .)
    FALSE           reduce using rule 4 (inner_statement -> statement .)
    WHILE           reduce using rule 4 (inner_statement -> statement .)
    DO              reduce using rule 4 (inner_statement -> statement .)
    FOR             reduce using rule 4 (inner_statement -> statement .)
    FOREACH         reduce using rule 4 (inner_statement -> statement .)
    BREAK           reduce using rule 4 (inner_statement -> statement .)
    CONTINUE        reduce using rule 4 (inner_statement -> statement .)
    RETURN          reduce using rule 4 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 4 (inner_statement -> statement .)
    PLUS            reduce using rule 4 (inner_statement -> statement .)
    ID              reduce using rule 4 (inner_statement -> statement .)
    IF              reduce using rule 4 (inner_statement -> statement .)
    DOLAR           reduce using rule 4 (inner_statement -> statement .)
    VARIABLE        reduce using rule 4 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 4 (inner_statement -> statement .)
    RKEY            reduce using rule 4 (inner_statement -> statement .)


state 8

    (131) function_declaration_statement -> FUNCTION . ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> FUNCTION . AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (136) function_declaration_statement -> FUNCTION . ID LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> FUNCTION . ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> FUNCTION . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 54
    AMPERSAND       shift and go to state 55


state 9

    (53) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (54) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 56


state 10

    (102) expr -> LPAREN . expr RPAREN
    (107) expr -> LPAREN . type_cast_operator RPAREN expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (64) type_cast_operator -> . INT_TYPE
    (65) type_cast_operator -> . DOUBLE_TYPE
    (66) type_cast_operator -> . FLOAT_TYPE
    (67) type_cast_operator -> . REAL_TYPE
    (68) type_cast_operator -> . STRING_TYPE
    (69) type_cast_operator -> . ARRAY_TYPE
    (70) type_cast_operator -> . BOOLEAN_TYPE
    (71) type_cast_operator -> . BOOL_TYPE
    (72) type_cast_operator -> . UNSET
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 59
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    INT_TYPE        shift and go to state 60
    DOUBLE_TYPE     shift and go to state 61
    FLOAT_TYPE      shift and go to state 62
    REAL_TYPE       shift and go to state 63
    STRING_TYPE     shift and go to state 64
    BOOLEAN_TYPE    shift and go to state 65
    BOOL_TYPE       shift and go to state 66
    UNSET           shift and go to state 67
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 57
    type_cast_operator             shift and go to state 58
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 11

    (5) statement -> expr . SEMICOLON
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 68
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 12

    (6) statement -> if_statement .

    FUNCTION        reduce using rule 6 (statement -> if_statement .)
    GLOBAL          reduce using rule 6 (statement -> if_statement .)
    MINUS           reduce using rule 6 (statement -> if_statement .)
    INCREMENT       reduce using rule 6 (statement -> if_statement .)
    DECREMENT       reduce using rule 6 (statement -> if_statement .)
    LPAREN          reduce using rule 6 (statement -> if_statement .)
    EXIT            reduce using rule 6 (statement -> if_statement .)
    DIE             reduce using rule 6 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 6 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 6 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (statement -> if_statement .)
    TRUE            reduce using rule 6 (statement -> if_statement .)
    FALSE           reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    DO              reduce using rule 6 (statement -> if_statement .)
    FOR             reduce using rule 6 (statement -> if_statement .)
    FOREACH         reduce using rule 6 (statement -> if_statement .)
    BREAK           reduce using rule 6 (statement -> if_statement .)
    CONTINUE        reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    EXC_DOT         reduce using rule 6 (statement -> if_statement .)
    PLUS            reduce using rule 6 (statement -> if_statement .)
    ID              reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    DOLAR           reduce using rule 6 (statement -> if_statement .)
    VARIABLE        reduce using rule 6 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 6 (statement -> if_statement .)
    RKEY            reduce using rule 6 (statement -> if_statement .)
    ELSEIF          reduce using rule 6 (statement -> if_statement .)
    ELSE            reduce using rule 6 (statement -> if_statement .)


state 13

    (7) statement -> while_statement .

    FUNCTION        reduce using rule 7 (statement -> while_statement .)
    GLOBAL          reduce using rule 7 (statement -> while_statement .)
    MINUS           reduce using rule 7 (statement -> while_statement .)
    INCREMENT       reduce using rule 7 (statement -> while_statement .)
    DECREMENT       reduce using rule 7 (statement -> while_statement .)
    LPAREN          reduce using rule 7 (statement -> while_statement .)
    EXIT            reduce using rule 7 (statement -> while_statement .)
    DIE             reduce using rule 7 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 7 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 7 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (statement -> while_statement .)
    TRUE            reduce using rule 7 (statement -> while_statement .)
    FALSE           reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    DO              reduce using rule 7 (statement -> while_statement .)
    FOR             reduce using rule 7 (statement -> while_statement .)
    FOREACH         reduce using rule 7 (statement -> while_statement .)
    BREAK           reduce using rule 7 (statement -> while_statement .)
    CONTINUE        reduce using rule 7 (statement -> while_statement .)
    RETURN          reduce using rule 7 (statement -> while_statement .)
    EXC_DOT         reduce using rule 7 (statement -> while_statement .)
    PLUS            reduce using rule 7 (statement -> while_statement .)
    ID              reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    DOLAR           reduce using rule 7 (statement -> while_statement .)
    VARIABLE        reduce using rule 7 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 7 (statement -> while_statement .)
    RKEY            reduce using rule 7 (statement -> while_statement .)
    ELSEIF          reduce using rule 7 (statement -> while_statement .)
    ELSE            reduce using rule 7 (statement -> while_statement .)


state 14

    (8) statement -> do_statement .

    FUNCTION        reduce using rule 8 (statement -> do_statement .)
    GLOBAL          reduce using rule 8 (statement -> do_statement .)
    MINUS           reduce using rule 8 (statement -> do_statement .)
    INCREMENT       reduce using rule 8 (statement -> do_statement .)
    DECREMENT       reduce using rule 8 (statement -> do_statement .)
    LPAREN          reduce using rule 8 (statement -> do_statement .)
    EXIT            reduce using rule 8 (statement -> do_statement .)
    DIE             reduce using rule 8 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 8 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 8 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (statement -> do_statement .)
    TRUE            reduce using rule 8 (statement -> do_statement .)
    FALSE           reduce using rule 8 (statement -> do_statement .)
    WHILE           reduce using rule 8 (statement -> do_statement .)
    DO              reduce using rule 8 (statement -> do_statement .)
    FOR             reduce using rule 8 (statement -> do_statement .)
    FOREACH         reduce using rule 8 (statement -> do_statement .)
    BREAK           reduce using rule 8 (statement -> do_statement .)
    CONTINUE        reduce using rule 8 (statement -> do_statement .)
    RETURN          reduce using rule 8 (statement -> do_statement .)
    EXC_DOT         reduce using rule 8 (statement -> do_statement .)
    PLUS            reduce using rule 8 (statement -> do_statement .)
    ID              reduce using rule 8 (statement -> do_statement .)
    IF              reduce using rule 8 (statement -> do_statement .)
    DOLAR           reduce using rule 8 (statement -> do_statement .)
    VARIABLE        reduce using rule 8 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 8 (statement -> do_statement .)
    RKEY            reduce using rule 8 (statement -> do_statement .)
    ELSEIF          reduce using rule 8 (statement -> do_statement .)
    ELSE            reduce using rule 8 (statement -> do_statement .)


state 15

    (9) statement -> for_statement .

    FUNCTION        reduce using rule 9 (statement -> for_statement .)
    GLOBAL          reduce using rule 9 (statement -> for_statement .)
    MINUS           reduce using rule 9 (statement -> for_statement .)
    INCREMENT       reduce using rule 9 (statement -> for_statement .)
    DECREMENT       reduce using rule 9 (statement -> for_statement .)
    LPAREN          reduce using rule 9 (statement -> for_statement .)
    EXIT            reduce using rule 9 (statement -> for_statement .)
    DIE             reduce using rule 9 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 9 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 9 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (statement -> for_statement .)
    TRUE            reduce using rule 9 (statement -> for_statement .)
    FALSE           reduce using rule 9 (statement -> for_statement .)
    WHILE           reduce using rule 9 (statement -> for_statement .)
    DO              reduce using rule 9 (statement -> for_statement .)
    FOR             reduce using rule 9 (statement -> for_statement .)
    FOREACH         reduce using rule 9 (statement -> for_statement .)
    BREAK           reduce using rule 9 (statement -> for_statement .)
    CONTINUE        reduce using rule 9 (statement -> for_statement .)
    RETURN          reduce using rule 9 (statement -> for_statement .)
    EXC_DOT         reduce using rule 9 (statement -> for_statement .)
    PLUS            reduce using rule 9 (statement -> for_statement .)
    ID              reduce using rule 9 (statement -> for_statement .)
    IF              reduce using rule 9 (statement -> for_statement .)
    DOLAR           reduce using rule 9 (statement -> for_statement .)
    VARIABLE        reduce using rule 9 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 9 (statement -> for_statement .)
    RKEY            reduce using rule 9 (statement -> for_statement .)
    ELSEIF          reduce using rule 9 (statement -> for_statement .)
    ELSE            reduce using rule 9 (statement -> for_statement .)


state 16

    (10) statement -> foreach_statement .

    FUNCTION        reduce using rule 10 (statement -> foreach_statement .)
    GLOBAL          reduce using rule 10 (statement -> foreach_statement .)
    MINUS           reduce using rule 10 (statement -> foreach_statement .)
    INCREMENT       reduce using rule 10 (statement -> foreach_statement .)
    DECREMENT       reduce using rule 10 (statement -> foreach_statement .)
    LPAREN          reduce using rule 10 (statement -> foreach_statement .)
    EXIT            reduce using rule 10 (statement -> foreach_statement .)
    DIE             reduce using rule 10 (statement -> foreach_statement .)
    ARRAY_TYPE      reduce using rule 10 (statement -> foreach_statement .)
    NUMBER_REAL     reduce using rule 10 (statement -> foreach_statement .)
    NUMBER_INTEGER  reduce using rule 10 (statement -> foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (statement -> foreach_statement .)
    TRUE            reduce using rule 10 (statement -> foreach_statement .)
    FALSE           reduce using rule 10 (statement -> foreach_statement .)
    WHILE           reduce using rule 10 (statement -> foreach_statement .)
    DO              reduce using rule 10 (statement -> foreach_statement .)
    FOR             reduce using rule 10 (statement -> foreach_statement .)
    FOREACH         reduce using rule 10 (statement -> foreach_statement .)
    BREAK           reduce using rule 10 (statement -> foreach_statement .)
    CONTINUE        reduce using rule 10 (statement -> foreach_statement .)
    RETURN          reduce using rule 10 (statement -> foreach_statement .)
    EXC_DOT         reduce using rule 10 (statement -> foreach_statement .)
    PLUS            reduce using rule 10 (statement -> foreach_statement .)
    ID              reduce using rule 10 (statement -> foreach_statement .)
    IF              reduce using rule 10 (statement -> foreach_statement .)
    DOLAR           reduce using rule 10 (statement -> foreach_statement .)
    VARIABLE        reduce using rule 10 (statement -> foreach_statement .)
    END_PROGRAM     reduce using rule 10 (statement -> foreach_statement .)
    RKEY            reduce using rule 10 (statement -> foreach_statement .)
    ELSEIF          reduce using rule 10 (statement -> foreach_statement .)
    ELSE            reduce using rule 10 (statement -> foreach_statement .)


state 17

    (11) statement -> break_statement .

    FUNCTION        reduce using rule 11 (statement -> break_statement .)
    GLOBAL          reduce using rule 11 (statement -> break_statement .)
    MINUS           reduce using rule 11 (statement -> break_statement .)
    INCREMENT       reduce using rule 11 (statement -> break_statement .)
    DECREMENT       reduce using rule 11 (statement -> break_statement .)
    LPAREN          reduce using rule 11 (statement -> break_statement .)
    EXIT            reduce using rule 11 (statement -> break_statement .)
    DIE             reduce using rule 11 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 11 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 11 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 11 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (statement -> break_statement .)
    TRUE            reduce using rule 11 (statement -> break_statement .)
    FALSE           reduce using rule 11 (statement -> break_statement .)
    WHILE           reduce using rule 11 (statement -> break_statement .)
    DO              reduce using rule 11 (statement -> break_statement .)
    FOR             reduce using rule 11 (statement -> break_statement .)
    FOREACH         reduce using rule 11 (statement -> break_statement .)
    BREAK           reduce using rule 11 (statement -> break_statement .)
    CONTINUE        reduce using rule 11 (statement -> break_statement .)
    RETURN          reduce using rule 11 (statement -> break_statement .)
    EXC_DOT         reduce using rule 11 (statement -> break_statement .)
    PLUS            reduce using rule 11 (statement -> break_statement .)
    ID              reduce using rule 11 (statement -> break_statement .)
    IF              reduce using rule 11 (statement -> break_statement .)
    DOLAR           reduce using rule 11 (statement -> break_statement .)
    VARIABLE        reduce using rule 11 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 11 (statement -> break_statement .)
    RKEY            reduce using rule 11 (statement -> break_statement .)
    ELSEIF          reduce using rule 11 (statement -> break_statement .)
    ELSE            reduce using rule 11 (statement -> break_statement .)


state 18

    (12) statement -> continue_statement .

    FUNCTION        reduce using rule 12 (statement -> continue_statement .)
    GLOBAL          reduce using rule 12 (statement -> continue_statement .)
    MINUS           reduce using rule 12 (statement -> continue_statement .)
    INCREMENT       reduce using rule 12 (statement -> continue_statement .)
    DECREMENT       reduce using rule 12 (statement -> continue_statement .)
    LPAREN          reduce using rule 12 (statement -> continue_statement .)
    EXIT            reduce using rule 12 (statement -> continue_statement .)
    DIE             reduce using rule 12 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 12 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 12 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 12 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (statement -> continue_statement .)
    TRUE            reduce using rule 12 (statement -> continue_statement .)
    FALSE           reduce using rule 12 (statement -> continue_statement .)
    WHILE           reduce using rule 12 (statement -> continue_statement .)
    DO              reduce using rule 12 (statement -> continue_statement .)
    FOR             reduce using rule 12 (statement -> continue_statement .)
    FOREACH         reduce using rule 12 (statement -> continue_statement .)
    BREAK           reduce using rule 12 (statement -> continue_statement .)
    CONTINUE        reduce using rule 12 (statement -> continue_statement .)
    RETURN          reduce using rule 12 (statement -> continue_statement .)
    EXC_DOT         reduce using rule 12 (statement -> continue_statement .)
    PLUS            reduce using rule 12 (statement -> continue_statement .)
    ID              reduce using rule 12 (statement -> continue_statement .)
    IF              reduce using rule 12 (statement -> continue_statement .)
    DOLAR           reduce using rule 12 (statement -> continue_statement .)
    VARIABLE        reduce using rule 12 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 12 (statement -> continue_statement .)
    RKEY            reduce using rule 12 (statement -> continue_statement .)
    ELSEIF          reduce using rule 12 (statement -> continue_statement .)
    ELSE            reduce using rule 12 (statement -> continue_statement .)


state 19

    (13) statement -> return_statement .

    FUNCTION        reduce using rule 13 (statement -> return_statement .)
    GLOBAL          reduce using rule 13 (statement -> return_statement .)
    MINUS           reduce using rule 13 (statement -> return_statement .)
    INCREMENT       reduce using rule 13 (statement -> return_statement .)
    DECREMENT       reduce using rule 13 (statement -> return_statement .)
    LPAREN          reduce using rule 13 (statement -> return_statement .)
    EXIT            reduce using rule 13 (statement -> return_statement .)
    DIE             reduce using rule 13 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 13 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 13 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 13 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 13 (statement -> return_statement .)
    TRUE            reduce using rule 13 (statement -> return_statement .)
    FALSE           reduce using rule 13 (statement -> return_statement .)
    WHILE           reduce using rule 13 (statement -> return_statement .)
    DO              reduce using rule 13 (statement -> return_statement .)
    FOR             reduce using rule 13 (statement -> return_statement .)
    FOREACH         reduce using rule 13 (statement -> return_statement .)
    BREAK           reduce using rule 13 (statement -> return_statement .)
    CONTINUE        reduce using rule 13 (statement -> return_statement .)
    RETURN          reduce using rule 13 (statement -> return_statement .)
    EXC_DOT         reduce using rule 13 (statement -> return_statement .)
    PLUS            reduce using rule 13 (statement -> return_statement .)
    ID              reduce using rule 13 (statement -> return_statement .)
    IF              reduce using rule 13 (statement -> return_statement .)
    DOLAR           reduce using rule 13 (statement -> return_statement .)
    VARIABLE        reduce using rule 13 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 13 (statement -> return_statement .)
    RKEY            reduce using rule 13 (statement -> return_statement .)
    ELSEIF          reduce using rule 13 (statement -> return_statement .)
    ELSE            reduce using rule 13 (statement -> return_statement .)


state 20

    (14) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> GLOBAL . global_var SEMICOLON
    (38) global_var -> . VARIABLE
    (39) global_var -> . DOLAR VARIABLE
    (40) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 88
    DOLAR           shift and go to state 89

    global_var                     shift and go to state 87

state 21

    (94) expr -> MINUS . expr
    (63) unary_operator -> MINUS .
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           reduce using rule 63 (unary_operator -> MINUS .)
    INCREMENT       reduce using rule 63 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 63 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 63 (unary_operator -> MINUS .)
    EXIT            reduce using rule 63 (unary_operator -> MINUS .)
    DIE             reduce using rule 63 (unary_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 63 (unary_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 63 (unary_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 63 (unary_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (unary_operator -> MINUS .)
    TRUE            reduce using rule 63 (unary_operator -> MINUS .)
    FALSE           reduce using rule 63 (unary_operator -> MINUS .)
    EXC_DOT         reduce using rule 63 (unary_operator -> MINUS .)
    PLUS            reduce using rule 63 (unary_operator -> MINUS .)
    ID              reduce using rule 63 (unary_operator -> MINUS .)
    DOLAR           reduce using rule 63 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 63 (unary_operator -> MINUS .)

  ! MINUS           [ shift and go to state 21 ]
  ! INCREMENT       [ shift and go to state 22 ]
  ! DECREMENT       [ shift and go to state 24 ]
  ! LPAREN          [ shift and go to state 10 ]
  ! EXIT            [ shift and go to state 26 ]
  ! DIE             [ shift and go to state 27 ]
  ! ARRAY_TYPE      [ shift and go to state 28 ]
  ! NUMBER_REAL     [ shift and go to state 30 ]
  ! NUMBER_INTEGER  [ shift and go to state 31 ]
  ! CONSTANT_ENCAPSED_STRING [ shift and go to state 32 ]
  ! TRUE            [ shift and go to state 33 ]
  ! FALSE           [ shift and go to state 34 ]
  ! EXC_DOT         [ shift and go to state 44 ]
  ! PLUS            [ shift and go to state 45 ]
  ! ID              [ shift and go to state 9 ]
  ! DOLAR           [ shift and go to state 50 ]
  ! VARIABLE        [ shift and go to state 51 ]

    expr                           shift and go to state 90
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 22

    (95) expr -> INCREMENT . variable
    (122) variable -> . base_variable
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 91
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 23

    (96) expr -> variable . INCREMENT
    (98) expr -> variable . DECREMENT
    (99) expr -> variable . assign_operator expr
    (100) expr -> variable . assign_operator AMPERSAND expr
    (101) expr -> variable .
    (73) assign_operator -> . ADD_ASSIGN
    (74) assign_operator -> . SUB_ASSIGN
    (75) assign_operator -> . MOD_ASSIGN
    (76) assign_operator -> . PLUS_ASSIGN
    (77) assign_operator -> . DIVIDE_ASSIGN
    (78) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    SEMICOLON       reduce using rule 101 (expr -> variable .)
    INTE_DOT        reduce using rule 101 (expr -> variable .)
    EQUALS          reduce using rule 101 (expr -> variable .)
    GREAT_THAN      reduce using rule 101 (expr -> variable .)
    LESS_THAN       reduce using rule 101 (expr -> variable .)
    LESS_EQUAL      reduce using rule 101 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 101 (expr -> variable .)
    NOT_EQUAL       reduce using rule 101 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 101 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 101 (expr -> variable .)
    AND             reduce using rule 101 (expr -> variable .)
    OR              reduce using rule 101 (expr -> variable .)
    PLUS            reduce using rule 101 (expr -> variable .)
    DIVIDE          reduce using rule 101 (expr -> variable .)
    PERCENT         reduce using rule 101 (expr -> variable .)
    TIMES           reduce using rule 101 (expr -> variable .)
    MINUS           reduce using rule 101 (expr -> variable .)
    RPAREN          reduce using rule 101 (expr -> variable .)
    COLON           reduce using rule 101 (expr -> variable .)
    DDOT            reduce using rule 101 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 101 (expr -> variable .)
    AS              reduce using rule 101 (expr -> variable .)
    RBRACKET        reduce using rule 101 (expr -> variable .)
    RKEY            reduce using rule 101 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 95
    SUB_ASSIGN      shift and go to state 96
    MOD_ASSIGN      shift and go to state 97
    PLUS_ASSIGN     shift and go to state 98
    DIVIDE_ASSIGN   shift and go to state 99
    ASSIGN          shift and go to state 100

    assign_operator                shift and go to state 94

state 24

    (97) expr -> DECREMENT . variable
    (122) variable -> . base_variable
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 101
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 25

    (103) expr -> unary_operator . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    unary_operator                 shift and go to state 25
    expr                           shift and go to state 102
    variable                       shift and go to state 23
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 26

    (108) expr -> EXIT . expr_EXIT
    (118) expr_EXIT -> . exit_expr
    (119) expr_EXIT -> .
    (120) exit_expr -> . LPAREN expr RPAREN
    (121) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 119 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 119 (expr_EXIT -> .)
    EQUALS          reduce using rule 119 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 119 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 119 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 119 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 119 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 119 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 119 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 119 (expr_EXIT -> .)
    AND             reduce using rule 119 (expr_EXIT -> .)
    OR              reduce using rule 119 (expr_EXIT -> .)
    PLUS            reduce using rule 119 (expr_EXIT -> .)
    DIVIDE          reduce using rule 119 (expr_EXIT -> .)
    PERCENT         reduce using rule 119 (expr_EXIT -> .)
    TIMES           reduce using rule 119 (expr_EXIT -> .)
    MINUS           reduce using rule 119 (expr_EXIT -> .)
    RPAREN          reduce using rule 119 (expr_EXIT -> .)
    COLON           reduce using rule 119 (expr_EXIT -> .)
    DDOT            reduce using rule 119 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 119 (expr_EXIT -> .)
    AS              reduce using rule 119 (expr_EXIT -> .)
    RBRACKET        reduce using rule 119 (expr_EXIT -> .)
    RKEY            reduce using rule 119 (expr_EXIT -> .)
    LPAREN          shift and go to state 105

    expr_EXIT                      shift and go to state 103
    exit_expr                      shift and go to state 104

state 27

    (109) expr -> DIE . expr_EXIT
    (118) expr_EXIT -> . exit_expr
    (119) expr_EXIT -> .
    (120) exit_expr -> . LPAREN expr RPAREN
    (121) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 119 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 119 (expr_EXIT -> .)
    EQUALS          reduce using rule 119 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 119 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 119 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 119 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 119 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 119 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 119 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 119 (expr_EXIT -> .)
    AND             reduce using rule 119 (expr_EXIT -> .)
    OR              reduce using rule 119 (expr_EXIT -> .)
    PLUS            reduce using rule 119 (expr_EXIT -> .)
    DIVIDE          reduce using rule 119 (expr_EXIT -> .)
    PERCENT         reduce using rule 119 (expr_EXIT -> .)
    TIMES           reduce using rule 119 (expr_EXIT -> .)
    MINUS           reduce using rule 119 (expr_EXIT -> .)
    RPAREN          reduce using rule 119 (expr_EXIT -> .)
    COLON           reduce using rule 119 (expr_EXIT -> .)
    DDOT            reduce using rule 119 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 119 (expr_EXIT -> .)
    AS              reduce using rule 119 (expr_EXIT -> .)
    RBRACKET        reduce using rule 119 (expr_EXIT -> .)
    RKEY            reduce using rule 119 (expr_EXIT -> .)
    LPAREN          shift and go to state 105

    expr_EXIT                      shift and go to state 106
    exit_expr                      shift and go to state 104

state 28

    (110) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (111) expr -> ARRAY_TYPE . LPAREN RPAREN

    LPAREN          shift and go to state 107


state 29

    (112) expr -> function_call .

    SEMICOLON       reduce using rule 112 (expr -> function_call .)
    INTE_DOT        reduce using rule 112 (expr -> function_call .)
    EQUALS          reduce using rule 112 (expr -> function_call .)
    GREAT_THAN      reduce using rule 112 (expr -> function_call .)
    LESS_THAN       reduce using rule 112 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 112 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 112 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 112 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 112 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 112 (expr -> function_call .)
    AND             reduce using rule 112 (expr -> function_call .)
    OR              reduce using rule 112 (expr -> function_call .)
    PLUS            reduce using rule 112 (expr -> function_call .)
    DIVIDE          reduce using rule 112 (expr -> function_call .)
    PERCENT         reduce using rule 112 (expr -> function_call .)
    TIMES           reduce using rule 112 (expr -> function_call .)
    MINUS           reduce using rule 112 (expr -> function_call .)
    RPAREN          reduce using rule 112 (expr -> function_call .)
    COLON           reduce using rule 112 (expr -> function_call .)
    DDOT            reduce using rule 112 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 112 (expr -> function_call .)
    AS              reduce using rule 112 (expr -> function_call .)
    RBRACKET        reduce using rule 112 (expr -> function_call .)
    RKEY            reduce using rule 112 (expr -> function_call .)


state 30

    (113) expr -> NUMBER_REAL .

    SEMICOLON       reduce using rule 113 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 113 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 113 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 113 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 113 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 113 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 113 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 113 (expr -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 113 (expr -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 113 (expr -> NUMBER_REAL .)
    AND             reduce using rule 113 (expr -> NUMBER_REAL .)
    OR              reduce using rule 113 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 113 (expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 113 (expr -> NUMBER_REAL .)
    PERCENT         reduce using rule 113 (expr -> NUMBER_REAL .)
    TIMES           reduce using rule 113 (expr -> NUMBER_REAL .)
    MINUS           reduce using rule 113 (expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 113 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 113 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 113 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 113 (expr -> NUMBER_REAL .)
    AS              reduce using rule 113 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 113 (expr -> NUMBER_REAL .)
    RKEY            reduce using rule 113 (expr -> NUMBER_REAL .)


state 31

    (114) expr -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 114 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 114 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 114 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 114 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 114 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 114 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 114 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 114 (expr -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 114 (expr -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 114 (expr -> NUMBER_INTEGER .)
    AND             reduce using rule 114 (expr -> NUMBER_INTEGER .)
    OR              reduce using rule 114 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 114 (expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 114 (expr -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 114 (expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 114 (expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 114 (expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 114 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 114 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 114 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 114 (expr -> NUMBER_INTEGER .)
    AS              reduce using rule 114 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 114 (expr -> NUMBER_INTEGER .)
    RKEY            reduce using rule 114 (expr -> NUMBER_INTEGER .)


state 32

    (115) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 115 (expr -> CONSTANT_ENCAPSED_STRING .)


state 33

    (116) expr -> TRUE .

    SEMICOLON       reduce using rule 116 (expr -> TRUE .)
    INTE_DOT        reduce using rule 116 (expr -> TRUE .)
    EQUALS          reduce using rule 116 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 116 (expr -> TRUE .)
    LESS_THAN       reduce using rule 116 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 116 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 116 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 116 (expr -> TRUE .)
    LEFT_LOGICAL    reduce using rule 116 (expr -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 116 (expr -> TRUE .)
    AND             reduce using rule 116 (expr -> TRUE .)
    OR              reduce using rule 116 (expr -> TRUE .)
    PLUS            reduce using rule 116 (expr -> TRUE .)
    DIVIDE          reduce using rule 116 (expr -> TRUE .)
    PERCENT         reduce using rule 116 (expr -> TRUE .)
    TIMES           reduce using rule 116 (expr -> TRUE .)
    MINUS           reduce using rule 116 (expr -> TRUE .)
    RPAREN          reduce using rule 116 (expr -> TRUE .)
    COLON           reduce using rule 116 (expr -> TRUE .)
    DDOT            reduce using rule 116 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 116 (expr -> TRUE .)
    AS              reduce using rule 116 (expr -> TRUE .)
    RBRACKET        reduce using rule 116 (expr -> TRUE .)
    RKEY            reduce using rule 116 (expr -> TRUE .)


state 34

    (117) expr -> FALSE .

    SEMICOLON       reduce using rule 117 (expr -> FALSE .)
    INTE_DOT        reduce using rule 117 (expr -> FALSE .)
    EQUALS          reduce using rule 117 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 117 (expr -> FALSE .)
    LESS_THAN       reduce using rule 117 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 117 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 117 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 117 (expr -> FALSE .)
    LEFT_LOGICAL    reduce using rule 117 (expr -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 117 (expr -> FALSE .)
    AND             reduce using rule 117 (expr -> FALSE .)
    OR              reduce using rule 117 (expr -> FALSE .)
    PLUS            reduce using rule 117 (expr -> FALSE .)
    DIVIDE          reduce using rule 117 (expr -> FALSE .)
    PERCENT         reduce using rule 117 (expr -> FALSE .)
    TIMES           reduce using rule 117 (expr -> FALSE .)
    MINUS           reduce using rule 117 (expr -> FALSE .)
    RPAREN          reduce using rule 117 (expr -> FALSE .)
    COLON           reduce using rule 117 (expr -> FALSE .)
    DDOT            reduce using rule 117 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 117 (expr -> FALSE .)
    AS              reduce using rule 117 (expr -> FALSE .)
    RBRACKET        reduce using rule 117 (expr -> FALSE .)
    RKEY            reduce using rule 117 (expr -> FALSE .)


state 35

    (16) if_statement -> statement_if . if_statement_complement
    (17) if_statement -> statement_if .
    (18) if_statement_complement -> . statement_elseif
    (19) if_statement_complement -> . statement_elseif statement_else
    (20) if_statement_complement -> . statement_else
    (47) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT
    (48) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 17 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 17 (if_statement -> statement_if .)
    MINUS           reduce using rule 17 (if_statement -> statement_if .)
    INCREMENT       reduce using rule 17 (if_statement -> statement_if .)
    DECREMENT       reduce using rule 17 (if_statement -> statement_if .)
    LPAREN          reduce using rule 17 (if_statement -> statement_if .)
    EXIT            reduce using rule 17 (if_statement -> statement_if .)
    DIE             reduce using rule 17 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 17 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 17 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 17 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 17 (if_statement -> statement_if .)
    TRUE            reduce using rule 17 (if_statement -> statement_if .)
    FALSE           reduce using rule 17 (if_statement -> statement_if .)
    WHILE           reduce using rule 17 (if_statement -> statement_if .)
    DO              reduce using rule 17 (if_statement -> statement_if .)
    FOR             reduce using rule 17 (if_statement -> statement_if .)
    FOREACH         reduce using rule 17 (if_statement -> statement_if .)
    BREAK           reduce using rule 17 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 17 (if_statement -> statement_if .)
    RETURN          reduce using rule 17 (if_statement -> statement_if .)
    EXC_DOT         reduce using rule 17 (if_statement -> statement_if .)
    PLUS            reduce using rule 17 (if_statement -> statement_if .)
    ID              reduce using rule 17 (if_statement -> statement_if .)
    IF              reduce using rule 17 (if_statement -> statement_if .)
    DOLAR           reduce using rule 17 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 17 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 17 (if_statement -> statement_if .)
    RKEY            reduce using rule 17 (if_statement -> statement_if .)
    ELSEIF          shift and go to state 111
    ELSE            shift and go to state 112

  ! ELSEIF          [ reduce using rule 17 (if_statement -> statement_if .) ]
  ! ELSE            [ reduce using rule 17 (if_statement -> statement_if .) ]

    if_statement_complement        shift and go to state 108
    statement_elseif               shift and go to state 109
    statement_else                 shift and go to state 110

state 36

    (21) while_statement -> WHILE . expr_parentheses statement_BLOCK_OPT
    (45) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 114

    expr_parentheses               shift and go to state 113

state 37

    (22) do_statement -> DO . statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (176) statement_BLOCK_OPT -> . statement
    (177) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (178) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 117
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 115
    statement                      shift and go to state 116
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 38

    (29) for_statement -> FOR . LPAREN for_parameters RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 118


state 39

    (49) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 119


state 40

    (23) break_statement -> BREAK . expr SEMICOLON
    (24) break_statement -> BREAK . SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 121
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 120
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 41

    (25) continue_statement -> CONTINUE . expr SEMICOLON
    (26) continue_statement -> CONTINUE . SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 123
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 122
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 42

    (27) return_statement -> RETURN . expr SEMICOLON
    (28) return_statement -> RETURN . SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 125
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 124
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 43

    (122) variable -> base_variable .

    INCREMENT       reduce using rule 122 (variable -> base_variable .)
    DECREMENT       reduce using rule 122 (variable -> base_variable .)
    ADD_ASSIGN      reduce using rule 122 (variable -> base_variable .)
    SUB_ASSIGN      reduce using rule 122 (variable -> base_variable .)
    MOD_ASSIGN      reduce using rule 122 (variable -> base_variable .)
    PLUS_ASSIGN     reduce using rule 122 (variable -> base_variable .)
    DIVIDE_ASSIGN   reduce using rule 122 (variable -> base_variable .)
    ASSIGN          reduce using rule 122 (variable -> base_variable .)
    SEMICOLON       reduce using rule 122 (variable -> base_variable .)
    INTE_DOT        reduce using rule 122 (variable -> base_variable .)
    EQUALS          reduce using rule 122 (variable -> base_variable .)
    GREAT_THAN      reduce using rule 122 (variable -> base_variable .)
    LESS_THAN       reduce using rule 122 (variable -> base_variable .)
    LESS_EQUAL      reduce using rule 122 (variable -> base_variable .)
    GREAT_EQUAL     reduce using rule 122 (variable -> base_variable .)
    NOT_EQUAL       reduce using rule 122 (variable -> base_variable .)
    LEFT_LOGICAL    reduce using rule 122 (variable -> base_variable .)
    RIGHT_LOGICAL   reduce using rule 122 (variable -> base_variable .)
    AND             reduce using rule 122 (variable -> base_variable .)
    OR              reduce using rule 122 (variable -> base_variable .)
    PLUS            reduce using rule 122 (variable -> base_variable .)
    DIVIDE          reduce using rule 122 (variable -> base_variable .)
    PERCENT         reduce using rule 122 (variable -> base_variable .)
    TIMES           reduce using rule 122 (variable -> base_variable .)
    MINUS           reduce using rule 122 (variable -> base_variable .)
    RPAREN          reduce using rule 122 (variable -> base_variable .)
    COLON           reduce using rule 122 (variable -> base_variable .)
    DDOT            reduce using rule 122 (variable -> base_variable .)
    ATTR_ASSOC      reduce using rule 122 (variable -> base_variable .)
    AS              reduce using rule 122 (variable -> base_variable .)
    RBRACKET        reduce using rule 122 (variable -> base_variable .)
    RKEY            reduce using rule 122 (variable -> base_variable .)


state 44

    (61) unary_operator -> EXC_DOT .

    MINUS           reduce using rule 61 (unary_operator -> EXC_DOT .)
    INCREMENT       reduce using rule 61 (unary_operator -> EXC_DOT .)
    DECREMENT       reduce using rule 61 (unary_operator -> EXC_DOT .)
    LPAREN          reduce using rule 61 (unary_operator -> EXC_DOT .)
    EXIT            reduce using rule 61 (unary_operator -> EXC_DOT .)
    DIE             reduce using rule 61 (unary_operator -> EXC_DOT .)
    ARRAY_TYPE      reduce using rule 61 (unary_operator -> EXC_DOT .)
    NUMBER_REAL     reduce using rule 61 (unary_operator -> EXC_DOT .)
    NUMBER_INTEGER  reduce using rule 61 (unary_operator -> EXC_DOT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (unary_operator -> EXC_DOT .)
    TRUE            reduce using rule 61 (unary_operator -> EXC_DOT .)
    FALSE           reduce using rule 61 (unary_operator -> EXC_DOT .)
    EXC_DOT         reduce using rule 61 (unary_operator -> EXC_DOT .)
    PLUS            reduce using rule 61 (unary_operator -> EXC_DOT .)
    ID              reduce using rule 61 (unary_operator -> EXC_DOT .)
    DOLAR           reduce using rule 61 (unary_operator -> EXC_DOT .)
    VARIABLE        reduce using rule 61 (unary_operator -> EXC_DOT .)


state 45

    (62) unary_operator -> PLUS .

    MINUS           reduce using rule 62 (unary_operator -> PLUS .)
    INCREMENT       reduce using rule 62 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 62 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 62 (unary_operator -> PLUS .)
    EXIT            reduce using rule 62 (unary_operator -> PLUS .)
    DIE             reduce using rule 62 (unary_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 62 (unary_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 62 (unary_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 62 (unary_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (unary_operator -> PLUS .)
    TRUE            reduce using rule 62 (unary_operator -> PLUS .)
    FALSE           reduce using rule 62 (unary_operator -> PLUS .)
    EXC_DOT         reduce using rule 62 (unary_operator -> PLUS .)
    PLUS            reduce using rule 62 (unary_operator -> PLUS .)
    ID              reduce using rule 62 (unary_operator -> PLUS .)
    DOLAR           reduce using rule 62 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 62 (unary_operator -> PLUS .)


state 46

    (46) statement_if -> IF . expr_parentheses statement_BLOCK_OPT
    (45) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 114

    expr_parentheses               shift and go to state 126

state 47

    (123) base_variable -> reference_variable .

    INCREMENT       reduce using rule 123 (base_variable -> reference_variable .)
    DECREMENT       reduce using rule 123 (base_variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 123 (base_variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 123 (base_variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 123 (base_variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 123 (base_variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 123 (base_variable -> reference_variable .)
    ASSIGN          reduce using rule 123 (base_variable -> reference_variable .)
    SEMICOLON       reduce using rule 123 (base_variable -> reference_variable .)
    INTE_DOT        reduce using rule 123 (base_variable -> reference_variable .)
    EQUALS          reduce using rule 123 (base_variable -> reference_variable .)
    GREAT_THAN      reduce using rule 123 (base_variable -> reference_variable .)
    LESS_THAN       reduce using rule 123 (base_variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 123 (base_variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 123 (base_variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 123 (base_variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 123 (base_variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 123 (base_variable -> reference_variable .)
    AND             reduce using rule 123 (base_variable -> reference_variable .)
    OR              reduce using rule 123 (base_variable -> reference_variable .)
    PLUS            reduce using rule 123 (base_variable -> reference_variable .)
    DIVIDE          reduce using rule 123 (base_variable -> reference_variable .)
    PERCENT         reduce using rule 123 (base_variable -> reference_variable .)
    TIMES           reduce using rule 123 (base_variable -> reference_variable .)
    MINUS           reduce using rule 123 (base_variable -> reference_variable .)
    RPAREN          reduce using rule 123 (base_variable -> reference_variable .)
    COLON           reduce using rule 123 (base_variable -> reference_variable .)
    DDOT            reduce using rule 123 (base_variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 123 (base_variable -> reference_variable .)
    AS              reduce using rule 123 (base_variable -> reference_variable .)
    RBRACKET        reduce using rule 123 (base_variable -> reference_variable .)
    RKEY            reduce using rule 123 (base_variable -> reference_variable .)


state 48

    (124) base_variable -> simple_indirect_reference_DOLAR . reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 51
    DOLAR           shift and go to state 128

    reference_variable             shift and go to state 127
    compound_variable              shift and go to state 49

state 49

    (125) reference_variable -> compound_variable . reference_variable_SELECTOR
    (126) reference_variable -> compound_variable .
    (185) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (186) reference_variable_SELECTOR -> . selector
    (129) selector -> . LBRACKET expr RBRACKET
    (130) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 126 (reference_variable -> compound_variable .)
    DECREMENT       reduce using rule 126 (reference_variable -> compound_variable .)
    ADD_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable .)
    SUB_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable .)
    MOD_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable .)
    PLUS_ASSIGN     reduce using rule 126 (reference_variable -> compound_variable .)
    DIVIDE_ASSIGN   reduce using rule 126 (reference_variable -> compound_variable .)
    ASSIGN          reduce using rule 126 (reference_variable -> compound_variable .)
    SEMICOLON       reduce using rule 126 (reference_variable -> compound_variable .)
    INTE_DOT        reduce using rule 126 (reference_variable -> compound_variable .)
    EQUALS          reduce using rule 126 (reference_variable -> compound_variable .)
    GREAT_THAN      reduce using rule 126 (reference_variable -> compound_variable .)
    LESS_THAN       reduce using rule 126 (reference_variable -> compound_variable .)
    LESS_EQUAL      reduce using rule 126 (reference_variable -> compound_variable .)
    GREAT_EQUAL     reduce using rule 126 (reference_variable -> compound_variable .)
    NOT_EQUAL       reduce using rule 126 (reference_variable -> compound_variable .)
    LEFT_LOGICAL    reduce using rule 126 (reference_variable -> compound_variable .)
    RIGHT_LOGICAL   reduce using rule 126 (reference_variable -> compound_variable .)
    AND             reduce using rule 126 (reference_variable -> compound_variable .)
    OR              reduce using rule 126 (reference_variable -> compound_variable .)
    PLUS            reduce using rule 126 (reference_variable -> compound_variable .)
    DIVIDE          reduce using rule 126 (reference_variable -> compound_variable .)
    PERCENT         reduce using rule 126 (reference_variable -> compound_variable .)
    TIMES           reduce using rule 126 (reference_variable -> compound_variable .)
    MINUS           reduce using rule 126 (reference_variable -> compound_variable .)
    RPAREN          reduce using rule 126 (reference_variable -> compound_variable .)
    COLON           reduce using rule 126 (reference_variable -> compound_variable .)
    DDOT            reduce using rule 126 (reference_variable -> compound_variable .)
    ATTR_ASSOC      reduce using rule 126 (reference_variable -> compound_variable .)
    AS              reduce using rule 126 (reference_variable -> compound_variable .)
    RBRACKET        reduce using rule 126 (reference_variable -> compound_variable .)
    RKEY            reduce using rule 126 (reference_variable -> compound_variable .)
    LBRACKET        shift and go to state 131

    reference_variable_SELECTOR    shift and go to state 129
    selector                       shift and go to state 130

state 50

    (187) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> DOLAR .
    (128) compound_variable -> DOLAR . LKEY expr RKEY
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 188 (simple_indirect_reference_DOLAR -> DOLAR .)
    LKEY            shift and go to state 134
    DOLAR           shift and go to state 132

  ! DOLAR           [ reduce using rule 188 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 133

state 51

    (127) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 127 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 127 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 127 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 127 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 127 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 127 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 127 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 127 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 127 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 127 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 127 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 127 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 127 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 127 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 127 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 127 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 127 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 127 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 127 (compound_variable -> VARIABLE .)
    AND             reduce using rule 127 (compound_variable -> VARIABLE .)
    OR              reduce using rule 127 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 127 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 127 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 127 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 127 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 127 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 127 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 127 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 127 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 127 (compound_variable -> VARIABLE .)
    AS              reduce using rule 127 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 127 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 127 (compound_variable -> VARIABLE .)


state 52

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 53

    (168) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 168 (main_INNER -> inner_statement main_INNER .)


state 54

    (131) function_declaration_statement -> FUNCTION ID . LPAREN RPAREN LKEY RKEY
    (136) function_declaration_statement -> FUNCTION ID . LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> FUNCTION ID . LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> FUNCTION ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 135


state 55

    (132) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> FUNCTION AMPERSAND . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 136


state 56

    (53) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (54) function_call -> ID LPAREN . RPAREN
    (55) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (56) function_call_parameter_list -> . function_call_parameter
    (57) function_call_parameter -> . expr
    (58) function_call_parameter -> . AMPERSAND VARIABLE
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 138
    AMPERSAND       shift and go to state 141
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    function_call_parameter_list   shift and go to state 137
    function_call_parameter        shift and go to state 139
    expr                           shift and go to state 140
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 57

    (102) expr -> LPAREN expr . RPAREN
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 142
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 58

    (107) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 143


state 59

    (110) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (111) expr -> ARRAY_TYPE . LPAREN RPAREN
    (69) type_cast_operator -> ARRAY_TYPE .

    LPAREN          shift and go to state 107
    RPAREN          reduce using rule 69 (type_cast_operator -> ARRAY_TYPE .)


state 60

    (64) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 64 (type_cast_operator -> INT_TYPE .)


state 61

    (65) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 65 (type_cast_operator -> DOUBLE_TYPE .)


state 62

    (66) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 66 (type_cast_operator -> FLOAT_TYPE .)


state 63

    (67) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 67 (type_cast_operator -> REAL_TYPE .)


state 64

    (68) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 68 (type_cast_operator -> STRING_TYPE .)


state 65

    (70) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 70 (type_cast_operator -> BOOLEAN_TYPE .)


state 66

    (71) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 71 (type_cast_operator -> BOOL_TYPE .)


state 67

    (72) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 72 (type_cast_operator -> UNSET .)


state 68

    (5) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 5 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 5 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 5 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 5 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 5 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 5 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 5 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 5 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 5 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expr SEMICOLON .)
    DO              reduce using rule 5 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 5 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 5 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 5 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 5 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 5 (statement -> expr SEMICOLON .)
    ID              reduce using rule 5 (statement -> expr SEMICOLON .)
    IF              reduce using rule 5 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 5 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 5 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 5 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> expr SEMICOLON .)


state 69

    (104) expr -> expr INTE_DOT . expr DDOT expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 144
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 70

    (105) expr -> expr comparission_operator . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 145
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 71

    (106) expr -> expr arithmetic_operator . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 146
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 72

    (84) comparission_operator -> EQUALS .

    MINUS           reduce using rule 84 (comparission_operator -> EQUALS .)
    INCREMENT       reduce using rule 84 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 84 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 84 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 84 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 84 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 84 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 84 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 84 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 84 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 84 (comparission_operator -> EQUALS .)
    EXC_DOT         reduce using rule 84 (comparission_operator -> EQUALS .)
    PLUS            reduce using rule 84 (comparission_operator -> EQUALS .)
    ID              reduce using rule 84 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 84 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 84 (comparission_operator -> EQUALS .)


state 73

    (85) comparission_operator -> GREAT_THAN .

    MINUS           reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    INCREMENT       reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    EXC_DOT         reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    PLUS            reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 85 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 85 (comparission_operator -> GREAT_THAN .)


state 74

    (86) comparission_operator -> LESS_THAN .

    MINUS           reduce using rule 86 (comparission_operator -> LESS_THAN .)
    INCREMENT       reduce using rule 86 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 86 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 86 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 86 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 86 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 86 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 86 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 86 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 86 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 86 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 86 (comparission_operator -> LESS_THAN .)
    EXC_DOT         reduce using rule 86 (comparission_operator -> LESS_THAN .)
    PLUS            reduce using rule 86 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 86 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 86 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 86 (comparission_operator -> LESS_THAN .)


state 75

    (87) comparission_operator -> LESS_EQUAL .

    MINUS           reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    INCREMENT       reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    EXC_DOT         reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    PLUS            reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 87 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 87 (comparission_operator -> LESS_EQUAL .)


state 76

    (88) comparission_operator -> GREAT_EQUAL .

    MINUS           reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    INCREMENT       reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    EXC_DOT         reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    PLUS            reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 88 (comparission_operator -> GREAT_EQUAL .)


state 77

    (89) comparission_operator -> NOT_EQUAL .

    MINUS           reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    INCREMENT       reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    EXC_DOT         reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    PLUS            reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 89 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 89 (comparission_operator -> NOT_EQUAL .)


state 78

    (90) comparission_operator -> LEFT_LOGICAL .

    MINUS           reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    INCREMENT       reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    EXC_DOT         reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    PLUS            reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 90 (comparission_operator -> LEFT_LOGICAL .)


state 79

    (91) comparission_operator -> RIGHT_LOGICAL .

    MINUS           reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    INCREMENT       reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    EXC_DOT         reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    PLUS            reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 91 (comparission_operator -> RIGHT_LOGICAL .)


state 80

    (92) comparission_operator -> AND .

    MINUS           reduce using rule 92 (comparission_operator -> AND .)
    INCREMENT       reduce using rule 92 (comparission_operator -> AND .)
    DECREMENT       reduce using rule 92 (comparission_operator -> AND .)
    LPAREN          reduce using rule 92 (comparission_operator -> AND .)
    EXIT            reduce using rule 92 (comparission_operator -> AND .)
    DIE             reduce using rule 92 (comparission_operator -> AND .)
    ARRAY_TYPE      reduce using rule 92 (comparission_operator -> AND .)
    NUMBER_REAL     reduce using rule 92 (comparission_operator -> AND .)
    NUMBER_INTEGER  reduce using rule 92 (comparission_operator -> AND .)
    CONSTANT_ENCAPSED_STRING reduce using rule 92 (comparission_operator -> AND .)
    TRUE            reduce using rule 92 (comparission_operator -> AND .)
    FALSE           reduce using rule 92 (comparission_operator -> AND .)
    EXC_DOT         reduce using rule 92 (comparission_operator -> AND .)
    PLUS            reduce using rule 92 (comparission_operator -> AND .)
    ID              reduce using rule 92 (comparission_operator -> AND .)
    DOLAR           reduce using rule 92 (comparission_operator -> AND .)
    VARIABLE        reduce using rule 92 (comparission_operator -> AND .)


state 81

    (93) comparission_operator -> OR .

    MINUS           reduce using rule 93 (comparission_operator -> OR .)
    INCREMENT       reduce using rule 93 (comparission_operator -> OR .)
    DECREMENT       reduce using rule 93 (comparission_operator -> OR .)
    LPAREN          reduce using rule 93 (comparission_operator -> OR .)
    EXIT            reduce using rule 93 (comparission_operator -> OR .)
    DIE             reduce using rule 93 (comparission_operator -> OR .)
    ARRAY_TYPE      reduce using rule 93 (comparission_operator -> OR .)
    NUMBER_REAL     reduce using rule 93 (comparission_operator -> OR .)
    NUMBER_INTEGER  reduce using rule 93 (comparission_operator -> OR .)
    CONSTANT_ENCAPSED_STRING reduce using rule 93 (comparission_operator -> OR .)
    TRUE            reduce using rule 93 (comparission_operator -> OR .)
    FALSE           reduce using rule 93 (comparission_operator -> OR .)
    EXC_DOT         reduce using rule 93 (comparission_operator -> OR .)
    PLUS            reduce using rule 93 (comparission_operator -> OR .)
    ID              reduce using rule 93 (comparission_operator -> OR .)
    DOLAR           reduce using rule 93 (comparission_operator -> OR .)
    VARIABLE        reduce using rule 93 (comparission_operator -> OR .)


state 82

    (79) arithmetic_operator -> PLUS .

    MINUS           reduce using rule 79 (arithmetic_operator -> PLUS .)
    INCREMENT       reduce using rule 79 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 79 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 79 (arithmetic_operator -> PLUS .)
    EXIT            reduce using rule 79 (arithmetic_operator -> PLUS .)
    DIE             reduce using rule 79 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 79 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 79 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 79 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 79 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 79 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 79 (arithmetic_operator -> PLUS .)
    EXC_DOT         reduce using rule 79 (arithmetic_operator -> PLUS .)
    PLUS            reduce using rule 79 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 79 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 79 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 79 (arithmetic_operator -> PLUS .)


state 83

    (80) arithmetic_operator -> DIVIDE .

    MINUS           reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    INCREMENT       reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    EXIT            reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    DIE             reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    EXC_DOT         reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    PLUS            reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 80 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 80 (arithmetic_operator -> DIVIDE .)


state 84

    (81) arithmetic_operator -> PERCENT .

    MINUS           reduce using rule 81 (arithmetic_operator -> PERCENT .)
    INCREMENT       reduce using rule 81 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 81 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 81 (arithmetic_operator -> PERCENT .)
    EXIT            reduce using rule 81 (arithmetic_operator -> PERCENT .)
    DIE             reduce using rule 81 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 81 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 81 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 81 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 81 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 81 (arithmetic_operator -> PERCENT .)
    EXC_DOT         reduce using rule 81 (arithmetic_operator -> PERCENT .)
    PLUS            reduce using rule 81 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 81 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 81 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 81 (arithmetic_operator -> PERCENT .)


state 85

    (82) arithmetic_operator -> TIMES .

    MINUS           reduce using rule 82 (arithmetic_operator -> TIMES .)
    INCREMENT       reduce using rule 82 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 82 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 82 (arithmetic_operator -> TIMES .)
    EXIT            reduce using rule 82 (arithmetic_operator -> TIMES .)
    DIE             reduce using rule 82 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 82 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 82 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 82 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 82 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 82 (arithmetic_operator -> TIMES .)
    EXC_DOT         reduce using rule 82 (arithmetic_operator -> TIMES .)
    PLUS            reduce using rule 82 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 82 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 82 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 82 (arithmetic_operator -> TIMES .)


state 86

    (83) arithmetic_operator -> MINUS .

    MINUS           reduce using rule 83 (arithmetic_operator -> MINUS .)
    INCREMENT       reduce using rule 83 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 83 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 83 (arithmetic_operator -> MINUS .)
    EXIT            reduce using rule 83 (arithmetic_operator -> MINUS .)
    DIE             reduce using rule 83 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 83 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 83 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 83 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 83 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 83 (arithmetic_operator -> MINUS .)
    EXC_DOT         reduce using rule 83 (arithmetic_operator -> MINUS .)
    PLUS            reduce using rule 83 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 83 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 83 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 83 (arithmetic_operator -> MINUS .)


state 87

    (14) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (15) statement -> GLOBAL global_var . SEMICOLON
    (41) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (42) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       shift and go to state 148
    COLON           shift and go to state 149

    statement_COLON_GLOBAL         shift and go to state 147

state 88

    (38) global_var -> VARIABLE .

    SEMICOLON       reduce using rule 38 (global_var -> VARIABLE .)
    COLON           reduce using rule 38 (global_var -> VARIABLE .)


state 89

    (39) global_var -> DOLAR . VARIABLE
    (40) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 150
    LKEY            shift and go to state 151


state 90

    (94) expr -> MINUS expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 94 (expr -> MINUS expr .)
    INTE_DOT        reduce using rule 94 (expr -> MINUS expr .)
    EQUALS          reduce using rule 94 (expr -> MINUS expr .)
    GREAT_THAN      reduce using rule 94 (expr -> MINUS expr .)
    LESS_THAN       reduce using rule 94 (expr -> MINUS expr .)
    LESS_EQUAL      reduce using rule 94 (expr -> MINUS expr .)
    GREAT_EQUAL     reduce using rule 94 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 94 (expr -> MINUS expr .)
    LEFT_LOGICAL    reduce using rule 94 (expr -> MINUS expr .)
    RIGHT_LOGICAL   reduce using rule 94 (expr -> MINUS expr .)
    AND             reduce using rule 94 (expr -> MINUS expr .)
    OR              reduce using rule 94 (expr -> MINUS expr .)
    PLUS            reduce using rule 94 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 94 (expr -> MINUS expr .)
    PERCENT         reduce using rule 94 (expr -> MINUS expr .)
    TIMES           reduce using rule 94 (expr -> MINUS expr .)
    MINUS           reduce using rule 94 (expr -> MINUS expr .)
    RPAREN          reduce using rule 94 (expr -> MINUS expr .)
    COLON           reduce using rule 94 (expr -> MINUS expr .)
    DDOT            reduce using rule 94 (expr -> MINUS expr .)
    ATTR_ASSOC      reduce using rule 94 (expr -> MINUS expr .)
    AS              reduce using rule 94 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 94 (expr -> MINUS expr .)
    RKEY            reduce using rule 94 (expr -> MINUS expr .)

  ! INTE_DOT        [ shift and go to state 69 ]
  ! EQUALS          [ shift and go to state 72 ]
  ! GREAT_THAN      [ shift and go to state 73 ]
  ! LESS_THAN       [ shift and go to state 74 ]
  ! LESS_EQUAL      [ shift and go to state 75 ]
  ! GREAT_EQUAL     [ shift and go to state 76 ]
  ! NOT_EQUAL       [ shift and go to state 77 ]
  ! LEFT_LOGICAL    [ shift and go to state 78 ]
  ! RIGHT_LOGICAL   [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! OR              [ shift and go to state 81 ]
  ! PLUS            [ shift and go to state 82 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! PERCENT         [ shift and go to state 84 ]
  ! TIMES           [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 91

    (95) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 95 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 95 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 95 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 95 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 95 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 95 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 95 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 95 (expr -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 95 (expr -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 95 (expr -> INCREMENT variable .)
    AND             reduce using rule 95 (expr -> INCREMENT variable .)
    OR              reduce using rule 95 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 95 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 95 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 95 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 95 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 95 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 95 (expr -> INCREMENT variable .)
    COLON           reduce using rule 95 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 95 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 95 (expr -> INCREMENT variable .)
    AS              reduce using rule 95 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 95 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 95 (expr -> INCREMENT variable .)


state 92

    (96) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 96 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 96 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 96 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 96 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 96 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 96 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 96 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 96 (expr -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 96 (expr -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 96 (expr -> variable INCREMENT .)
    AND             reduce using rule 96 (expr -> variable INCREMENT .)
    OR              reduce using rule 96 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 96 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 96 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 96 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 96 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 96 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 96 (expr -> variable INCREMENT .)
    COLON           reduce using rule 96 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 96 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 96 (expr -> variable INCREMENT .)
    AS              reduce using rule 96 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 96 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 96 (expr -> variable INCREMENT .)


state 93

    (98) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 98 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 98 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 98 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 98 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 98 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 98 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 98 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 98 (expr -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 98 (expr -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 98 (expr -> variable DECREMENT .)
    AND             reduce using rule 98 (expr -> variable DECREMENT .)
    OR              reduce using rule 98 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 98 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 98 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 98 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 98 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 98 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 98 (expr -> variable DECREMENT .)
    COLON           reduce using rule 98 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 98 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 98 (expr -> variable DECREMENT .)
    AS              reduce using rule 98 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 98 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 98 (expr -> variable DECREMENT .)


state 94

    (99) expr -> variable assign_operator . expr
    (100) expr -> variable assign_operator . AMPERSAND expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 153
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 23
    expr                           shift and go to state 152
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 95

    (73) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    EXC_DOT         reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 73 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 73 (assign_operator -> ADD_ASSIGN .)


state 96

    (74) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    EXC_DOT         reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 74 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 74 (assign_operator -> SUB_ASSIGN .)


state 97

    (75) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    EXC_DOT         reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 75 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 75 (assign_operator -> MOD_ASSIGN .)


state 98

    (76) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    EXC_DOT         reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 76 (assign_operator -> PLUS_ASSIGN .)


state 99

    (77) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    EXC_DOT         reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 77 (assign_operator -> DIVIDE_ASSIGN .)


state 100

    (78) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 78 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 78 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 78 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 78 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 78 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 78 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 78 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 78 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 78 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 78 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 78 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 78 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 78 (assign_operator -> ASSIGN .)
    EXC_DOT         reduce using rule 78 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 78 (assign_operator -> ASSIGN .)
    ID              reduce using rule 78 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 78 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 78 (assign_operator -> ASSIGN .)


state 101

    (97) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 97 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 97 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 97 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 97 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 97 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 97 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 97 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 97 (expr -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 97 (expr -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 97 (expr -> DECREMENT variable .)
    AND             reduce using rule 97 (expr -> DECREMENT variable .)
    OR              reduce using rule 97 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 97 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 97 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 97 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 97 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 97 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 97 (expr -> DECREMENT variable .)
    COLON           reduce using rule 97 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 97 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 97 (expr -> DECREMENT variable .)
    AS              reduce using rule 97 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 97 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 97 (expr -> DECREMENT variable .)


state 102

    (103) expr -> unary_operator expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 103 (expr -> unary_operator expr .)
    RPAREN          reduce using rule 103 (expr -> unary_operator expr .)
    COLON           reduce using rule 103 (expr -> unary_operator expr .)
    DDOT            reduce using rule 103 (expr -> unary_operator expr .)
    ATTR_ASSOC      reduce using rule 103 (expr -> unary_operator expr .)
    AS              reduce using rule 103 (expr -> unary_operator expr .)
    RBRACKET        reduce using rule 103 (expr -> unary_operator expr .)
    RKEY            reduce using rule 103 (expr -> unary_operator expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

  ! INTE_DOT        [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! EQUALS          [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! AND             [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! OR              [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! PLUS            [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! DIVIDE          [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! PERCENT         [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! TIMES           [ reduce using rule 103 (expr -> unary_operator expr .) ]
  ! MINUS           [ reduce using rule 103 (expr -> unary_operator expr .) ]

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 103

    (108) expr -> EXIT expr_EXIT .

    SEMICOLON       reduce using rule 108 (expr -> EXIT expr_EXIT .)
    INTE_DOT        reduce using rule 108 (expr -> EXIT expr_EXIT .)
    EQUALS          reduce using rule 108 (expr -> EXIT expr_EXIT .)
    GREAT_THAN      reduce using rule 108 (expr -> EXIT expr_EXIT .)
    LESS_THAN       reduce using rule 108 (expr -> EXIT expr_EXIT .)
    LESS_EQUAL      reduce using rule 108 (expr -> EXIT expr_EXIT .)
    GREAT_EQUAL     reduce using rule 108 (expr -> EXIT expr_EXIT .)
    NOT_EQUAL       reduce using rule 108 (expr -> EXIT expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 108 (expr -> EXIT expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 108 (expr -> EXIT expr_EXIT .)
    AND             reduce using rule 108 (expr -> EXIT expr_EXIT .)
    OR              reduce using rule 108 (expr -> EXIT expr_EXIT .)
    PLUS            reduce using rule 108 (expr -> EXIT expr_EXIT .)
    DIVIDE          reduce using rule 108 (expr -> EXIT expr_EXIT .)
    PERCENT         reduce using rule 108 (expr -> EXIT expr_EXIT .)
    TIMES           reduce using rule 108 (expr -> EXIT expr_EXIT .)
    MINUS           reduce using rule 108 (expr -> EXIT expr_EXIT .)
    RPAREN          reduce using rule 108 (expr -> EXIT expr_EXIT .)
    COLON           reduce using rule 108 (expr -> EXIT expr_EXIT .)
    DDOT            reduce using rule 108 (expr -> EXIT expr_EXIT .)
    ATTR_ASSOC      reduce using rule 108 (expr -> EXIT expr_EXIT .)
    AS              reduce using rule 108 (expr -> EXIT expr_EXIT .)
    RBRACKET        reduce using rule 108 (expr -> EXIT expr_EXIT .)
    RKEY            reduce using rule 108 (expr -> EXIT expr_EXIT .)


state 104

    (118) expr_EXIT -> exit_expr .

    SEMICOLON       reduce using rule 118 (expr_EXIT -> exit_expr .)
    INTE_DOT        reduce using rule 118 (expr_EXIT -> exit_expr .)
    EQUALS          reduce using rule 118 (expr_EXIT -> exit_expr .)
    GREAT_THAN      reduce using rule 118 (expr_EXIT -> exit_expr .)
    LESS_THAN       reduce using rule 118 (expr_EXIT -> exit_expr .)
    LESS_EQUAL      reduce using rule 118 (expr_EXIT -> exit_expr .)
    GREAT_EQUAL     reduce using rule 118 (expr_EXIT -> exit_expr .)
    NOT_EQUAL       reduce using rule 118 (expr_EXIT -> exit_expr .)
    LEFT_LOGICAL    reduce using rule 118 (expr_EXIT -> exit_expr .)
    RIGHT_LOGICAL   reduce using rule 118 (expr_EXIT -> exit_expr .)
    AND             reduce using rule 118 (expr_EXIT -> exit_expr .)
    OR              reduce using rule 118 (expr_EXIT -> exit_expr .)
    PLUS            reduce using rule 118 (expr_EXIT -> exit_expr .)
    DIVIDE          reduce using rule 118 (expr_EXIT -> exit_expr .)
    PERCENT         reduce using rule 118 (expr_EXIT -> exit_expr .)
    TIMES           reduce using rule 118 (expr_EXIT -> exit_expr .)
    MINUS           reduce using rule 118 (expr_EXIT -> exit_expr .)
    RPAREN          reduce using rule 118 (expr_EXIT -> exit_expr .)
    COLON           reduce using rule 118 (expr_EXIT -> exit_expr .)
    DDOT            reduce using rule 118 (expr_EXIT -> exit_expr .)
    ATTR_ASSOC      reduce using rule 118 (expr_EXIT -> exit_expr .)
    AS              reduce using rule 118 (expr_EXIT -> exit_expr .)
    RBRACKET        reduce using rule 118 (expr_EXIT -> exit_expr .)
    RKEY            reduce using rule 118 (expr_EXIT -> exit_expr .)


state 105

    (120) exit_expr -> LPAREN . expr RPAREN
    (121) exit_expr -> LPAREN . RPAREN
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 155
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 154
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 106

    (109) expr -> DIE expr_EXIT .

    SEMICOLON       reduce using rule 109 (expr -> DIE expr_EXIT .)
    INTE_DOT        reduce using rule 109 (expr -> DIE expr_EXIT .)
    EQUALS          reduce using rule 109 (expr -> DIE expr_EXIT .)
    GREAT_THAN      reduce using rule 109 (expr -> DIE expr_EXIT .)
    LESS_THAN       reduce using rule 109 (expr -> DIE expr_EXIT .)
    LESS_EQUAL      reduce using rule 109 (expr -> DIE expr_EXIT .)
    GREAT_EQUAL     reduce using rule 109 (expr -> DIE expr_EXIT .)
    NOT_EQUAL       reduce using rule 109 (expr -> DIE expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 109 (expr -> DIE expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 109 (expr -> DIE expr_EXIT .)
    AND             reduce using rule 109 (expr -> DIE expr_EXIT .)
    OR              reduce using rule 109 (expr -> DIE expr_EXIT .)
    PLUS            reduce using rule 109 (expr -> DIE expr_EXIT .)
    DIVIDE          reduce using rule 109 (expr -> DIE expr_EXIT .)
    PERCENT         reduce using rule 109 (expr -> DIE expr_EXIT .)
    TIMES           reduce using rule 109 (expr -> DIE expr_EXIT .)
    MINUS           reduce using rule 109 (expr -> DIE expr_EXIT .)
    RPAREN          reduce using rule 109 (expr -> DIE expr_EXIT .)
    COLON           reduce using rule 109 (expr -> DIE expr_EXIT .)
    DDOT            reduce using rule 109 (expr -> DIE expr_EXIT .)
    ATTR_ASSOC      reduce using rule 109 (expr -> DIE expr_EXIT .)
    AS              reduce using rule 109 (expr -> DIE expr_EXIT .)
    RBRACKET        reduce using rule 109 (expr -> DIE expr_EXIT .)
    RKEY            reduce using rule 109 (expr -> DIE expr_EXIT .)


state 107

    (110) expr -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (111) expr -> ARRAY_TYPE LPAREN . RPAREN
    (162) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (163) array_pair_list -> . array_pair
    (164) array_pair -> . expr
    (165) array_pair -> . expr ATTR_ASSOC expr
    (166) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (167) array_pair -> . AMPERSAND variable
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 157
    AMPERSAND       shift and go to state 160
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    array_pair_list                shift and go to state 156
    array_pair                     shift and go to state 158
    expr                           shift and go to state 159
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 108

    (16) if_statement -> statement_if if_statement_complement .

    FUNCTION        reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    GLOBAL          reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    MINUS           reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    INCREMENT       reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    DECREMENT       reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    LPAREN          reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    EXIT            reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    DIE             reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    ARRAY_TYPE      reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    NUMBER_REAL     reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    NUMBER_INTEGER  reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    TRUE            reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    FALSE           reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    WHILE           reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    DO              reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    FOR             reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    FOREACH         reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    BREAK           reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    CONTINUE        reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    RETURN          reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    EXC_DOT         reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    PLUS            reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    ID              reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    IF              reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    DOLAR           reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    VARIABLE        reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    END_PROGRAM     reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    RKEY            reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    ELSEIF          reduce using rule 16 (if_statement -> statement_if if_statement_complement .)
    ELSE            reduce using rule 16 (if_statement -> statement_if if_statement_complement .)


state 109

    (18) if_statement_complement -> statement_elseif .
    (19) if_statement_complement -> statement_elseif . statement_else
    (48) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 18 (if_statement_complement -> statement_elseif .)
    GLOBAL          reduce using rule 18 (if_statement_complement -> statement_elseif .)
    MINUS           reduce using rule 18 (if_statement_complement -> statement_elseif .)
    INCREMENT       reduce using rule 18 (if_statement_complement -> statement_elseif .)
    DECREMENT       reduce using rule 18 (if_statement_complement -> statement_elseif .)
    LPAREN          reduce using rule 18 (if_statement_complement -> statement_elseif .)
    EXIT            reduce using rule 18 (if_statement_complement -> statement_elseif .)
    DIE             reduce using rule 18 (if_statement_complement -> statement_elseif .)
    ARRAY_TYPE      reduce using rule 18 (if_statement_complement -> statement_elseif .)
    NUMBER_REAL     reduce using rule 18 (if_statement_complement -> statement_elseif .)
    NUMBER_INTEGER  reduce using rule 18 (if_statement_complement -> statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 18 (if_statement_complement -> statement_elseif .)
    TRUE            reduce using rule 18 (if_statement_complement -> statement_elseif .)
    FALSE           reduce using rule 18 (if_statement_complement -> statement_elseif .)
    WHILE           reduce using rule 18 (if_statement_complement -> statement_elseif .)
    DO              reduce using rule 18 (if_statement_complement -> statement_elseif .)
    FOR             reduce using rule 18 (if_statement_complement -> statement_elseif .)
    FOREACH         reduce using rule 18 (if_statement_complement -> statement_elseif .)
    BREAK           reduce using rule 18 (if_statement_complement -> statement_elseif .)
    CONTINUE        reduce using rule 18 (if_statement_complement -> statement_elseif .)
    RETURN          reduce using rule 18 (if_statement_complement -> statement_elseif .)
    EXC_DOT         reduce using rule 18 (if_statement_complement -> statement_elseif .)
    PLUS            reduce using rule 18 (if_statement_complement -> statement_elseif .)
    ID              reduce using rule 18 (if_statement_complement -> statement_elseif .)
    IF              reduce using rule 18 (if_statement_complement -> statement_elseif .)
    DOLAR           reduce using rule 18 (if_statement_complement -> statement_elseif .)
    VARIABLE        reduce using rule 18 (if_statement_complement -> statement_elseif .)
    END_PROGRAM     reduce using rule 18 (if_statement_complement -> statement_elseif .)
    RKEY            reduce using rule 18 (if_statement_complement -> statement_elseif .)
    ELSEIF          reduce using rule 18 (if_statement_complement -> statement_elseif .)
    ELSE            shift and go to state 112

  ! ELSE            [ reduce using rule 18 (if_statement_complement -> statement_elseif .) ]

    statement_else                 shift and go to state 161

state 110

    (20) if_statement_complement -> statement_else .

    FUNCTION        reduce using rule 20 (if_statement_complement -> statement_else .)
    GLOBAL          reduce using rule 20 (if_statement_complement -> statement_else .)
    MINUS           reduce using rule 20 (if_statement_complement -> statement_else .)
    INCREMENT       reduce using rule 20 (if_statement_complement -> statement_else .)
    DECREMENT       reduce using rule 20 (if_statement_complement -> statement_else .)
    LPAREN          reduce using rule 20 (if_statement_complement -> statement_else .)
    EXIT            reduce using rule 20 (if_statement_complement -> statement_else .)
    DIE             reduce using rule 20 (if_statement_complement -> statement_else .)
    ARRAY_TYPE      reduce using rule 20 (if_statement_complement -> statement_else .)
    NUMBER_REAL     reduce using rule 20 (if_statement_complement -> statement_else .)
    NUMBER_INTEGER  reduce using rule 20 (if_statement_complement -> statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 20 (if_statement_complement -> statement_else .)
    TRUE            reduce using rule 20 (if_statement_complement -> statement_else .)
    FALSE           reduce using rule 20 (if_statement_complement -> statement_else .)
    WHILE           reduce using rule 20 (if_statement_complement -> statement_else .)
    DO              reduce using rule 20 (if_statement_complement -> statement_else .)
    FOR             reduce using rule 20 (if_statement_complement -> statement_else .)
    FOREACH         reduce using rule 20 (if_statement_complement -> statement_else .)
    BREAK           reduce using rule 20 (if_statement_complement -> statement_else .)
    CONTINUE        reduce using rule 20 (if_statement_complement -> statement_else .)
    RETURN          reduce using rule 20 (if_statement_complement -> statement_else .)
    EXC_DOT         reduce using rule 20 (if_statement_complement -> statement_else .)
    PLUS            reduce using rule 20 (if_statement_complement -> statement_else .)
    ID              reduce using rule 20 (if_statement_complement -> statement_else .)
    IF              reduce using rule 20 (if_statement_complement -> statement_else .)
    DOLAR           reduce using rule 20 (if_statement_complement -> statement_else .)
    VARIABLE        reduce using rule 20 (if_statement_complement -> statement_else .)
    END_PROGRAM     reduce using rule 20 (if_statement_complement -> statement_else .)
    RKEY            reduce using rule 20 (if_statement_complement -> statement_else .)
    ELSEIF          reduce using rule 20 (if_statement_complement -> statement_else .)
    ELSE            reduce using rule 20 (if_statement_complement -> statement_else .)


state 111

    (47) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT
    (45) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 114

    expr_parentheses               shift and go to state 162

state 112

    (48) statement_else -> ELSE . statement_BLOCK_OPT
    (176) statement_BLOCK_OPT -> . statement
    (177) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (178) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 117
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 163
    statement                      shift and go to state 116
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 113

    (21) while_statement -> WHILE expr_parentheses . statement_BLOCK_OPT
    (176) statement_BLOCK_OPT -> . statement
    (177) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (178) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 117
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 164
    statement                      shift and go to state 116
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 114

    (45) expr_parentheses -> LPAREN . expr RPAREN
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 165
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 115

    (22) do_statement -> DO statement_BLOCK_OPT . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 166


state 116

    (176) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    EXC_DOT         reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    PLUS            reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 176 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 176 (statement_BLOCK_OPT -> statement .)


state 117

    (177) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (178) statement_BLOCK_OPT -> LKEY . RKEY
    (172) statement_MUL -> . statement statement_MUL
    (173) statement_MUL -> . statement
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 168
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_MUL                  shift and go to state 167
    statement                      shift and go to state 169
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 118

    (29) for_statement -> FOR LPAREN . for_parameters RPAREN statement_BLOCK_OPT
    (30) for_parameters -> . SEMICOLON SEMICOLON
    (31) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (32) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (33) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (34) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (35) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (36) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (37) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (51) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (52) for_expr_OPT -> . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 171
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_parameters                 shift and go to state 170
    for_expr_OPT                   shift and go to state 172
    expr                           shift and go to state 173
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 119

    (49) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 174
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 120

    (23) break_statement -> BREAK expr . SEMICOLON
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 175
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 121

    (24) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    EXC_DOT         reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    DOLAR           reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 24 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 24 (break_statement -> BREAK SEMICOLON .)


state 122

    (25) continue_statement -> CONTINUE expr . SEMICOLON
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 176
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 123

    (26) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    EXC_DOT         reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    DOLAR           reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 26 (continue_statement -> CONTINUE SEMICOLON .)


state 124

    (27) return_statement -> RETURN expr . SEMICOLON
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 177
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 125

    (28) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    EXC_DOT         reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    DOLAR           reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 28 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 28 (return_statement -> RETURN SEMICOLON .)


state 126

    (46) statement_if -> IF expr_parentheses . statement_BLOCK_OPT
    (176) statement_BLOCK_OPT -> . statement
    (177) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (178) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 117
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 178
    statement                      shift and go to state 116
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 127

    (124) base_variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    AND             reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    OR              reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    AS              reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 124 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)


state 128

    (128) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 134


state 129

    (125) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AND             reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    OR              reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AS              reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 125 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 130

    (185) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (186) reference_variable_SELECTOR -> selector .
    (185) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (186) reference_variable_SELECTOR -> . selector
    (129) selector -> . LBRACKET expr RBRACKET
    (130) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    DECREMENT       reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    ADD_ASSIGN      reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    SUB_ASSIGN      reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    MOD_ASSIGN      reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    PLUS_ASSIGN     reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    DIVIDE_ASSIGN   reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    ASSIGN          reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    SEMICOLON       reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    INTE_DOT        reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    EQUALS          reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    GREAT_THAN      reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    LESS_THAN       reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    LESS_EQUAL      reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    GREAT_EQUAL     reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    NOT_EQUAL       reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    LEFT_LOGICAL    reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    RIGHT_LOGICAL   reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    AND             reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    OR              reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    PLUS            reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    DIVIDE          reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    PERCENT         reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    TIMES           reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    MINUS           reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    RPAREN          reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    COLON           reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    DDOT            reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    ATTR_ASSOC      reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    AS              reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    RBRACKET        reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    RKEY            reduce using rule 186 (reference_variable_SELECTOR -> selector .)
    LBRACKET        shift and go to state 131

    selector                       shift and go to state 130
    reference_variable_SELECTOR    shift and go to state 179

state 131

    (129) selector -> LBRACKET . expr RBRACKET
    (130) selector -> LBRACKET . RBRACKET
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RBRACKET        shift and go to state 181
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 180
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 132

    (187) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> DOLAR .
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 188 (simple_indirect_reference_DOLAR -> DOLAR .)
    DOLAR           shift and go to state 132

  ! DOLAR           [ reduce using rule 188 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 133

state 133

    (187) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 187 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 187 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 134

    (128) compound_variable -> DOLAR LKEY . expr RKEY
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 182
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 135

    (131) function_declaration_statement -> FUNCTION ID LPAREN . RPAREN LKEY RKEY
    (136) function_declaration_statement -> FUNCTION ID LPAREN . parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> FUNCTION ID LPAREN . RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> FUNCTION ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (139) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (140) parameter_list -> . parameter
    (141) parameter -> . VARIABLE
    (142) parameter -> . VARIABLE ASSIGN static_scalar
    (143) parameter -> . parameter_type VARIABLE
    (144) parameter -> . parameter_type AMPERSAND VARIABLE
    (145) parameter -> . AMPERSAND VARIABLE
    (146) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (147) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (148) parameter_type -> . INT_TYPE
    (149) parameter_type -> . BOOLEAN_TYPE
    (150) parameter_type -> . STRING_TYPE
    (151) parameter_type -> . FLOAT_TYPE
    (152) parameter_type -> . ARRAY_TYPE
    (153) parameter_type -> . BOOL_TYPE
    (154) parameter_type -> . REAL_TYPE
    (155) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 183
    VARIABLE        shift and go to state 186
    AMPERSAND       shift and go to state 188
    INT_TYPE        shift and go to state 189
    BOOLEAN_TYPE    shift and go to state 190
    STRING_TYPE     shift and go to state 191
    FLOAT_TYPE      shift and go to state 192
    ARRAY_TYPE      shift and go to state 193
    BOOL_TYPE       shift and go to state 194
    REAL_TYPE       shift and go to state 195
    DOUBLE_TYPE     shift and go to state 196

    parameter_list                 shift and go to state 184
    parameter                      shift and go to state 185
    parameter_type                 shift and go to state 187

state 136

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> FUNCTION AMPERSAND ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 197


state 137

    (53) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 198


state 138

    (54) function_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    INTE_DOT        reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    AS              reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 54 (function_call -> ID LPAREN RPAREN .)
    RKEY            reduce using rule 54 (function_call -> ID LPAREN RPAREN .)


state 139

    (55) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (56) function_call_parameter_list -> function_call_parameter .
    (179) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (180) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter

    RPAREN          reduce using rule 56 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 200

    function_call_list_COLON_FUNCTION shift and go to state 199

state 140

    (57) function_call_parameter -> expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    COLON           reduce using rule 57 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 57 (function_call_parameter -> expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 141

    (58) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 201


state 142

    (102) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 102 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 102 (expr -> LPAREN expr RPAREN .)


state 143

    (107) expr -> LPAREN type_cast_operator RPAREN . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 202
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 144

    (104) expr -> expr INTE_DOT expr . DDOT expr
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    DDOT            shift and go to state 203
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 145

    (105) expr -> expr comparission_operator expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 105 (expr -> expr comparission_operator expr .)
    RPAREN          reduce using rule 105 (expr -> expr comparission_operator expr .)
    COLON           reduce using rule 105 (expr -> expr comparission_operator expr .)
    DDOT            reduce using rule 105 (expr -> expr comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 105 (expr -> expr comparission_operator expr .)
    AS              reduce using rule 105 (expr -> expr comparission_operator expr .)
    RBRACKET        reduce using rule 105 (expr -> expr comparission_operator expr .)
    RKEY            reduce using rule 105 (expr -> expr comparission_operator expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

  ! INTE_DOT        [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! EQUALS          [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! AND             [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! OR              [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! PLUS            [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! DIVIDE          [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! PERCENT         [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! TIMES           [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! MINUS           [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 146

    (106) expr -> expr arithmetic_operator expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    RPAREN          reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    COLON           reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    DDOT            reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    AS              reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    RBRACKET        reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    RKEY            reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

  ! INTE_DOT        [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! EQUALS          [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! AND             [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! OR              [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! PLUS            [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! DIVIDE          [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! PERCENT         [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! TIMES           [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! MINUS           [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]

    arithmetic_operator            shift and go to state 71
    comparission_operator          shift and go to state 70

state 147

    (14) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 204


state 148

    (15) statement -> GLOBAL global_var SEMICOLON .

    FUNCTION        reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    GLOBAL          reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    MINUS           reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    INCREMENT       reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    DECREMENT       reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    LPAREN          reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    EXIT            reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    DIE             reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    ARRAY_TYPE      reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_REAL     reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    TRUE            reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    FALSE           reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    DO              reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    FOR             reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    FOREACH         reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    BREAK           reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    CONTINUE        reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    EXC_DOT         reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    PLUS            reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    ID              reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    IF              reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    DOLAR           reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    VARIABLE        reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    END_PROGRAM     reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    RKEY            reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    ELSEIF          reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> GLOBAL global_var SEMICOLON .)


state 149

    (41) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (42) statement_COLON_GLOBAL -> COLON . global_var
    (38) global_var -> . VARIABLE
    (39) global_var -> . DOLAR VARIABLE
    (40) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 88
    DOLAR           shift and go to state 89

    global_var                     shift and go to state 205

state 150

    (39) global_var -> DOLAR VARIABLE .

    SEMICOLON       reduce using rule 39 (global_var -> DOLAR VARIABLE .)
    COLON           reduce using rule 39 (global_var -> DOLAR VARIABLE .)


state 151

    (40) global_var -> DOLAR LKEY . expr RKEY
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 206
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 152

    (99) expr -> variable assign_operator expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 99 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 99 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 99 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 99 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 99 (expr -> variable assign_operator expr .)
    AS              reduce using rule 99 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 99 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 99 (expr -> variable assign_operator expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

  ! INTE_DOT        [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! AND             [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! OR              [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! PLUS            [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! DIVIDE          [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! PERCENT         [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! TIMES           [ reduce using rule 99 (expr -> variable assign_operator expr .) ]
  ! MINUS           [ reduce using rule 99 (expr -> variable assign_operator expr .) ]

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 153

    (100) expr -> variable assign_operator AMPERSAND . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 23
    expr                           shift and go to state 207
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 154

    (120) exit_expr -> LPAREN expr . RPAREN
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 208
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 155

    (121) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    INTE_DOT        reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    EQUALS          reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    AND             reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    OR              reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    PLUS            reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    PERCENT         reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    TIMES           reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    RPAREN          reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    COLON           reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    DDOT            reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    AS              reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 121 (exit_expr -> LPAREN RPAREN .)
    RKEY            reduce using rule 121 (exit_expr -> LPAREN RPAREN .)


state 156

    (110) expr -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 209


state 157

    (111) expr -> ARRAY_TYPE LPAREN RPAREN .

    SEMICOLON       reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    INTE_DOT        reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    EQUALS          reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_THAN       reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    AND             reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    OR              reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    PLUS            reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    DIVIDE          reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    PERCENT         reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    TIMES           reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    MINUS           reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RPAREN          reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    COLON           reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    DDOT            reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    AS              reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RBRACKET        reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RKEY            reduce using rule 111 (expr -> ARRAY_TYPE LPAREN RPAREN .)


state 158

    (162) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (163) array_pair_list -> array_pair .
    (189) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (190) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 163 (array_pair_list -> array_pair .)
    COLON           shift and go to state 211

    array_pair_list_ARR_PAIR       shift and go to state 210

state 159

    (164) array_pair -> expr .
    (165) array_pair -> expr . ATTR_ASSOC expr
    (166) array_pair -> expr . ATTR_ASSOC AMPERSAND variable
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    COLON           reduce using rule 164 (array_pair -> expr .)
    RPAREN          reduce using rule 164 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 212
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 160

    (167) array_pair -> AMPERSAND . variable
    (122) variable -> . base_variable
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 213
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 161

    (19) if_statement_complement -> statement_elseif statement_else .

    FUNCTION        reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    GLOBAL          reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    MINUS           reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    INCREMENT       reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    DECREMENT       reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    LPAREN          reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    EXIT            reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    DIE             reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    TRUE            reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    FALSE           reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    WHILE           reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    DO              reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    FOR             reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    FOREACH         reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    BREAK           reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    CONTINUE        reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    RETURN          reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    EXC_DOT         reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    PLUS            reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    ID              reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    IF              reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    DOLAR           reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    VARIABLE        reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    RKEY            reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    ELSEIF          reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)
    ELSE            reduce using rule 19 (if_statement_complement -> statement_elseif statement_else .)


state 162

    (47) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT
    (176) statement_BLOCK_OPT -> . statement
    (177) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (178) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 117
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 214
    statement                      shift and go to state 116
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 163

    (48) statement_else -> ELSE statement_BLOCK_OPT .

    FUNCTION        reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    PLUS            reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSE            reduce using rule 48 (statement_else -> ELSE statement_BLOCK_OPT .)


state 164

    (21) while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    PLUS            reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 21 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)


state 165

    (45) expr_parentheses -> LPAREN expr . RPAREN
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 215
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 166

    (22) do_statement -> DO statement_BLOCK_OPT WHILE . expr_parentheses SEMICOLON
    (45) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 114

    expr_parentheses               shift and go to state 216

state 167

    (177) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 217


state 168

    (178) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    MINUS           reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    INCREMENT       reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    DECREMENT       reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOREACH         reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXC_DOT         reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    PLUS            reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    DOLAR           reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 178 (statement_BLOCK_OPT -> LKEY RKEY .)


state 169

    (172) statement_MUL -> statement . statement_MUL
    (173) statement_MUL -> statement .
    (172) statement_MUL -> . statement statement_MUL
    (173) statement_MUL -> . statement
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 173 (statement_MUL -> statement .)
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement                      shift and go to state 169
    statement_MUL                  shift and go to state 218
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 170

    (29) for_statement -> FOR LPAREN for_parameters . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 219


state 171

    (30) for_parameters -> SEMICOLON . SEMICOLON
    (34) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (35) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (36) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (51) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (52) for_expr_OPT -> . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 220
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 221
    expr                           shift and go to state 173
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 172

    (31) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (32) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (33) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (37) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 222


state 173

    (51) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (52) for_expr_OPT -> expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (174) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (175) for_expr_COLON_EXPR -> . COLON expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 52 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 52 (for_expr_OPT -> expr .)
    INTE_DOT        shift and go to state 69
    COLON           shift and go to state 224
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    for_expr_COLON_EXPR            shift and go to state 223
    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 174

    (49) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    AS              shift and go to state 225
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 175

    (23) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    MINUS           reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    FOREACH         reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    EXC_DOT         reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    PLUS            reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    DOLAR           reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 23 (break_statement -> BREAK expr SEMICOLON .)


state 176

    (25) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    MINUS           reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOREACH         reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXC_DOT         reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    PLUS            reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    DOLAR           reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 25 (continue_statement -> CONTINUE expr SEMICOLON .)


state 177

    (27) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    EXC_DOT         reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    PLUS            reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    DOLAR           reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 27 (return_statement -> RETURN expr SEMICOLON .)


state 178

    (46) statement_if -> IF expr_parentheses statement_BLOCK_OPT .

    ELSEIF          reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    PLUS            reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 46 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)


state 179

    (185) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AND             reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    OR              reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 185 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 180

    (129) selector -> LBRACKET expr . RBRACKET
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    RBRACKET        shift and go to state 226
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 181

    (130) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    PLUS_ASSIGN     reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    LEFT_LOGICAL    reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    AND             reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    OR              reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    AS              reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 130 (selector -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 130 (selector -> LBRACKET RBRACKET .)


state 182

    (128) compound_variable -> DOLAR LKEY expr . RKEY
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 227
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 183

    (131) function_declaration_statement -> FUNCTION ID LPAREN RPAREN . LKEY RKEY
    (137) function_declaration_statement -> FUNCTION ID LPAREN RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 228


state 184

    (136) function_declaration_statement -> FUNCTION ID LPAREN parameter_list . RPAREN LKEY RKEY
    (138) function_declaration_statement -> FUNCTION ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 229


state 185

    (139) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (140) parameter_list -> parameter .
    (183) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (184) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 140 (parameter_list -> parameter .)
    COLON           shift and go to state 231

    parameter_list_COLON_PARAMETER shift and go to state 230

state 186

    (141) parameter -> VARIABLE .
    (142) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 141 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 141 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 232


state 187

    (143) parameter -> parameter_type . VARIABLE
    (144) parameter -> parameter_type . AMPERSAND VARIABLE
    (147) parameter -> parameter_type . AMPERSAND VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 233
    AMPERSAND       shift and go to state 234


state 188

    (145) parameter -> AMPERSAND . VARIABLE
    (146) parameter -> AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 235


state 189

    (148) parameter_type -> INT_TYPE .

    VARIABLE        reduce using rule 148 (parameter_type -> INT_TYPE .)
    AMPERSAND       reduce using rule 148 (parameter_type -> INT_TYPE .)


state 190

    (149) parameter_type -> BOOLEAN_TYPE .

    VARIABLE        reduce using rule 149 (parameter_type -> BOOLEAN_TYPE .)
    AMPERSAND       reduce using rule 149 (parameter_type -> BOOLEAN_TYPE .)


state 191

    (150) parameter_type -> STRING_TYPE .

    VARIABLE        reduce using rule 150 (parameter_type -> STRING_TYPE .)
    AMPERSAND       reduce using rule 150 (parameter_type -> STRING_TYPE .)


state 192

    (151) parameter_type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 151 (parameter_type -> FLOAT_TYPE .)
    AMPERSAND       reduce using rule 151 (parameter_type -> FLOAT_TYPE .)


state 193

    (152) parameter_type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 152 (parameter_type -> ARRAY_TYPE .)
    AMPERSAND       reduce using rule 152 (parameter_type -> ARRAY_TYPE .)


state 194

    (153) parameter_type -> BOOL_TYPE .

    VARIABLE        reduce using rule 153 (parameter_type -> BOOL_TYPE .)
    AMPERSAND       reduce using rule 153 (parameter_type -> BOOL_TYPE .)


state 195

    (154) parameter_type -> REAL_TYPE .

    VARIABLE        reduce using rule 154 (parameter_type -> REAL_TYPE .)
    AMPERSAND       reduce using rule 154 (parameter_type -> REAL_TYPE .)


state 196

    (155) parameter_type -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 155 (parameter_type -> DOUBLE_TYPE .)
    AMPERSAND       reduce using rule 155 (parameter_type -> DOUBLE_TYPE .)


state 197

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . RPAREN LKEY RKEY
    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (139) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (140) parameter_list -> . parameter
    (141) parameter -> . VARIABLE
    (142) parameter -> . VARIABLE ASSIGN static_scalar
    (143) parameter -> . parameter_type VARIABLE
    (144) parameter -> . parameter_type AMPERSAND VARIABLE
    (145) parameter -> . AMPERSAND VARIABLE
    (146) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (147) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (148) parameter_type -> . INT_TYPE
    (149) parameter_type -> . BOOLEAN_TYPE
    (150) parameter_type -> . STRING_TYPE
    (151) parameter_type -> . FLOAT_TYPE
    (152) parameter_type -> . ARRAY_TYPE
    (153) parameter_type -> . BOOL_TYPE
    (154) parameter_type -> . REAL_TYPE
    (155) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 236
    VARIABLE        shift and go to state 186
    AMPERSAND       shift and go to state 188
    INT_TYPE        shift and go to state 189
    BOOLEAN_TYPE    shift and go to state 190
    STRING_TYPE     shift and go to state 191
    FLOAT_TYPE      shift and go to state 192
    ARRAY_TYPE      shift and go to state 193
    BOOL_TYPE       shift and go to state 194
    REAL_TYPE       shift and go to state 195
    DOUBLE_TYPE     shift and go to state 196

    parameter_list                 shift and go to state 237
    parameter                      shift and go to state 185
    parameter_type                 shift and go to state 187

state 198

    (53) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 53 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 199

    (55) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 55 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 200

    (179) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (180) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter
    (57) function_call_parameter -> . expr
    (58) function_call_parameter -> . AMPERSAND VARIABLE
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 141
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    function_call_parameter        shift and go to state 238
    expr                           shift and go to state 140
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 201

    (58) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 58 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 58 (function_call_parameter -> AMPERSAND VARIABLE .)


state 202

    (107) expr -> LPAREN type_cast_operator RPAREN expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

  ! INTE_DOT        [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! AND             [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! OR              [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PLUS            [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! TIMES           [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! MINUS           [ reduce using rule 107 (expr -> LPAREN type_cast_operator RPAREN expr .) ]

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 203

    (104) expr -> expr INTE_DOT expr DDOT . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 239
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 204

    (14) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOREACH         reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXC_DOT         reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    PLUS            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 205

    (41) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (42) statement_COLON_GLOBAL -> COLON global_var .
    (41) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (42) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 42 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 149

    statement_COLON_GLOBAL         shift and go to state 240

state 206

    (40) global_var -> DOLAR LKEY expr . RKEY
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 241
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 207

    (100) expr -> variable assign_operator AMPERSAND expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

  ! INTE_DOT        [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! AND             [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! OR              [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PLUS            [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! DIVIDE          [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PERCENT         [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 100 (expr -> variable assign_operator AMPERSAND expr .) ]

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 208

    (120) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 120 (exit_expr -> LPAREN expr RPAREN .)


state 209

    (110) expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 110 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 210

    (162) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 162 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 211

    (189) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (190) array_pair_list_ARR_PAIR -> COLON . array_pair
    (164) array_pair -> . expr
    (165) array_pair -> . expr ATTR_ASSOC expr
    (166) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (167) array_pair -> . AMPERSAND variable
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 160
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    array_pair                     shift and go to state 242
    expr                           shift and go to state 159
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 212

    (165) array_pair -> expr ATTR_ASSOC . expr
    (166) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 244
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 243
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 213

    (167) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 167 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 167 (array_pair -> AMPERSAND variable .)


state 214

    (47) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    PLUS            reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 47 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)


state 215

    (45) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    EXC_DOT         reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 45 (expr_parentheses -> LPAREN expr RPAREN .)


state 216

    (22) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 245


state 217

    (177) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PLUS            reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 177 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 218

    (172) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 172 (statement_MUL -> statement statement_MUL .)


state 219

    (29) for_statement -> FOR LPAREN for_parameters RPAREN . statement_BLOCK_OPT
    (176) statement_BLOCK_OPT -> . statement
    (177) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (178) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 117
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 246
    statement                      shift and go to state 116
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 220

    (30) for_parameters -> SEMICOLON SEMICOLON .
    (36) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (51) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (52) for_expr_OPT -> . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 30 (for_parameters -> SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 247
    expr                           shift and go to state 173
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 221

    (34) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (35) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 248


state 222

    (31) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (32) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (33) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (37) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (51) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (52) for_expr_OPT -> . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 250
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 249
    expr                           shift and go to state 173
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 223

    (51) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 51 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 51 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 224

    (174) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (175) for_expr_COLON_EXPR -> COLON . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 251
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 225

    (49) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (43) ampersand_variable -> . AMPERSAND VARIABLE
    (44) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 253
    VARIABLE        shift and go to state 254

    ampersand_variable             shift and go to state 252

state 226

    (129) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    PLUS_ASSIGN     reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    AS              reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 129 (selector -> LBRACKET expr RBRACKET .)


state 227

    (128) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    AND             reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    OR              reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    AS              reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 128 (compound_variable -> DOLAR LKEY expr RKEY .)


state 228

    (131) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY . RKEY
    (137) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY . inner_statement_MUL RKEY
    (170) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (171) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (131) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 255
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement_MUL            shift and go to state 256
    inner_statement                shift and go to state 257
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 229

    (136) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN . LKEY RKEY
    (138) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 258


state 230

    (139) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 139 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 231

    (183) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (184) parameter_list_COLON_PARAMETER -> COLON . parameter
    (141) parameter -> . VARIABLE
    (142) parameter -> . VARIABLE ASSIGN static_scalar
    (143) parameter -> . parameter_type VARIABLE
    (144) parameter -> . parameter_type AMPERSAND VARIABLE
    (145) parameter -> . AMPERSAND VARIABLE
    (146) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (147) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (148) parameter_type -> . INT_TYPE
    (149) parameter_type -> . BOOLEAN_TYPE
    (150) parameter_type -> . STRING_TYPE
    (151) parameter_type -> . FLOAT_TYPE
    (152) parameter_type -> . ARRAY_TYPE
    (153) parameter_type -> . BOOL_TYPE
    (154) parameter_type -> . REAL_TYPE
    (155) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 186
    AMPERSAND       shift and go to state 188
    INT_TYPE        shift and go to state 189
    BOOLEAN_TYPE    shift and go to state 190
    STRING_TYPE     shift and go to state 191
    FLOAT_TYPE      shift and go to state 192
    ARRAY_TYPE      shift and go to state 193
    BOOL_TYPE       shift and go to state 194
    REAL_TYPE       shift and go to state 195
    DOUBLE_TYPE     shift and go to state 196

    parameter                      shift and go to state 259
    parameter_type                 shift and go to state 187

state 232

    (142) parameter -> VARIABLE ASSIGN . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 262
    MINUS           shift and go to state 263
    NUMBER_REAL     shift and go to state 264
    NUMBER_INTEGER  shift and go to state 265
    CONSTANT_ENCAPSED_STRING shift and go to state 266

    static_scalar                  shift and go to state 260
    common_scalar                  shift and go to state 261

state 233

    (143) parameter -> parameter_type VARIABLE .

    COLON           reduce using rule 143 (parameter -> parameter_type VARIABLE .)
    RPAREN          reduce using rule 143 (parameter -> parameter_type VARIABLE .)


state 234

    (144) parameter -> parameter_type AMPERSAND . VARIABLE
    (147) parameter -> parameter_type AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 267


state 235

    (145) parameter -> AMPERSAND VARIABLE .
    (146) parameter -> AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 145 (parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 145 (parameter -> AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 268


state 236

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN . LKEY RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 269


state 237

    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list . RPAREN LKEY RKEY
    (135) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 270


state 238

    (179) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (180) function_call_list_COLON_FUNCTION -> COLON function_call_parameter .
    (179) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (180) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter

    RPAREN          reduce using rule 180 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter .)
    COLON           shift and go to state 200

    function_call_list_COLON_FUNCTION shift and go to state 271

state 239

    (104) expr -> expr INTE_DOT expr DDOT expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    AS              reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

  ! INTE_DOT        [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! AND             [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! OR              [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PLUS            [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 240

    (41) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 41 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 241

    (40) global_var -> DOLAR LKEY expr RKEY .

    SEMICOLON       reduce using rule 40 (global_var -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 40 (global_var -> DOLAR LKEY expr RKEY .)


state 242

    (189) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (190) array_pair_list_ARR_PAIR -> COLON array_pair .
    (189) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (190) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 190 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 211

    array_pair_list_ARR_PAIR       shift and go to state 272

state 243

    (165) array_pair -> expr ATTR_ASSOC expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    COLON           reduce using rule 165 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 165 (array_pair -> expr ATTR_ASSOC expr .)
    INTE_DOT        shift and go to state 69
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 244

    (166) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (122) variable -> . base_variable
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 273
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 245

    (22) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    MINUS           reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    INCREMENT       reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DECREMENT       reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOREACH         reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXC_DOT         reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    PLUS            reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DOLAR           reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 22 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)


state 246

    (29) for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 29 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)


state 247

    (36) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 36 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 248

    (34) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (35) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (51) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (52) for_expr_OPT -> . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 34 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 274
    expr                           shift and go to state 173
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 249

    (32) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (37) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 275


state 250

    (31) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (33) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (51) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (52) for_expr_OPT -> . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 31 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 276
    expr                           shift and go to state 173
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 251

    (174) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (175) for_expr_COLON_EXPR -> COLON expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (174) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (175) for_expr_COLON_EXPR -> . COLON expr
    (84) comparission_operator -> . EQUALS
    (85) comparission_operator -> . GREAT_THAN
    (86) comparission_operator -> . LESS_THAN
    (87) comparission_operator -> . LESS_EQUAL
    (88) comparission_operator -> . GREAT_EQUAL
    (89) comparission_operator -> . NOT_EQUAL
    (90) comparission_operator -> . LEFT_LOGICAL
    (91) comparission_operator -> . RIGHT_LOGICAL
    (92) comparission_operator -> . AND
    (93) comparission_operator -> . OR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . DIVIDE
    (81) arithmetic_operator -> . PERCENT
    (82) arithmetic_operator -> . TIMES
    (83) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 175 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 175 (for_expr_COLON_EXPR -> COLON expr .)
    INTE_DOT        shift and go to state 69
    COLON           shift and go to state 224
    EQUALS          shift and go to state 72
    GREAT_THAN      shift and go to state 73
    LESS_THAN       shift and go to state 74
    LESS_EQUAL      shift and go to state 75
    GREAT_EQUAL     shift and go to state 76
    NOT_EQUAL       shift and go to state 77
    LEFT_LOGICAL    shift and go to state 78
    RIGHT_LOGICAL   shift and go to state 79
    AND             shift and go to state 80
    OR              shift and go to state 81
    PLUS            shift and go to state 82
    DIVIDE          shift and go to state 83
    PERCENT         shift and go to state 84
    TIMES           shift and go to state 85
    MINUS           shift and go to state 86

    for_expr_COLON_EXPR            shift and go to state 277
    comparission_operator          shift and go to state 70
    arithmetic_operator            shift and go to state 71

state 252

    (49) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 278
    ATTR_ASSOC      shift and go to state 279


state 253

    (43) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 280


state 254

    (44) ampersand_variable -> VARIABLE .

    RPAREN          reduce using rule 44 (ampersand_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 44 (ampersand_variable -> VARIABLE .)


state 255

    (131) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    MINUS           reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    EXIT            reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DIE             reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    TRUE            reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FALSE           reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    WHILE           reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DO              reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FOR             reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    FOREACH         reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    BREAK           reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    RETURN          reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    PLUS            reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    ID              reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    IF              reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)
    RKEY            reduce using rule 131 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY .)


state 256

    (137) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 281


state 257

    (170) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (171) inner_statement_MUL -> inner_statement .
    (170) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (171) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (131) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 171 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement                shift and go to state 257
    inner_statement_MUL            shift and go to state 282
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 258

    (136) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY . RKEY
    (138) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (170) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (171) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (131) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 283
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement_MUL            shift and go to state 284
    inner_statement                shift and go to state 257
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 259

    (183) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (184) parameter_list_COLON_PARAMETER -> COLON parameter .
    (183) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (184) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 184 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 231

    parameter_list_COLON_PARAMETER shift and go to state 285

state 260

    (142) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 142 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 142 (parameter -> VARIABLE ASSIGN static_scalar .)


state 261

    (156) static_scalar -> common_scalar .

    COLON           reduce using rule 156 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 156 (static_scalar -> common_scalar .)


state 262

    (157) static_scalar -> PLUS . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 262
    MINUS           shift and go to state 263
    NUMBER_REAL     shift and go to state 264
    NUMBER_INTEGER  shift and go to state 265
    CONSTANT_ENCAPSED_STRING shift and go to state 266

    static_scalar                  shift and go to state 286
    common_scalar                  shift and go to state 261

state 263

    (158) static_scalar -> MINUS . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 262
    MINUS           shift and go to state 263
    NUMBER_REAL     shift and go to state 264
    NUMBER_INTEGER  shift and go to state 265
    CONSTANT_ENCAPSED_STRING shift and go to state 266

    static_scalar                  shift and go to state 287
    common_scalar                  shift and go to state 261

state 264

    (159) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 159 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 159 (common_scalar -> NUMBER_REAL .)


state 265

    (160) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 160 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 160 (common_scalar -> NUMBER_INTEGER .)


state 266

    (161) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 161 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 161 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 267

    (144) parameter -> parameter_type AMPERSAND VARIABLE .
    (147) parameter -> parameter_type AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 144 (parameter -> parameter_type AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 144 (parameter -> parameter_type AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 288


state 268

    (146) parameter -> AMPERSAND VARIABLE ASSIGN . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 262
    MINUS           shift and go to state 263
    NUMBER_REAL     shift and go to state 264
    NUMBER_INTEGER  shift and go to state 265
    CONSTANT_ENCAPSED_STRING shift and go to state 266

    static_scalar                  shift and go to state 289
    common_scalar                  shift and go to state 261

state 269

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY . RKEY
    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY . inner_statement_MUL RKEY
    (170) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (171) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (131) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 290
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement_MUL            shift and go to state 291
    inner_statement                shift and go to state 257
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 270

    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN . LKEY RKEY
    (135) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 292


state 271

    (179) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 179 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 272

    (189) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 189 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 273

    (166) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 166 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 166 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 274

    (35) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 35 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 275

    (32) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (37) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (51) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (52) for_expr_OPT -> . expr
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 32 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 293
    expr                           shift and go to state 173
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 276

    (33) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 33 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 277

    (174) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 174 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 174 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 278

    (49) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN . statement_BLOCK_OPT
    (176) statement_BLOCK_OPT -> . statement
    (177) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (178) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 117
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 11
    statement_BLOCK_OPT            shift and go to state 294
    statement                      shift and go to state 116
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 279

    (50) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC . ampersand_variable RPAREN statement_BLOCK_OPT
    (43) ampersand_variable -> . AMPERSAND VARIABLE
    (44) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 253
    VARIABLE        shift and go to state 254

    ampersand_variable             shift and go to state 295

state 280

    (43) ampersand_variable -> AMPERSAND VARIABLE .

    RPAREN          reduce using rule 43 (ampersand_variable -> AMPERSAND VARIABLE .)
    ATTR_ASSOC      reduce using rule 43 (ampersand_variable -> AMPERSAND VARIABLE .)


state 281

    (137) function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 137 (function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)


state 282

    (170) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 170 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 283

    (136) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    MINUS           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXIT            reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DIE             reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    TRUE            reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FALSE           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    WHILE           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DO              reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOR             reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOREACH         reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    BREAK           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RETURN          reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    PLUS            reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ID              reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    IF              reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RKEY            reduce using rule 136 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY .)


state 284

    (138) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 296


state 285

    (183) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 183 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 286

    (157) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 157 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 157 (static_scalar -> PLUS static_scalar .)


state 287

    (158) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 158 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 158 (static_scalar -> MINUS static_scalar .)


state 288

    (147) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 262
    MINUS           shift and go to state 263
    NUMBER_REAL     shift and go to state 264
    NUMBER_INTEGER  shift and go to state 265
    CONSTANT_ENCAPSED_STRING shift and go to state 266

    static_scalar                  shift and go to state 297
    common_scalar                  shift and go to state 261

state 289

    (146) parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 146 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 146 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)


state 290

    (132) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    MINUS           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    EXIT            reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DIE             reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    TRUE            reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FALSE           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    WHILE           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DO              reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FOR             reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    FOREACH         reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    BREAK           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    RETURN          reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    PLUS            reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    ID              reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    IF              reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)
    RKEY            reduce using rule 132 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY .)


state 291

    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 298


state 292

    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY . RKEY
    (135) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (170) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (171) inner_statement_MUL -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (131) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY RKEY
    (132) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY
    (133) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY
    (134) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (135) function_declaration_statement -> . FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (136) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY
    (137) function_declaration_statement -> . FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY
    (138) function_declaration_statement -> . FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 299
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement_MUL            shift and go to state 300
    inner_statement                shift and go to state 257
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 293

    (37) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 37 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 294

    (49) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 49 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)


state 295

    (50) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 301


state 296

    (138) function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 138 (function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 297

    (147) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 147 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 147 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)


state 298

    (134) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 134 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY .)


state 299

    (133) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .

    FUNCTION        reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    GLOBAL          reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    MINUS           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    INCREMENT       reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DECREMENT       reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    LPAREN          reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXIT            reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DIE             reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_REAL     reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    TRUE            reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FALSE           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    WHILE           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DO              reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOR             reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    FOREACH         reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    BREAK           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    CONTINUE        reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RETURN          reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    EXC_DOT         reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    PLUS            reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    ID              reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    IF              reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    DOLAR           reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    VARIABLE        reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    END_PROGRAM     reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)
    RKEY            reduce using rule 133 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY .)


state 300

    (135) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 302


state 301

    (50) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN . statement_BLOCK_OPT
    (176) statement_BLOCK_OPT -> . statement
    (177) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (178) statement_BLOCK_OPT -> . LKEY RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . do_statement
    (9) statement -> . for_statement
    (10) statement -> . foreach_statement
    (11) statement -> . break_statement
    (12) statement -> . continue_statement
    (13) statement -> . return_statement
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (15) statement -> . GLOBAL global_var SEMICOLON
    (94) expr -> . MINUS expr
    (95) expr -> . INCREMENT variable
    (96) expr -> . variable INCREMENT
    (97) expr -> . DECREMENT variable
    (98) expr -> . variable DECREMENT
    (99) expr -> . variable assign_operator expr
    (100) expr -> . variable assign_operator AMPERSAND expr
    (101) expr -> . variable
    (102) expr -> . LPAREN expr RPAREN
    (103) expr -> . unary_operator expr
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . LPAREN type_cast_operator RPAREN expr
    (108) expr -> . EXIT expr_EXIT
    (109) expr -> . DIE expr_EXIT
    (110) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (111) expr -> . ARRAY_TYPE LPAREN RPAREN
    (112) expr -> . function_call
    (113) expr -> . NUMBER_REAL
    (114) expr -> . NUMBER_INTEGER
    (115) expr -> . CONSTANT_ENCAPSED_STRING
    (116) expr -> . TRUE
    (117) expr -> . FALSE
    (16) if_statement -> . statement_if if_statement_complement
    (17) if_statement -> . statement_if
    (21) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (22) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (29) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (49) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (50) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (23) break_statement -> . BREAK expr SEMICOLON
    (24) break_statement -> . BREAK SEMICOLON
    (25) continue_statement -> . CONTINUE expr SEMICOLON
    (26) continue_statement -> . CONTINUE SEMICOLON
    (27) return_statement -> . RETURN expr SEMICOLON
    (28) return_statement -> . RETURN SEMICOLON
    (122) variable -> . base_variable
    (61) unary_operator -> . EXC_DOT
    (62) unary_operator -> . PLUS
    (63) unary_operator -> . MINUS
    (53) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (54) function_call -> . ID LPAREN RPAREN
    (46) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (123) base_variable -> . reference_variable
    (124) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (125) reference_variable -> . compound_variable reference_variable_SELECTOR
    (126) reference_variable -> . compound_variable
    (187) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (188) simple_indirect_reference_DOLAR -> . DOLAR
    (127) compound_variable -> . VARIABLE
    (128) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 117
    GLOBAL          shift and go to state 20
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    WHILE           shift and go to state 36
    DO              shift and go to state 37
    FOR             shift and go to state 38
    FOREACH         shift and go to state 39
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 41
    RETURN          shift and go to state 42
    EXC_DOT         shift and go to state 44
    PLUS            shift and go to state 45
    ID              shift and go to state 9
    IF              shift and go to state 46
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 11
    statement_BLOCK_OPT            shift and go to state 303
    statement                      shift and go to state 116
    if_statement                   shift and go to state 12
    while_statement                shift and go to state 13
    do_statement                   shift and go to state 14
    for_statement                  shift and go to state 15
    foreach_statement              shift and go to state 16
    break_statement                shift and go to state 17
    continue_statement             shift and go to state 18
    return_statement               shift and go to state 19
    variable                       shift and go to state 23
    unary_operator                 shift and go to state 25
    function_call                  shift and go to state 29
    statement_if                   shift and go to state 35
    base_variable                  shift and go to state 43
    reference_variable             shift and go to state 47
    simple_indirect_reference_DOLAR shift and go to state 48
    compound_variable              shift and go to state 49

state 302

    (135) function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 135 (function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 303

    (50) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 50 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 35 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 35 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 50 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 102 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 102 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 109 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 132 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 145 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 145 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 145 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 145 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 145 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 145 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 145 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 145 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 145 resolved as shift
WARNING: shift/reduce conflict for AND in state 145 resolved as shift
WARNING: shift/reduce conflict for OR in state 145 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 145 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 145 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 145 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 145 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 145 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 146 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 146 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 146 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 146 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 146 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 146 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 146 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 146 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 146 resolved as shift
WARNING: shift/reduce conflict for AND in state 146 resolved as shift
WARNING: shift/reduce conflict for OR in state 146 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 146 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 146 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 146 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 146 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 146 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 152 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 152 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 152 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 152 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 152 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 152 resolved as shift
WARNING: shift/reduce conflict for AND in state 152 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 152 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 152 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 202 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 202 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 202 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 202 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 202 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 202 resolved as shift
WARNING: shift/reduce conflict for AND in state 202 resolved as shift
WARNING: shift/reduce conflict for OR in state 202 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 202 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 202 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 202 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 202 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 202 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 207 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 207 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 207 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 207 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 207 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 207 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 207 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 207 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 207 resolved as shift
WARNING: shift/reduce conflict for AND in state 207 resolved as shift
WARNING: shift/reduce conflict for OR in state 207 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 207 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 207 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 207 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 207 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 207 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 239 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 239 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 239 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 239 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 239 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 239 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 239 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 239 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 239 resolved as shift
WARNING: shift/reduce conflict for AND in state 239 resolved as shift
WARNING: shift/reduce conflict for OR in state 239 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 239 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 239 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 239 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 239 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 239 resolved as shift

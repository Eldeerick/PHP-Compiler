
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightADD_ASSIGNSUB_ASSIGNMOD_ASSIGNTIMES_ASSIGNDIVIDE_ASSIGNCONCAT_ASSIGNASSIGNleftINTE_DOTDDOTleftANDORleftEQUALSNOT_EQUALLESS_THANLESS_EQUALGREAT_THANGREAT_EQUALleftPLUSMINUSleftTIMESDIVIDEPERCENTrightEXC_DOTrightINCREMENTDECREMENTRPARENrightUMINUSADD_ASSIGN AMPERSAND AND ARRAY_TYPE AS ASSIGN ATTR_ASSOC BEGIN_PROGRAM BOOL_TYPE BREAK COLON COMMENT_MULTI COMMENT_SINGLE CONCAT_ASSIGN CONSTANT_ENCAPSED_STRING CONTINUE DDOT DECREMENT DIE DIVIDE DIVIDE_ASSIGN DO DOLAR ELSE ELSEIF END_PROGRAM EQUALS EXC_DOT EXIT FALSE FLOAT_TYPE FOR FOREACH FUNCTION GLOBAL GREAT_EQUAL GREAT_THAN ID IDENTATION IF INCREMENT INTE_DOT INT_TYPE LBRACKET LESS_EQUAL LESS_THAN LKEY LPAREN MINUS MOD_ASSIGN NOT_EQUAL NUMBER_INTEGER NUMBER_REAL OR PERCENT PLUS RBRACKET RETURN RKEY RPAREN SEMICOLON STRING_TYPE SUB_ASSIGN TIMES TIMES_ASSIGN TRUE VARIABLE WHILE\n  main : BEGIN_PROGRAM main_program END_PROGRAM \n  | BEGIN_PROGRAM END_PROGRAM \n  \n  main_program : inner_statement main_program\n    | inner_statement\n  \n  inner_statement : function_declaration_statement\n    | statement\n  \n  inner_statement_MUL : inner_statement inner_statement_MUL\n    | inner_statement\n  \n  expr : expr PLUS expr\n    | expr MINUS expr \n    | MINUS expr %prec UMINUS\n    | expr DIVIDE expr\n    | expr PERCENT expr\n    | expr TIMES expr   \n    | expr EQUALS expr\n    | expr NOT_EQUAL expr\n    | expr GREAT_THAN expr \n    | expr GREAT_EQUAL expr\n    | expr LESS_THAN expr\n    | expr LESS_EQUAL expr\n    | expr AND expr\n    | expr OR expr\n    | EXC_DOT expr\n    | INCREMENT variable\n    | variable INCREMENT\n    | DECREMENT variable\n    | variable DECREMENT\n    | variable\n    | LPAREN expr RPAREN\n    | ARRAY_TYPE array_declaration\n    | LPAREN typecast_operator RPAREN expr \n    | function_call\n    | expr INTE_DOT expr DDOT expr\n    | variable ADD_ASSIGN expr\n    | variable SUB_ASSIGN expr\n    | variable MOD_ASSIGN expr\n    | variable TIMES_ASSIGN expr\n    | variable DIVIDE_ASSIGN expr\n    | variable CONCAT_ASSIGN expr\n    | variable ASSIGN expr\n    | NUMBER_INTEGER\n    | NUMBER_REAL\n    | CONSTANT_ENCAPSED_STRING\n    | TRUE\n    | FALSE\n  \n  typecast_operator : INT_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE\n    | STRING_TYPE\n    | BOOL_TYPE\n  \n  exit_statement : EXIT exit_expr\n    | EXIT\n  \n  die_statement : DIE exit_expr\n    | DIE\n  \n  exit_expr : LPAREN expr RPAREN\n    | LPAREN RPAREN\n  \n  array_declaration : LPAREN array_pair_list RPAREN\n    | LPAREN RPAREN\n  \n  statement : expr SEMICOLON \n    | while_statement\n    | if_statement\n    | do_statement\n    | for_statement\n    | foreach_statement\n    | break_statement\n    | continue_statement \n    | return_statement\n    | exit_statement SEMICOLON\n    | die_statement SEMICOLON\n    | global_statement SEMICOLON\n  \n  if_statement : statement_if\n  | statement_if statement_else\n  | statement_if statement_elseif\n  | statement_if statement_elseif statement_else\n  \n  statement_if : IF expr_parentheses statement_block_optional statement_if\n    | IF expr_parentheses statement_block_optional\n  \n  statement_elseif : ELSEIF expr_parentheses statement_block_optional statement_elseif\n   | ELSEIF expr_parentheses statement_block_optional\n  \n  statement_else : ELSE statement_block_optional\n  \n  global_statement : GLOBAL global_var statement_COLON_GLOBAL \n    | GLOBAL global_var \n  \n  while_statement : WHILE expr_parentheses statement_block_optional\n  \n  do_statement : DO statement_block_optional WHILE expr_parentheses SEMICOLON\n  \n  break_statement : BREAK expr SEMICOLON\n    | BREAK SEMICOLON\n  \n  continue_statement : CONTINUE expr SEMICOLON\n    | CONTINUE SEMICOLON\n  \n  return_statement : RETURN expr SEMICOLON \n    | RETURN SEMICOLON \n  \n  for_statement : FOR LPAREN for_parameters RPAREN statement_block_optional\n  \n  for_parameters : SEMICOLON SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT\n  | SEMICOLON for_expr_OPT SEMICOLON\n  | SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  | SEMICOLON SEMICOLON for_expr_OPT\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  \n  global_var : VARIABLE\n  \n  statement_COLON_GLOBAL : COLON global_var statement_COLON_GLOBAL\n    | COLON global_var\n  \n  ampersand_variable : AMPERSAND VARIABLE\n    | VARIABLE\n  \n  expr_parentheses : LPAREN expr RPAREN\n  \n  foreach_statement : FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional\n  | FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional\n  \n  for_expr_OPT : expr for_expr_COLON_EXPR\n  | expr\n  \n  for_expr_COLON_EXPR : COLON expr for_expr_COLON_EXPR\n    | COLON expr\n  \n  function_call : ID LPAREN function_call_parameter_list RPAREN\n    | ID LPAREN RPAREN\n  \n  function_call_parameter_list : function_call_parameter fc_parameter_list_COLON_PARAMETER\n    |  function_call_parameter\n  \n  fc_parameter_list_COLON_PARAMETER : COLON function_call_parameter fc_parameter_list_COLON_PARAMETER\n    | COLON function_call_parameter\n  \n  function_call_parameter : expr\n    | AMPERSAND VARIABLE\n  \n  variable : VARIABLE variable_array_selector\n    | VARIABLE\n  \n  selector : LBRACKET expr RBRACKET \n    | LBRACKET RBRACKET\n  \n  function_declaration_statement : FUNCTION fds_id fds_parameter fds_statements\n  \n  fds_statements : LKEY inner_statement_MUL RKEY\n    | LKEY RKEY\n  \n  fds_id : AMPERSAND ID\n    | ID\n  \n  fds_parameter : LPAREN parameter_list RPAREN\n    | LPAREN RPAREN\n  \n  parameter_list : parameter parameter_list_colon_parameter \n    | parameter\n   \n  parameter : VARIABLE \n    | parameter_prefix VARIABLE\n    | VARIABLE ASSIGN expr\n    | parameter_prefix VARIABLE ASSIGN expr\n  \n  parameter_prefix : parameter_type AMPERSAND\n    | AMPERSAND\n    | parameter_type\n  \n  parameter_type : INT_TYPE\n    | STRING_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE\n    | BOOL_TYPE\n  \n  array_pair_list : array_pair array_pair_list_ARR_PAIR \n    | array_pair\n   \n  array_pair : expr\n    | AMPERSAND variable\n    | expr ATTR_ASSOC expr\n    | expr ATTR_ASSOC AMPERSAND variable\n  \n  statement_MUL : statement statement_MUL\n    | statement\n  \n  statement_block_optional : statement \n    | LKEY statement_MUL RKEY \n    | LKEY RKEY\n  \n  parameter_list_colon_parameter : COLON parameter parameter_list_colon_parameter\n    | COLON parameter\n  \n    variable_array_selector : selector variable_array_selector\n    | selector\n  \n  array_pair_list_ARR_PAIR : COLON array_pair array_pair_list_ARR_PAIR\n    | COLON array_pair\n  '
    
_lr_action_items = {'BEGIN_PROGRAM':([0,],[2,]),'$end':([1,4,48,],[0,-2,-1,]),'END_PROGRAM':([2,3,5,6,7,10,11,12,13,14,15,16,17,35,49,53,68,69,70,95,96,100,105,107,109,151,153,154,158,165,166,167,180,181,203,205,221,223,235,236,237,248,266,269,],[4,48,-4,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,-3,-59,-68,-69,-70,-72,-73,-152,-85,-87,-89,-82,-74,-79,-154,-84,-86,-88,-76,-123,-78,-153,-75,-125,-77,-83,-90,-124,-105,-106,]),'FUNCTION':([2,5,6,7,10,11,12,13,14,15,16,17,35,53,68,69,70,95,96,100,105,107,109,151,153,154,158,165,166,167,180,181,182,203,205,221,223,224,235,236,237,248,266,269,],[8,8,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,-59,-68,-69,-70,-72,-73,-152,-85,-87,-89,-82,-74,-79,-154,-84,-86,-88,-76,-123,8,-78,-153,-75,-125,8,-77,-83,-90,-124,-105,-106,]),'MINUS':([2,5,6,7,9,10,11,12,13,14,15,16,17,21,22,24,26,28,29,30,31,32,33,35,36,39,40,41,45,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,92,93,94,95,96,97,100,101,102,103,104,105,106,107,108,109,111,115,116,117,118,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,149,151,152,153,154,155,158,159,161,163,164,165,166,167,168,172,173,174,176,178,180,181,182,195,196,197,199,200,202,203,205,207,208,210,212,216,217,219,221,223,224,228,231,233,235,236,237,239,241,242,248,251,252,256,259,264,266,268,269,],[21,21,-5,-6,55,-60,-61,-62,-63,-64,-65,-66,-67,21,21,-28,21,-32,-41,-42,-43,-44,-45,-71,21,21,21,21,-120,-59,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-68,-69,-70,-11,-23,-24,-25,-27,21,21,21,21,21,21,21,-26,55,-30,21,21,21,-72,-73,21,-152,21,21,21,55,-85,55,-87,55,-89,21,-119,-158,21,21,21,-9,-10,-12,-13,-14,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-29,21,-58,55,-82,55,-74,-79,21,-154,21,21,55,55,-84,-86,-88,55,-157,55,-122,-112,55,-76,-123,21,21,-31,-57,21,21,-104,-78,-153,21,21,21,21,-121,-111,21,-75,-125,21,21,55,55,-77,-83,-90,21,21,55,-124,55,21,21,21,55,-105,21,-106,]),'EXC_DOT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,35,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,145,151,153,154,155,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[22,22,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,22,22,22,-71,22,22,22,22,-59,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-68,-69,-70,22,22,22,22,22,22,22,22,22,22,-72,-73,22,-152,22,22,22,-85,-87,-89,22,22,22,22,22,-82,-74,-79,22,-154,22,22,-84,-86,-88,-76,-123,22,22,22,22,-104,-78,-153,22,22,22,22,22,-75,-125,22,22,-77,-83,-90,22,22,-124,22,22,22,-105,22,-106,]),'INCREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,24,26,35,36,39,40,41,45,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,115,116,117,118,119,145,151,153,154,155,158,159,161,165,166,167,172,174,180,181,182,195,199,200,202,203,205,207,208,210,212,216,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[23,23,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,23,23,74,23,-71,23,23,23,23,-120,-59,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-68,-69,-70,23,23,23,23,23,23,23,23,23,23,-72,-73,23,-152,23,23,23,-85,-87,-89,23,-119,-158,23,23,23,23,-82,-74,-79,23,-154,23,23,-84,-86,-88,-157,-122,-76,-123,23,23,23,23,-104,-78,-153,23,23,23,23,-121,23,-75,-125,23,23,-77,-83,-90,23,23,-124,23,23,23,-105,23,-106,]),'DECREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,24,26,35,36,39,40,41,45,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,115,116,117,118,119,145,151,153,154,155,158,159,161,165,166,167,172,174,180,181,182,195,199,200,202,203,205,207,208,210,212,216,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[25,25,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,25,25,75,25,-71,25,25,25,25,-120,-59,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-68,-69,-70,25,25,25,25,25,25,25,25,25,25,-72,-73,25,-152,25,25,25,-85,-87,-89,25,-119,-158,25,25,25,25,-82,-74,-79,25,-154,25,25,-84,-86,-88,-157,-122,-76,-123,25,25,25,25,-104,-78,-153,25,25,25,25,-121,25,-75,-125,25,25,-77,-83,-90,25,25,-124,25,25,25,-105,25,-106,]),'LPAREN':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,27,34,35,36,37,38,39,40,41,42,43,46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,86,92,93,94,95,96,97,98,100,101,102,103,105,107,109,111,117,118,119,122,145,151,153,154,155,156,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[26,26,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,26,26,26,92,94,-71,26,102,103,26,26,26,111,111,118,94,121,-127,-59,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-68,-69,-70,26,26,26,26,26,26,26,92,26,26,26,-72,-73,26,94,-152,26,26,26,-85,-87,-89,26,26,26,26,-126,26,-82,-74,-79,26,94,-154,26,26,-84,-86,-88,-76,-123,26,26,26,26,-104,-78,-153,26,26,26,26,26,-75,-125,26,26,-77,-83,-90,26,26,-124,26,26,26,-105,26,-106,]),'ARRAY_TYPE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,35,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,121,145,151,153,154,155,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,227,228,235,236,237,239,241,248,252,256,259,266,268,269,],[27,27,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,27,27,86,-71,27,27,27,27,-59,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-68,-69,-70,27,27,27,27,27,27,27,27,27,27,-72,-73,27,-152,27,27,27,-85,-87,-89,27,27,27,27,193,27,-82,-74,-79,27,-154,27,27,-84,-86,-88,-76,-123,27,27,27,27,-104,-78,-153,27,27,27,27,27,-75,-125,27,193,27,-77,-83,-90,27,27,-124,27,27,27,-105,27,-106,]),'NUMBER_INTEGER':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,35,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,145,151,153,154,155,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[29,29,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,29,29,29,-71,29,29,29,29,-59,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-68,-69,-70,29,29,29,29,29,29,29,29,29,29,-72,-73,29,-152,29,29,29,-85,-87,-89,29,29,29,29,29,-82,-74,-79,29,-154,29,29,-84,-86,-88,-76,-123,29,29,29,29,-104,-78,-153,29,29,29,29,29,-75,-125,29,29,-77,-83,-90,29,29,-124,29,29,29,-105,29,-106,]),'NUMBER_REAL':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,35,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,145,151,153,154,155,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[30,30,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,30,30,30,-71,30,30,30,30,-59,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-68,-69,-70,30,30,30,30,30,30,30,30,30,30,-72,-73,30,-152,30,30,30,-85,-87,-89,30,30,30,30,30,-82,-74,-79,30,-154,30,30,-84,-86,-88,-76,-123,30,30,30,30,-104,-78,-153,30,30,30,30,30,-75,-125,30,30,-77,-83,-90,30,30,-124,30,30,30,-105,30,-106,]),'CONSTANT_ENCAPSED_STRING':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,35,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,145,151,153,154,155,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[31,31,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,31,31,31,-71,31,31,31,31,-59,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-68,-69,-70,31,31,31,31,31,31,31,31,31,31,-72,-73,31,-152,31,31,31,-85,-87,-89,31,31,31,31,31,-82,-74,-79,31,-154,31,31,-84,-86,-88,-76,-123,31,31,31,31,-104,-78,-153,31,31,31,31,31,-75,-125,31,31,-77,-83,-90,31,31,-124,31,31,31,-105,31,-106,]),'TRUE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,35,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,145,151,153,154,155,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[32,32,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,32,32,32,-71,32,32,32,32,-59,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-68,-69,-70,32,32,32,32,32,32,32,32,32,32,-72,-73,32,-152,32,32,32,-85,-87,-89,32,32,32,32,32,-82,-74,-79,32,-154,32,32,-84,-86,-88,-76,-123,32,32,32,32,-104,-78,-153,32,32,32,32,32,-75,-125,32,32,-77,-83,-90,32,32,-124,32,32,32,-105,32,-106,]),'FALSE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,35,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,145,151,153,154,155,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[33,33,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,33,33,33,-71,33,33,33,33,-59,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-68,-69,-70,33,33,33,33,33,33,33,33,33,33,-72,-73,33,-152,33,33,33,-85,-87,-89,33,33,33,33,33,-82,-74,-79,33,-154,33,33,-84,-86,-88,-76,-123,33,33,33,33,-104,-78,-153,33,33,33,33,33,-75,-125,33,33,-77,-83,-90,33,33,-124,33,33,33,-105,33,-106,]),'WHILE':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,99,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[34,34,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,34,-59,-68,-69,-70,34,-72,-73,34,156,-152,34,-85,-87,-89,34,-82,-74,-79,34,-154,34,-84,-86,-88,-76,-123,34,-104,-78,-153,34,-75,-125,34,-77,-83,-90,-124,34,-105,34,-106,]),'DO':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[36,36,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,36,-59,-68,-69,-70,36,-72,-73,36,-152,36,-85,-87,-89,36,-82,-74,-79,36,-154,36,-84,-86,-88,-76,-123,36,-104,-78,-153,36,-75,-125,36,-77,-83,-90,-124,36,-105,36,-106,]),'FOR':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[37,37,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,37,-59,-68,-69,-70,37,-72,-73,37,-152,37,-85,-87,-89,37,-82,-74,-79,37,-154,37,-84,-86,-88,-76,-123,37,-104,-78,-153,37,-75,-125,37,-77,-83,-90,-124,37,-105,37,-106,]),'FOREACH':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[38,38,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,38,-59,-68,-69,-70,38,-72,-73,38,-152,38,-85,-87,-89,38,-82,-74,-79,38,-154,38,-84,-86,-88,-76,-123,38,-104,-78,-153,38,-75,-125,38,-77,-83,-90,-124,38,-105,38,-106,]),'BREAK':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[39,39,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,39,-59,-68,-69,-70,39,-72,-73,39,-152,39,-85,-87,-89,39,-82,-74,-79,39,-154,39,-84,-86,-88,-76,-123,39,-104,-78,-153,39,-75,-125,39,-77,-83,-90,-124,39,-105,39,-106,]),'CONTINUE':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[40,40,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,40,-59,-68,-69,-70,40,-72,-73,40,-152,40,-85,-87,-89,40,-82,-74,-79,40,-154,40,-84,-86,-88,-76,-123,40,-104,-78,-153,40,-75,-125,40,-77,-83,-90,-124,40,-105,40,-106,]),'RETURN':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[41,41,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,41,-59,-68,-69,-70,41,-72,-73,41,-152,41,-85,-87,-89,41,-82,-74,-79,41,-154,41,-84,-86,-88,-76,-123,41,-104,-78,-153,41,-75,-125,41,-77,-83,-90,-124,41,-105,41,-106,]),'EXIT':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[42,42,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,42,-59,-68,-69,-70,42,-72,-73,42,-152,42,-85,-87,-89,42,-82,-74,-79,42,-154,42,-84,-86,-88,-76,-123,42,-104,-78,-153,42,-75,-125,42,-77,-83,-90,-124,42,-105,42,-106,]),'DIE':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[43,43,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,43,-59,-68,-69,-70,43,-72,-73,43,-152,43,-85,-87,-89,43,-82,-74,-79,43,-154,43,-84,-86,-88,-76,-123,43,-104,-78,-153,43,-75,-125,43,-77,-83,-90,-124,43,-105,43,-106,]),'GLOBAL':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[44,44,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,44,-59,-68,-69,-70,44,-72,-73,44,-152,44,-85,-87,-89,44,-82,-74,-79,44,-154,44,-84,-86,-88,-76,-123,44,-104,-78,-153,44,-75,-125,44,-77,-83,-90,-124,44,-105,44,-106,]),'VARIABLE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,23,25,26,35,36,39,40,41,44,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,121,145,150,151,153,154,155,158,159,161,165,166,167,171,179,180,181,182,187,188,189,190,191,192,193,194,195,199,200,202,203,205,207,208,210,212,213,219,221,223,224,227,228,230,234,235,236,237,239,241,244,248,252,256,259,260,266,268,269,],[45,45,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,45,45,45,45,45,-71,45,45,45,45,114,-59,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-68,-69,-70,45,45,45,45,45,45,45,45,45,45,-72,-73,45,-152,45,45,45,-85,-87,-89,45,45,45,45,186,45,45,-82,-74,-79,45,-154,45,45,-84,-86,-88,114,220,-76,-123,45,229,-138,-137,-139,-140,-141,-142,-143,45,45,45,-104,-78,-153,45,45,45,45,245,45,-75,-125,45,186,45,-136,45,-77,-83,-90,45,45,261,-124,45,45,45,245,-105,45,-106,]),'ID':([2,5,6,7,8,10,11,12,13,14,15,16,17,21,22,26,35,36,39,40,41,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,82,92,93,94,95,96,97,100,101,102,103,105,107,109,111,117,118,119,145,151,153,154,155,158,159,161,165,166,167,180,181,182,195,199,200,202,203,205,207,208,210,212,219,221,223,224,228,235,236,237,239,241,248,252,256,259,266,268,269,],[46,46,-5,-6,52,-60,-61,-62,-63,-64,-65,-66,-67,46,46,46,-71,46,46,46,46,122,-59,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-68,-69,-70,46,46,46,46,46,46,46,46,46,46,-72,-73,46,-152,46,46,46,-85,-87,-89,46,46,46,46,46,-82,-74,-79,46,-154,46,46,-84,-86,-88,-76,-123,46,46,46,46,-104,-78,-153,46,46,46,46,46,-75,-125,46,46,-77,-83,-90,46,46,-124,46,46,46,-105,46,-106,]),'IF':([2,5,6,7,10,11,12,13,14,15,16,17,35,36,53,68,69,70,93,95,96,97,100,101,105,107,109,119,151,153,154,155,158,159,165,166,167,180,181,182,202,203,205,207,221,223,224,235,236,237,248,259,266,268,269,],[47,47,-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,47,-59,-68,-69,-70,47,-72,-73,47,-152,47,-85,-87,-89,47,-82,-74,-79,47,-154,47,-84,-86,-88,47,-123,47,-104,-78,-153,47,-75,-125,47,-77,-83,-90,-124,47,-105,47,-106,]),'RKEY':([6,7,10,11,12,13,14,15,16,17,35,53,68,69,70,95,96,100,101,105,107,109,151,153,154,157,158,159,165,166,167,180,181,182,203,205,206,221,222,223,224,235,236,237,248,249,266,269,],[-5,-6,-60,-61,-62,-63,-64,-65,-66,-67,-71,-59,-68,-69,-70,-72,-73,-152,158,-85,-87,-89,-82,-74,-79,205,-154,-151,-84,-86,-88,-76,-123,223,-78,-153,-150,-75,248,-125,-8,-77,-83,-90,-124,-7,-105,-106,]),'AMPERSAND':([8,92,118,121,188,190,191,192,193,194,199,200,213,219,227,260,],[51,150,179,189,230,-139,-140,-141,-142,-143,150,234,244,179,189,244,]),'SEMICOLON':([9,18,19,20,24,28,29,30,31,32,33,39,40,41,42,43,45,71,72,73,74,75,83,91,102,104,106,108,110,112,113,114,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,147,161,162,163,169,170,172,174,176,196,197,202,204,209,210,211,214,215,216,217,231,240,242,246,258,],[53,68,69,70,-28,-32,-41,-42,-43,-44,-45,105,107,109,-52,-54,-120,-11,-23,-24,-25,-27,-26,-30,161,165,166,167,-51,-53,-81,-99,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-40,-29,-58,208,210,-108,-56,-80,-157,-122,-112,-31,-57,-104,236,239,241,-107,-55,-101,-121,-111,-33,256,-110,-100,-109,]),'PLUS':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[54,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,54,-30,54,54,54,-119,-158,-9,-10,-12,-13,-14,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-29,-58,54,54,54,54,54,-157,54,-122,-112,54,-31,-57,-121,-111,54,54,54,54,54,]),'DIVIDE':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[56,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,56,-30,56,56,56,-119,-158,56,56,-12,-13,-14,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-29,-58,56,56,56,56,56,-157,56,-122,-112,56,-31,-57,-121,-111,56,56,56,56,56,]),'PERCENT':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[57,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,57,-30,57,57,57,-119,-158,57,57,-12,-13,-14,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-29,-58,57,57,57,57,57,-157,57,-122,-112,57,-31,-57,-121,-111,57,57,57,57,57,]),'TIMES':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[58,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,58,-30,58,58,58,-119,-158,58,58,-12,-13,-14,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-29,-58,58,58,58,58,58,-157,58,-122,-112,58,-31,-57,-121,-111,58,58,58,58,58,]),'EQUALS':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[59,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,59,-30,59,59,59,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,59,59,59,59,59,59,59,59,59,59,-29,-58,59,59,59,59,59,-157,59,-122,-112,59,-31,-57,-121,-111,59,59,59,59,59,]),'NOT_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[60,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,60,-30,60,60,60,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,60,60,60,60,60,60,60,60,60,60,-29,-58,60,60,60,60,60,-157,60,-122,-112,60,-31,-57,-121,-111,60,60,60,60,60,]),'GREAT_THAN':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[61,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,61,-30,61,61,61,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,61,61,61,61,61,61,61,61,61,61,-29,-58,61,61,61,61,61,-157,61,-122,-112,61,-31,-57,-121,-111,61,61,61,61,61,]),'GREAT_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[62,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,62,-30,62,62,62,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,62,62,62,62,62,62,62,62,62,62,-29,-58,62,62,62,62,62,-157,62,-122,-112,62,-31,-57,-121,-111,62,62,62,62,62,]),'LESS_THAN':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[63,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,63,-30,63,63,63,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,63,63,63,63,63,63,63,63,63,63,-29,-58,63,63,63,63,63,-157,63,-122,-112,63,-31,-57,-121,-111,63,63,63,63,63,]),'LESS_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[64,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,64,-30,64,64,64,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,64,64,64,64,64,64,64,64,64,64,-29,-58,64,64,64,64,64,-157,64,-122,-112,64,-31,-57,-121,-111,64,64,64,64,64,]),'AND':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[65,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,65,-30,65,65,65,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,65,65,65,65,65,65,65,65,-29,-58,65,65,65,65,65,-157,65,-122,-112,65,-31,-57,-121,-111,65,65,65,65,65,]),'OR':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[66,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,66,-30,66,66,66,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,66,66,66,66,66,66,66,66,-29,-58,66,66,66,66,66,-157,66,-122,-112,66,-31,-57,-121,-111,66,66,66,66,66,]),'INTE_DOT':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,91,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,149,152,163,164,168,172,173,174,176,178,196,197,216,217,231,233,242,251,264,],[67,-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,67,-30,67,67,67,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,67,67,67,67,67,67,67,67,-29,-58,67,67,67,67,67,-157,67,-122,-112,67,-31,-57,-121,-111,-33,67,67,67,67,]),'ELSE':([10,11,12,13,14,15,16,17,35,53,68,69,70,95,96,100,105,107,109,151,153,154,158,165,166,167,180,203,205,221,235,236,237,266,269,],[-60,-61,-62,-63,-64,-65,-66,-67,97,-59,-68,-69,-70,-72,97,-152,-85,-87,-89,-82,-74,-79,-154,-84,-86,-88,-76,-78,-153,-75,-77,-83,-90,-105,-106,]),'ELSEIF':([10,11,12,13,14,15,16,17,35,53,68,69,70,95,96,100,105,107,109,151,153,154,158,165,166,167,180,203,205,221,235,236,237,266,269,],[-60,-61,-62,-63,-64,-65,-66,-67,98,-59,-68,-69,-70,-72,-73,-152,-85,-87,-89,-82,-74,-79,-154,-84,-86,-88,-76,98,-153,-75,-77,-83,-90,-105,-106,]),'RPAREN':([24,28,29,30,31,32,33,45,71,72,73,74,75,83,84,85,86,87,88,89,90,91,92,111,115,116,118,121,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,146,147,148,149,152,160,163,168,172,174,175,176,177,178,183,185,186,196,197,198,201,208,211,216,217,218,220,226,229,231,232,233,238,239,241,242,243,245,247,250,251,253,254,255,256,257,258,261,262,263,264,265,267,],[-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,144,145,-48,-46,-47,-49,-50,-30,147,169,-119,-158,176,184,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-40,-29,197,-58,-145,-146,202,207,-108,214,-157,-122,217,-112,-114,-117,225,-131,-132,-31,-57,-144,-147,-91,-107,-121,-111,-113,-118,-130,-133,-33,-160,-148,-97,-95,-92,-110,259,-103,-116,-156,-134,-159,-149,-96,-93,-94,-109,-102,-115,-155,-135,-98,268,]),'DDOT':([24,28,29,30,31,32,33,45,71,72,73,74,75,83,91,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,172,174,176,196,197,216,217,231,],[-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,-30,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,195,-34,-35,-36,-37,-38,-39,-40,-29,-58,-157,-122,-112,-31,-57,-121,-111,-33,]),'ATTR_ASSOC':([24,28,29,30,31,32,33,45,71,72,73,74,75,83,91,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,147,149,172,174,176,196,197,216,217,231,243,245,261,],[-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,-30,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-40,-29,-58,200,-157,-122,-112,-31,-57,-121,-111,-33,260,-103,-102,]),'COLON':([24,28,29,30,31,32,33,45,71,72,73,74,75,83,91,113,114,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,147,148,149,163,172,174,176,177,178,185,186,196,197,201,215,216,217,220,229,231,232,233,242,247,250,251,254,264,],[-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,-30,171,-99,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-40,-29,-58,199,-146,212,-157,-122,-112,219,-117,227,-132,-31,-57,-147,171,-121,-111,-118,-133,-33,199,-148,212,219,227,-134,-149,-135,]),'AS':([24,28,29,30,31,32,33,45,71,72,73,74,75,83,91,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,147,164,172,174,176,196,197,216,217,231,],[-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,-30,-119,-158,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-40,-29,-58,213,-157,-122,-112,-31,-57,-121,-111,-33,]),'RBRACKET':([24,28,29,30,31,32,33,45,71,72,73,74,75,83,91,115,116,117,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,147,172,173,174,176,196,197,216,217,231,],[-28,-32,-41,-42,-43,-44,-45,-120,-11,-23,-24,-25,-27,-26,-30,-119,-158,174,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-40,-29,-58,-157,216,-122,-112,-31,-57,-121,-111,-33,]),'ADD_ASSIGN':([24,45,115,116,172,174,216,],[76,-120,-119,-158,-157,-122,-121,]),'SUB_ASSIGN':([24,45,115,116,172,174,216,],[77,-120,-119,-158,-157,-122,-121,]),'MOD_ASSIGN':([24,45,115,116,172,174,216,],[78,-120,-119,-158,-157,-122,-121,]),'TIMES_ASSIGN':([24,45,115,116,172,174,216,],[79,-120,-119,-158,-157,-122,-121,]),'DIVIDE_ASSIGN':([24,45,115,116,172,174,216,],[80,-120,-119,-158,-157,-122,-121,]),'CONCAT_ASSIGN':([24,45,115,116,172,174,216,],[81,-120,-119,-158,-157,-122,-121,]),'ASSIGN':([24,45,115,116,172,174,186,216,229,],[82,-120,-119,-158,-157,-122,228,-121,252,]),'INT_TYPE':([26,121,227,],[87,190,190,]),'FLOAT_TYPE':([26,121,227,],[88,192,192,]),'STRING_TYPE':([26,121,227,],[89,191,191,]),'BOOL_TYPE':([26,121,227,],[90,194,194,]),'LKEY':([36,93,97,119,120,155,184,202,207,225,259,268,],[101,101,101,101,182,101,-129,-104,101,-128,101,101,]),'LBRACKET':([45,116,174,216,],[117,117,-122,-121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'main_program':([2,5,],[3,49,]),'inner_statement':([2,5,182,224,],[5,5,224,224,]),'function_declaration_statement':([2,5,182,224,],[6,6,6,6,]),'statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[7,7,100,100,100,159,100,100,159,7,100,7,100,100,]),'expr':([2,5,21,22,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,82,92,93,94,97,101,102,103,111,117,118,119,145,155,159,161,182,195,199,200,207,208,210,212,219,224,228,239,241,252,256,259,268,],[9,9,71,72,84,9,104,106,108,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,149,9,152,9,9,163,164,168,173,178,9,196,9,9,163,9,231,149,233,9,163,163,242,178,9,251,163,163,264,163,9,9,]),'while_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'do_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'for_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'foreach_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'break_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'continue_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'return_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'exit_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'die_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'global_statement':([2,5,36,93,97,101,119,155,159,182,207,224,259,268,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'variable':([2,5,21,22,23,25,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,82,92,93,94,97,101,102,103,111,117,118,119,145,150,155,159,161,182,195,199,200,207,208,210,212,219,224,228,234,239,241,252,256,259,268,],[24,24,24,24,73,83,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,201,24,24,24,24,24,24,24,24,24,24,24,24,24,24,254,24,24,24,24,24,24,]),'function_call':([2,5,21,22,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,82,92,93,94,97,101,102,103,111,117,118,119,145,155,159,161,182,195,199,200,207,208,210,212,219,224,228,239,241,252,256,259,268,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'statement_if':([2,5,36,93,97,101,119,155,159,180,182,207,224,259,268,],[35,35,35,35,35,35,35,35,35,221,35,35,35,35,35,]),'fds_id':([8,],[50,]),'typecast_operator':([26,],[85,]),'array_declaration':([27,86,],[91,91,]),'expr_parentheses':([34,47,98,156,],[93,119,155,204,]),'statement_else':([35,96,],[95,153,]),'statement_elseif':([35,203,],[96,235,]),'statement_block_optional':([36,93,97,119,155,207,259,268,],[99,151,154,180,203,237,266,269,]),'exit_expr':([42,43,],[110,112,]),'global_var':([44,171,],[113,215,]),'variable_array_selector':([45,116,],[115,172,]),'selector':([45,116,],[116,116,]),'fds_parameter':([50,],[120,]),'array_pair_list':([92,],[146,]),'array_pair':([92,199,],[148,232,]),'statement_MUL':([101,159,],[157,206,]),'for_parameters':([102,],[160,]),'for_expr_OPT':([102,161,208,210,239,241,256,],[162,209,238,240,255,257,265,]),'statement_COLON_GLOBAL':([113,215,],[170,246,]),'function_call_parameter_list':([118,],[175,]),'function_call_parameter':([118,219,],[177,247,]),'fds_statements':([120,],[181,]),'parameter_list':([121,],[183,]),'parameter':([121,227,],[185,250,]),'parameter_prefix':([121,227,],[187,187,]),'parameter_type':([121,227,],[188,188,]),'array_pair_list_ARR_PAIR':([148,232,],[198,253,]),'for_expr_COLON_EXPR':([163,242,],[211,258,]),'fc_parameter_list_COLON_PARAMETER':([177,247,],[218,262,]),'inner_statement_MUL':([182,224,],[222,249,]),'parameter_list_colon_parameter':([185,250,],[226,263,]),'ampersand_variable':([213,260,],[243,267,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> BEGIN_PROGRAM main_program END_PROGRAM','main',3,'p_main','Parser.py',25),
  ('main -> BEGIN_PROGRAM END_PROGRAM','main',2,'p_main','Parser.py',26),
  ('main_program -> inner_statement main_program','main_program',2,'p_main_program','Parser.py',35),
  ('main_program -> inner_statement','main_program',1,'p_main_program','Parser.py',36),
  ('inner_statement -> function_declaration_statement','inner_statement',1,'p_inner_statement','Parser.py',45),
  ('inner_statement -> statement','inner_statement',1,'p_inner_statement','Parser.py',46),
  ('inner_statement_MUL -> inner_statement inner_statement_MUL','inner_statement_MUL',2,'p_inner_statement_MUL','Parser.py',55),
  ('inner_statement_MUL -> inner_statement','inner_statement_MUL',1,'p_inner_statement_MUL','Parser.py',56),
  ('expr -> expr PLUS expr','expr',3,'p_expr','Parser.py',65),
  ('expr -> expr MINUS expr','expr',3,'p_expr','Parser.py',66),
  ('expr -> MINUS expr','expr',2,'p_expr','Parser.py',67),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','Parser.py',68),
  ('expr -> expr PERCENT expr','expr',3,'p_expr','Parser.py',69),
  ('expr -> expr TIMES expr','expr',3,'p_expr','Parser.py',70),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','Parser.py',71),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr','Parser.py',72),
  ('expr -> expr GREAT_THAN expr','expr',3,'p_expr','Parser.py',73),
  ('expr -> expr GREAT_EQUAL expr','expr',3,'p_expr','Parser.py',74),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','Parser.py',75),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr','Parser.py',76),
  ('expr -> expr AND expr','expr',3,'p_expr','Parser.py',77),
  ('expr -> expr OR expr','expr',3,'p_expr','Parser.py',78),
  ('expr -> EXC_DOT expr','expr',2,'p_expr','Parser.py',79),
  ('expr -> INCREMENT variable','expr',2,'p_expr','Parser.py',80),
  ('expr -> variable INCREMENT','expr',2,'p_expr','Parser.py',81),
  ('expr -> DECREMENT variable','expr',2,'p_expr','Parser.py',82),
  ('expr -> variable DECREMENT','expr',2,'p_expr','Parser.py',83),
  ('expr -> variable','expr',1,'p_expr','Parser.py',84),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','Parser.py',85),
  ('expr -> ARRAY_TYPE array_declaration','expr',2,'p_expr','Parser.py',86),
  ('expr -> LPAREN typecast_operator RPAREN expr','expr',4,'p_expr','Parser.py',87),
  ('expr -> function_call','expr',1,'p_expr','Parser.py',88),
  ('expr -> expr INTE_DOT expr DDOT expr','expr',5,'p_expr','Parser.py',89),
  ('expr -> variable ADD_ASSIGN expr','expr',3,'p_expr','Parser.py',90),
  ('expr -> variable SUB_ASSIGN expr','expr',3,'p_expr','Parser.py',91),
  ('expr -> variable MOD_ASSIGN expr','expr',3,'p_expr','Parser.py',92),
  ('expr -> variable TIMES_ASSIGN expr','expr',3,'p_expr','Parser.py',93),
  ('expr -> variable DIVIDE_ASSIGN expr','expr',3,'p_expr','Parser.py',94),
  ('expr -> variable CONCAT_ASSIGN expr','expr',3,'p_expr','Parser.py',95),
  ('expr -> variable ASSIGN expr','expr',3,'p_expr','Parser.py',96),
  ('expr -> NUMBER_INTEGER','expr',1,'p_expr','Parser.py',97),
  ('expr -> NUMBER_REAL','expr',1,'p_expr','Parser.py',98),
  ('expr -> CONSTANT_ENCAPSED_STRING','expr',1,'p_expr','Parser.py',99),
  ('expr -> TRUE','expr',1,'p_expr','Parser.py',100),
  ('expr -> FALSE','expr',1,'p_expr','Parser.py',101),
  ('typecast_operator -> INT_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',178),
  ('typecast_operator -> FLOAT_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',179),
  ('typecast_operator -> ARRAY_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',180),
  ('typecast_operator -> STRING_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',181),
  ('typecast_operator -> BOOL_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',182),
  ('exit_statement -> EXIT exit_expr','exit_statement',2,'p_exit_statement','Parser.py',188),
  ('exit_statement -> EXIT','exit_statement',1,'p_exit_statement','Parser.py',189),
  ('die_statement -> DIE exit_expr','die_statement',2,'p_die_statement','Parser.py',198),
  ('die_statement -> DIE','die_statement',1,'p_die_statement','Parser.py',199),
  ('exit_expr -> LPAREN expr RPAREN','exit_expr',3,'p_exit_expr','Parser.py',208),
  ('exit_expr -> LPAREN RPAREN','exit_expr',2,'p_exit_expr','Parser.py',209),
  ('array_declaration -> LPAREN array_pair_list RPAREN','array_declaration',3,'p_array_declaration','Parser.py',218),
  ('array_declaration -> LPAREN RPAREN','array_declaration',2,'p_array_declaration','Parser.py',219),
  ('statement -> expr SEMICOLON','statement',2,'p_statement','Parser.py',228),
  ('statement -> while_statement','statement',1,'p_statement','Parser.py',229),
  ('statement -> if_statement','statement',1,'p_statement','Parser.py',230),
  ('statement -> do_statement','statement',1,'p_statement','Parser.py',231),
  ('statement -> for_statement','statement',1,'p_statement','Parser.py',232),
  ('statement -> foreach_statement','statement',1,'p_statement','Parser.py',233),
  ('statement -> break_statement','statement',1,'p_statement','Parser.py',234),
  ('statement -> continue_statement','statement',1,'p_statement','Parser.py',235),
  ('statement -> return_statement','statement',1,'p_statement','Parser.py',236),
  ('statement -> exit_statement SEMICOLON','statement',2,'p_statement','Parser.py',237),
  ('statement -> die_statement SEMICOLON','statement',2,'p_statement','Parser.py',238),
  ('statement -> global_statement SEMICOLON','statement',2,'p_statement','Parser.py',239),
  ('if_statement -> statement_if','if_statement',1,'p_if_statement','Parser.py',269),
  ('if_statement -> statement_if statement_else','if_statement',2,'p_if_statement','Parser.py',270),
  ('if_statement -> statement_if statement_elseif','if_statement',2,'p_if_statement','Parser.py',271),
  ('if_statement -> statement_if statement_elseif statement_else','if_statement',3,'p_if_statement','Parser.py',272),
  ('statement_if -> IF expr_parentheses statement_block_optional statement_if','statement_if',4,'p_statement_if','Parser.py',285),
  ('statement_if -> IF expr_parentheses statement_block_optional','statement_if',3,'p_statement_if','Parser.py',286),
  ('statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif','statement_elseif',4,'p_statement_elseif','Parser.py',295),
  ('statement_elseif -> ELSEIF expr_parentheses statement_block_optional','statement_elseif',3,'p_statement_elseif','Parser.py',296),
  ('statement_else -> ELSE statement_block_optional','statement_else',2,'p_statement_else','Parser.py',305),
  ('global_statement -> GLOBAL global_var statement_COLON_GLOBAL','global_statement',3,'p_global_statement','Parser.py',312),
  ('global_statement -> GLOBAL global_var','global_statement',2,'p_global_statement','Parser.py',313),
  ('while_statement -> WHILE expr_parentheses statement_block_optional','while_statement',3,'p_while_statement','Parser.py',323),
  ('do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON','do_statement',5,'p_do_statement','Parser.py',330),
  ('break_statement -> BREAK expr SEMICOLON','break_statement',3,'p_break_statement','Parser.py',336),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','Parser.py',337),
  ('continue_statement -> CONTINUE expr SEMICOLON','continue_statement',3,'p_continue_statement','Parser.py',346),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','Parser.py',347),
  ('return_statement -> RETURN expr SEMICOLON','return_statement',3,'p_return_statement','Parser.py',356),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','Parser.py',357),
  ('for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional','for_statement',5,'p_for_statement','Parser.py',366),
  ('for_parameters -> SEMICOLON SEMICOLON','for_parameters',2,'p_for_parameters','Parser.py',372),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',373),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON','for_parameters',4,'p_for_parameters','Parser.py',374),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',375),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',376),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',377),
  ('for_parameters -> SEMICOLON SEMICOLON for_expr_OPT','for_parameters',3,'p_for_parameters','Parser.py',378),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',5,'p_for_parameters','Parser.py',379),
  ('global_var -> VARIABLE','global_var',1,'p_global_var','Parser.py',401),
  ('statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL','statement_COLON_GLOBAL',3,'p_statement_COLON_GLOBAL','Parser.py',408),
  ('statement_COLON_GLOBAL -> COLON global_var','statement_COLON_GLOBAL',2,'p_statement_COLON_GLOBAL','Parser.py',409),
  ('ampersand_variable -> AMPERSAND VARIABLE','ampersand_variable',2,'p_ampersand_variable','Parser.py',418),
  ('ampersand_variable -> VARIABLE','ampersand_variable',1,'p_ampersand_variable','Parser.py',419),
  ('expr_parentheses -> LPAREN expr RPAREN','expr_parentheses',3,'p_expr_parentheses','Parser.py',428),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional','foreach_statement',7,'p_foreach_statement','Parser.py',435),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional','foreach_statement',9,'p_foreach_statement','Parser.py',436),
  ('for_expr_OPT -> expr for_expr_COLON_EXPR','for_expr_OPT',2,'p_for_expr_OPT','Parser.py',445),
  ('for_expr_OPT -> expr','for_expr_OPT',1,'p_for_expr_OPT','Parser.py',446),
  ('for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR','for_expr_COLON_EXPR',3,'p_for_expr_COLON_EXPR','Parser.py',455),
  ('for_expr_COLON_EXPR -> COLON expr','for_expr_COLON_EXPR',2,'p_for_expr_COLON_EXPR','Parser.py',456),
  ('function_call -> ID LPAREN function_call_parameter_list RPAREN','function_call',4,'p_function_call','Parser.py',465),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','Parser.py',466),
  ('function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER','function_call_parameter_list',2,'p_function_call_parameter_list','Parser.py',475),
  ('function_call_parameter_list -> function_call_parameter','function_call_parameter_list',1,'p_function_call_parameter_list','Parser.py',476),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER','fc_parameter_list_COLON_PARAMETER',3,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',485),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter','fc_parameter_list_COLON_PARAMETER',2,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',486),
  ('function_call_parameter -> expr','function_call_parameter',1,'p_function_call_parameter','Parser.py',495),
  ('function_call_parameter -> AMPERSAND VARIABLE','function_call_parameter',2,'p_function_call_parameter','Parser.py',496),
  ('variable -> VARIABLE variable_array_selector','variable',2,'p_variable','Parser.py',505),
  ('variable -> VARIABLE','variable',1,'p_variable','Parser.py',506),
  ('selector -> LBRACKET expr RBRACKET','selector',3,'p_selector','Parser.py',515),
  ('selector -> LBRACKET RBRACKET','selector',2,'p_selector','Parser.py',516),
  ('function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements','function_declaration_statement',4,'p_function_declaration_statement','Parser.py',525),
  ('fds_statements -> LKEY inner_statement_MUL RKEY','fds_statements',3,'p_fds_statements','Parser.py',531),
  ('fds_statements -> LKEY RKEY','fds_statements',2,'p_fds_statements','Parser.py',532),
  ('fds_id -> AMPERSAND ID','fds_id',2,'p_fds_id','Parser.py',541),
  ('fds_id -> ID','fds_id',1,'p_fds_id','Parser.py',542),
  ('fds_parameter -> LPAREN parameter_list RPAREN','fds_parameter',3,'p_fds_parameter','Parser.py',551),
  ('fds_parameter -> LPAREN RPAREN','fds_parameter',2,'p_fds_parameter','Parser.py',552),
  ('parameter_list -> parameter parameter_list_colon_parameter','parameter_list',2,'p_parameter_list','Parser.py',561),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser.py',562),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','Parser.py',571),
  ('parameter -> parameter_prefix VARIABLE','parameter',2,'p_parameter','Parser.py',572),
  ('parameter -> VARIABLE ASSIGN expr','parameter',3,'p_parameter','Parser.py',573),
  ('parameter -> parameter_prefix VARIABLE ASSIGN expr','parameter',4,'p_parameter','Parser.py',574),
  ('parameter_prefix -> parameter_type AMPERSAND','parameter_prefix',2,'p_parameter_prefix','Parser.py',588),
  ('parameter_prefix -> AMPERSAND','parameter_prefix',1,'p_parameter_prefix','Parser.py',589),
  ('parameter_prefix -> parameter_type','parameter_prefix',1,'p_parameter_prefix','Parser.py',590),
  ('parameter_type -> INT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',601),
  ('parameter_type -> STRING_TYPE','parameter_type',1,'p_parameter_type','Parser.py',602),
  ('parameter_type -> FLOAT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',603),
  ('parameter_type -> ARRAY_TYPE','parameter_type',1,'p_parameter_type','Parser.py',604),
  ('parameter_type -> BOOL_TYPE','parameter_type',1,'p_parameter_type','Parser.py',605),
  ('array_pair_list -> array_pair array_pair_list_ARR_PAIR','array_pair_list',2,'p_array_pair_list','Parser.py',612),
  ('array_pair_list -> array_pair','array_pair_list',1,'p_array_pair_list','Parser.py',613),
  ('array_pair -> expr','array_pair',1,'p_array_pair','Parser.py',622),
  ('array_pair -> AMPERSAND variable','array_pair',2,'p_array_pair','Parser.py',623),
  ('array_pair -> expr ATTR_ASSOC expr','array_pair',3,'p_array_pair','Parser.py',624),
  ('array_pair -> expr ATTR_ASSOC AMPERSAND variable','array_pair',4,'p_array_pair','Parser.py',625),
  ('statement_MUL -> statement statement_MUL','statement_MUL',2,'p_statement_MUL','Parser.py',641),
  ('statement_MUL -> statement','statement_MUL',1,'p_statement_MUL','Parser.py',642),
  ('statement_block_optional -> statement','statement_block_optional',1,'p_statement_block_optional','Parser.py',651),
  ('statement_block_optional -> LKEY statement_MUL RKEY','statement_block_optional',3,'p_statement_block_optional','Parser.py',652),
  ('statement_block_optional -> LKEY RKEY','statement_block_optional',2,'p_statement_block_optional','Parser.py',653),
  ('parameter_list_colon_parameter -> COLON parameter parameter_list_colon_parameter','parameter_list_colon_parameter',3,'p_parameter_list_colon_parameter','Parser.py',664),
  ('parameter_list_colon_parameter -> COLON parameter','parameter_list_colon_parameter',2,'p_parameter_list_colon_parameter','Parser.py',665),
  ('variable_array_selector -> selector variable_array_selector','variable_array_selector',2,'p_variable_array_selector','Parser.py',674),
  ('variable_array_selector -> selector','variable_array_selector',1,'p_variable_array_selector','Parser.py',675),
  ('array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR','array_pair_list_ARR_PAIR',3,'p_array_pair_list_ARR_PAIR','Parser.py',684),
  ('array_pair_list_ARR_PAIR -> COLON array_pair','array_pair_list_ARR_PAIR',2,'p_array_pair_list_ARR_PAIR','Parser.py',685),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSADD_ASSIGN AMPERSAND AND APOSTROFE ARRAY_TYPE ARROBA AS ASPAS ASSIGN ATTR_ASSOC BEGIN_PROGRAM BOOLEAN_TYPE BOOL_TYPE BREAK CASE CLONE COLON COMMENT_MULTI COMMENT_SINGLE CONCATENATE CONSTANT_ENCAPSED_STRING CONTINUE CRASE DDOT DECLARE DECREMENT DIE DIVIDE DIVIDE_ASSIGN DO DOLAR DOUBLE_TYPE ELSE ELSEIF ENDDECLARE END_PROGRAM EQUALS EXC_DOT EXIT FALSE FLOAT_TYPE FOR FOREACH FUNCTION GLOBAL GREAT_EQUAL GREAT_THAN ID IDENTATION IF INCREMENT INTE_DOT INT_TYPE LBRACKET LEFT_LOGICAL LESS_EQUAL LESS_THAN LIST LKEY LPAREN MINUS MOD_ASSIGN NOT_EQUAL NUMBER_INTEGER NUMBER_REAL OR PERCENT PLUS PLUS_ASSIGN RBRACKET REAL_TYPE RETURN RIGHT_LOGICAL RKEY RPAREN SEMICOLON STRING STRING_TYPE SUB_ASSIGN TIMES TRUE UNSET VAR VARIABLE WHILE\n  main : BEGIN_PROGRAM main_INNER END_PROGRAM \n  | BEGIN_PROGRAM END_PROGRAM\n  \n  main_INNER : inner_statement main_INNER\n    | inner_statement\n  \n  inner_statement : function_declaration_statement\n    | statement\n  \n  inner_statement_MUL : inner_statement inner_statement_MUL\n    | inner_statement\n  expr : MINUS expr %prec UMINUS\n  expr : expr PLUS expr\n    | expr MINUS expr \n    | expr DIVIDE expr\n    | expr PERCENT expr\n    | expr TIMES expr   \n    | expr EQUALS expr\n    | expr NOT_EQUAL expr\n\n    | expr GREAT_THAN expr\n    | expr GREAT_EQUAL expr\n    | expr LESS_THAN expr\n    | expr LESS_EQUAL expr\n    \n    | expr AND expr\n    | expr OR expr\n    | INCREMENT variable\n    | variable INCREMENT\n    | DECREMENT variable\n    | variable DECREMENT\n    | variable\n    | LPAREN expr RPAREN\n    | ARRAY_TYPE array_declaration\n    | function_call\n    | scalar\n    | TRUE\n    | FALSE\n    | NUMBER_REAL\n    | NUMBER_INTEGER\n    | INTE_DOT expr DDOT expr\n    | variable assign_operator expr\n    | variable assign_operator AMPERSAND expr\n    | LPAREN type_cast_operator RPAREN expr\n  \n  exit_statement : EXIT exit_expr\n    | EXIT\n  \n  die_statement : DIE exit_expr\n    | DIE\n  \n  exit_expr : LPAREN expr RPAREN\n    | LPAREN RPAREN\n  \n  array_declaration : LPAREN array_pair_list RPAREN\n    | LPAREN RPAREN\n  \n  statement : expr SEMICOLON\n    | if_statement \n    | while_statement\n    | do_statement\n    | for_statement\n    | foreach_statement\n    | break_statement\n    | continue_statement \n    | return_statement\n    | exit_statement SEMICOLON\n    | die_statement SEMICOLON\n    | global_statement SEMICOLON\n  \n  S : S1 \n    | IF expr_parentheses S3\n  S1 : IF expr_parentheses S2 ELSE S1\n    |\n  S2 : ELSEIF expr_parentheses S2\n    | S1\n  S3 : S\n    | S1 ELSE S3\n  \n  if_statement : statement_if\n  | statement_if statement_else\n  | statement_if statement_elseif\n  | statement_if statement_elseif statement_else\n   \n  statement_if : IF expr_parentheses statement_BLOCK_OPT statement_if\n   | IF expr_parentheses statement_BLOCK_OPT\n  \n  statement_elseif : ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif\n   | ELSEIF expr_parentheses statement_BLOCK_OPT\n  \n  statement_else : ELSE statement_BLOCK_OPT\n  \n  global_statement : GLOBAL global_var statement_COLON_GLOBAL \n    | GLOBAL global_var \n  \n  while_statement : WHILE expr_parentheses statement_BLOCK_OPT\n  \n  do_statement : DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON\n  \n  break_statement : BREAK expr SEMICOLON\n    | BREAK SEMICOLON\n  \n  continue_statement : CONTINUE expr SEMICOLON\n    | CONTINUE SEMICOLON\n  \n  return_statement : RETURN expr SEMICOLON \n    | RETURN SEMICOLON \n  \n  for_statement : FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT\n  \n  for_parameters : SEMICOLON SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT\n  | SEMICOLON for_expr_OPT SEMICOLON\n  | SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  | SEMICOLON SEMICOLON for_expr_OPT\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  \n  global_var : VARIABLE\n    | DOLAR VARIABLE\n    | DOLAR LKEY expr RKEY \n  \n  statement_COLON_GLOBAL : COLON global_var statement_COLON_GLOBAL\n    | COLON global_var\n  \n  ampersand_variable : AMPERSAND VARIABLE\n    | VARIABLE\n  \n  expr_parentheses : LPAREN expr RPAREN\n  \n  foreach_statement : FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT\n  | FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT\n  \n  for_expr_OPT : expr for_expr_COLON_EXPR\n  | expr\n  \n  for_expr_COLON_EXPR : COLON expr for_expr_COLON_EXPR\n    | COLON expr\n  \n  function_call : ID LPAREN function_call_parameter_list RPAREN\n    | ID LPAREN RPAREN\n  \n  function_call_parameter_list : function_call_parameter fc_parameter_list_COLON_PARAMETER\n    |  function_call_parameter\n  \n  fc_parameter_list_COLON_PARAMETER : COLON function_call_parameter fc_parameter_list_COLON_PARAMETER\n    | COLON function_call_parameter\n  \n  function_call_parameter : expr\n    | AMPERSAND VARIABLE\n  \n  unary_operator : EXC_DOT\n    | PLUS\n    | MINUS\n  \n    type_cast_operator : INT_TYPE\n      | DOUBLE_TYPE\n      | FLOAT_TYPE\n      | REAL_TYPE\n      | STRING_TYPE \n      | ARRAY_TYPE\n      | BOOLEAN_TYPE\n      | BOOL_TYPE\n      | UNSET\n  \n  assign_operator : ADD_ASSIGN\n    | SUB_ASSIGN\n    | MOD_ASSIGN\n    | PLUS_ASSIGN\n    | DIVIDE_ASSIGN\n    | ASSIGN\n  \n  arithmetic_operator : PLUS\n    | DIVIDE\n    | PERCENT\n    | TIMES\n    | MINUS\n  \n  comparission_operator : EQUALS\n    | GREAT_THAN\n    | LESS_THAN\n    | LESS_EQUAL\n    | GREAT_EQUAL\n    | NOT_EQUAL\n    | LEFT_LOGICAL\n    | RIGHT_LOGICAL\n    | AND\n    | OR\n  \n  scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  variable : VARIABLE reference_variable_SELECTOR\n    | VARIABLE\n  \n  selector : LBRACKET expr RBRACKET \n    | LBRACKET RBRACKET\n  \n  function_declaration_statement : FUNCTION fds_id fds_parameter fds_statements\n  \n  fds_statements : LKEY inner_statement_MUL RKEY\n    | LKEY RKEY\n  \n  fds_id : AMPERSAND ID\n    | ID\n  \n  fds_parameter : LPAREN parameter_list RPAREN\n    | LPAREN RPAREN\n  \n  parameter_list : parameter parameter_list_COLON_PARAMETER \n    | parameter\n   \n  parameter : VARIABLE \n    | parameter_prefix VARIABLE\n    | VARIABLE ASSIGN static_scalar\n    | parameter_prefix VARIABLE ASSIGN static_scalar\n  \n  parameter_prefix : parameter_type AMPERSAND\n    | AMPERSAND\n    | parameter_type\n  \n  parameter_type : INT_TYPE\n    | BOOLEAN_TYPE\n    | STRING_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE\n    | BOOL_TYPE\n    | REAL_TYPE\n    | DOUBLE_TYPE\n  \n  static_scalar : common_scalar \n    | PLUS static_scalar\n    | MINUS static_scalar\n  \n  common_scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  array_pair_list : array_pair array_pair_list_ARR_PAIR \n    | array_pair\n   \n  array_pair : expr\n    | AMPERSAND variable\n    | expr ATTR_ASSOC expr\n    | expr ATTR_ASSOC AMPERSAND variable\n  \n  statement_MUL : statement statement_MUL\n    | statement\n  \n  statement_BLOCK_OPT : statement \n    | LKEY statement_MUL RKEY \n    | LKEY RKEY\n  \n  parameter_list_COLON_PARAMETER : COLON parameter parameter_list_COLON_PARAMETER\n    | COLON parameter\n  \n    reference_variable_SELECTOR : selector reference_variable_SELECTOR\n    | selector\n  \n  array_pair_list_ARR_PAIR : COLON array_pair array_pair_list_ARR_PAIR\n    | COLON array_pair\n  '
    
_lr_action_items = {'BEGIN_PROGRAM':([0,],[2,]),'$end':([1,4,49,],[0,-2,-1,]),'END_PROGRAM':([2,3,5,6,7,10,11,12,13,14,15,16,17,34,50,54,68,69,70,97,98,104,109,111,113,151,152,154,158,165,166,167,182,183,208,211,228,230,241,242,243,255,281,284,],[4,49,-4,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,-3,-48,-57,-58,-59,-69,-70,-196,-82,-84,-86,-71,-76,-79,-198,-81,-83,-85,-73,-158,-75,-197,-72,-160,-74,-80,-87,-159,-104,-105,]),'FUNCTION':([2,5,6,7,10,11,12,13,14,15,16,17,34,54,68,69,70,97,98,104,109,111,113,151,152,154,158,165,166,167,182,183,184,208,211,228,230,231,241,242,243,255,281,284,],[8,8,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,-48,-57,-58,-59,-69,-70,-196,-82,-84,-86,-71,-76,-79,-198,-81,-83,-85,-73,-158,8,-75,-197,-72,-160,8,-74,-80,-87,-159,-104,-105,]),'MINUS':([2,5,6,7,9,10,11,12,13,14,15,16,17,21,23,25,27,28,29,30,31,32,33,34,36,39,40,41,45,47,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,94,95,96,97,98,99,101,102,104,105,106,107,108,109,110,111,112,113,115,120,121,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,148,150,151,152,153,154,155,158,159,161,163,164,165,166,167,168,173,174,175,176,178,180,182,183,184,200,201,202,204,205,207,208,209,211,213,214,216,218,222,223,224,226,228,230,231,235,239,241,242,243,245,247,248,255,260,261,265,269,272,281,283,284,],[21,21,-5,-6,56,-49,-50,-51,-52,-53,-54,-55,-56,21,-27,21,-30,-31,-32,-33,-34,-35,21,-68,21,21,21,21,-155,-153,-48,21,21,21,21,21,21,21,21,21,21,21,21,21,-57,-58,-59,-9,-23,-24,-26,21,-130,-131,-132,-133,-134,-135,-25,56,-29,21,56,-69,-70,21,21,21,-196,21,21,21,56,-82,56,-84,56,-86,21,-154,-202,21,21,21,-10,-11,-12,56,-14,56,56,56,56,56,56,56,56,56,21,-28,21,-47,56,21,-71,-76,21,-79,56,-198,21,21,56,56,-81,-83,-85,56,21,-201,56,-157,-111,56,-73,-158,21,56,56,-46,21,21,56,-75,-103,-197,21,21,21,21,56,-156,-110,21,-72,-160,21,261,56,-74,-80,-87,21,21,56,-159,261,261,261,21,21,-104,21,-105,]),'INCREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,23,25,33,34,36,39,40,41,45,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,120,121,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,174,176,182,183,184,204,205,208,209,211,213,214,216,218,223,226,228,230,231,241,242,243,245,247,255,269,272,281,283,284,],[22,22,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,22,73,22,22,-68,22,22,22,22,-155,-48,22,22,22,22,22,22,22,22,22,22,22,22,22,-57,-58,-59,22,-130,-131,-132,-133,-134,-135,22,-69,-70,22,22,22,-196,22,22,22,-82,-84,-86,22,-154,-202,22,22,22,22,22,22,-71,-76,22,-79,-198,22,22,-81,-83,-85,22,-201,-157,-73,-158,22,22,22,-75,-103,-197,22,22,22,22,-156,22,-72,-160,22,-74,-80,-87,22,22,-159,22,22,-104,22,-105,]),'DECREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,23,25,33,34,36,39,40,41,45,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,120,121,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,174,176,182,183,184,204,205,208,209,211,213,214,216,218,223,226,228,230,231,241,242,243,245,247,255,269,272,281,283,284,],[24,24,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,24,74,24,24,-68,24,24,24,24,-155,-48,24,24,24,24,24,24,24,24,24,24,24,24,24,-57,-58,-59,24,-130,-131,-132,-133,-134,-135,24,-69,-70,24,24,24,-196,24,24,24,-82,-84,-86,24,-154,-202,24,24,24,24,24,24,-71,-76,24,-79,-198,24,24,-81,-83,-85,24,-201,-157,-73,-158,24,24,24,-75,-103,-197,24,24,24,24,-156,24,-72,-160,24,-74,-80,-87,24,24,-159,24,24,-104,24,-105,]),'LPAREN':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,26,33,34,35,36,37,38,39,40,41,42,43,46,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,85,95,97,98,99,100,101,102,104,105,106,107,109,111,113,115,122,123,124,127,142,144,150,151,152,153,154,156,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,241,242,243,245,247,255,269,272,281,283,284,],[25,25,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,25,25,95,25,-68,102,25,106,107,25,25,25,115,115,123,102,126,-162,-48,25,25,25,25,25,25,25,25,25,25,25,25,25,-57,-58,-59,25,-130,-131,-132,-133,-134,-135,95,25,-69,-70,25,102,25,25,-196,25,25,25,-82,-84,-86,25,25,25,25,-161,25,25,25,-71,-76,25,-79,102,-198,25,25,-81,-83,-85,25,-73,-158,25,25,25,-75,-103,-197,25,25,25,25,25,-72,-160,25,-74,-80,-87,25,25,-159,25,25,-104,25,-105,]),'ARRAY_TYPE':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,33,34,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,126,142,144,150,151,152,153,154,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,234,241,242,243,245,247,255,269,272,281,283,284,],[26,26,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,26,85,26,-68,26,26,26,26,-48,26,26,26,26,26,26,26,26,26,26,26,26,26,-57,-58,-59,26,-130,-131,-132,-133,-134,-135,26,-69,-70,26,26,26,-196,26,26,26,-82,-84,-86,26,26,26,26,196,26,26,26,-71,-76,26,-79,-198,26,26,-81,-83,-85,26,-73,-158,26,26,26,-75,-103,-197,26,26,26,26,26,-72,-160,26,196,-74,-80,-87,26,26,-159,26,26,-104,26,-105,]),'TRUE':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,33,34,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,241,242,243,245,247,255,269,272,281,283,284,],[29,29,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,29,29,29,-68,29,29,29,29,-48,29,29,29,29,29,29,29,29,29,29,29,29,29,-57,-58,-59,29,-130,-131,-132,-133,-134,-135,29,-69,-70,29,29,29,-196,29,29,29,-82,-84,-86,29,29,29,29,29,29,29,-71,-76,29,-79,-198,29,29,-81,-83,-85,29,-73,-158,29,29,29,-75,-103,-197,29,29,29,29,29,-72,-160,29,-74,-80,-87,29,29,-159,29,29,-104,29,-105,]),'FALSE':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,33,34,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,241,242,243,245,247,255,269,272,281,283,284,],[30,30,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,30,30,30,-68,30,30,30,30,-48,30,30,30,30,30,30,30,30,30,30,30,30,30,-57,-58,-59,30,-130,-131,-132,-133,-134,-135,30,-69,-70,30,30,30,-196,30,30,30,-82,-84,-86,30,30,30,30,30,30,30,-71,-76,30,-79,-198,30,30,-81,-83,-85,30,-73,-158,30,30,30,-75,-103,-197,30,30,30,30,30,-72,-160,30,-74,-80,-87,30,30,-159,30,30,-104,30,-105,]),'NUMBER_REAL':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,33,34,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,235,241,242,243,245,247,255,260,261,265,269,272,281,283,284,],[31,31,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,31,31,31,-68,31,31,31,31,-48,31,31,31,31,31,31,31,31,31,31,31,31,31,-57,-58,-59,31,-130,-131,-132,-133,-134,-135,31,-69,-70,31,31,31,-196,31,31,31,-82,-84,-86,31,31,31,31,31,31,31,-71,-76,31,-79,-198,31,31,-81,-83,-85,31,-73,-158,31,31,31,-75,-103,-197,31,31,31,31,31,-72,-160,31,262,-74,-80,-87,31,31,-159,262,262,262,31,31,-104,31,-105,]),'NUMBER_INTEGER':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,33,34,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,235,241,242,243,245,247,255,260,261,265,269,272,281,283,284,],[32,32,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,32,32,32,-68,32,32,32,32,-48,32,32,32,32,32,32,32,32,32,32,32,32,32,-57,-58,-59,32,-130,-131,-132,-133,-134,-135,32,-69,-70,32,32,32,-196,32,32,32,-82,-84,-86,32,32,32,32,32,32,32,-71,-76,32,-79,-198,32,32,-81,-83,-85,32,-73,-158,32,32,32,-75,-103,-197,32,32,32,32,32,-72,-160,32,263,-74,-80,-87,32,32,-159,263,263,263,32,32,-104,32,-105,]),'INTE_DOT':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,33,34,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,241,242,243,245,247,255,269,272,281,283,284,],[33,33,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,33,33,33,-68,33,33,33,33,-48,33,33,33,33,33,33,33,33,33,33,33,33,33,-57,-58,-59,33,-130,-131,-132,-133,-134,-135,33,-69,-70,33,33,33,-196,33,33,33,-82,-84,-86,33,33,33,33,33,33,33,-71,-76,33,-79,-198,33,33,-81,-83,-85,33,-73,-158,33,33,33,-75,-103,-197,33,33,33,33,33,-72,-160,33,-74,-80,-87,33,33,-159,33,33,-104,33,-105,]),'WHILE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,103,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[35,35,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,35,-48,-57,-58,-59,-69,-70,35,35,156,-196,35,-82,-84,-86,35,-71,-76,35,-79,-198,35,-81,-83,-85,-73,-158,35,-75,-103,-197,35,-72,-160,35,-74,-80,-87,-159,35,-104,35,-105,]),'DO':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[36,36,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,36,-48,-57,-58,-59,-69,-70,36,36,-196,36,-82,-84,-86,36,-71,-76,36,-79,-198,36,-81,-83,-85,-73,-158,36,-75,-103,-197,36,-72,-160,36,-74,-80,-87,-159,36,-104,36,-105,]),'FOR':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[37,37,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,37,-48,-57,-58,-59,-69,-70,37,37,-196,37,-82,-84,-86,37,-71,-76,37,-79,-198,37,-81,-83,-85,-73,-158,37,-75,-103,-197,37,-72,-160,37,-74,-80,-87,-159,37,-104,37,-105,]),'FOREACH':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[38,38,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,38,-48,-57,-58,-59,-69,-70,38,38,-196,38,-82,-84,-86,38,-71,-76,38,-79,-198,38,-81,-83,-85,-73,-158,38,-75,-103,-197,38,-72,-160,38,-74,-80,-87,-159,38,-104,38,-105,]),'BREAK':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[39,39,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,39,-48,-57,-58,-59,-69,-70,39,39,-196,39,-82,-84,-86,39,-71,-76,39,-79,-198,39,-81,-83,-85,-73,-158,39,-75,-103,-197,39,-72,-160,39,-74,-80,-87,-159,39,-104,39,-105,]),'CONTINUE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[40,40,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,40,-48,-57,-58,-59,-69,-70,40,40,-196,40,-82,-84,-86,40,-71,-76,40,-79,-198,40,-81,-83,-85,-73,-158,40,-75,-103,-197,40,-72,-160,40,-74,-80,-87,-159,40,-104,40,-105,]),'RETURN':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[41,41,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,41,-48,-57,-58,-59,-69,-70,41,41,-196,41,-82,-84,-86,41,-71,-76,41,-79,-198,41,-81,-83,-85,-73,-158,41,-75,-103,-197,41,-72,-160,41,-74,-80,-87,-159,41,-104,41,-105,]),'EXIT':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[42,42,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,42,-48,-57,-58,-59,-69,-70,42,42,-196,42,-82,-84,-86,42,-71,-76,42,-79,-198,42,-81,-83,-85,-73,-158,42,-75,-103,-197,42,-72,-160,42,-74,-80,-87,-159,42,-104,42,-105,]),'DIE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[43,43,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,43,-48,-57,-58,-59,-69,-70,43,43,-196,43,-82,-84,-86,43,-71,-76,43,-79,-198,43,-81,-83,-85,-73,-158,43,-75,-103,-197,43,-72,-160,43,-74,-80,-87,-159,43,-104,43,-105,]),'GLOBAL':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[44,44,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,44,-48,-57,-58,-59,-69,-70,44,44,-196,44,-82,-84,-86,44,-71,-76,44,-79,-198,44,-81,-83,-85,-73,-158,44,-75,-103,-197,44,-72,-160,44,-74,-80,-87,-159,44,-104,44,-105,]),'VARIABLE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,24,25,33,34,36,39,40,41,44,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,119,122,123,124,126,142,144,149,150,151,152,153,154,158,159,161,165,166,167,171,173,181,182,183,184,189,190,191,192,193,194,195,196,197,198,199,204,205,208,209,211,213,214,216,218,219,226,228,230,231,234,237,240,241,242,243,245,247,250,255,269,272,273,281,283,284,],[45,45,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,45,45,45,45,45,-68,45,45,45,45,118,-48,45,45,45,45,45,45,45,45,45,45,45,45,45,-57,-58,-59,45,-130,-131,-132,-133,-134,-135,45,-69,-70,45,45,45,-196,45,45,45,-82,-84,-86,45,172,45,45,45,188,45,45,45,45,-71,-76,45,-79,-198,45,45,-81,-83,-85,118,45,227,-73,-158,45,236,-173,-172,-174,-175,-176,-177,-178,-179,-180,-181,45,45,-75,-103,-197,45,45,45,45,251,45,-72,-160,45,188,-171,45,-74,-80,-87,45,45,274,-159,45,45,251,-104,45,-105,]),'ID':([2,5,6,7,8,10,11,12,13,14,15,16,17,21,25,33,34,36,39,40,41,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,241,242,243,245,247,255,269,272,281,283,284,],[46,46,-5,-6,53,-49,-50,-51,-52,-53,-54,-55,-56,46,46,46,-68,46,46,46,46,127,-48,46,46,46,46,46,46,46,46,46,46,46,46,46,-57,-58,-59,46,-130,-131,-132,-133,-134,-135,46,-69,-70,46,46,46,-196,46,46,46,-82,-84,-86,46,46,46,46,46,46,46,-71,-76,46,-79,-198,46,46,-81,-83,-85,46,-73,-158,46,46,46,-75,-103,-197,46,46,46,46,46,-72,-160,46,-74,-80,-87,46,46,-159,46,46,-104,46,-105,]),'CONSTANT_ENCAPSED_STRING':([2,5,6,7,10,11,12,13,14,15,16,17,21,25,33,34,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,80,81,95,97,98,99,101,102,104,105,106,107,109,111,113,115,122,123,124,142,144,150,151,152,153,154,158,159,161,165,166,167,173,182,183,184,204,205,208,209,211,213,214,216,218,226,228,230,231,235,241,242,243,245,247,255,260,261,265,269,272,281,283,284,],[47,47,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,47,47,47,-68,47,47,47,47,-48,47,47,47,47,47,47,47,47,47,47,47,47,47,-57,-58,-59,47,-130,-131,-132,-133,-134,-135,47,-69,-70,47,47,47,-196,47,47,47,-82,-84,-86,47,47,47,47,47,47,47,-71,-76,47,-79,-198,47,47,-81,-83,-85,47,-73,-158,47,47,47,-75,-103,-197,47,47,47,47,47,-72,-160,47,264,-74,-80,-87,47,47,-159,264,264,264,47,47,-104,47,-105,]),'IF':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,54,68,69,70,97,98,99,101,104,105,109,111,113,124,151,152,153,154,158,159,165,166,167,182,183,184,208,209,211,213,228,230,231,241,242,243,255,272,281,283,284,],[48,48,-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-68,48,-48,-57,-58,-59,-69,-70,48,48,-196,48,-82,-84,-86,48,-71,-76,48,-79,-198,48,-81,-83,-85,48,-158,48,-75,-103,-197,48,-72,-160,48,-74,-80,-87,-159,48,-104,48,-105,]),'RKEY':([6,7,10,11,12,13,14,15,16,17,23,27,28,29,30,31,32,34,45,47,54,68,69,70,71,72,73,74,82,94,97,98,104,105,109,111,113,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,151,152,154,157,158,159,165,166,167,174,176,178,182,183,184,200,201,202,207,208,211,212,222,223,224,228,229,230,231,241,242,243,255,256,281,284,],[-5,-6,-49,-50,-51,-52,-53,-54,-55,-56,-27,-30,-31,-32,-33,-34,-35,-68,-155,-153,-48,-57,-58,-59,-9,-23,-24,-26,-25,-29,-69,-70,-196,158,-82,-84,-86,-154,-202,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-37,-28,-47,-71,-76,-79,211,-198,-195,-81,-83,-85,-201,-157,-111,-73,-158,230,-38,-39,-46,-36,-75,-197,-194,253,-156,-110,-72,255,-160,-8,-74,-80,-87,-159,-7,-104,-105,]),'AMPERSAND':([8,75,76,77,78,79,80,81,95,123,126,190,192,193,194,195,196,197,198,199,204,205,219,226,234,273,],[52,142,-130,-131,-132,-133,-134,-135,149,181,191,237,-174,-175,-176,-177,-178,-179,-180,-181,149,240,250,181,191,250,]),'SEMICOLON':([9,18,19,20,23,27,28,29,30,31,32,39,40,41,42,43,45,47,71,72,73,74,82,94,106,108,110,112,114,116,117,118,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,161,162,163,169,170,172,174,176,178,200,201,202,207,209,210,215,216,217,220,221,223,224,246,248,252,253,271,],[54,68,69,70,-27,-30,-31,-32,-33,-34,-35,109,111,113,-41,-43,-155,-153,-9,-23,-24,-26,-25,-29,161,165,166,167,-40,-42,-78,-96,-154,-202,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-37,-28,-47,214,216,-107,-45,-77,-97,-201,-157,-111,-38,-39,-46,-36,-103,242,245,247,-106,-44,-100,-156,-110,269,-109,-99,-98,-108,]),'PLUS':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,235,239,248,260,261,265,],[55,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,55,-29,55,55,55,55,-154,-202,-10,-11,-12,55,-14,55,55,55,55,55,55,55,55,55,-28,-47,55,55,55,55,55,-201,55,-157,-111,55,55,55,-46,55,55,-156,-110,260,55,55,260,260,260,]),'DIVIDE':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[57,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,57,-29,57,57,57,57,-154,-202,57,57,-12,57,-14,57,57,57,57,57,57,57,57,57,-28,-47,57,57,57,57,57,-201,57,-157,-111,57,57,57,-46,57,57,-156,-110,57,57,]),'PERCENT':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[58,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,58,-29,58,58,58,58,-154,-202,-10,-11,-12,58,-14,58,58,58,58,58,58,58,58,58,-28,-47,58,58,58,58,58,-201,58,-157,-111,58,58,58,-46,58,58,-156,-110,58,58,]),'TIMES':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[59,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,59,-29,59,59,59,59,-154,-202,59,59,-12,59,-14,59,59,59,59,59,59,59,59,59,-28,-47,59,59,59,59,59,-201,59,-157,-111,59,59,59,-46,59,59,-156,-110,59,59,]),'EQUALS':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[60,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,60,-29,60,60,60,60,-154,-202,-10,-11,-12,60,-14,60,60,60,60,60,60,60,60,60,-28,-47,60,60,60,60,60,-201,60,-157,-111,60,60,60,-46,60,60,-156,-110,60,60,]),'NOT_EQUAL':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[61,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,61,-29,61,61,61,61,-154,-202,-10,-11,-12,61,-14,61,61,61,61,61,61,61,61,61,-28,-47,61,61,61,61,61,-201,61,-157,-111,61,61,61,-46,61,61,-156,-110,61,61,]),'GREAT_THAN':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[62,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,62,-29,62,62,62,62,-154,-202,-10,-11,-12,62,-14,62,62,62,62,62,62,62,62,62,-28,-47,62,62,62,62,62,-201,62,-157,-111,62,62,62,-46,62,62,-156,-110,62,62,]),'GREAT_EQUAL':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[63,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,63,-29,63,63,63,63,-154,-202,-10,-11,-12,63,-14,63,63,63,63,63,63,63,63,63,-28,-47,63,63,63,63,63,-201,63,-157,-111,63,63,63,-46,63,63,-156,-110,63,63,]),'LESS_THAN':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[64,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,64,-29,64,64,64,64,-154,-202,-10,-11,-12,64,-14,64,64,64,64,64,64,64,64,64,-28,-47,64,64,64,64,64,-201,64,-157,-111,64,64,64,-46,64,64,-156,-110,64,64,]),'LESS_EQUAL':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[65,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,65,-29,65,65,65,65,-154,-202,-10,-11,-12,65,-14,65,65,65,65,65,65,65,65,65,-28,-47,65,65,65,65,65,-201,65,-157,-111,65,65,65,-46,65,65,-156,-110,65,65,]),'AND':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[66,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,66,-29,66,66,66,66,-154,-202,-10,-11,-12,66,-14,66,66,66,66,66,66,66,66,66,-28,-47,66,66,66,66,66,-201,66,-157,-111,66,66,66,-46,66,66,-156,-110,66,66,]),'OR':([9,23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,94,96,108,110,112,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,155,163,164,168,174,175,176,178,180,200,201,202,207,222,223,224,239,248,],[67,-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,67,-29,67,67,67,67,-154,-202,-10,-11,-12,67,-14,67,67,67,67,67,67,67,67,67,-28,-47,67,67,67,67,67,-201,67,-157,-111,67,67,67,-46,67,67,-156,-110,67,67,]),'ELSE':([10,11,12,13,14,15,16,17,34,54,68,69,70,97,98,104,109,111,113,151,152,154,158,165,166,167,182,208,211,228,241,242,243,281,284,],[-49,-50,-51,-52,-53,-54,-55,-56,99,-48,-57,-58,-59,-69,99,-196,-82,-84,-86,-71,-76,-79,-198,-81,-83,-85,-73,-75,-197,-72,-74,-80,-87,-104,-105,]),'ELSEIF':([10,11,12,13,14,15,16,17,34,54,68,69,70,97,98,104,109,111,113,151,152,154,158,165,166,167,182,208,211,228,241,242,243,281,284,],[-49,-50,-51,-52,-53,-54,-55,-56,100,-48,-57,-58,-59,-69,-70,-196,-82,-84,-86,-71,-76,-79,-198,-81,-83,-85,-73,100,-197,-72,-74,-80,-87,-104,-105,]),'RPAREN':([23,27,28,29,30,31,32,45,47,71,72,73,74,82,83,84,85,86,87,88,89,90,91,92,93,94,95,115,120,121,123,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,145,146,147,148,155,160,163,168,174,176,177,178,179,180,185,187,188,200,201,202,203,206,207,214,217,223,224,225,227,233,236,238,239,244,245,247,248,249,251,254,257,258,259,262,263,264,266,267,268,269,270,271,274,275,276,277,278,279,280,282,],[-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,143,144,-126,-121,-122,-123,-124,-125,-127,-128,-129,-29,146,169,-154,-202,178,186,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-37,-28,202,-47,-189,-190,209,213,-107,220,-201,-157,224,-111,-113,-116,232,-166,-167,-38,-39,-46,-188,-191,-36,-88,-106,-156,-110,-112,-117,-165,-168,-204,-192,-94,-92,-89,-109,272,-102,-115,-200,-169,-182,-185,-186,-187,-203,-193,-93,-90,-91,-108,-101,-114,-199,-183,-184,-170,-95,283,]),'DDOT':([23,27,28,29,30,31,32,45,47,71,72,73,74,82,94,96,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,174,176,178,200,201,202,207,223,224,],[-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,-29,150,-154,-202,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-37,-28,-47,-201,-157,-111,-38,-39,-46,-36,-156,-110,]),'ATTR_ASSOC':([23,27,28,29,30,31,32,45,47,71,72,73,74,82,94,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,148,174,176,178,200,201,202,207,223,224,249,251,274,],[-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,-29,-154,-202,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-37,-28,-47,205,-201,-157,-111,-38,-39,-46,-36,-156,-110,273,-102,-101,]),'COLON':([23,27,28,29,30,31,32,45,47,71,72,73,74,82,94,117,118,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,147,148,163,172,174,176,178,179,180,187,188,200,201,202,206,207,221,223,224,227,236,238,239,248,253,254,257,258,259,262,263,264,267,277,278,279,],[-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,-29,171,-96,-154,-202,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-37,-28,-47,204,-190,218,-97,-201,-157,-111,226,-116,234,-167,-38,-39,-46,-191,-36,171,-156,-110,-117,-168,204,-192,218,-98,226,234,-169,-182,-185,-186,-187,-193,-183,-184,-170,]),'AS':([23,27,28,29,30,31,32,45,47,71,72,73,74,82,94,120,121,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,164,174,176,178,200,201,202,207,223,224,],[-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,-29,-154,-202,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-37,-28,-47,219,-201,-157,-111,-38,-39,-46,-36,-156,-110,]),'RBRACKET':([23,27,28,29,30,31,32,45,47,71,72,73,74,82,94,120,121,122,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,146,174,175,176,178,200,201,202,207,223,224,],[-27,-30,-31,-32,-33,-34,-35,-155,-153,-9,-23,-24,-26,-25,-29,-154,-202,176,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-37,-28,-47,-201,223,-157,-111,-38,-39,-46,-36,-156,-110,]),'ADD_ASSIGN':([23,45,120,121,174,176,223,],[76,-155,-154,-202,-201,-157,-156,]),'SUB_ASSIGN':([23,45,120,121,174,176,223,],[77,-155,-154,-202,-201,-157,-156,]),'MOD_ASSIGN':([23,45,120,121,174,176,223,],[78,-155,-154,-202,-201,-157,-156,]),'PLUS_ASSIGN':([23,45,120,121,174,176,223,],[79,-155,-154,-202,-201,-157,-156,]),'DIVIDE_ASSIGN':([23,45,120,121,174,176,223,],[80,-155,-154,-202,-201,-157,-156,]),'ASSIGN':([23,45,120,121,174,176,188,223,236,],[81,-155,-154,-202,-201,-157,235,-156,265,]),'INT_TYPE':([25,126,234,],[86,192,192,]),'DOUBLE_TYPE':([25,126,234,],[87,199,199,]),'FLOAT_TYPE':([25,126,234,],[88,195,195,]),'REAL_TYPE':([25,126,234,],[89,198,198,]),'STRING_TYPE':([25,126,234,],[90,194,194,]),'BOOLEAN_TYPE':([25,126,234,],[91,193,193,]),'BOOL_TYPE':([25,126,234,],[92,197,197,]),'UNSET':([25,],[93,]),'LKEY':([36,99,101,119,124,125,153,186,209,213,232,272,283,],[105,105,105,173,105,184,105,-164,-103,105,-163,105,105,]),'DOLAR':([44,171,],[119,119,]),'LBRACKET':([45,121,176,223,],[122,122,-157,-156,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'main_INNER':([2,5,],[3,50,]),'inner_statement':([2,5,184,231,],[5,5,231,231,]),'function_declaration_statement':([2,5,184,231,],[6,6,6,6,]),'statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[7,7,104,104,104,159,104,104,159,7,104,7,104,104,]),'expr':([2,5,21,25,33,36,39,40,41,55,56,57,58,59,60,61,62,63,64,65,66,67,75,95,99,101,102,105,106,107,115,122,123,124,142,144,150,153,159,161,173,184,204,205,213,214,216,218,226,231,245,247,269,272,283,],[9,9,71,83,96,9,108,110,112,128,129,130,131,132,133,134,135,136,137,138,139,140,141,148,9,9,155,9,163,164,168,175,180,9,200,201,207,9,9,163,222,9,148,239,9,163,163,248,180,9,163,163,163,9,9,]),'if_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'while_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'do_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'for_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'foreach_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'break_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'continue_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'return_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'exit_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'die_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'global_statement':([2,5,36,99,101,105,124,153,159,184,213,231,272,283,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'variable':([2,5,21,22,24,25,33,36,39,40,41,55,56,57,58,59,60,61,62,63,64,65,66,67,75,95,99,101,102,105,106,107,115,122,123,124,142,144,149,150,153,159,161,173,184,204,205,213,214,216,218,226,231,240,245,247,269,272,283,],[23,23,23,72,82,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,206,23,23,23,23,23,23,23,23,23,23,23,23,23,23,267,23,23,23,23,23,]),'function_call':([2,5,21,25,33,36,39,40,41,55,56,57,58,59,60,61,62,63,64,65,66,67,75,95,99,101,102,105,106,107,115,122,123,124,142,144,150,153,159,161,173,184,204,205,213,214,216,218,226,231,245,247,269,272,283,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'scalar':([2,5,21,25,33,36,39,40,41,55,56,57,58,59,60,61,62,63,64,65,66,67,75,95,99,101,102,105,106,107,115,122,123,124,142,144,150,153,159,161,173,184,204,205,213,214,216,218,226,231,245,247,269,272,283,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'statement_if':([2,5,36,99,101,105,124,153,159,182,184,213,231,272,283,],[34,34,34,34,34,34,34,34,34,228,34,34,34,34,34,]),'fds_id':([8,],[51,]),'assign_operator':([23,],[75,]),'type_cast_operator':([25,],[84,]),'array_declaration':([26,85,],[94,94,]),'statement_else':([34,98,],[97,151,]),'statement_elseif':([34,208,],[98,241,]),'expr_parentheses':([35,48,100,156,],[101,124,153,210,]),'statement_BLOCK_OPT':([36,99,101,124,153,213,272,283,],[103,152,154,182,208,243,281,284,]),'exit_expr':([42,43,],[114,116,]),'global_var':([44,171,],[117,221,]),'reference_variable_SELECTOR':([45,121,],[120,174,]),'selector':([45,121,],[121,121,]),'fds_parameter':([51,],[125,]),'array_pair_list':([95,],[145,]),'array_pair':([95,204,],[147,238,]),'statement_MUL':([105,159,],[157,212,]),'for_parameters':([106,],[160,]),'for_expr_OPT':([106,161,214,216,245,247,269,],[162,215,244,246,268,270,280,]),'statement_COLON_GLOBAL':([117,221,],[170,252,]),'function_call_parameter_list':([123,],[177,]),'function_call_parameter':([123,226,],[179,254,]),'fds_statements':([125,],[183,]),'parameter_list':([126,],[185,]),'parameter':([126,234,],[187,257,]),'parameter_prefix':([126,234,],[189,189,]),'parameter_type':([126,234,],[190,190,]),'array_pair_list_ARR_PAIR':([147,238,],[203,266,]),'for_expr_COLON_EXPR':([163,248,],[217,271,]),'fc_parameter_list_COLON_PARAMETER':([179,254,],[225,275,]),'inner_statement_MUL':([184,231,],[229,256,]),'parameter_list_COLON_PARAMETER':([187,257,],[233,276,]),'ampersand_variable':([219,273,],[249,282,]),'static_scalar':([235,260,261,265,],[258,277,278,279,]),'common_scalar':([235,260,261,265,],[259,259,259,259,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> BEGIN_PROGRAM main_INNER END_PROGRAM','main',3,'p_main','Parser.py',16),
  ('main -> BEGIN_PROGRAM END_PROGRAM','main',2,'p_main','Parser.py',17),
  ('main_INNER -> inner_statement main_INNER','main_INNER',2,'p_main_INNER','Parser.py',26),
  ('main_INNER -> inner_statement','main_INNER',1,'p_main_INNER','Parser.py',27),
  ('inner_statement -> function_declaration_statement','inner_statement',1,'p_inner_statement','Parser.py',36),
  ('inner_statement -> statement','inner_statement',1,'p_inner_statement','Parser.py',37),
  ('inner_statement_MUL -> inner_statement inner_statement_MUL','inner_statement_MUL',2,'p_inner_statement_MUL','Parser.py',46),
  ('inner_statement_MUL -> inner_statement','inner_statement_MUL',1,'p_inner_statement_MUL','Parser.py',47),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','Parser.py',55),
  ('expr -> expr PLUS expr','expr',3,'p_expr','Parser.py',61),
  ('expr -> expr MINUS expr','expr',3,'p_expr','Parser.py',62),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','Parser.py',63),
  ('expr -> expr PERCENT expr','expr',3,'p_expr','Parser.py',64),
  ('expr -> expr TIMES expr','expr',3,'p_expr','Parser.py',65),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','Parser.py',66),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr','Parser.py',67),
  ('expr -> expr GREAT_THAN expr','expr',3,'p_expr','Parser.py',69),
  ('expr -> expr GREAT_EQUAL expr','expr',3,'p_expr','Parser.py',70),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','Parser.py',71),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr','Parser.py',72),
  ('expr -> expr AND expr','expr',3,'p_expr','Parser.py',74),
  ('expr -> expr OR expr','expr',3,'p_expr','Parser.py',75),
  ('expr -> INCREMENT variable','expr',2,'p_expr','Parser.py',76),
  ('expr -> variable INCREMENT','expr',2,'p_expr','Parser.py',77),
  ('expr -> DECREMENT variable','expr',2,'p_expr','Parser.py',78),
  ('expr -> variable DECREMENT','expr',2,'p_expr','Parser.py',79),
  ('expr -> variable','expr',1,'p_expr','Parser.py',80),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','Parser.py',81),
  ('expr -> ARRAY_TYPE array_declaration','expr',2,'p_expr','Parser.py',82),
  ('expr -> function_call','expr',1,'p_expr','Parser.py',83),
  ('expr -> scalar','expr',1,'p_expr','Parser.py',84),
  ('expr -> TRUE','expr',1,'p_expr','Parser.py',85),
  ('expr -> FALSE','expr',1,'p_expr','Parser.py',86),
  ('expr -> NUMBER_REAL','expr',1,'p_expr','Parser.py',87),
  ('expr -> NUMBER_INTEGER','expr',1,'p_expr','Parser.py',88),
  ('expr -> INTE_DOT expr DDOT expr','expr',4,'p_expr','Parser.py',89),
  ('expr -> variable assign_operator expr','expr',3,'p_expr','Parser.py',90),
  ('expr -> variable assign_operator AMPERSAND expr','expr',4,'p_expr','Parser.py',91),
  ('expr -> LPAREN type_cast_operator RPAREN expr','expr',4,'p_expr','Parser.py',92),
  ('exit_statement -> EXIT exit_expr','exit_statement',2,'p_exit_statement','Parser.py',146),
  ('exit_statement -> EXIT','exit_statement',1,'p_exit_statement','Parser.py',147),
  ('die_statement -> DIE exit_expr','die_statement',2,'p_die_statement','Parser.py',156),
  ('die_statement -> DIE','die_statement',1,'p_die_statement','Parser.py',157),
  ('exit_expr -> LPAREN expr RPAREN','exit_expr',3,'p_exit_expr','Parser.py',166),
  ('exit_expr -> LPAREN RPAREN','exit_expr',2,'p_exit_expr','Parser.py',167),
  ('array_declaration -> LPAREN array_pair_list RPAREN','array_declaration',3,'p_array_declaration','Parser.py',176),
  ('array_declaration -> LPAREN RPAREN','array_declaration',2,'p_array_declaration','Parser.py',177),
  ('statement -> expr SEMICOLON','statement',2,'p_statement','Parser.py',186),
  ('statement -> if_statement','statement',1,'p_statement','Parser.py',187),
  ('statement -> while_statement','statement',1,'p_statement','Parser.py',188),
  ('statement -> do_statement','statement',1,'p_statement','Parser.py',189),
  ('statement -> for_statement','statement',1,'p_statement','Parser.py',190),
  ('statement -> foreach_statement','statement',1,'p_statement','Parser.py',191),
  ('statement -> break_statement','statement',1,'p_statement','Parser.py',192),
  ('statement -> continue_statement','statement',1,'p_statement','Parser.py',193),
  ('statement -> return_statement','statement',1,'p_statement','Parser.py',194),
  ('statement -> exit_statement SEMICOLON','statement',2,'p_statement','Parser.py',195),
  ('statement -> die_statement SEMICOLON','statement',2,'p_statement','Parser.py',196),
  ('statement -> global_statement SEMICOLON','statement',2,'p_statement','Parser.py',197),
  ('S -> S1','S',1,'p_IF','Parser.py',226),
  ('S -> IF expr_parentheses S3','S',3,'p_IF','Parser.py',227),
  ('S1 -> IF expr_parentheses S2 ELSE S1','S1',5,'p_IF','Parser.py',228),
  ('S1 -> <empty>','S1',0,'p_IF','Parser.py',229),
  ('S2 -> ELSEIF expr_parentheses S2','S2',3,'p_IF','Parser.py',230),
  ('S2 -> S1','S2',1,'p_IF','Parser.py',231),
  ('S3 -> S','S3',1,'p_IF','Parser.py',232),
  ('S3 -> S1 ELSE S3','S3',3,'p_IF','Parser.py',233),
  ('if_statement -> statement_if','if_statement',1,'p_if_statement','Parser.py',238),
  ('if_statement -> statement_if statement_else','if_statement',2,'p_if_statement','Parser.py',239),
  ('if_statement -> statement_if statement_elseif','if_statement',2,'p_if_statement','Parser.py',240),
  ('if_statement -> statement_if statement_elseif statement_else','if_statement',3,'p_if_statement','Parser.py',241),
  ('statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if','statement_if',4,'p_statement_if','Parser.py',254),
  ('statement_if -> IF expr_parentheses statement_BLOCK_OPT','statement_if',3,'p_statement_if','Parser.py',255),
  ('statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif','statement_elseif',4,'p_statement_elseif','Parser.py',264),
  ('statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT','statement_elseif',3,'p_statement_elseif','Parser.py',265),
  ('statement_else -> ELSE statement_BLOCK_OPT','statement_else',2,'p_statement_else','Parser.py',274),
  ('global_statement -> GLOBAL global_var statement_COLON_GLOBAL','global_statement',3,'p_global_statement','Parser.py',281),
  ('global_statement -> GLOBAL global_var','global_statement',2,'p_global_statement','Parser.py',282),
  ('while_statement -> WHILE expr_parentheses statement_BLOCK_OPT','while_statement',3,'p_while_statement','Parser.py',292),
  ('do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON','do_statement',5,'p_do_statement','Parser.py',299),
  ('break_statement -> BREAK expr SEMICOLON','break_statement',3,'p_break_statement','Parser.py',305),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','Parser.py',306),
  ('continue_statement -> CONTINUE expr SEMICOLON','continue_statement',3,'p_continue_statement','Parser.py',315),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','Parser.py',316),
  ('return_statement -> RETURN expr SEMICOLON','return_statement',3,'p_return_statement','Parser.py',325),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','Parser.py',326),
  ('for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT','for_statement',5,'p_for_statement','Parser.py',335),
  ('for_parameters -> SEMICOLON SEMICOLON','for_parameters',2,'p_for_parameters','Parser.py',341),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',342),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON','for_parameters',4,'p_for_parameters','Parser.py',343),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',344),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',345),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',346),
  ('for_parameters -> SEMICOLON SEMICOLON for_expr_OPT','for_parameters',3,'p_for_parameters','Parser.py',347),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',5,'p_for_parameters','Parser.py',348),
  ('global_var -> VARIABLE','global_var',1,'p_global_var','Parser.py',370),
  ('global_var -> DOLAR VARIABLE','global_var',2,'p_global_var','Parser.py',371),
  ('global_var -> DOLAR LKEY expr RKEY','global_var',4,'p_global_var','Parser.py',372),
  ('statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL','statement_COLON_GLOBAL',3,'p_statement_COLON_GLOBAL','Parser.py',383),
  ('statement_COLON_GLOBAL -> COLON global_var','statement_COLON_GLOBAL',2,'p_statement_COLON_GLOBAL','Parser.py',384),
  ('ampersand_variable -> AMPERSAND VARIABLE','ampersand_variable',2,'p_ampersand_variable','Parser.py',393),
  ('ampersand_variable -> VARIABLE','ampersand_variable',1,'p_ampersand_variable','Parser.py',394),
  ('expr_parentheses -> LPAREN expr RPAREN','expr_parentheses',3,'p_expr_parentheses','Parser.py',403),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT','foreach_statement',7,'p_foreach_statement','Parser.py',410),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT','foreach_statement',9,'p_foreach_statement','Parser.py',411),
  ('for_expr_OPT -> expr for_expr_COLON_EXPR','for_expr_OPT',2,'p_for_expr_OPT','Parser.py',420),
  ('for_expr_OPT -> expr','for_expr_OPT',1,'p_for_expr_OPT','Parser.py',421),
  ('for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR','for_expr_COLON_EXPR',3,'p_for_expr_COLON_EXPR','Parser.py',430),
  ('for_expr_COLON_EXPR -> COLON expr','for_expr_COLON_EXPR',2,'p_for_expr_COLON_EXPR','Parser.py',431),
  ('function_call -> ID LPAREN function_call_parameter_list RPAREN','function_call',4,'p_function_call','Parser.py',440),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','Parser.py',441),
  ('function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER','function_call_parameter_list',2,'p_function_call_parameter_list','Parser.py',450),
  ('function_call_parameter_list -> function_call_parameter','function_call_parameter_list',1,'p_function_call_parameter_list','Parser.py',451),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER','fc_parameter_list_COLON_PARAMETER',3,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',460),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter','fc_parameter_list_COLON_PARAMETER',2,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',461),
  ('function_call_parameter -> expr','function_call_parameter',1,'p_function_call_parameter','Parser.py',470),
  ('function_call_parameter -> AMPERSAND VARIABLE','function_call_parameter',2,'p_function_call_parameter','Parser.py',471),
  ('unary_operator -> EXC_DOT','unary_operator',1,'p_unary_operator','Parser.py',480),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','Parser.py',481),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','Parser.py',482),
  ('type_cast_operator -> INT_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',487),
  ('type_cast_operator -> DOUBLE_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',488),
  ('type_cast_operator -> FLOAT_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',489),
  ('type_cast_operator -> REAL_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',490),
  ('type_cast_operator -> STRING_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',491),
  ('type_cast_operator -> ARRAY_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',492),
  ('type_cast_operator -> BOOLEAN_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',493),
  ('type_cast_operator -> BOOL_TYPE','type_cast_operator',1,'p_type_cast_operator','Parser.py',494),
  ('type_cast_operator -> UNSET','type_cast_operator',1,'p_type_cast_operator','Parser.py',495),
  ('assign_operator -> ADD_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',501),
  ('assign_operator -> SUB_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',502),
  ('assign_operator -> MOD_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',503),
  ('assign_operator -> PLUS_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',504),
  ('assign_operator -> DIVIDE_ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',505),
  ('assign_operator -> ASSIGN','assign_operator',1,'p_assign_operator','Parser.py',506),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',512),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',513),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',514),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',515),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','Parser.py',516),
  ('comparission_operator -> EQUALS','comparission_operator',1,'p_comparission_operator','Parser.py',522),
  ('comparission_operator -> GREAT_THAN','comparission_operator',1,'p_comparission_operator','Parser.py',523),
  ('comparission_operator -> LESS_THAN','comparission_operator',1,'p_comparission_operator','Parser.py',524),
  ('comparission_operator -> LESS_EQUAL','comparission_operator',1,'p_comparission_operator','Parser.py',525),
  ('comparission_operator -> GREAT_EQUAL','comparission_operator',1,'p_comparission_operator','Parser.py',526),
  ('comparission_operator -> NOT_EQUAL','comparission_operator',1,'p_comparission_operator','Parser.py',527),
  ('comparission_operator -> LEFT_LOGICAL','comparission_operator',1,'p_comparission_operator','Parser.py',528),
  ('comparission_operator -> RIGHT_LOGICAL','comparission_operator',1,'p_comparission_operator','Parser.py',529),
  ('comparission_operator -> AND','comparission_operator',1,'p_comparission_operator','Parser.py',530),
  ('comparission_operator -> OR','comparission_operator',1,'p_comparission_operator','Parser.py',531),
  ('scalar -> NUMBER_REAL','scalar',1,'p_scalar','Parser.py',537),
  ('scalar -> NUMBER_INTEGER','scalar',1,'p_scalar','Parser.py',538),
  ('scalar -> CONSTANT_ENCAPSED_STRING','scalar',1,'p_scalar','Parser.py',539),
  ('variable -> VARIABLE reference_variable_SELECTOR','variable',2,'p_variable','Parser.py',545),
  ('variable -> VARIABLE','variable',1,'p_variable','Parser.py',546),
  ('selector -> LBRACKET expr RBRACKET','selector',3,'p_selector','Parser.py',555),
  ('selector -> LBRACKET RBRACKET','selector',2,'p_selector','Parser.py',556),
  ('function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements','function_declaration_statement',4,'p_function_declaration_statement','Parser.py',565),
  ('fds_statements -> LKEY inner_statement_MUL RKEY','fds_statements',3,'p_fds_statements','Parser.py',571),
  ('fds_statements -> LKEY RKEY','fds_statements',2,'p_fds_statements','Parser.py',572),
  ('fds_id -> AMPERSAND ID','fds_id',2,'p_fds_id','Parser.py',581),
  ('fds_id -> ID','fds_id',1,'p_fds_id','Parser.py',582),
  ('fds_parameter -> LPAREN parameter_list RPAREN','fds_parameter',3,'p_fds_parameter','Parser.py',591),
  ('fds_parameter -> LPAREN RPAREN','fds_parameter',2,'p_fds_parameter','Parser.py',592),
  ('parameter_list -> parameter parameter_list_COLON_PARAMETER','parameter_list',2,'p_parameter_list','Parser.py',601),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser.py',602),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','Parser.py',611),
  ('parameter -> parameter_prefix VARIABLE','parameter',2,'p_parameter','Parser.py',612),
  ('parameter -> VARIABLE ASSIGN static_scalar','parameter',3,'p_parameter','Parser.py',613),
  ('parameter -> parameter_prefix VARIABLE ASSIGN static_scalar','parameter',4,'p_parameter','Parser.py',614),
  ('parameter_prefix -> parameter_type AMPERSAND','parameter_prefix',2,'p_parameter_prefix','Parser.py',627),
  ('parameter_prefix -> AMPERSAND','parameter_prefix',1,'p_parameter_prefix','Parser.py',628),
  ('parameter_prefix -> parameter_type','parameter_prefix',1,'p_parameter_prefix','Parser.py',629),
  ('parameter_type -> INT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',640),
  ('parameter_type -> BOOLEAN_TYPE','parameter_type',1,'p_parameter_type','Parser.py',641),
  ('parameter_type -> STRING_TYPE','parameter_type',1,'p_parameter_type','Parser.py',642),
  ('parameter_type -> FLOAT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',643),
  ('parameter_type -> ARRAY_TYPE','parameter_type',1,'p_parameter_type','Parser.py',644),
  ('parameter_type -> BOOL_TYPE','parameter_type',1,'p_parameter_type','Parser.py',645),
  ('parameter_type -> REAL_TYPE','parameter_type',1,'p_parameter_type','Parser.py',646),
  ('parameter_type -> DOUBLE_TYPE','parameter_type',1,'p_parameter_type','Parser.py',647),
  ('static_scalar -> common_scalar','static_scalar',1,'p_static_scalar','Parser.py',654),
  ('static_scalar -> PLUS static_scalar','static_scalar',2,'p_static_scalar','Parser.py',655),
  ('static_scalar -> MINUS static_scalar','static_scalar',2,'p_static_scalar','Parser.py',656),
  ('common_scalar -> NUMBER_REAL','common_scalar',1,'p_common_scalar','Parser.py',667),
  ('common_scalar -> NUMBER_INTEGER','common_scalar',1,'p_common_scalar','Parser.py',668),
  ('common_scalar -> CONSTANT_ENCAPSED_STRING','common_scalar',1,'p_common_scalar','Parser.py',669),
  ('array_pair_list -> array_pair array_pair_list_ARR_PAIR','array_pair_list',2,'p_array_pair_list','Parser.py',675),
  ('array_pair_list -> array_pair','array_pair_list',1,'p_array_pair_list','Parser.py',676),
  ('array_pair -> expr','array_pair',1,'p_array_pair','Parser.py',685),
  ('array_pair -> AMPERSAND variable','array_pair',2,'p_array_pair','Parser.py',686),
  ('array_pair -> expr ATTR_ASSOC expr','array_pair',3,'p_array_pair','Parser.py',687),
  ('array_pair -> expr ATTR_ASSOC AMPERSAND variable','array_pair',4,'p_array_pair','Parser.py',688),
  ('statement_MUL -> statement statement_MUL','statement_MUL',2,'p_statement_MUL','Parser.py',704),
  ('statement_MUL -> statement','statement_MUL',1,'p_statement_MUL','Parser.py',705),
  ('statement_BLOCK_OPT -> statement','statement_BLOCK_OPT',1,'p_statement_BLOCK_OPT','Parser.py',714),
  ('statement_BLOCK_OPT -> LKEY statement_MUL RKEY','statement_BLOCK_OPT',3,'p_statement_BLOCK_OPT','Parser.py',715),
  ('statement_BLOCK_OPT -> LKEY RKEY','statement_BLOCK_OPT',2,'p_statement_BLOCK_OPT','Parser.py',716),
  ('parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER','parameter_list_COLON_PARAMETER',3,'p_parameter_list_COLON_PARAMETER','Parser.py',727),
  ('parameter_list_COLON_PARAMETER -> COLON parameter','parameter_list_COLON_PARAMETER',2,'p_parameter_list_COLON_PARAMETER','Parser.py',728),
  ('reference_variable_SELECTOR -> selector reference_variable_SELECTOR','reference_variable_SELECTOR',2,'p_reference_variable_SELECTOR','Parser.py',737),
  ('reference_variable_SELECTOR -> selector','reference_variable_SELECTOR',1,'p_reference_variable_SELECTOR','Parser.py',738),
  ('array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR','array_pair_list_ARR_PAIR',3,'p_array_pair_list_ARR_PAIR','Parser.py',747),
  ('array_pair_list_ARR_PAIR -> COLON array_pair','array_pair_list_ARR_PAIR',2,'p_array_pair_list_ARR_PAIR','Parser.py',748),
]

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    LIST
    STRING
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     main_INNER -> inner_statement main_INNER
Rule 4     main_INNER -> inner_statement
Rule 5     inner_statement -> function_declaration_statement
Rule 6     inner_statement -> statement
Rule 7     inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 8     inner_statement_MUL -> inner_statement
Rule 9     expr -> MINUS expr
Rule 10    expr -> expr PLUS expr
Rule 11    expr -> expr MINUS expr
Rule 12    expr -> expr DIVIDE expr
Rule 13    expr -> expr PERCENT expr
Rule 14    expr -> expr TIMES expr
Rule 15    expr -> expr EQUALS expr
Rule 16    expr -> expr NOT_EQUAL expr
Rule 17    expr -> expr GREAT_THAN expr
Rule 18    expr -> expr GREAT_EQUAL expr
Rule 19    expr -> expr LESS_THAN expr
Rule 20    expr -> expr LESS_EQUAL expr
Rule 21    expr -> expr AND expr
Rule 22    expr -> expr OR expr
Rule 23    expr -> INCREMENT variable
Rule 24    expr -> variable INCREMENT
Rule 25    expr -> DECREMENT variable
Rule 26    expr -> variable DECREMENT
Rule 27    expr -> variable
Rule 28    expr -> LPAREN expr RPAREN
Rule 29    expr -> ARRAY_TYPE array_declaration
Rule 30    expr -> function_call
Rule 31    expr -> scalar
Rule 32    expr -> TRUE
Rule 33    expr -> FALSE
Rule 34    expr -> expr INTE_DOT expr DDOT expr
Rule 35    expr -> variable assign_operator expr
Rule 36    expr -> variable assign_operator AMPERSAND expr
Rule 37    expr -> LPAREN type_cast_operator RPAREN expr
Rule 38    exit_statement -> EXIT exit_expr
Rule 39    exit_statement -> EXIT
Rule 40    die_statement -> DIE exit_expr
Rule 41    die_statement -> DIE
Rule 42    exit_expr -> LPAREN expr RPAREN
Rule 43    exit_expr -> LPAREN RPAREN
Rule 44    array_declaration -> LPAREN array_pair_list RPAREN
Rule 45    array_declaration -> LPAREN RPAREN
Rule 46    statement -> expr SEMICOLON
Rule 47    statement -> if_statement
Rule 48    statement -> while_statement
Rule 49    statement -> do_statement
Rule 50    statement -> for_statement
Rule 51    statement -> foreach_statement
Rule 52    statement -> break_statement
Rule 53    statement -> continue_statement
Rule 54    statement -> return_statement
Rule 55    statement -> exit_statement SEMICOLON
Rule 56    statement -> die_statement SEMICOLON
Rule 57    statement -> global_statement SEMICOLON
Rule 58    S -> S1
Rule 59    S -> IF expr_parentheses S3
Rule 60    S1 -> IF expr_parentheses S2 ELSE S1
Rule 61    S1 -> <empty>
Rule 62    S2 -> ELSEIF expr_parentheses S2
Rule 63    S2 -> S1
Rule 64    S3 -> S
Rule 65    S3 -> S1 ELSE S3
Rule 66    if_statement -> statement_if
Rule 67    if_statement -> statement_if statement_else
Rule 68    if_statement -> statement_if statement_elseif
Rule 69    if_statement -> statement_if statement_elseif statement_else
Rule 70    statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if
Rule 71    statement_if -> IF expr_parentheses statement_BLOCK_OPT
Rule 72    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif
Rule 73    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT
Rule 74    statement_else -> ELSE statement_BLOCK_OPT
Rule 75    global_statement -> GLOBAL global_var statement_COLON_GLOBAL
Rule 76    global_statement -> GLOBAL global_var
Rule 77    while_statement -> WHILE expr_parentheses statement_BLOCK_OPT
Rule 78    do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
Rule 79    break_statement -> BREAK expr SEMICOLON
Rule 80    break_statement -> BREAK SEMICOLON
Rule 81    continue_statement -> CONTINUE expr SEMICOLON
Rule 82    continue_statement -> CONTINUE SEMICOLON
Rule 83    return_statement -> RETURN expr SEMICOLON
Rule 84    return_statement -> RETURN SEMICOLON
Rule 85    for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
Rule 86    for_parameters -> SEMICOLON SEMICOLON
Rule 87    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 88    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 89    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 90    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 91    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 92    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 93    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 94    global_var -> VARIABLE
Rule 95    global_var -> DOLAR VARIABLE
Rule 96    global_var -> DOLAR LKEY expr RKEY
Rule 97    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 98    statement_COLON_GLOBAL -> COLON global_var
Rule 99    ampersand_variable -> AMPERSAND VARIABLE
Rule 100   ampersand_variable -> VARIABLE
Rule 101   expr_parentheses -> LPAREN expr RPAREN
Rule 102   foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 103   foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 104   for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 105   for_expr_OPT -> expr
Rule 106   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 107   for_expr_COLON_EXPR -> COLON expr
Rule 108   function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 109   function_call -> ID LPAREN RPAREN
Rule 110   function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 111   function_call_parameter_list -> function_call_parameter
Rule 112   fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 113   fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter
Rule 114   function_call_parameter -> expr
Rule 115   function_call_parameter -> AMPERSAND VARIABLE
Rule 116   unary_operator -> EXC_DOT
Rule 117   unary_operator -> PLUS
Rule 118   unary_operator -> MINUS
Rule 119   type_cast_operator -> INT_TYPE
Rule 120   type_cast_operator -> DOUBLE_TYPE
Rule 121   type_cast_operator -> FLOAT_TYPE
Rule 122   type_cast_operator -> REAL_TYPE
Rule 123   type_cast_operator -> STRING_TYPE
Rule 124   type_cast_operator -> ARRAY_TYPE
Rule 125   type_cast_operator -> BOOLEAN_TYPE
Rule 126   type_cast_operator -> BOOL_TYPE
Rule 127   type_cast_operator -> UNSET
Rule 128   assign_operator -> ADD_ASSIGN
Rule 129   assign_operator -> SUB_ASSIGN
Rule 130   assign_operator -> MOD_ASSIGN
Rule 131   assign_operator -> PLUS_ASSIGN
Rule 132   assign_operator -> DIVIDE_ASSIGN
Rule 133   assign_operator -> ASSIGN
Rule 134   arithmetic_operator -> PLUS
Rule 135   arithmetic_operator -> DIVIDE
Rule 136   arithmetic_operator -> PERCENT
Rule 137   arithmetic_operator -> TIMES
Rule 138   arithmetic_operator -> MINUS
Rule 139   comparission_operator -> EQUALS
Rule 140   comparission_operator -> GREAT_THAN
Rule 141   comparission_operator -> LESS_THAN
Rule 142   comparission_operator -> LESS_EQUAL
Rule 143   comparission_operator -> GREAT_EQUAL
Rule 144   comparission_operator -> NOT_EQUAL
Rule 145   comparission_operator -> LEFT_LOGICAL
Rule 146   comparission_operator -> RIGHT_LOGICAL
Rule 147   comparission_operator -> AND
Rule 148   comparission_operator -> OR
Rule 149   scalar -> NUMBER_REAL
Rule 150   scalar -> NUMBER_INTEGER
Rule 151   scalar -> CONSTANT_ENCAPSED_STRING
Rule 152   variable -> VARIABLE reference_variable_SELECTOR
Rule 153   variable -> VARIABLE
Rule 154   selector -> LBRACKET expr RBRACKET
Rule 155   selector -> LBRACKET RBRACKET
Rule 156   function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements
Rule 157   fds_statements -> LKEY inner_statement_MUL RKEY
Rule 158   fds_statements -> LKEY RKEY
Rule 159   fds_id -> AMPERSAND ID
Rule 160   fds_id -> ID
Rule 161   fds_parameter -> LPAREN parameter_list RPAREN
Rule 162   fds_parameter -> LPAREN RPAREN
Rule 163   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 164   parameter_list -> parameter
Rule 165   parameter -> VARIABLE
Rule 166   parameter -> parameter_prefix VARIABLE
Rule 167   parameter -> VARIABLE ASSIGN static_scalar
Rule 168   parameter -> parameter_prefix VARIABLE ASSIGN static_scalar
Rule 169   parameter_prefix -> parameter_type AMPERSAND
Rule 170   parameter_prefix -> AMPERSAND
Rule 171   parameter_prefix -> parameter_type
Rule 172   parameter_type -> INT_TYPE
Rule 173   parameter_type -> BOOLEAN_TYPE
Rule 174   parameter_type -> STRING_TYPE
Rule 175   parameter_type -> FLOAT_TYPE
Rule 176   parameter_type -> ARRAY_TYPE
Rule 177   parameter_type -> BOOL_TYPE
Rule 178   parameter_type -> REAL_TYPE
Rule 179   parameter_type -> DOUBLE_TYPE
Rule 180   static_scalar -> common_scalar
Rule 181   static_scalar -> PLUS static_scalar
Rule 182   static_scalar -> MINUS static_scalar
Rule 183   common_scalar -> NUMBER_REAL
Rule 184   common_scalar -> NUMBER_INTEGER
Rule 185   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 186   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 187   array_pair_list -> array_pair
Rule 188   array_pair -> expr
Rule 189   array_pair -> AMPERSAND variable
Rule 190   array_pair -> expr ATTR_ASSOC expr
Rule 191   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 192   statement_MUL -> statement statement_MUL
Rule 193   statement_MUL -> statement
Rule 194   statement_BLOCK_OPT -> statement
Rule 195   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 196   statement_BLOCK_OPT -> LKEY RKEY
Rule 197   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 198   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 199   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 200   reference_variable_SELECTOR -> selector
Rule 201   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 202   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 128
AMPERSAND            : 36 99 115 159 169 170 189 191
AND                  : 21 147
APOSTROFE            : 
ARRAY_TYPE           : 29 124 176
ARROBA               : 
AS                   : 102 103
ASPAS                : 
ASSIGN               : 133 167 168
ATTR_ASSOC           : 103 190 191
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 125 173
BOOL_TYPE            : 126 177
BREAK                : 79 80
CASE                 : 
CLONE                : 
COLON                : 97 98 106 107 112 113 197 198 201 202
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 151 185
CONTINUE             : 81 82
CRASE                : 
DDOT                 : 34
DECLARE              : 
DECREMENT            : 25 26
DIE                  : 40 41
DIVIDE               : 12 135
DIVIDE_ASSIGN        : 132
DO                   : 78
DOLAR                : 95 96
DOUBLE_TYPE          : 120 179
ELSE                 : 60 65 74
ELSEIF               : 62 72 73
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 15 139
EXC_DOT              : 116
EXIT                 : 38 39
FALSE                : 33
FLOAT_TYPE           : 121 175
FOR                  : 85
FOREACH              : 102 103
FUNCTION             : 156
GLOBAL               : 75 76
GREAT_EQUAL          : 18 143
GREAT_THAN           : 17 140
ID                   : 108 109 159 160
IDENTATION           : 
IF                   : 59 60 70 71
INCREMENT            : 23 24
INTE_DOT             : 34
INT_TYPE             : 119 172
LBRACKET             : 154 155
LEFT_LOGICAL         : 145
LESS_EQUAL           : 20 142
LESS_THAN            : 19 141
LIST                 : 
LKEY                 : 96 157 158 195 196
LPAREN               : 28 37 42 43 44 45 85 101 102 103 108 109 161 162
MINUS                : 9 11 118 138 182
MOD_ASSIGN           : 130
NOT_EQUAL            : 16 144
NUMBER_INTEGER       : 150 184
NUMBER_REAL          : 149 183
OR                   : 22 148
PERCENT              : 13 136
PLUS                 : 10 117 134 181
PLUS_ASSIGN          : 131
RBRACKET             : 154 155
REAL_TYPE            : 122 178
RETURN               : 83 84
RIGHT_LOGICAL        : 146
RKEY                 : 96 157 158 195 196
RPAREN               : 28 37 42 43 44 45 85 101 102 103 108 109 161 162
SEMICOLON            : 46 55 56 57 78 79 80 81 82 83 84 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93
STRING               : 
STRING_TYPE          : 123 174
SUB_ASSIGN           : 129
TIMES                : 14 137
TRUE                 : 32
UNSET                : 127
VAR                  : 
VARIABLE             : 94 95 99 100 115 152 153 165 166 167 168
WHILE                : 77 78
error                : 

Nonterminals, with rules where they appear

S                    : 64
S1                   : 58 60 63 65
S2                   : 60 62
S3                   : 59 65
ampersand_variable   : 102 103 103
arithmetic_operator  : 
array_declaration    : 29
array_pair           : 186 187 201 202
array_pair_list      : 44
array_pair_list_ARR_PAIR : 186 201
assign_operator      : 35 36
break_statement      : 52
common_scalar        : 180
comparission_operator : 
continue_statement   : 53
die_statement        : 56
do_statement         : 49
exit_expr            : 38 40
exit_statement       : 55
expr                 : 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 28 34 34 34 35 36 37 42 46 79 81 83 96 101 102 103 104 105 106 107 114 154 188 190 190 191
expr_parentheses     : 59 60 62 70 71 72 73 77 78
fc_parameter_list_COLON_PARAMETER : 110 112
fds_id               : 156
fds_parameter        : 156
fds_statements       : 156
for_expr_COLON_EXPR  : 104 106
for_expr_OPT         : 87 88 88 89 89 90 91 91 92 93 93 93
for_parameters       : 85
for_statement        : 50
foreach_statement    : 51
function_call        : 30
function_call_parameter : 110 111 112 113
function_call_parameter_list : 108
function_declaration_statement : 5
global_statement     : 57
global_var           : 75 76 97 98
if_statement         : 47
inner_statement      : 3 4 7 8
inner_statement_MUL  : 7 157
main                 : 0
main_INNER           : 1 3
parameter            : 163 164 197 198
parameter_list       : 161
parameter_list_COLON_PARAMETER : 163 197
parameter_prefix     : 166 168
parameter_type       : 169 171
reference_variable_SELECTOR : 152 199
return_statement     : 54
scalar               : 31
selector             : 199 200
statement            : 6 192 193 194
statement_BLOCK_OPT  : 70 71 72 73 74 77 78 85 102 103
statement_COLON_GLOBAL : 75 97
statement_MUL        : 192 195
statement_else       : 67 69
statement_elseif     : 68 69 72
statement_if         : 66 67 68 69 70
static_scalar        : 167 168 181 182
type_cast_operator   : 37
unary_operator       : 
variable             : 23 24 25 26 27 35 36 189 191
while_statement      : 48

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (156) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 48


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (3) main_INNER -> inner_statement . main_INNER
    (4) main_INNER -> inner_statement .
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (156) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    END_PROGRAM     reduce using rule 4 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 49
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 6

    (5) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 5 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 5 (inner_statement -> function_declaration_statement .)


state 7

    (6) inner_statement -> statement .

    FUNCTION        reduce using rule 6 (inner_statement -> statement .)
    MINUS           reduce using rule 6 (inner_statement -> statement .)
    INCREMENT       reduce using rule 6 (inner_statement -> statement .)
    DECREMENT       reduce using rule 6 (inner_statement -> statement .)
    LPAREN          reduce using rule 6 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 6 (inner_statement -> statement .)
    TRUE            reduce using rule 6 (inner_statement -> statement .)
    FALSE           reduce using rule 6 (inner_statement -> statement .)
    WHILE           reduce using rule 6 (inner_statement -> statement .)
    DO              reduce using rule 6 (inner_statement -> statement .)
    FOR             reduce using rule 6 (inner_statement -> statement .)
    FOREACH         reduce using rule 6 (inner_statement -> statement .)
    BREAK           reduce using rule 6 (inner_statement -> statement .)
    CONTINUE        reduce using rule 6 (inner_statement -> statement .)
    RETURN          reduce using rule 6 (inner_statement -> statement .)
    EXIT            reduce using rule 6 (inner_statement -> statement .)
    DIE             reduce using rule 6 (inner_statement -> statement .)
    GLOBAL          reduce using rule 6 (inner_statement -> statement .)
    VARIABLE        reduce using rule 6 (inner_statement -> statement .)
    ID              reduce using rule 6 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 6 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 6 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (inner_statement -> statement .)
    IF              reduce using rule 6 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 6 (inner_statement -> statement .)
    RKEY            reduce using rule 6 (inner_statement -> statement .)


state 8

    (156) function_declaration_statement -> FUNCTION . fds_id fds_parameter fds_statements
    (159) fds_id -> . AMPERSAND ID
    (160) fds_id -> . ID

    AMPERSAND       shift and go to state 51
    ID              shift and go to state 52

    fds_id                         shift and go to state 50

state 9

    (46) statement -> expr . SEMICOLON
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 10

    (47) statement -> if_statement .

    FUNCTION        reduce using rule 47 (statement -> if_statement .)
    MINUS           reduce using rule 47 (statement -> if_statement .)
    INCREMENT       reduce using rule 47 (statement -> if_statement .)
    DECREMENT       reduce using rule 47 (statement -> if_statement .)
    LPAREN          reduce using rule 47 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 47 (statement -> if_statement .)
    TRUE            reduce using rule 47 (statement -> if_statement .)
    FALSE           reduce using rule 47 (statement -> if_statement .)
    WHILE           reduce using rule 47 (statement -> if_statement .)
    DO              reduce using rule 47 (statement -> if_statement .)
    FOR             reduce using rule 47 (statement -> if_statement .)
    FOREACH         reduce using rule 47 (statement -> if_statement .)
    BREAK           reduce using rule 47 (statement -> if_statement .)
    CONTINUE        reduce using rule 47 (statement -> if_statement .)
    RETURN          reduce using rule 47 (statement -> if_statement .)
    EXIT            reduce using rule 47 (statement -> if_statement .)
    DIE             reduce using rule 47 (statement -> if_statement .)
    GLOBAL          reduce using rule 47 (statement -> if_statement .)
    VARIABLE        reduce using rule 47 (statement -> if_statement .)
    ID              reduce using rule 47 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 47 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 47 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (statement -> if_statement .)
    IF              reduce using rule 47 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 47 (statement -> if_statement .)
    RKEY            reduce using rule 47 (statement -> if_statement .)
    ELSE            reduce using rule 47 (statement -> if_statement .)
    ELSEIF          reduce using rule 47 (statement -> if_statement .)


state 11

    (48) statement -> while_statement .

    FUNCTION        reduce using rule 48 (statement -> while_statement .)
    MINUS           reduce using rule 48 (statement -> while_statement .)
    INCREMENT       reduce using rule 48 (statement -> while_statement .)
    DECREMENT       reduce using rule 48 (statement -> while_statement .)
    LPAREN          reduce using rule 48 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 48 (statement -> while_statement .)
    TRUE            reduce using rule 48 (statement -> while_statement .)
    FALSE           reduce using rule 48 (statement -> while_statement .)
    WHILE           reduce using rule 48 (statement -> while_statement .)
    DO              reduce using rule 48 (statement -> while_statement .)
    FOR             reduce using rule 48 (statement -> while_statement .)
    FOREACH         reduce using rule 48 (statement -> while_statement .)
    BREAK           reduce using rule 48 (statement -> while_statement .)
    CONTINUE        reduce using rule 48 (statement -> while_statement .)
    RETURN          reduce using rule 48 (statement -> while_statement .)
    EXIT            reduce using rule 48 (statement -> while_statement .)
    DIE             reduce using rule 48 (statement -> while_statement .)
    GLOBAL          reduce using rule 48 (statement -> while_statement .)
    VARIABLE        reduce using rule 48 (statement -> while_statement .)
    ID              reduce using rule 48 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 48 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 48 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (statement -> while_statement .)
    IF              reduce using rule 48 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 48 (statement -> while_statement .)
    RKEY            reduce using rule 48 (statement -> while_statement .)
    ELSE            reduce using rule 48 (statement -> while_statement .)
    ELSEIF          reduce using rule 48 (statement -> while_statement .)


state 12

    (49) statement -> do_statement .

    FUNCTION        reduce using rule 49 (statement -> do_statement .)
    MINUS           reduce using rule 49 (statement -> do_statement .)
    INCREMENT       reduce using rule 49 (statement -> do_statement .)
    DECREMENT       reduce using rule 49 (statement -> do_statement .)
    LPAREN          reduce using rule 49 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 49 (statement -> do_statement .)
    TRUE            reduce using rule 49 (statement -> do_statement .)
    FALSE           reduce using rule 49 (statement -> do_statement .)
    WHILE           reduce using rule 49 (statement -> do_statement .)
    DO              reduce using rule 49 (statement -> do_statement .)
    FOR             reduce using rule 49 (statement -> do_statement .)
    FOREACH         reduce using rule 49 (statement -> do_statement .)
    BREAK           reduce using rule 49 (statement -> do_statement .)
    CONTINUE        reduce using rule 49 (statement -> do_statement .)
    RETURN          reduce using rule 49 (statement -> do_statement .)
    EXIT            reduce using rule 49 (statement -> do_statement .)
    DIE             reduce using rule 49 (statement -> do_statement .)
    GLOBAL          reduce using rule 49 (statement -> do_statement .)
    VARIABLE        reduce using rule 49 (statement -> do_statement .)
    ID              reduce using rule 49 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 49 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 49 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (statement -> do_statement .)
    IF              reduce using rule 49 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 49 (statement -> do_statement .)
    RKEY            reduce using rule 49 (statement -> do_statement .)
    ELSE            reduce using rule 49 (statement -> do_statement .)
    ELSEIF          reduce using rule 49 (statement -> do_statement .)


state 13

    (50) statement -> for_statement .

    FUNCTION        reduce using rule 50 (statement -> for_statement .)
    MINUS           reduce using rule 50 (statement -> for_statement .)
    INCREMENT       reduce using rule 50 (statement -> for_statement .)
    DECREMENT       reduce using rule 50 (statement -> for_statement .)
    LPAREN          reduce using rule 50 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 50 (statement -> for_statement .)
    TRUE            reduce using rule 50 (statement -> for_statement .)
    FALSE           reduce using rule 50 (statement -> for_statement .)
    WHILE           reduce using rule 50 (statement -> for_statement .)
    DO              reduce using rule 50 (statement -> for_statement .)
    FOR             reduce using rule 50 (statement -> for_statement .)
    FOREACH         reduce using rule 50 (statement -> for_statement .)
    BREAK           reduce using rule 50 (statement -> for_statement .)
    CONTINUE        reduce using rule 50 (statement -> for_statement .)
    RETURN          reduce using rule 50 (statement -> for_statement .)
    EXIT            reduce using rule 50 (statement -> for_statement .)
    DIE             reduce using rule 50 (statement -> for_statement .)
    GLOBAL          reduce using rule 50 (statement -> for_statement .)
    VARIABLE        reduce using rule 50 (statement -> for_statement .)
    ID              reduce using rule 50 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 50 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 50 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (statement -> for_statement .)
    IF              reduce using rule 50 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 50 (statement -> for_statement .)
    RKEY            reduce using rule 50 (statement -> for_statement .)
    ELSE            reduce using rule 50 (statement -> for_statement .)
    ELSEIF          reduce using rule 50 (statement -> for_statement .)


state 14

    (51) statement -> foreach_statement .

    FUNCTION        reduce using rule 51 (statement -> foreach_statement .)
    MINUS           reduce using rule 51 (statement -> foreach_statement .)
    INCREMENT       reduce using rule 51 (statement -> foreach_statement .)
    DECREMENT       reduce using rule 51 (statement -> foreach_statement .)
    LPAREN          reduce using rule 51 (statement -> foreach_statement .)
    ARRAY_TYPE      reduce using rule 51 (statement -> foreach_statement .)
    TRUE            reduce using rule 51 (statement -> foreach_statement .)
    FALSE           reduce using rule 51 (statement -> foreach_statement .)
    WHILE           reduce using rule 51 (statement -> foreach_statement .)
    DO              reduce using rule 51 (statement -> foreach_statement .)
    FOR             reduce using rule 51 (statement -> foreach_statement .)
    FOREACH         reduce using rule 51 (statement -> foreach_statement .)
    BREAK           reduce using rule 51 (statement -> foreach_statement .)
    CONTINUE        reduce using rule 51 (statement -> foreach_statement .)
    RETURN          reduce using rule 51 (statement -> foreach_statement .)
    EXIT            reduce using rule 51 (statement -> foreach_statement .)
    DIE             reduce using rule 51 (statement -> foreach_statement .)
    GLOBAL          reduce using rule 51 (statement -> foreach_statement .)
    VARIABLE        reduce using rule 51 (statement -> foreach_statement .)
    ID              reduce using rule 51 (statement -> foreach_statement .)
    NUMBER_REAL     reduce using rule 51 (statement -> foreach_statement .)
    NUMBER_INTEGER  reduce using rule 51 (statement -> foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 51 (statement -> foreach_statement .)
    IF              reduce using rule 51 (statement -> foreach_statement .)
    END_PROGRAM     reduce using rule 51 (statement -> foreach_statement .)
    RKEY            reduce using rule 51 (statement -> foreach_statement .)
    ELSE            reduce using rule 51 (statement -> foreach_statement .)
    ELSEIF          reduce using rule 51 (statement -> foreach_statement .)


state 15

    (52) statement -> break_statement .

    FUNCTION        reduce using rule 52 (statement -> break_statement .)
    MINUS           reduce using rule 52 (statement -> break_statement .)
    INCREMENT       reduce using rule 52 (statement -> break_statement .)
    DECREMENT       reduce using rule 52 (statement -> break_statement .)
    LPAREN          reduce using rule 52 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 52 (statement -> break_statement .)
    TRUE            reduce using rule 52 (statement -> break_statement .)
    FALSE           reduce using rule 52 (statement -> break_statement .)
    WHILE           reduce using rule 52 (statement -> break_statement .)
    DO              reduce using rule 52 (statement -> break_statement .)
    FOR             reduce using rule 52 (statement -> break_statement .)
    FOREACH         reduce using rule 52 (statement -> break_statement .)
    BREAK           reduce using rule 52 (statement -> break_statement .)
    CONTINUE        reduce using rule 52 (statement -> break_statement .)
    RETURN          reduce using rule 52 (statement -> break_statement .)
    EXIT            reduce using rule 52 (statement -> break_statement .)
    DIE             reduce using rule 52 (statement -> break_statement .)
    GLOBAL          reduce using rule 52 (statement -> break_statement .)
    VARIABLE        reduce using rule 52 (statement -> break_statement .)
    ID              reduce using rule 52 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 52 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 52 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 52 (statement -> break_statement .)
    IF              reduce using rule 52 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 52 (statement -> break_statement .)
    RKEY            reduce using rule 52 (statement -> break_statement .)
    ELSE            reduce using rule 52 (statement -> break_statement .)
    ELSEIF          reduce using rule 52 (statement -> break_statement .)


state 16

    (53) statement -> continue_statement .

    FUNCTION        reduce using rule 53 (statement -> continue_statement .)
    MINUS           reduce using rule 53 (statement -> continue_statement .)
    INCREMENT       reduce using rule 53 (statement -> continue_statement .)
    DECREMENT       reduce using rule 53 (statement -> continue_statement .)
    LPAREN          reduce using rule 53 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 53 (statement -> continue_statement .)
    TRUE            reduce using rule 53 (statement -> continue_statement .)
    FALSE           reduce using rule 53 (statement -> continue_statement .)
    WHILE           reduce using rule 53 (statement -> continue_statement .)
    DO              reduce using rule 53 (statement -> continue_statement .)
    FOR             reduce using rule 53 (statement -> continue_statement .)
    FOREACH         reduce using rule 53 (statement -> continue_statement .)
    BREAK           reduce using rule 53 (statement -> continue_statement .)
    CONTINUE        reduce using rule 53 (statement -> continue_statement .)
    RETURN          reduce using rule 53 (statement -> continue_statement .)
    EXIT            reduce using rule 53 (statement -> continue_statement .)
    DIE             reduce using rule 53 (statement -> continue_statement .)
    GLOBAL          reduce using rule 53 (statement -> continue_statement .)
    VARIABLE        reduce using rule 53 (statement -> continue_statement .)
    ID              reduce using rule 53 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 53 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 53 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (statement -> continue_statement .)
    IF              reduce using rule 53 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 53 (statement -> continue_statement .)
    RKEY            reduce using rule 53 (statement -> continue_statement .)
    ELSE            reduce using rule 53 (statement -> continue_statement .)
    ELSEIF          reduce using rule 53 (statement -> continue_statement .)


state 17

    (54) statement -> return_statement .

    FUNCTION        reduce using rule 54 (statement -> return_statement .)
    MINUS           reduce using rule 54 (statement -> return_statement .)
    INCREMENT       reduce using rule 54 (statement -> return_statement .)
    DECREMENT       reduce using rule 54 (statement -> return_statement .)
    LPAREN          reduce using rule 54 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 54 (statement -> return_statement .)
    TRUE            reduce using rule 54 (statement -> return_statement .)
    FALSE           reduce using rule 54 (statement -> return_statement .)
    WHILE           reduce using rule 54 (statement -> return_statement .)
    DO              reduce using rule 54 (statement -> return_statement .)
    FOR             reduce using rule 54 (statement -> return_statement .)
    FOREACH         reduce using rule 54 (statement -> return_statement .)
    BREAK           reduce using rule 54 (statement -> return_statement .)
    CONTINUE        reduce using rule 54 (statement -> return_statement .)
    RETURN          reduce using rule 54 (statement -> return_statement .)
    EXIT            reduce using rule 54 (statement -> return_statement .)
    DIE             reduce using rule 54 (statement -> return_statement .)
    GLOBAL          reduce using rule 54 (statement -> return_statement .)
    VARIABLE        reduce using rule 54 (statement -> return_statement .)
    ID              reduce using rule 54 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 54 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 54 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (statement -> return_statement .)
    IF              reduce using rule 54 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 54 (statement -> return_statement .)
    RKEY            reduce using rule 54 (statement -> return_statement .)
    ELSE            reduce using rule 54 (statement -> return_statement .)
    ELSEIF          reduce using rule 54 (statement -> return_statement .)


state 18

    (55) statement -> exit_statement . SEMICOLON

    SEMICOLON       shift and go to state 68


state 19

    (56) statement -> die_statement . SEMICOLON

    SEMICOLON       shift and go to state 69


state 20

    (57) statement -> global_statement . SEMICOLON

    SEMICOLON       shift and go to state 70


state 21

    (9) expr -> MINUS . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 71
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 22

    (23) expr -> INCREMENT . variable
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE

    VARIABLE        shift and go to state 42

    variable                       shift and go to state 72

state 23

    (24) expr -> variable . INCREMENT
    (26) expr -> variable . DECREMENT
    (27) expr -> variable .
    (35) expr -> variable . assign_operator expr
    (36) expr -> variable . assign_operator AMPERSAND expr
    (128) assign_operator -> . ADD_ASSIGN
    (129) assign_operator -> . SUB_ASSIGN
    (130) assign_operator -> . MOD_ASSIGN
    (131) assign_operator -> . PLUS_ASSIGN
    (132) assign_operator -> . DIVIDE_ASSIGN
    (133) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    SEMICOLON       reduce using rule 27 (expr -> variable .)
    PLUS            reduce using rule 27 (expr -> variable .)
    MINUS           reduce using rule 27 (expr -> variable .)
    DIVIDE          reduce using rule 27 (expr -> variable .)
    PERCENT         reduce using rule 27 (expr -> variable .)
    TIMES           reduce using rule 27 (expr -> variable .)
    EQUALS          reduce using rule 27 (expr -> variable .)
    NOT_EQUAL       reduce using rule 27 (expr -> variable .)
    GREAT_THAN      reduce using rule 27 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 27 (expr -> variable .)
    LESS_THAN       reduce using rule 27 (expr -> variable .)
    LESS_EQUAL      reduce using rule 27 (expr -> variable .)
    AND             reduce using rule 27 (expr -> variable .)
    OR              reduce using rule 27 (expr -> variable .)
    INTE_DOT        reduce using rule 27 (expr -> variable .)
    RPAREN          reduce using rule 27 (expr -> variable .)
    DDOT            reduce using rule 27 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 27 (expr -> variable .)
    COLON           reduce using rule 27 (expr -> variable .)
    AS              reduce using rule 27 (expr -> variable .)
    RBRACKET        reduce using rule 27 (expr -> variable .)
    RKEY            reduce using rule 27 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 77
    MOD_ASSIGN      shift and go to state 78
    PLUS_ASSIGN     shift and go to state 79
    DIVIDE_ASSIGN   shift and go to state 80
    ASSIGN          shift and go to state 81

    assign_operator                shift and go to state 75

state 24

    (25) expr -> DECREMENT . variable
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE

    VARIABLE        shift and go to state 42

    variable                       shift and go to state 82

state 25

    (28) expr -> LPAREN . expr RPAREN
    (37) expr -> LPAREN . type_cast_operator RPAREN expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (119) type_cast_operator -> . INT_TYPE
    (120) type_cast_operator -> . DOUBLE_TYPE
    (121) type_cast_operator -> . FLOAT_TYPE
    (122) type_cast_operator -> . REAL_TYPE
    (123) type_cast_operator -> . STRING_TYPE
    (124) type_cast_operator -> . ARRAY_TYPE
    (125) type_cast_operator -> . BOOLEAN_TYPE
    (126) type_cast_operator -> . BOOL_TYPE
    (127) type_cast_operator -> . UNSET
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 85
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    INT_TYPE        shift and go to state 86
    DOUBLE_TYPE     shift and go to state 87
    FLOAT_TYPE      shift and go to state 88
    REAL_TYPE       shift and go to state 89
    STRING_TYPE     shift and go to state 90
    BOOLEAN_TYPE    shift and go to state 91
    BOOL_TYPE       shift and go to state 92
    UNSET           shift and go to state 93
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 83
    type_cast_operator             shift and go to state 84
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 26

    (29) expr -> ARRAY_TYPE . array_declaration
    (44) array_declaration -> . LPAREN array_pair_list RPAREN
    (45) array_declaration -> . LPAREN RPAREN

    LPAREN          shift and go to state 95

    array_declaration              shift and go to state 94

state 27

    (30) expr -> function_call .

    SEMICOLON       reduce using rule 30 (expr -> function_call .)
    PLUS            reduce using rule 30 (expr -> function_call .)
    MINUS           reduce using rule 30 (expr -> function_call .)
    DIVIDE          reduce using rule 30 (expr -> function_call .)
    PERCENT         reduce using rule 30 (expr -> function_call .)
    TIMES           reduce using rule 30 (expr -> function_call .)
    EQUALS          reduce using rule 30 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 30 (expr -> function_call .)
    GREAT_THAN      reduce using rule 30 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 30 (expr -> function_call .)
    LESS_THAN       reduce using rule 30 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 30 (expr -> function_call .)
    AND             reduce using rule 30 (expr -> function_call .)
    OR              reduce using rule 30 (expr -> function_call .)
    INTE_DOT        reduce using rule 30 (expr -> function_call .)
    RPAREN          reduce using rule 30 (expr -> function_call .)
    DDOT            reduce using rule 30 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 30 (expr -> function_call .)
    COLON           reduce using rule 30 (expr -> function_call .)
    AS              reduce using rule 30 (expr -> function_call .)
    RBRACKET        reduce using rule 30 (expr -> function_call .)
    RKEY            reduce using rule 30 (expr -> function_call .)


state 28

    (31) expr -> scalar .

    SEMICOLON       reduce using rule 31 (expr -> scalar .)
    PLUS            reduce using rule 31 (expr -> scalar .)
    MINUS           reduce using rule 31 (expr -> scalar .)
    DIVIDE          reduce using rule 31 (expr -> scalar .)
    PERCENT         reduce using rule 31 (expr -> scalar .)
    TIMES           reduce using rule 31 (expr -> scalar .)
    EQUALS          reduce using rule 31 (expr -> scalar .)
    NOT_EQUAL       reduce using rule 31 (expr -> scalar .)
    GREAT_THAN      reduce using rule 31 (expr -> scalar .)
    GREAT_EQUAL     reduce using rule 31 (expr -> scalar .)
    LESS_THAN       reduce using rule 31 (expr -> scalar .)
    LESS_EQUAL      reduce using rule 31 (expr -> scalar .)
    AND             reduce using rule 31 (expr -> scalar .)
    OR              reduce using rule 31 (expr -> scalar .)
    INTE_DOT        reduce using rule 31 (expr -> scalar .)
    RPAREN          reduce using rule 31 (expr -> scalar .)
    DDOT            reduce using rule 31 (expr -> scalar .)
    ATTR_ASSOC      reduce using rule 31 (expr -> scalar .)
    COLON           reduce using rule 31 (expr -> scalar .)
    AS              reduce using rule 31 (expr -> scalar .)
    RBRACKET        reduce using rule 31 (expr -> scalar .)
    RKEY            reduce using rule 31 (expr -> scalar .)


state 29

    (32) expr -> TRUE .

    SEMICOLON       reduce using rule 32 (expr -> TRUE .)
    PLUS            reduce using rule 32 (expr -> TRUE .)
    MINUS           reduce using rule 32 (expr -> TRUE .)
    DIVIDE          reduce using rule 32 (expr -> TRUE .)
    PERCENT         reduce using rule 32 (expr -> TRUE .)
    TIMES           reduce using rule 32 (expr -> TRUE .)
    EQUALS          reduce using rule 32 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 32 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 32 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 32 (expr -> TRUE .)
    LESS_THAN       reduce using rule 32 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 32 (expr -> TRUE .)
    AND             reduce using rule 32 (expr -> TRUE .)
    OR              reduce using rule 32 (expr -> TRUE .)
    INTE_DOT        reduce using rule 32 (expr -> TRUE .)
    RPAREN          reduce using rule 32 (expr -> TRUE .)
    DDOT            reduce using rule 32 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 32 (expr -> TRUE .)
    COLON           reduce using rule 32 (expr -> TRUE .)
    AS              reduce using rule 32 (expr -> TRUE .)
    RBRACKET        reduce using rule 32 (expr -> TRUE .)
    RKEY            reduce using rule 32 (expr -> TRUE .)


state 30

    (33) expr -> FALSE .

    SEMICOLON       reduce using rule 33 (expr -> FALSE .)
    PLUS            reduce using rule 33 (expr -> FALSE .)
    MINUS           reduce using rule 33 (expr -> FALSE .)
    DIVIDE          reduce using rule 33 (expr -> FALSE .)
    PERCENT         reduce using rule 33 (expr -> FALSE .)
    TIMES           reduce using rule 33 (expr -> FALSE .)
    EQUALS          reduce using rule 33 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 33 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 33 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 33 (expr -> FALSE .)
    LESS_THAN       reduce using rule 33 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 33 (expr -> FALSE .)
    AND             reduce using rule 33 (expr -> FALSE .)
    OR              reduce using rule 33 (expr -> FALSE .)
    INTE_DOT        reduce using rule 33 (expr -> FALSE .)
    RPAREN          reduce using rule 33 (expr -> FALSE .)
    DDOT            reduce using rule 33 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 33 (expr -> FALSE .)
    COLON           reduce using rule 33 (expr -> FALSE .)
    AS              reduce using rule 33 (expr -> FALSE .)
    RBRACKET        reduce using rule 33 (expr -> FALSE .)
    RKEY            reduce using rule 33 (expr -> FALSE .)


state 31

    (66) if_statement -> statement_if .
    (67) if_statement -> statement_if . statement_else
    (68) if_statement -> statement_if . statement_elseif
    (69) if_statement -> statement_if . statement_elseif statement_else
    (74) statement_else -> . ELSE statement_BLOCK_OPT
    (72) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif
    (73) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    FUNCTION        reduce using rule 66 (if_statement -> statement_if .)
    MINUS           reduce using rule 66 (if_statement -> statement_if .)
    INCREMENT       reduce using rule 66 (if_statement -> statement_if .)
    DECREMENT       reduce using rule 66 (if_statement -> statement_if .)
    LPAREN          reduce using rule 66 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 66 (if_statement -> statement_if .)
    TRUE            reduce using rule 66 (if_statement -> statement_if .)
    FALSE           reduce using rule 66 (if_statement -> statement_if .)
    WHILE           reduce using rule 66 (if_statement -> statement_if .)
    DO              reduce using rule 66 (if_statement -> statement_if .)
    FOR             reduce using rule 66 (if_statement -> statement_if .)
    FOREACH         reduce using rule 66 (if_statement -> statement_if .)
    BREAK           reduce using rule 66 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 66 (if_statement -> statement_if .)
    RETURN          reduce using rule 66 (if_statement -> statement_if .)
    EXIT            reduce using rule 66 (if_statement -> statement_if .)
    DIE             reduce using rule 66 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 66 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 66 (if_statement -> statement_if .)
    ID              reduce using rule 66 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 66 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 66 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 66 (if_statement -> statement_if .)
    IF              reduce using rule 66 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 66 (if_statement -> statement_if .)
    RKEY            reduce using rule 66 (if_statement -> statement_if .)
    ELSE            shift and go to state 98
    ELSEIF          shift and go to state 99

  ! ELSE            [ reduce using rule 66 (if_statement -> statement_if .) ]
  ! ELSEIF          [ reduce using rule 66 (if_statement -> statement_if .) ]

    statement_else                 shift and go to state 96
    statement_elseif               shift and go to state 97

state 32

    (77) while_statement -> WHILE . expr_parentheses statement_BLOCK_OPT
    (101) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 101

    expr_parentheses               shift and go to state 100

state 33

    (78) do_statement -> DO . statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (194) statement_BLOCK_OPT -> . statement
    (195) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (196) statement_BLOCK_OPT -> . LKEY RKEY
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 104
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 102
    statement                      shift and go to state 103
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 34

    (85) for_statement -> FOR . LPAREN for_parameters RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 105


state 35

    (102) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 106


state 36

    (79) break_statement -> BREAK . expr SEMICOLON
    (80) break_statement -> BREAK . SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    SEMICOLON       shift and go to state 108
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 107
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 37

    (81) continue_statement -> CONTINUE . expr SEMICOLON
    (82) continue_statement -> CONTINUE . SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    SEMICOLON       shift and go to state 110
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 109
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 38

    (83) return_statement -> RETURN . expr SEMICOLON
    (84) return_statement -> RETURN . SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    SEMICOLON       shift and go to state 112
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 111
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 39

    (38) exit_statement -> EXIT . exit_expr
    (39) exit_statement -> EXIT .
    (42) exit_expr -> . LPAREN expr RPAREN
    (43) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 39 (exit_statement -> EXIT .)
    LPAREN          shift and go to state 114

    exit_expr                      shift and go to state 113

state 40

    (40) die_statement -> DIE . exit_expr
    (41) die_statement -> DIE .
    (42) exit_expr -> . LPAREN expr RPAREN
    (43) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 41 (die_statement -> DIE .)
    LPAREN          shift and go to state 114

    exit_expr                      shift and go to state 115

state 41

    (75) global_statement -> GLOBAL . global_var statement_COLON_GLOBAL
    (76) global_statement -> GLOBAL . global_var
    (94) global_var -> . VARIABLE
    (95) global_var -> . DOLAR VARIABLE
    (96) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 117
    DOLAR           shift and go to state 118

    global_var                     shift and go to state 116

state 42

    (152) variable -> VARIABLE . reference_variable_SELECTOR
    (153) variable -> VARIABLE .
    (199) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (200) reference_variable_SELECTOR -> . selector
    (154) selector -> . LBRACKET expr RBRACKET
    (155) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 153 (variable -> VARIABLE .)
    DECREMENT       reduce using rule 153 (variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 153 (variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 153 (variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 153 (variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 153 (variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 153 (variable -> VARIABLE .)
    ASSIGN          reduce using rule 153 (variable -> VARIABLE .)
    SEMICOLON       reduce using rule 153 (variable -> VARIABLE .)
    PLUS            reduce using rule 153 (variable -> VARIABLE .)
    MINUS           reduce using rule 153 (variable -> VARIABLE .)
    DIVIDE          reduce using rule 153 (variable -> VARIABLE .)
    PERCENT         reduce using rule 153 (variable -> VARIABLE .)
    TIMES           reduce using rule 153 (variable -> VARIABLE .)
    EQUALS          reduce using rule 153 (variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 153 (variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 153 (variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 153 (variable -> VARIABLE .)
    LESS_THAN       reduce using rule 153 (variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 153 (variable -> VARIABLE .)
    AND             reduce using rule 153 (variable -> VARIABLE .)
    OR              reduce using rule 153 (variable -> VARIABLE .)
    INTE_DOT        reduce using rule 153 (variable -> VARIABLE .)
    RPAREN          reduce using rule 153 (variable -> VARIABLE .)
    DDOT            reduce using rule 153 (variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 153 (variable -> VARIABLE .)
    COLON           reduce using rule 153 (variable -> VARIABLE .)
    AS              reduce using rule 153 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 153 (variable -> VARIABLE .)
    RKEY            reduce using rule 153 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 121

    reference_variable_SELECTOR    shift and go to state 119
    selector                       shift and go to state 120

state 43

    (108) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (109) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 122


state 44

    (149) scalar -> NUMBER_REAL .

    SEMICOLON       reduce using rule 149 (scalar -> NUMBER_REAL .)
    PLUS            reduce using rule 149 (scalar -> NUMBER_REAL .)
    MINUS           reduce using rule 149 (scalar -> NUMBER_REAL .)
    DIVIDE          reduce using rule 149 (scalar -> NUMBER_REAL .)
    PERCENT         reduce using rule 149 (scalar -> NUMBER_REAL .)
    TIMES           reduce using rule 149 (scalar -> NUMBER_REAL .)
    EQUALS          reduce using rule 149 (scalar -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 149 (scalar -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 149 (scalar -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 149 (scalar -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 149 (scalar -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 149 (scalar -> NUMBER_REAL .)
    AND             reduce using rule 149 (scalar -> NUMBER_REAL .)
    OR              reduce using rule 149 (scalar -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 149 (scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 149 (scalar -> NUMBER_REAL .)
    DDOT            reduce using rule 149 (scalar -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 149 (scalar -> NUMBER_REAL .)
    COLON           reduce using rule 149 (scalar -> NUMBER_REAL .)
    AS              reduce using rule 149 (scalar -> NUMBER_REAL .)
    RBRACKET        reduce using rule 149 (scalar -> NUMBER_REAL .)
    RKEY            reduce using rule 149 (scalar -> NUMBER_REAL .)


state 45

    (150) scalar -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    PLUS            reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    MINUS           reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    TIMES           reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    AND             reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    OR              reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    DDOT            reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    COLON           reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    AS              reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 150 (scalar -> NUMBER_INTEGER .)
    RKEY            reduce using rule 150 (scalar -> NUMBER_INTEGER .)


state 46

    (151) scalar -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 151 (scalar -> CONSTANT_ENCAPSED_STRING .)


state 47

    (70) statement_if -> IF . expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> IF . expr_parentheses statement_BLOCK_OPT
    (101) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 101

    expr_parentheses               shift and go to state 123

state 48

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 49

    (3) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 3 (main_INNER -> inner_statement main_INNER .)


state 50

    (156) function_declaration_statement -> FUNCTION fds_id . fds_parameter fds_statements
    (161) fds_parameter -> . LPAREN parameter_list RPAREN
    (162) fds_parameter -> . LPAREN RPAREN

    LPAREN          shift and go to state 125

    fds_parameter                  shift and go to state 124

state 51

    (159) fds_id -> AMPERSAND . ID

    ID              shift and go to state 126


state 52

    (160) fds_id -> ID .

    LPAREN          reduce using rule 160 (fds_id -> ID .)


state 53

    (46) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 46 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 46 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 46 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 46 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 46 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 46 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 46 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 46 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 46 (statement -> expr SEMICOLON .)
    DO              reduce using rule 46 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 46 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 46 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 46 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 46 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 46 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 46 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 46 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 46 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 46 (statement -> expr SEMICOLON .)
    ID              reduce using rule 46 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 46 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 46 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (statement -> expr SEMICOLON .)
    IF              reduce using rule 46 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 46 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 46 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 46 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 46 (statement -> expr SEMICOLON .)


state 54

    (10) expr -> expr PLUS . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 127
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 55

    (11) expr -> expr MINUS . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 128
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 56

    (12) expr -> expr DIVIDE . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 129
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 57

    (13) expr -> expr PERCENT . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 130
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 58

    (14) expr -> expr TIMES . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 131
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 59

    (15) expr -> expr EQUALS . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 132
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 60

    (16) expr -> expr NOT_EQUAL . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 133
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 61

    (17) expr -> expr GREAT_THAN . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 134
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 62

    (18) expr -> expr GREAT_EQUAL . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 135
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 63

    (19) expr -> expr LESS_THAN . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 136
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 64

    (20) expr -> expr LESS_EQUAL . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 137
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 65

    (21) expr -> expr AND . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 138
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 66

    (22) expr -> expr OR . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 139
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 67

    (34) expr -> expr INTE_DOT . expr DDOT expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 140
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 68

    (55) statement -> exit_statement SEMICOLON .

    FUNCTION        reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    MINUS           reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    INCREMENT       reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    DECREMENT       reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    LPAREN          reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    TRUE            reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    FALSE           reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    WHILE           reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    DO              reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    FOR             reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    FOREACH         reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    BREAK           reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    CONTINUE        reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    RETURN          reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    EXIT            reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    DIE             reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    GLOBAL          reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    VARIABLE        reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    ID              reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    IF              reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    RKEY            reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    ELSE            reduce using rule 55 (statement -> exit_statement SEMICOLON .)
    ELSEIF          reduce using rule 55 (statement -> exit_statement SEMICOLON .)


state 69

    (56) statement -> die_statement SEMICOLON .

    FUNCTION        reduce using rule 56 (statement -> die_statement SEMICOLON .)
    MINUS           reduce using rule 56 (statement -> die_statement SEMICOLON .)
    INCREMENT       reduce using rule 56 (statement -> die_statement SEMICOLON .)
    DECREMENT       reduce using rule 56 (statement -> die_statement SEMICOLON .)
    LPAREN          reduce using rule 56 (statement -> die_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 56 (statement -> die_statement SEMICOLON .)
    TRUE            reduce using rule 56 (statement -> die_statement SEMICOLON .)
    FALSE           reduce using rule 56 (statement -> die_statement SEMICOLON .)
    WHILE           reduce using rule 56 (statement -> die_statement SEMICOLON .)
    DO              reduce using rule 56 (statement -> die_statement SEMICOLON .)
    FOR             reduce using rule 56 (statement -> die_statement SEMICOLON .)
    FOREACH         reduce using rule 56 (statement -> die_statement SEMICOLON .)
    BREAK           reduce using rule 56 (statement -> die_statement SEMICOLON .)
    CONTINUE        reduce using rule 56 (statement -> die_statement SEMICOLON .)
    RETURN          reduce using rule 56 (statement -> die_statement SEMICOLON .)
    EXIT            reduce using rule 56 (statement -> die_statement SEMICOLON .)
    DIE             reduce using rule 56 (statement -> die_statement SEMICOLON .)
    GLOBAL          reduce using rule 56 (statement -> die_statement SEMICOLON .)
    VARIABLE        reduce using rule 56 (statement -> die_statement SEMICOLON .)
    ID              reduce using rule 56 (statement -> die_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 56 (statement -> die_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 56 (statement -> die_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 56 (statement -> die_statement SEMICOLON .)
    IF              reduce using rule 56 (statement -> die_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 56 (statement -> die_statement SEMICOLON .)
    RKEY            reduce using rule 56 (statement -> die_statement SEMICOLON .)
    ELSE            reduce using rule 56 (statement -> die_statement SEMICOLON .)
    ELSEIF          reduce using rule 56 (statement -> die_statement SEMICOLON .)


state 70

    (57) statement -> global_statement SEMICOLON .

    FUNCTION        reduce using rule 57 (statement -> global_statement SEMICOLON .)
    MINUS           reduce using rule 57 (statement -> global_statement SEMICOLON .)
    INCREMENT       reduce using rule 57 (statement -> global_statement SEMICOLON .)
    DECREMENT       reduce using rule 57 (statement -> global_statement SEMICOLON .)
    LPAREN          reduce using rule 57 (statement -> global_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 57 (statement -> global_statement SEMICOLON .)
    TRUE            reduce using rule 57 (statement -> global_statement SEMICOLON .)
    FALSE           reduce using rule 57 (statement -> global_statement SEMICOLON .)
    WHILE           reduce using rule 57 (statement -> global_statement SEMICOLON .)
    DO              reduce using rule 57 (statement -> global_statement SEMICOLON .)
    FOR             reduce using rule 57 (statement -> global_statement SEMICOLON .)
    FOREACH         reduce using rule 57 (statement -> global_statement SEMICOLON .)
    BREAK           reduce using rule 57 (statement -> global_statement SEMICOLON .)
    CONTINUE        reduce using rule 57 (statement -> global_statement SEMICOLON .)
    RETURN          reduce using rule 57 (statement -> global_statement SEMICOLON .)
    EXIT            reduce using rule 57 (statement -> global_statement SEMICOLON .)
    DIE             reduce using rule 57 (statement -> global_statement SEMICOLON .)
    GLOBAL          reduce using rule 57 (statement -> global_statement SEMICOLON .)
    VARIABLE        reduce using rule 57 (statement -> global_statement SEMICOLON .)
    ID              reduce using rule 57 (statement -> global_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 57 (statement -> global_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 57 (statement -> global_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (statement -> global_statement SEMICOLON .)
    IF              reduce using rule 57 (statement -> global_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 57 (statement -> global_statement SEMICOLON .)
    RKEY            reduce using rule 57 (statement -> global_statement SEMICOLON .)
    ELSE            reduce using rule 57 (statement -> global_statement SEMICOLON .)
    ELSEIF          reduce using rule 57 (statement -> global_statement SEMICOLON .)


state 71

    (9) expr -> MINUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 9 (expr -> MINUS expr .)
    PLUS            reduce using rule 9 (expr -> MINUS expr .)
    MINUS           reduce using rule 9 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 9 (expr -> MINUS expr .)
    PERCENT         reduce using rule 9 (expr -> MINUS expr .)
    TIMES           reduce using rule 9 (expr -> MINUS expr .)
    EQUALS          reduce using rule 9 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 9 (expr -> MINUS expr .)
    GREAT_THAN      reduce using rule 9 (expr -> MINUS expr .)
    GREAT_EQUAL     reduce using rule 9 (expr -> MINUS expr .)
    LESS_THAN       reduce using rule 9 (expr -> MINUS expr .)
    LESS_EQUAL      reduce using rule 9 (expr -> MINUS expr .)
    AND             reduce using rule 9 (expr -> MINUS expr .)
    OR              reduce using rule 9 (expr -> MINUS expr .)
    INTE_DOT        reduce using rule 9 (expr -> MINUS expr .)
    RPAREN          reduce using rule 9 (expr -> MINUS expr .)
    DDOT            reduce using rule 9 (expr -> MINUS expr .)
    ATTR_ASSOC      reduce using rule 9 (expr -> MINUS expr .)
    COLON           reduce using rule 9 (expr -> MINUS expr .)
    AS              reduce using rule 9 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 9 (expr -> MINUS expr .)
    RKEY            reduce using rule 9 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 72

    (23) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 23 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 23 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 23 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 23 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 23 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 23 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 23 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 23 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 23 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 23 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 23 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 23 (expr -> INCREMENT variable .)
    AND             reduce using rule 23 (expr -> INCREMENT variable .)
    OR              reduce using rule 23 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 23 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 23 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 23 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 23 (expr -> INCREMENT variable .)
    COLON           reduce using rule 23 (expr -> INCREMENT variable .)
    AS              reduce using rule 23 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 23 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 23 (expr -> INCREMENT variable .)


state 73

    (24) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 24 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 24 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 24 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 24 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 24 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 24 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 24 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 24 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 24 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 24 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 24 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 24 (expr -> variable INCREMENT .)
    AND             reduce using rule 24 (expr -> variable INCREMENT .)
    OR              reduce using rule 24 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 24 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 24 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 24 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 24 (expr -> variable INCREMENT .)
    COLON           reduce using rule 24 (expr -> variable INCREMENT .)
    AS              reduce using rule 24 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 24 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 24 (expr -> variable INCREMENT .)


state 74

    (26) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 26 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 26 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 26 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 26 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 26 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 26 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 26 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 26 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 26 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 26 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 26 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 26 (expr -> variable DECREMENT .)
    AND             reduce using rule 26 (expr -> variable DECREMENT .)
    OR              reduce using rule 26 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 26 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 26 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 26 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 26 (expr -> variable DECREMENT .)
    COLON           reduce using rule 26 (expr -> variable DECREMENT .)
    AS              reduce using rule 26 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 26 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 26 (expr -> variable DECREMENT .)


state 75

    (35) expr -> variable assign_operator . expr
    (36) expr -> variable assign_operator . AMPERSAND expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    AMPERSAND       shift and go to state 142
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    variable                       shift and go to state 23
    expr                           shift and go to state 141
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 76

    (128) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 128 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 128 (assign_operator -> ADD_ASSIGN .)


state 77

    (129) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 129 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 129 (assign_operator -> SUB_ASSIGN .)


state 78

    (130) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 130 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 130 (assign_operator -> MOD_ASSIGN .)


state 79

    (131) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 131 (assign_operator -> PLUS_ASSIGN .)


state 80

    (132) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 132 (assign_operator -> DIVIDE_ASSIGN .)


state 81

    (133) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 133 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 133 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 133 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 133 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 133 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 133 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 133 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 133 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 133 (assign_operator -> ASSIGN .)
    ID              reduce using rule 133 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 133 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 133 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 133 (assign_operator -> ASSIGN .)


state 82

    (25) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 25 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 25 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 25 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 25 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 25 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 25 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 25 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 25 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 25 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 25 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 25 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 25 (expr -> DECREMENT variable .)
    AND             reduce using rule 25 (expr -> DECREMENT variable .)
    OR              reduce using rule 25 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 25 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 25 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 25 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 25 (expr -> DECREMENT variable .)
    COLON           reduce using rule 25 (expr -> DECREMENT variable .)
    AS              reduce using rule 25 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 25 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 25 (expr -> DECREMENT variable .)


state 83

    (28) expr -> LPAREN expr . RPAREN
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 143
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 84

    (37) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 144


state 85

    (29) expr -> ARRAY_TYPE . array_declaration
    (124) type_cast_operator -> ARRAY_TYPE .
    (44) array_declaration -> . LPAREN array_pair_list RPAREN
    (45) array_declaration -> . LPAREN RPAREN

    RPAREN          reduce using rule 124 (type_cast_operator -> ARRAY_TYPE .)
    LPAREN          shift and go to state 95

    array_declaration              shift and go to state 94

state 86

    (119) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 119 (type_cast_operator -> INT_TYPE .)


state 87

    (120) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 120 (type_cast_operator -> DOUBLE_TYPE .)


state 88

    (121) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 121 (type_cast_operator -> FLOAT_TYPE .)


state 89

    (122) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 122 (type_cast_operator -> REAL_TYPE .)


state 90

    (123) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 123 (type_cast_operator -> STRING_TYPE .)


state 91

    (125) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 125 (type_cast_operator -> BOOLEAN_TYPE .)


state 92

    (126) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 126 (type_cast_operator -> BOOL_TYPE .)


state 93

    (127) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 127 (type_cast_operator -> UNSET .)


state 94

    (29) expr -> ARRAY_TYPE array_declaration .

    SEMICOLON       reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    PLUS            reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    MINUS           reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    DIVIDE          reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    PERCENT         reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    TIMES           reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    EQUALS          reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    NOT_EQUAL       reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    GREAT_THAN      reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    GREAT_EQUAL     reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    LESS_THAN       reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    LESS_EQUAL      reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    AND             reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    OR              reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    INTE_DOT        reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    RPAREN          reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    DDOT            reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    ATTR_ASSOC      reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    COLON           reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    AS              reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    RBRACKET        reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)
    RKEY            reduce using rule 29 (expr -> ARRAY_TYPE array_declaration .)


state 95

    (44) array_declaration -> LPAREN . array_pair_list RPAREN
    (45) array_declaration -> LPAREN . RPAREN
    (186) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (187) array_pair_list -> . array_pair
    (188) array_pair -> . expr
    (189) array_pair -> . AMPERSAND variable
    (190) array_pair -> . expr ATTR_ASSOC expr
    (191) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    RPAREN          shift and go to state 146
    AMPERSAND       shift and go to state 149
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    array_pair_list                shift and go to state 145
    array_pair                     shift and go to state 147
    expr                           shift and go to state 148
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 96

    (67) if_statement -> statement_if statement_else .

    FUNCTION        reduce using rule 67 (if_statement -> statement_if statement_else .)
    MINUS           reduce using rule 67 (if_statement -> statement_if statement_else .)
    INCREMENT       reduce using rule 67 (if_statement -> statement_if statement_else .)
    DECREMENT       reduce using rule 67 (if_statement -> statement_if statement_else .)
    LPAREN          reduce using rule 67 (if_statement -> statement_if statement_else .)
    ARRAY_TYPE      reduce using rule 67 (if_statement -> statement_if statement_else .)
    TRUE            reduce using rule 67 (if_statement -> statement_if statement_else .)
    FALSE           reduce using rule 67 (if_statement -> statement_if statement_else .)
    WHILE           reduce using rule 67 (if_statement -> statement_if statement_else .)
    DO              reduce using rule 67 (if_statement -> statement_if statement_else .)
    FOR             reduce using rule 67 (if_statement -> statement_if statement_else .)
    FOREACH         reduce using rule 67 (if_statement -> statement_if statement_else .)
    BREAK           reduce using rule 67 (if_statement -> statement_if statement_else .)
    CONTINUE        reduce using rule 67 (if_statement -> statement_if statement_else .)
    RETURN          reduce using rule 67 (if_statement -> statement_if statement_else .)
    EXIT            reduce using rule 67 (if_statement -> statement_if statement_else .)
    DIE             reduce using rule 67 (if_statement -> statement_if statement_else .)
    GLOBAL          reduce using rule 67 (if_statement -> statement_if statement_else .)
    VARIABLE        reduce using rule 67 (if_statement -> statement_if statement_else .)
    ID              reduce using rule 67 (if_statement -> statement_if statement_else .)
    NUMBER_REAL     reduce using rule 67 (if_statement -> statement_if statement_else .)
    NUMBER_INTEGER  reduce using rule 67 (if_statement -> statement_if statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 67 (if_statement -> statement_if statement_else .)
    IF              reduce using rule 67 (if_statement -> statement_if statement_else .)
    END_PROGRAM     reduce using rule 67 (if_statement -> statement_if statement_else .)
    RKEY            reduce using rule 67 (if_statement -> statement_if statement_else .)
    ELSE            reduce using rule 67 (if_statement -> statement_if statement_else .)
    ELSEIF          reduce using rule 67 (if_statement -> statement_if statement_else .)


state 97

    (68) if_statement -> statement_if statement_elseif .
    (69) if_statement -> statement_if statement_elseif . statement_else
    (74) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    MINUS           reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    INCREMENT       reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    DECREMENT       reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    LPAREN          reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    ARRAY_TYPE      reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    TRUE            reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    FALSE           reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    WHILE           reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    DO              reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    FOR             reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    FOREACH         reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    BREAK           reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    CONTINUE        reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    RETURN          reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    EXIT            reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    DIE             reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    GLOBAL          reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    VARIABLE        reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    ID              reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    NUMBER_REAL     reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    NUMBER_INTEGER  reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    IF              reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    END_PROGRAM     reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    RKEY            reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    ELSEIF          reduce using rule 68 (if_statement -> statement_if statement_elseif .)
    ELSE            shift and go to state 98

  ! ELSE            [ reduce using rule 68 (if_statement -> statement_if statement_elseif .) ]

    statement_else                 shift and go to state 150

state 98

    (74) statement_else -> ELSE . statement_BLOCK_OPT
    (194) statement_BLOCK_OPT -> . statement
    (195) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (196) statement_BLOCK_OPT -> . LKEY RKEY
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 104
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 151
    statement                      shift and go to state 103
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 99

    (72) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT statement_elseif
    (73) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT
    (101) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 101

    expr_parentheses               shift and go to state 152

state 100

    (77) while_statement -> WHILE expr_parentheses . statement_BLOCK_OPT
    (194) statement_BLOCK_OPT -> . statement
    (195) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (196) statement_BLOCK_OPT -> . LKEY RKEY
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 104
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 153
    statement                      shift and go to state 103
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 101

    (101) expr_parentheses -> LPAREN . expr RPAREN
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 154
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 102

    (78) do_statement -> DO statement_BLOCK_OPT . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 155


state 103

    (194) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 194 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 194 (statement_BLOCK_OPT -> statement .)


state 104

    (195) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (196) statement_BLOCK_OPT -> LKEY . RKEY
    (192) statement_MUL -> . statement statement_MUL
    (193) statement_MUL -> . statement
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    RKEY            shift and go to state 157
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    statement_MUL                  shift and go to state 156
    statement                      shift and go to state 158
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 105

    (85) for_statement -> FOR LPAREN . for_parameters RPAREN statement_BLOCK_OPT
    (86) for_parameters -> . SEMICOLON SEMICOLON
    (87) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (88) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (89) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (90) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (91) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (92) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (93) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (104) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (105) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    SEMICOLON       shift and go to state 160
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    for_parameters                 shift and go to state 159
    for_expr_OPT                   shift and go to state 161
    expr                           shift and go to state 162
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 106

    (102) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 163
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 107

    (79) break_statement -> BREAK expr . SEMICOLON
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 164
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 108

    (80) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 80 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 80 (break_statement -> BREAK SEMICOLON .)


state 109

    (81) continue_statement -> CONTINUE expr . SEMICOLON
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 165
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 110

    (82) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 82 (continue_statement -> CONTINUE SEMICOLON .)


state 111

    (83) return_statement -> RETURN expr . SEMICOLON
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 166
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 112

    (84) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 84 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 84 (return_statement -> RETURN SEMICOLON .)


state 113

    (38) exit_statement -> EXIT exit_expr .

    SEMICOLON       reduce using rule 38 (exit_statement -> EXIT exit_expr .)


state 114

    (42) exit_expr -> LPAREN . expr RPAREN
    (43) exit_expr -> LPAREN . RPAREN
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    RPAREN          shift and go to state 168
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 167
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 115

    (40) die_statement -> DIE exit_expr .

    SEMICOLON       reduce using rule 40 (die_statement -> DIE exit_expr .)


state 116

    (75) global_statement -> GLOBAL global_var . statement_COLON_GLOBAL
    (76) global_statement -> GLOBAL global_var .
    (97) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (98) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 76 (global_statement -> GLOBAL global_var .)
    COLON           shift and go to state 170

    statement_COLON_GLOBAL         shift and go to state 169

state 117

    (94) global_var -> VARIABLE .

    COLON           reduce using rule 94 (global_var -> VARIABLE .)
    SEMICOLON       reduce using rule 94 (global_var -> VARIABLE .)


state 118

    (95) global_var -> DOLAR . VARIABLE
    (96) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 171
    LKEY            shift and go to state 172


state 119

    (152) variable -> VARIABLE reference_variable_SELECTOR .

    INCREMENT       reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    PLUS            reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    MINUS           reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    PERCENT         reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    TIMES           reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    EQUALS          reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    AND             reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    OR              reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    RPAREN          reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    DDOT            reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    COLON           reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    AS              reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)
    RKEY            reduce using rule 152 (variable -> VARIABLE reference_variable_SELECTOR .)


state 120

    (199) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (200) reference_variable_SELECTOR -> selector .
    (199) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (200) reference_variable_SELECTOR -> . selector
    (154) selector -> . LBRACKET expr RBRACKET
    (155) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    DECREMENT       reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    ADD_ASSIGN      reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    SUB_ASSIGN      reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    MOD_ASSIGN      reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    PLUS_ASSIGN     reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    DIVIDE_ASSIGN   reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    ASSIGN          reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    SEMICOLON       reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    PLUS            reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    MINUS           reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    DIVIDE          reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    PERCENT         reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    TIMES           reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    EQUALS          reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    NOT_EQUAL       reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    GREAT_THAN      reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    GREAT_EQUAL     reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    LESS_THAN       reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    LESS_EQUAL      reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    AND             reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    OR              reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    INTE_DOT        reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    RPAREN          reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    DDOT            reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    ATTR_ASSOC      reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    COLON           reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    AS              reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    RBRACKET        reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    RKEY            reduce using rule 200 (reference_variable_SELECTOR -> selector .)
    LBRACKET        shift and go to state 121

    selector                       shift and go to state 120
    reference_variable_SELECTOR    shift and go to state 173

state 121

    (154) selector -> LBRACKET . expr RBRACKET
    (155) selector -> LBRACKET . RBRACKET
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    RBRACKET        shift and go to state 175
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 174
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 122

    (108) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (109) function_call -> ID LPAREN . RPAREN
    (110) function_call_parameter_list -> . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (111) function_call_parameter_list -> . function_call_parameter
    (114) function_call_parameter -> . expr
    (115) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    RPAREN          shift and go to state 177
    AMPERSAND       shift and go to state 180
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    function_call_parameter_list   shift and go to state 176
    function_call_parameter        shift and go to state 178
    expr                           shift and go to state 179
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 123

    (70) statement_if -> IF expr_parentheses . statement_BLOCK_OPT statement_if
    (71) statement_if -> IF expr_parentheses . statement_BLOCK_OPT
    (194) statement_BLOCK_OPT -> . statement
    (195) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (196) statement_BLOCK_OPT -> . LKEY RKEY
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 104
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 181
    statement_if                   shift and go to state 31
    statement                      shift and go to state 103
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 124

    (156) function_declaration_statement -> FUNCTION fds_id fds_parameter . fds_statements
    (157) fds_statements -> . LKEY inner_statement_MUL RKEY
    (158) fds_statements -> . LKEY RKEY

    LKEY            shift and go to state 183

    fds_statements                 shift and go to state 182

state 125

    (161) fds_parameter -> LPAREN . parameter_list RPAREN
    (162) fds_parameter -> LPAREN . RPAREN
    (163) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (164) parameter_list -> . parameter
    (165) parameter -> . VARIABLE
    (166) parameter -> . parameter_prefix VARIABLE
    (167) parameter -> . VARIABLE ASSIGN static_scalar
    (168) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (169) parameter_prefix -> . parameter_type AMPERSAND
    (170) parameter_prefix -> . AMPERSAND
    (171) parameter_prefix -> . parameter_type
    (172) parameter_type -> . INT_TYPE
    (173) parameter_type -> . BOOLEAN_TYPE
    (174) parameter_type -> . STRING_TYPE
    (175) parameter_type -> . FLOAT_TYPE
    (176) parameter_type -> . ARRAY_TYPE
    (177) parameter_type -> . BOOL_TYPE
    (178) parameter_type -> . REAL_TYPE
    (179) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 185
    VARIABLE        shift and go to state 187
    AMPERSAND       shift and go to state 190
    INT_TYPE        shift and go to state 191
    BOOLEAN_TYPE    shift and go to state 192
    STRING_TYPE     shift and go to state 193
    FLOAT_TYPE      shift and go to state 194
    ARRAY_TYPE      shift and go to state 195
    BOOL_TYPE       shift and go to state 196
    REAL_TYPE       shift and go to state 197
    DOUBLE_TYPE     shift and go to state 198

    parameter_list                 shift and go to state 184
    parameter                      shift and go to state 186
    parameter_prefix               shift and go to state 188
    parameter_type                 shift and go to state 189

state 126

    (159) fds_id -> AMPERSAND ID .

    LPAREN          reduce using rule 159 (fds_id -> AMPERSAND ID .)


state 127

    (10) expr -> expr PLUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 10 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 10 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 10 (expr -> expr PLUS expr .)
    PERCENT         reduce using rule 10 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 10 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 10 (expr -> expr PLUS expr .)
    GREAT_THAN      reduce using rule 10 (expr -> expr PLUS expr .)
    GREAT_EQUAL     reduce using rule 10 (expr -> expr PLUS expr .)
    LESS_THAN       reduce using rule 10 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 10 (expr -> expr PLUS expr .)
    AND             reduce using rule 10 (expr -> expr PLUS expr .)
    OR              reduce using rule 10 (expr -> expr PLUS expr .)
    INTE_DOT        reduce using rule 10 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 10 (expr -> expr PLUS expr .)
    DDOT            reduce using rule 10 (expr -> expr PLUS expr .)
    ATTR_ASSOC      reduce using rule 10 (expr -> expr PLUS expr .)
    COLON           reduce using rule 10 (expr -> expr PLUS expr .)
    AS              reduce using rule 10 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 10 (expr -> expr PLUS expr .)
    RKEY            reduce using rule 10 (expr -> expr PLUS expr .)
    DIVIDE          shift and go to state 56
    TIMES           shift and go to state 58

  ! DIVIDE          [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 128

    (11) expr -> expr MINUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 11 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 11 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 11 (expr -> expr MINUS expr .)
    PERCENT         reduce using rule 11 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 11 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 11 (expr -> expr MINUS expr .)
    GREAT_THAN      reduce using rule 11 (expr -> expr MINUS expr .)
    GREAT_EQUAL     reduce using rule 11 (expr -> expr MINUS expr .)
    LESS_THAN       reduce using rule 11 (expr -> expr MINUS expr .)
    LESS_EQUAL      reduce using rule 11 (expr -> expr MINUS expr .)
    AND             reduce using rule 11 (expr -> expr MINUS expr .)
    OR              reduce using rule 11 (expr -> expr MINUS expr .)
    INTE_DOT        reduce using rule 11 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 11 (expr -> expr MINUS expr .)
    DDOT            reduce using rule 11 (expr -> expr MINUS expr .)
    ATTR_ASSOC      reduce using rule 11 (expr -> expr MINUS expr .)
    COLON           reduce using rule 11 (expr -> expr MINUS expr .)
    AS              reduce using rule 11 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 11 (expr -> expr MINUS expr .)
    RKEY            reduce using rule 11 (expr -> expr MINUS expr .)
    DIVIDE          shift and go to state 56
    TIMES           shift and go to state 58

  ! DIVIDE          [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 129

    (12) expr -> expr DIVIDE expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 12 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 12 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 12 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 12 (expr -> expr DIVIDE expr .)
    PERCENT         reduce using rule 12 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 12 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 12 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 12 (expr -> expr DIVIDE expr .)
    GREAT_THAN      reduce using rule 12 (expr -> expr DIVIDE expr .)
    GREAT_EQUAL     reduce using rule 12 (expr -> expr DIVIDE expr .)
    LESS_THAN       reduce using rule 12 (expr -> expr DIVIDE expr .)
    LESS_EQUAL      reduce using rule 12 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 12 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 12 (expr -> expr DIVIDE expr .)
    INTE_DOT        reduce using rule 12 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 12 (expr -> expr DIVIDE expr .)
    DDOT            reduce using rule 12 (expr -> expr DIVIDE expr .)
    ATTR_ASSOC      reduce using rule 12 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 12 (expr -> expr DIVIDE expr .)
    AS              reduce using rule 12 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 12 (expr -> expr DIVIDE expr .)
    RKEY            reduce using rule 12 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 130

    (13) expr -> expr PERCENT expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 13 (expr -> expr PERCENT expr .)
    RPAREN          reduce using rule 13 (expr -> expr PERCENT expr .)
    DDOT            reduce using rule 13 (expr -> expr PERCENT expr .)
    ATTR_ASSOC      reduce using rule 13 (expr -> expr PERCENT expr .)
    COLON           reduce using rule 13 (expr -> expr PERCENT expr .)
    AS              reduce using rule 13 (expr -> expr PERCENT expr .)
    RBRACKET        reduce using rule 13 (expr -> expr PERCENT expr .)
    RKEY            reduce using rule 13 (expr -> expr PERCENT expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! MINUS           [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! DIVIDE          [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! PERCENT         [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! TIMES           [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! EQUALS          [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! GREAT_THAN      [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! LESS_THAN       [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! AND             [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! OR              [ reduce using rule 13 (expr -> expr PERCENT expr .) ]
  ! INTE_DOT        [ reduce using rule 13 (expr -> expr PERCENT expr .) ]


state 131

    (14) expr -> expr TIMES expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 14 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 14 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 14 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 14 (expr -> expr TIMES expr .)
    PERCENT         reduce using rule 14 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 14 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 14 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 14 (expr -> expr TIMES expr .)
    GREAT_THAN      reduce using rule 14 (expr -> expr TIMES expr .)
    GREAT_EQUAL     reduce using rule 14 (expr -> expr TIMES expr .)
    LESS_THAN       reduce using rule 14 (expr -> expr TIMES expr .)
    LESS_EQUAL      reduce using rule 14 (expr -> expr TIMES expr .)
    AND             reduce using rule 14 (expr -> expr TIMES expr .)
    OR              reduce using rule 14 (expr -> expr TIMES expr .)
    INTE_DOT        reduce using rule 14 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 14 (expr -> expr TIMES expr .)
    DDOT            reduce using rule 14 (expr -> expr TIMES expr .)
    ATTR_ASSOC      reduce using rule 14 (expr -> expr TIMES expr .)
    COLON           reduce using rule 14 (expr -> expr TIMES expr .)
    AS              reduce using rule 14 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 14 (expr -> expr TIMES expr .)
    RKEY            reduce using rule 14 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 132

    (15) expr -> expr EQUALS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 15 (expr -> expr EQUALS expr .)
    RPAREN          reduce using rule 15 (expr -> expr EQUALS expr .)
    DDOT            reduce using rule 15 (expr -> expr EQUALS expr .)
    ATTR_ASSOC      reduce using rule 15 (expr -> expr EQUALS expr .)
    COLON           reduce using rule 15 (expr -> expr EQUALS expr .)
    AS              reduce using rule 15 (expr -> expr EQUALS expr .)
    RBRACKET        reduce using rule 15 (expr -> expr EQUALS expr .)
    RKEY            reduce using rule 15 (expr -> expr EQUALS expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! PERCENT         [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! TIMES           [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! EQUALS          [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! NOT_EQUAL       [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! GREAT_THAN      [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! LESS_THAN       [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! AND             [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! OR              [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! INTE_DOT        [ reduce using rule 15 (expr -> expr EQUALS expr .) ]


state 133

    (16) expr -> expr NOT_EQUAL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    DDOT            reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    AS              reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    RBRACKET        reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    RKEY            reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! EQUALS          [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! GREAT_THAN      [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! AND             [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! OR              [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! INTE_DOT        [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]


state 134

    (17) expr -> expr GREAT_THAN expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    RPAREN          reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    DDOT            reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    ATTR_ASSOC      reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    COLON           reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    AS              reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    RBRACKET        reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    RKEY            reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! PERCENT         [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! EQUALS          [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! GREAT_THAN      [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! AND             [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! OR              [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! INTE_DOT        [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]


state 135

    (18) expr -> expr GREAT_EQUAL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    RPAREN          reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    DDOT            reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    COLON           reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    AS              reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    RBRACKET        reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    RKEY            reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! EQUALS          [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! GREAT_THAN      [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! AND             [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! OR              [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! INTE_DOT        [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]


state 136

    (19) expr -> expr LESS_THAN expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 19 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 19 (expr -> expr LESS_THAN expr .)
    DDOT            reduce using rule 19 (expr -> expr LESS_THAN expr .)
    ATTR_ASSOC      reduce using rule 19 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 19 (expr -> expr LESS_THAN expr .)
    AS              reduce using rule 19 (expr -> expr LESS_THAN expr .)
    RBRACKET        reduce using rule 19 (expr -> expr LESS_THAN expr .)
    RKEY            reduce using rule 19 (expr -> expr LESS_THAN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! PERCENT         [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! EQUALS          [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! GREAT_THAN      [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! INTE_DOT        [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]


state 137

    (20) expr -> expr LESS_EQUAL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    DDOT            reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    COLON           reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    AS              reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    RBRACKET        reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    RKEY            reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! EQUALS          [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! GREAT_THAN      [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! AND             [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! OR              [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! INTE_DOT        [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]


state 138

    (21) expr -> expr AND expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 21 (expr -> expr AND expr .)
    RPAREN          reduce using rule 21 (expr -> expr AND expr .)
    DDOT            reduce using rule 21 (expr -> expr AND expr .)
    ATTR_ASSOC      reduce using rule 21 (expr -> expr AND expr .)
    COLON           reduce using rule 21 (expr -> expr AND expr .)
    AS              reduce using rule 21 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 21 (expr -> expr AND expr .)
    RKEY            reduce using rule 21 (expr -> expr AND expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! PERCENT         [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! EQUALS          [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! GREAT_THAN      [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! INTE_DOT        [ reduce using rule 21 (expr -> expr AND expr .) ]


state 139

    (22) expr -> expr OR expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 22 (expr -> expr OR expr .)
    RPAREN          reduce using rule 22 (expr -> expr OR expr .)
    DDOT            reduce using rule 22 (expr -> expr OR expr .)
    ATTR_ASSOC      reduce using rule 22 (expr -> expr OR expr .)
    COLON           reduce using rule 22 (expr -> expr OR expr .)
    AS              reduce using rule 22 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 22 (expr -> expr OR expr .)
    RKEY            reduce using rule 22 (expr -> expr OR expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! PERCENT         [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! EQUALS          [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! GREAT_THAN      [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! INTE_DOT        [ reduce using rule 22 (expr -> expr OR expr .) ]


state 140

    (34) expr -> expr INTE_DOT expr . DDOT expr
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    DDOT            shift and go to state 199
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 141

    (35) expr -> variable assign_operator expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 35 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 35 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 35 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 35 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 35 (expr -> variable assign_operator expr .)
    AS              reduce using rule 35 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 35 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 35 (expr -> variable assign_operator expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! PERCENT         [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! AND             [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! OR              [ reduce using rule 35 (expr -> variable assign_operator expr .) ]
  ! INTE_DOT        [ reduce using rule 35 (expr -> variable assign_operator expr .) ]


state 142

    (36) expr -> variable assign_operator AMPERSAND . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    variable                       shift and go to state 23
    expr                           shift and go to state 200
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 143

    (28) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 28 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 28 (expr -> LPAREN expr RPAREN .)


state 144

    (37) expr -> LPAREN type_cast_operator RPAREN . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 201
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 145

    (44) array_declaration -> LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 202


state 146

    (45) array_declaration -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    PLUS            reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    MINUS           reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    PERCENT         reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    TIMES           reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    EQUALS          reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    AND             reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    OR              reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    INTE_DOT        reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    RPAREN          reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    DDOT            reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    COLON           reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    AS              reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 45 (array_declaration -> LPAREN RPAREN .)
    RKEY            reduce using rule 45 (array_declaration -> LPAREN RPAREN .)


state 147

    (186) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (187) array_pair_list -> array_pair .
    (201) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (202) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 187 (array_pair_list -> array_pair .)
    COLON           shift and go to state 204

    array_pair_list_ARR_PAIR       shift and go to state 203

state 148

    (188) array_pair -> expr .
    (190) array_pair -> expr . ATTR_ASSOC expr
    (191) array_pair -> expr . ATTR_ASSOC AMPERSAND variable
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 188 (array_pair -> expr .)
    RPAREN          reduce using rule 188 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 205
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 149

    (189) array_pair -> AMPERSAND . variable
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE

    VARIABLE        shift and go to state 42

    variable                       shift and go to state 206

state 150

    (69) if_statement -> statement_if statement_elseif statement_else .

    FUNCTION        reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    MINUS           reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    INCREMENT       reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    DECREMENT       reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    LPAREN          reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    TRUE            reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    FALSE           reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    WHILE           reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    DO              reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    FOR             reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    FOREACH         reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    BREAK           reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    CONTINUE        reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    RETURN          reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    EXIT            reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    DIE             reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    GLOBAL          reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    VARIABLE        reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    ID              reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    IF              reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    RKEY            reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    ELSE            reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)
    ELSEIF          reduce using rule 69 (if_statement -> statement_if statement_elseif statement_else .)


state 151

    (74) statement_else -> ELSE statement_BLOCK_OPT .

    FUNCTION        reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSE            reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 74 (statement_else -> ELSE statement_BLOCK_OPT .)


state 152

    (72) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT statement_elseif
    (73) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT
    (194) statement_BLOCK_OPT -> . statement
    (195) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (196) statement_BLOCK_OPT -> . LKEY RKEY
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 104
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 207
    statement                      shift and go to state 103
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 153

    (77) while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 77 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)


state 154

    (101) expr_parentheses -> LPAREN expr . RPAREN
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 208
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 155

    (78) do_statement -> DO statement_BLOCK_OPT WHILE . expr_parentheses SEMICOLON
    (101) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 101

    expr_parentheses               shift and go to state 209

state 156

    (195) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 210


state 157

    (196) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    MINUS           reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    INCREMENT       reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    DECREMENT       reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOREACH         reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 196 (statement_BLOCK_OPT -> LKEY RKEY .)


state 158

    (192) statement_MUL -> statement . statement_MUL
    (193) statement_MUL -> statement .
    (192) statement_MUL -> . statement statement_MUL
    (193) statement_MUL -> . statement
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    RKEY            reduce using rule 193 (statement_MUL -> statement .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    statement                      shift and go to state 158
    statement_MUL                  shift and go to state 211
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 159

    (85) for_statement -> FOR LPAREN for_parameters . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 212


state 160

    (86) for_parameters -> SEMICOLON . SEMICOLON
    (90) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (91) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (92) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (104) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (105) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    SEMICOLON       shift and go to state 213
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    for_expr_OPT                   shift and go to state 214
    expr                           shift and go to state 162
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 161

    (87) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (88) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (89) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (93) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 215


state 162

    (104) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (105) for_expr_OPT -> expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr
    (106) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (107) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 105 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 105 (for_expr_OPT -> expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67
    COLON           shift and go to state 217

    for_expr_COLON_EXPR            shift and go to state 216

state 163

    (102) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    AS              shift and go to state 218
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 164

    (79) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    MINUS           reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    FOREACH         reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 79 (break_statement -> BREAK expr SEMICOLON .)


state 165

    (81) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    MINUS           reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOREACH         reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 81 (continue_statement -> CONTINUE expr SEMICOLON .)


state 166

    (83) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 83 (return_statement -> RETURN expr SEMICOLON .)


state 167

    (42) exit_expr -> LPAREN expr . RPAREN
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 219
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 168

    (43) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 43 (exit_expr -> LPAREN RPAREN .)


state 169

    (75) global_statement -> GLOBAL global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 75 (global_statement -> GLOBAL global_var statement_COLON_GLOBAL .)


state 170

    (97) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (98) statement_COLON_GLOBAL -> COLON . global_var
    (94) global_var -> . VARIABLE
    (95) global_var -> . DOLAR VARIABLE
    (96) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 117
    DOLAR           shift and go to state 118

    global_var                     shift and go to state 220

state 171

    (95) global_var -> DOLAR VARIABLE .

    COLON           reduce using rule 95 (global_var -> DOLAR VARIABLE .)
    SEMICOLON       reduce using rule 95 (global_var -> DOLAR VARIABLE .)


state 172

    (96) global_var -> DOLAR LKEY . expr RKEY
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 221
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 173

    (199) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AND             reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    OR              reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 199 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 174

    (154) selector -> LBRACKET expr . RBRACKET
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    RBRACKET        shift and go to state 222
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 175

    (155) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    PLUS_ASSIGN     reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    AND             reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    OR              reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    AS              reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 155 (selector -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 155 (selector -> LBRACKET RBRACKET .)


state 176

    (108) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 223


state 177

    (109) function_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    INTE_DOT        reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    AS              reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 109 (function_call -> ID LPAREN RPAREN .)
    RKEY            reduce using rule 109 (function_call -> ID LPAREN RPAREN .)


state 178

    (110) function_call_parameter_list -> function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (111) function_call_parameter_list -> function_call_parameter .
    (112) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (113) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 111 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 225

    fc_parameter_list_COLON_PARAMETER shift and go to state 224

state 179

    (114) function_call_parameter -> expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 114 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 114 (function_call_parameter -> expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 180

    (115) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 226


state 181

    (70) statement_if -> IF expr_parentheses statement_BLOCK_OPT . statement_if
    (71) statement_if -> IF expr_parentheses statement_BLOCK_OPT .
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    IF              shift and go to state 47

  ! IF              [ reduce using rule 71 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .) ]

    statement_if                   shift and go to state 227

state 182

    (156) function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .

    FUNCTION        reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    MINUS           reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    INCREMENT       reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DECREMENT       reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    LPAREN          reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ARRAY_TYPE      reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    TRUE            reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FALSE           reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    WHILE           reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DO              reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOR             reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOREACH         reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    BREAK           reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONTINUE        reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RETURN          reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXIT            reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DIE             reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    GLOBAL          reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    VARIABLE        reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ID              reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_REAL     reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_INTEGER  reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONSTANT_ENCAPSED_STRING reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    IF              reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    END_PROGRAM     reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RKEY            reduce using rule 156 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)


state 183

    (157) fds_statements -> LKEY . inner_statement_MUL RKEY
    (158) fds_statements -> LKEY . RKEY
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (156) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    RKEY            shift and go to state 229
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    inner_statement_MUL            shift and go to state 228
    inner_statement                shift and go to state 230
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 184

    (161) fds_parameter -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 231


state 185

    (162) fds_parameter -> LPAREN RPAREN .

    LKEY            reduce using rule 162 (fds_parameter -> LPAREN RPAREN .)


state 186

    (163) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (164) parameter_list -> parameter .
    (197) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (198) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 164 (parameter_list -> parameter .)
    COLON           shift and go to state 233

    parameter_list_COLON_PARAMETER shift and go to state 232

state 187

    (165) parameter -> VARIABLE .
    (167) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 165 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 165 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 234


state 188

    (166) parameter -> parameter_prefix . VARIABLE
    (168) parameter -> parameter_prefix . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 235


state 189

    (169) parameter_prefix -> parameter_type . AMPERSAND
    (171) parameter_prefix -> parameter_type .

    AMPERSAND       shift and go to state 236
    VARIABLE        reduce using rule 171 (parameter_prefix -> parameter_type .)


state 190

    (170) parameter_prefix -> AMPERSAND .

    VARIABLE        reduce using rule 170 (parameter_prefix -> AMPERSAND .)


state 191

    (172) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 172 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 172 (parameter_type -> INT_TYPE .)


state 192

    (173) parameter_type -> BOOLEAN_TYPE .

    AMPERSAND       reduce using rule 173 (parameter_type -> BOOLEAN_TYPE .)
    VARIABLE        reduce using rule 173 (parameter_type -> BOOLEAN_TYPE .)


state 193

    (174) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 174 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 174 (parameter_type -> STRING_TYPE .)


state 194

    (175) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 175 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 175 (parameter_type -> FLOAT_TYPE .)


state 195

    (176) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 176 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 176 (parameter_type -> ARRAY_TYPE .)


state 196

    (177) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 177 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 177 (parameter_type -> BOOL_TYPE .)


state 197

    (178) parameter_type -> REAL_TYPE .

    AMPERSAND       reduce using rule 178 (parameter_type -> REAL_TYPE .)
    VARIABLE        reduce using rule 178 (parameter_type -> REAL_TYPE .)


state 198

    (179) parameter_type -> DOUBLE_TYPE .

    AMPERSAND       reduce using rule 179 (parameter_type -> DOUBLE_TYPE .)
    VARIABLE        reduce using rule 179 (parameter_type -> DOUBLE_TYPE .)


state 199

    (34) expr -> expr INTE_DOT expr DDOT . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 237
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 200

    (36) expr -> variable assign_operator AMPERSAND expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PERCENT         [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! AND             [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! OR              [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! INTE_DOT        [ reduce using rule 36 (expr -> variable assign_operator AMPERSAND expr .) ]


state 201

    (37) expr -> LPAREN type_cast_operator RPAREN expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! AND             [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! OR              [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! INTE_DOT        [ reduce using rule 37 (expr -> LPAREN type_cast_operator RPAREN expr .) ]


state 202

    (44) array_declaration -> LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 44 (array_declaration -> LPAREN array_pair_list RPAREN .)


state 203

    (186) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 186 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 204

    (201) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (202) array_pair_list_ARR_PAIR -> COLON . array_pair
    (188) array_pair -> . expr
    (189) array_pair -> . AMPERSAND variable
    (190) array_pair -> . expr ATTR_ASSOC expr
    (191) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    AMPERSAND       shift and go to state 149
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    array_pair                     shift and go to state 238
    expr                           shift and go to state 148
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 205

    (190) array_pair -> expr ATTR_ASSOC . expr
    (191) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    AMPERSAND       shift and go to state 240
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 239
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 206

    (189) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 189 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 189 (array_pair -> AMPERSAND variable .)


state 207

    (72) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT . statement_elseif
    (73) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .
    (72) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif
    (73) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
    FUNCTION        reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          shift and go to state 99

  ! ELSEIF          [ reduce using rule 73 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .) ]

    statement_elseif               shift and go to state 241

state 208

    (101) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 101 (expr_parentheses -> LPAREN expr RPAREN .)


state 209

    (78) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 242


state 210

    (195) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 195 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 211

    (192) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 192 (statement_MUL -> statement statement_MUL .)


state 212

    (85) for_statement -> FOR LPAREN for_parameters RPAREN . statement_BLOCK_OPT
    (194) statement_BLOCK_OPT -> . statement
    (195) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (196) statement_BLOCK_OPT -> . LKEY RKEY
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 104
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 243
    statement                      shift and go to state 103
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 213

    (86) for_parameters -> SEMICOLON SEMICOLON .
    (92) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (104) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (105) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    RPAREN          reduce using rule 86 (for_parameters -> SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    for_expr_OPT                   shift and go to state 244
    expr                           shift and go to state 162
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 214

    (90) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (91) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 245


state 215

    (87) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (88) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (89) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (93) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (104) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (105) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    SEMICOLON       shift and go to state 247
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    for_expr_OPT                   shift and go to state 246
    expr                           shift and go to state 162
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 216

    (104) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 104 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 104 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 217

    (106) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (107) for_expr_COLON_EXPR -> COLON . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    expr                           shift and go to state 248
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 218

    (102) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (99) ampersand_variable -> . AMPERSAND VARIABLE
    (100) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 250
    VARIABLE        shift and go to state 251

    ampersand_variable             shift and go to state 249

state 219

    (42) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 42 (exit_expr -> LPAREN expr RPAREN .)


state 220

    (97) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (98) statement_COLON_GLOBAL -> COLON global_var .
    (97) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (98) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 98 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 170

    statement_COLON_GLOBAL         shift and go to state 252

state 221

    (96) global_var -> DOLAR LKEY expr . RKEY
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    RKEY            shift and go to state 253
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 222

    (154) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    PLUS_ASSIGN     reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    AS              reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 154 (selector -> LBRACKET expr RBRACKET .)


state 223

    (108) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 108 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 224

    (110) function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 110 (function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 225

    (112) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (113) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter
    (114) function_call_parameter -> . expr
    (115) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    AMPERSAND       shift and go to state 180
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    function_call_parameter        shift and go to state 254
    expr                           shift and go to state 179
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 226

    (115) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 115 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 115 (function_call_parameter -> AMPERSAND VARIABLE .)


state 227

    (70) statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .

    ELSE            reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    ELSEIF          reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    FUNCTION        reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    MINUS           reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    INCREMENT       reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    DECREMENT       reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    LPAREN          reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    ARRAY_TYPE      reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    TRUE            reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    FALSE           reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    WHILE           reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    DO              reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    FOR             reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    FOREACH         reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    BREAK           reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    CONTINUE        reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    RETURN          reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    EXIT            reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    DIE             reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    GLOBAL          reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    VARIABLE        reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    ID              reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    NUMBER_REAL     reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    NUMBER_INTEGER  reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    IF              reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    END_PROGRAM     reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    RKEY            reduce using rule 70 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)


state 228

    (157) fds_statements -> LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 255


state 229

    (158) fds_statements -> LKEY RKEY .

    FUNCTION        reduce using rule 158 (fds_statements -> LKEY RKEY .)
    MINUS           reduce using rule 158 (fds_statements -> LKEY RKEY .)
    INCREMENT       reduce using rule 158 (fds_statements -> LKEY RKEY .)
    DECREMENT       reduce using rule 158 (fds_statements -> LKEY RKEY .)
    LPAREN          reduce using rule 158 (fds_statements -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 158 (fds_statements -> LKEY RKEY .)
    TRUE            reduce using rule 158 (fds_statements -> LKEY RKEY .)
    FALSE           reduce using rule 158 (fds_statements -> LKEY RKEY .)
    WHILE           reduce using rule 158 (fds_statements -> LKEY RKEY .)
    DO              reduce using rule 158 (fds_statements -> LKEY RKEY .)
    FOR             reduce using rule 158 (fds_statements -> LKEY RKEY .)
    FOREACH         reduce using rule 158 (fds_statements -> LKEY RKEY .)
    BREAK           reduce using rule 158 (fds_statements -> LKEY RKEY .)
    CONTINUE        reduce using rule 158 (fds_statements -> LKEY RKEY .)
    RETURN          reduce using rule 158 (fds_statements -> LKEY RKEY .)
    EXIT            reduce using rule 158 (fds_statements -> LKEY RKEY .)
    DIE             reduce using rule 158 (fds_statements -> LKEY RKEY .)
    GLOBAL          reduce using rule 158 (fds_statements -> LKEY RKEY .)
    VARIABLE        reduce using rule 158 (fds_statements -> LKEY RKEY .)
    ID              reduce using rule 158 (fds_statements -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 158 (fds_statements -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 158 (fds_statements -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 158 (fds_statements -> LKEY RKEY .)
    IF              reduce using rule 158 (fds_statements -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 158 (fds_statements -> LKEY RKEY .)
    RKEY            reduce using rule 158 (fds_statements -> LKEY RKEY .)


state 230

    (7) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (8) inner_statement_MUL -> inner_statement .
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (156) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    RKEY            reduce using rule 8 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    inner_statement                shift and go to state 230
    inner_statement_MUL            shift and go to state 256
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 231

    (161) fds_parameter -> LPAREN parameter_list RPAREN .

    LKEY            reduce using rule 161 (fds_parameter -> LPAREN parameter_list RPAREN .)


state 232

    (163) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 163 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 233

    (197) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (198) parameter_list_COLON_PARAMETER -> COLON . parameter
    (165) parameter -> . VARIABLE
    (166) parameter -> . parameter_prefix VARIABLE
    (167) parameter -> . VARIABLE ASSIGN static_scalar
    (168) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (169) parameter_prefix -> . parameter_type AMPERSAND
    (170) parameter_prefix -> . AMPERSAND
    (171) parameter_prefix -> . parameter_type
    (172) parameter_type -> . INT_TYPE
    (173) parameter_type -> . BOOLEAN_TYPE
    (174) parameter_type -> . STRING_TYPE
    (175) parameter_type -> . FLOAT_TYPE
    (176) parameter_type -> . ARRAY_TYPE
    (177) parameter_type -> . BOOL_TYPE
    (178) parameter_type -> . REAL_TYPE
    (179) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 187
    AMPERSAND       shift and go to state 190
    INT_TYPE        shift and go to state 191
    BOOLEAN_TYPE    shift and go to state 192
    STRING_TYPE     shift and go to state 193
    FLOAT_TYPE      shift and go to state 194
    ARRAY_TYPE      shift and go to state 195
    BOOL_TYPE       shift and go to state 196
    REAL_TYPE       shift and go to state 197
    DOUBLE_TYPE     shift and go to state 198

    parameter                      shift and go to state 257
    parameter_prefix               shift and go to state 188
    parameter_type                 shift and go to state 189

state 234

    (167) parameter -> VARIABLE ASSIGN . static_scalar
    (180) static_scalar -> . common_scalar
    (181) static_scalar -> . PLUS static_scalar
    (182) static_scalar -> . MINUS static_scalar
    (183) common_scalar -> . NUMBER_REAL
    (184) common_scalar -> . NUMBER_INTEGER
    (185) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 260
    MINUS           shift and go to state 261
    NUMBER_REAL     shift and go to state 262
    NUMBER_INTEGER  shift and go to state 263
    CONSTANT_ENCAPSED_STRING shift and go to state 264

    static_scalar                  shift and go to state 258
    common_scalar                  shift and go to state 259

state 235

    (166) parameter -> parameter_prefix VARIABLE .
    (168) parameter -> parameter_prefix VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 166 (parameter -> parameter_prefix VARIABLE .)
    RPAREN          reduce using rule 166 (parameter -> parameter_prefix VARIABLE .)
    ASSIGN          shift and go to state 265


state 236

    (169) parameter_prefix -> parameter_type AMPERSAND .

    VARIABLE        reduce using rule 169 (parameter_prefix -> parameter_type AMPERSAND .)


state 237

    (34) expr -> expr INTE_DOT expr DDOT expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .)
    AS              reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! AND             [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! OR              [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! INTE_DOT        [ reduce using rule 34 (expr -> expr INTE_DOT expr DDOT expr .) ]


state 238

    (201) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (202) array_pair_list_ARR_PAIR -> COLON array_pair .
    (201) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (202) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 202 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 204

    array_pair_list_ARR_PAIR       shift and go to state 266

state 239

    (190) array_pair -> expr ATTR_ASSOC expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 190 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 190 (array_pair -> expr ATTR_ASSOC expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 240

    (191) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE

    VARIABLE        shift and go to state 42

    variable                       shift and go to state 267

state 241

    (72) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .

    FUNCTION        reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    MINUS           reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    INCREMENT       reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    DECREMENT       reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    LPAREN          reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    ARRAY_TYPE      reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    TRUE            reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    FALSE           reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    WHILE           reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    DO              reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    FOR             reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    FOREACH         reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    BREAK           reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    CONTINUE        reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    RETURN          reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    EXIT            reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    DIE             reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    GLOBAL          reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    VARIABLE        reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    ID              reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    NUMBER_REAL     reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    NUMBER_INTEGER  reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    IF              reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    END_PROGRAM     reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    RKEY            reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    ELSE            reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    ELSEIF          reduce using rule 72 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)


state 242

    (78) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    MINUS           reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    INCREMENT       reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DECREMENT       reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOREACH         reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 78 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)


state 243

    (85) for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 85 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)


state 244

    (92) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 92 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 245

    (90) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (91) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (104) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (105) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    RPAREN          reduce using rule 90 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    for_expr_OPT                   shift and go to state 268
    expr                           shift and go to state 162
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 246

    (88) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (93) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 269


state 247

    (87) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (89) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (104) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (105) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    RPAREN          reduce using rule 87 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    for_expr_OPT                   shift and go to state 270
    expr                           shift and go to state 162
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 248

    (106) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (107) for_expr_COLON_EXPR -> COLON expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (34) expr -> expr . INTE_DOT expr DDOT expr
    (106) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (107) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 107 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 107 (for_expr_COLON_EXPR -> COLON expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67
    COLON           shift and go to state 217

    for_expr_COLON_EXPR            shift and go to state 271

state 249

    (102) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 272
    ATTR_ASSOC      shift and go to state 273


state 250

    (99) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 274


state 251

    (100) ampersand_variable -> VARIABLE .

    RPAREN          reduce using rule 100 (ampersand_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 100 (ampersand_variable -> VARIABLE .)


state 252

    (97) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 97 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 253

    (96) global_var -> DOLAR LKEY expr RKEY .

    COLON           reduce using rule 96 (global_var -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 96 (global_var -> DOLAR LKEY expr RKEY .)


state 254

    (112) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (113) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .
    (112) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (113) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 113 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .)
    COLON           shift and go to state 225

    fc_parameter_list_COLON_PARAMETER shift and go to state 275

state 255

    (157) fds_statements -> LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 157 (fds_statements -> LKEY inner_statement_MUL RKEY .)


state 256

    (7) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 7 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 257

    (197) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (198) parameter_list_COLON_PARAMETER -> COLON parameter .
    (197) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (198) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 198 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 233

    parameter_list_COLON_PARAMETER shift and go to state 276

state 258

    (167) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 167 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 167 (parameter -> VARIABLE ASSIGN static_scalar .)


state 259

    (180) static_scalar -> common_scalar .

    COLON           reduce using rule 180 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 180 (static_scalar -> common_scalar .)


state 260

    (181) static_scalar -> PLUS . static_scalar
    (180) static_scalar -> . common_scalar
    (181) static_scalar -> . PLUS static_scalar
    (182) static_scalar -> . MINUS static_scalar
    (183) common_scalar -> . NUMBER_REAL
    (184) common_scalar -> . NUMBER_INTEGER
    (185) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 260
    MINUS           shift and go to state 261
    NUMBER_REAL     shift and go to state 262
    NUMBER_INTEGER  shift and go to state 263
    CONSTANT_ENCAPSED_STRING shift and go to state 264

    static_scalar                  shift and go to state 277
    common_scalar                  shift and go to state 259

state 261

    (182) static_scalar -> MINUS . static_scalar
    (180) static_scalar -> . common_scalar
    (181) static_scalar -> . PLUS static_scalar
    (182) static_scalar -> . MINUS static_scalar
    (183) common_scalar -> . NUMBER_REAL
    (184) common_scalar -> . NUMBER_INTEGER
    (185) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 260
    MINUS           shift and go to state 261
    NUMBER_REAL     shift and go to state 262
    NUMBER_INTEGER  shift and go to state 263
    CONSTANT_ENCAPSED_STRING shift and go to state 264

    static_scalar                  shift and go to state 278
    common_scalar                  shift and go to state 259

state 262

    (183) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 183 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 183 (common_scalar -> NUMBER_REAL .)


state 263

    (184) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 184 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 184 (common_scalar -> NUMBER_INTEGER .)


state 264

    (185) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 185 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 185 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 265

    (168) parameter -> parameter_prefix VARIABLE ASSIGN . static_scalar
    (180) static_scalar -> . common_scalar
    (181) static_scalar -> . PLUS static_scalar
    (182) static_scalar -> . MINUS static_scalar
    (183) common_scalar -> . NUMBER_REAL
    (184) common_scalar -> . NUMBER_INTEGER
    (185) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 260
    MINUS           shift and go to state 261
    NUMBER_REAL     shift and go to state 262
    NUMBER_INTEGER  shift and go to state 263
    CONSTANT_ENCAPSED_STRING shift and go to state 264

    static_scalar                  shift and go to state 279
    common_scalar                  shift and go to state 259

state 266

    (201) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 201 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 267

    (191) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 191 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 191 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 268

    (91) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 91 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 269

    (88) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (93) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (104) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (105) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING

    RPAREN          reduce using rule 88 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46

    for_expr_OPT                   shift and go to state 280
    expr                           shift and go to state 162
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28

state 270

    (89) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 89 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 271

    (106) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 106 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 106 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 272

    (102) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN . statement_BLOCK_OPT
    (194) statement_BLOCK_OPT -> . statement
    (195) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (196) statement_BLOCK_OPT -> . LKEY RKEY
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 104
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 281
    statement                      shift and go to state 103
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 273

    (103) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC . ampersand_variable RPAREN statement_BLOCK_OPT
    (99) ampersand_variable -> . AMPERSAND VARIABLE
    (100) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 250
    VARIABLE        shift and go to state 251

    ampersand_variable             shift and go to state 282

state 274

    (99) ampersand_variable -> AMPERSAND VARIABLE .

    RPAREN          reduce using rule 99 (ampersand_variable -> AMPERSAND VARIABLE .)
    ATTR_ASSOC      reduce using rule 99 (ampersand_variable -> AMPERSAND VARIABLE .)


state 275

    (112) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 112 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 276

    (197) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 197 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 277

    (181) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 181 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 181 (static_scalar -> PLUS static_scalar .)


state 278

    (182) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 182 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 182 (static_scalar -> MINUS static_scalar .)


state 279

    (168) parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 168 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 168 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)


state 280

    (93) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 93 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 281

    (102) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 102 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)


state 282

    (103) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 283


state 283

    (103) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN . statement_BLOCK_OPT
    (194) statement_BLOCK_OPT -> . statement
    (195) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (196) statement_BLOCK_OPT -> . LKEY RKEY
    (46) statement -> . expr SEMICOLON
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . do_statement
    (50) statement -> . for_statement
    (51) statement -> . foreach_statement
    (52) statement -> . break_statement
    (53) statement -> . continue_statement
    (54) statement -> . return_statement
    (55) statement -> . exit_statement SEMICOLON
    (56) statement -> . die_statement SEMICOLON
    (57) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . INCREMENT variable
    (24) expr -> . variable INCREMENT
    (25) expr -> . DECREMENT variable
    (26) expr -> . variable DECREMENT
    (27) expr -> . variable
    (28) expr -> . LPAREN expr RPAREN
    (29) expr -> . ARRAY_TYPE array_declaration
    (30) expr -> . function_call
    (31) expr -> . scalar
    (32) expr -> . TRUE
    (33) expr -> . FALSE
    (34) expr -> . expr INTE_DOT expr DDOT expr
    (35) expr -> . variable assign_operator expr
    (36) expr -> . variable assign_operator AMPERSAND expr
    (37) expr -> . LPAREN type_cast_operator RPAREN expr
    (66) if_statement -> . statement_if
    (67) if_statement -> . statement_if statement_else
    (68) if_statement -> . statement_if statement_elseif
    (69) if_statement -> . statement_if statement_elseif statement_else
    (77) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (78) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (85) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (102) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (103) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) break_statement -> . BREAK expr SEMICOLON
    (80) break_statement -> . BREAK SEMICOLON
    (81) continue_statement -> . CONTINUE expr SEMICOLON
    (82) continue_statement -> . CONTINUE SEMICOLON
    (83) return_statement -> . RETURN expr SEMICOLON
    (84) return_statement -> . RETURN SEMICOLON
    (38) exit_statement -> . EXIT exit_expr
    (39) exit_statement -> . EXIT
    (40) die_statement -> . DIE exit_expr
    (41) die_statement -> . DIE
    (75) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (76) global_statement -> . GLOBAL global_var
    (152) variable -> . VARIABLE reference_variable_SELECTOR
    (153) variable -> . VARIABLE
    (108) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (109) function_call -> . ID LPAREN RPAREN
    (149) scalar -> . NUMBER_REAL
    (150) scalar -> . NUMBER_INTEGER
    (151) scalar -> . CONSTANT_ENCAPSED_STRING
    (70) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (71) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 104
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 24
    LPAREN          shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    EXIT            shift and go to state 39
    DIE             shift and go to state 40
    GLOBAL          shift and go to state 41
    VARIABLE        shift and go to state 42
    ID              shift and go to state 43
    NUMBER_REAL     shift and go to state 44
    NUMBER_INTEGER  shift and go to state 45
    CONSTANT_ENCAPSED_STRING shift and go to state 46
    IF              shift and go to state 47

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 284
    statement                      shift and go to state 103
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 23
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31

state 284

    (103) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 103 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 31 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 31 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 130 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 130 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 130 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 130 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 132 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 132 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 132 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 133 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 134 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 134 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 134 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 134 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 134 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 134 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 134 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 135 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 135 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 135 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 136 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 136 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 137 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 137 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 137 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 137 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 137 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 137 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 137 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 137 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 138 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 138 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 138 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 138 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 138 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 139 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 139 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 139 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 139 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 139 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 139 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 139 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 139 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 139 resolved as shift
WARNING: shift/reduce conflict for AND in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 139 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 141 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 141 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 141 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 141 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 141 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 141 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 141 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 141 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 141 resolved as shift
WARNING: shift/reduce conflict for AND in state 141 resolved as shift
WARNING: shift/reduce conflict for OR in state 141 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 141 resolved as shift
WARNING: shift/reduce conflict for IF in state 181 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 200 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 200 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 200 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 200 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 200 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 200 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 200 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 200 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for AND in state 200 resolved as shift
WARNING: shift/reduce conflict for OR in state 200 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 200 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 201 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 201 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 201 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 201 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 201 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 201 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 201 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 201 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for AND in state 201 resolved as shift
WARNING: shift/reduce conflict for OR in state 201 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 201 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 207 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 237 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 237 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 237 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 237 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 237 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 237 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 237 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 237 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 237 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 237 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 237 resolved as shift
WARNING: shift/reduce conflict for AND in state 237 resolved as shift
WARNING: shift/reduce conflict for OR in state 237 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 237 resolved as shift

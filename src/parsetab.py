
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightADD_ASSIGNSUB_ASSIGNMOD_ASSIGNPLUS_ASSIGNDIVIDE_ASSIGNASSIGNleftINTE_DOTDDOTleftANDORleftEQUALSNOT_EQUALLESS_THANLESS_EQUALGREAT_THANGREAT_EQUALleftPLUSMINUSleftTIMESDIVIDEPERCENTrightEXC_DOTleftPOS_INCREMENTPOS_DECREMENTrightPRE_INCREMENTPRE_DECREMENTRPARENrightUMINUSADD_ASSIGN AMPERSAND AND ARRAY_TYPE AS ASSIGN ATTR_ASSOC BEGIN_PROGRAM BOOL_TYPE BREAK COLON COMMENT_MULTI COMMENT_SINGLE CONSTANT_ENCAPSED_STRING CONTINUE DDOT DIE DIVIDE DIVIDE_ASSIGN DO DOLAR ELSE ELSEIF END_PROGRAM EQUALS EXC_DOT EXIT FALSE FLOAT_TYPE FOR FOREACH FUNCTION GLOBAL GREAT_EQUAL GREAT_THAN ID IDENTATION IF INTE_DOT INT_TYPE LBRACKET LEFT_LOGICAL LESS_EQUAL LESS_THAN LKEY LPAREN MINUS MOD_ASSIGN NOT_EQUAL NUMBER_INTEGER NUMBER_REAL OR PERCENT PLUS PLUS_ASSIGN POS_DECREMENT POS_INCREMENT PRE_DECREMENT PRE_INCREMENT RBRACKET RETURN RIGHT_LOGICAL RKEY RPAREN SEMICOLON STRING_TYPE SUB_ASSIGN TIMES TRUE VARIABLE WHILE\n  main : BEGIN_PROGRAM main_program END_PROGRAM \n  | BEGIN_PROGRAM END_PROGRAM \n  \n  main_program : inner_statement main_program\n    | inner_statement\n  \n  inner_statement : function_declaration_statement\n    | statement\n  \n  inner_statement_MUL : inner_statement inner_statement_MUL\n    | inner_statement\n  \n  expr : expr PLUS expr\n    | expr MINUS expr \n    | MINUS expr %prec UMINUS\n    | expr DIVIDE expr\n    | expr PERCENT expr\n    | expr TIMES expr   \n    | expr EQUALS expr\n    | expr NOT_EQUAL expr\n    | expr GREAT_THAN expr \n    | expr GREAT_EQUAL expr\n    | expr LESS_THAN expr\n    | expr LESS_EQUAL expr\n    | expr AND expr\n    | expr OR expr\n    | EXC_DOT expr\n    | PRE_INCREMENT variable\n    | variable POS_INCREMENT\n    | PRE_DECREMENT variable\n    | variable POS_DECREMENT\n    | variable\n    | LPAREN expr RPAREN\n    | ARRAY_TYPE array_declaration\n    | LPAREN typecast_operator RPAREN expr \n    | function_call\n    | expr INTE_DOT expr DDOT expr\n    | variable ADD_ASSIGN expr\n    | variable SUB_ASSIGN expr\n    | variable MOD_ASSIGN expr\n    | variable PLUS_ASSIGN expr\n    | variable DIVIDE_ASSIGN expr\n    | variable ASSIGN expr\n    | NUMBER_INTEGER\n    | NUMBER_REAL\n    | CONSTANT_ENCAPSED_STRING\n    | TRUE\n    | FALSE\n  \n  typecast_operator : INT_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE\n    | STRING_TYPE\n    | BOOL_TYPE\n  \n  exit_statement : EXIT exit_expr\n    | EXIT\n  \n  die_statement : DIE exit_expr\n    | DIE\n  \n  exit_expr : LPAREN expr RPAREN\n    | LPAREN RPAREN\n  \n  array_declaration : LPAREN array_pair_list RPAREN\n    | LPAREN RPAREN\n  \n  statement : expr SEMICOLON\n    | if_statement \n    | while_statement\n    | do_statement\n    | for_statement\n    | foreach_statement\n    | break_statement\n    | continue_statement \n    | return_statement\n    | exit_statement SEMICOLON\n    | die_statement SEMICOLON\n    | global_statement SEMICOLON\n  \n  S : IF\n  \n  if_statement : statement_if\n  | statement_if statement_else\n  | statement_if statement_elseif\n  | statement_if statement_elseif statement_else\n   \n  statement_if : IF expr_parentheses statement_block_optional statement_if\n   | IF expr_parentheses statement_block_optional\n  \n  statement_elseif : ELSEIF expr_parentheses statement_block_optional statement_elseif\n   | ELSEIF expr_parentheses statement_block_optional\n  \n  statement_else : ELSE statement_block_optional\n  \n  global_statement : GLOBAL global_var statement_COLON_GLOBAL \n    | GLOBAL global_var \n  \n  while_statement : WHILE expr_parentheses statement_block_optional\n  \n  do_statement : DO statement_block_optional WHILE expr_parentheses SEMICOLON\n  \n  break_statement : BREAK expr SEMICOLON\n    | BREAK SEMICOLON\n  \n  continue_statement : CONTINUE expr SEMICOLON\n    | CONTINUE SEMICOLON\n  \n  return_statement : RETURN expr SEMICOLON \n    | RETURN SEMICOLON \n  \n  for_statement : FOR LPAREN for_parameters RPAREN statement_block_optional\n  \n  for_parameters : SEMICOLON SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT\n  | SEMICOLON for_expr_OPT SEMICOLON\n  | SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  | SEMICOLON SEMICOLON for_expr_OPT\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  \n  global_var : VARIABLE\n    | DOLAR VARIABLE\n    | DOLAR LKEY expr RKEY \n  \n  statement_COLON_GLOBAL : COLON global_var statement_COLON_GLOBAL\n    | COLON global_var\n  \n  ampersand_variable : AMPERSAND VARIABLE\n    | VARIABLE\n  \n  expr_parentheses : LPAREN expr RPAREN\n  \n  foreach_statement : FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional\n  | FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional\n  \n  for_expr_OPT : expr for_expr_COLON_EXPR\n  | expr\n  \n  for_expr_COLON_EXPR : COLON expr for_expr_COLON_EXPR\n    | COLON expr\n  \n  function_call : ID LPAREN function_call_parameter_list RPAREN\n    | ID LPAREN RPAREN\n  \n  function_call_parameter_list : function_call_parameter fc_parameter_list_COLON_PARAMETER\n    |  function_call_parameter\n  \n  fc_parameter_list_COLON_PARAMETER : COLON function_call_parameter fc_parameter_list_COLON_PARAMETER\n    | COLON function_call_parameter\n  \n  function_call_parameter : expr\n    | AMPERSAND VARIABLE\n  \n  variable : VARIABLE variable_array_selector\n    | VARIABLE\n  \n  selector : LBRACKET expr RBRACKET \n    | LBRACKET RBRACKET\n  \n  function_declaration_statement : FUNCTION fds_id fds_parameter fds_statements\n  \n  fds_statements : LKEY inner_statement_MUL RKEY\n    | LKEY RKEY\n  \n  fds_id : AMPERSAND ID\n    | ID\n  \n  fds_parameter : LPAREN parameter_list RPAREN\n    | LPAREN RPAREN\n  \n  parameter_list : parameter parameter_list_colon_parameter \n    | parameter\n   \n  parameter : VARIABLE \n    | parameter_prefix VARIABLE\n    | VARIABLE ASSIGN static_scalar\n    | parameter_prefix VARIABLE ASSIGN static_scalar\n  \n  parameter_prefix : parameter_type AMPERSAND\n    | AMPERSAND\n    | parameter_type\n  \n  parameter_type : INT_TYPE\n    | STRING_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE\n    | BOOL_TYPE\n  \n  static_scalar : common_scalar \n    | PLUS static_scalar\n    | MINUS static_scalar\n  \n  common_scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  array_pair_list : array_pair array_pair_list_ARR_PAIR \n    | array_pair\n   \n  array_pair : expr\n    | AMPERSAND variable\n    | expr ATTR_ASSOC expr\n    | expr ATTR_ASSOC AMPERSAND variable\n  \n  statement_MUL : statement statement_MUL\n    | statement\n  \n  statement_block_optional : statement \n    | LKEY statement_MUL RKEY \n    | LKEY RKEY\n  \n  parameter_list_colon_parameter : COLON parameter parameter_list_colon_parameter\n    | COLON parameter\n  \n    variable_array_selector : selector variable_array_selector\n    | selector\n  \n  array_pair_list_ARR_PAIR : COLON array_pair array_pair_list_ARR_PAIR\n    | COLON array_pair\n  '
    
_lr_action_items = {'BEGIN_PROGRAM':([0,],[2,]),'$end':([1,4,48,],[0,-2,-1,]),'END_PROGRAM':([2,3,5,6,7,10,11,12,13,14,15,16,17,34,49,53,68,69,70,92,93,99,104,106,108,150,151,153,157,164,165,166,181,182,203,206,223,225,237,238,239,251,277,280,],[4,48,-4,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,-3,-58,-67,-68,-69,-72,-73,-160,-85,-87,-89,-74,-79,-82,-162,-84,-86,-88,-76,-125,-78,-161,-75,-127,-77,-83,-90,-126,-107,-108,]),'FUNCTION':([2,5,6,7,10,11,12,13,14,15,16,17,34,53,68,69,70,92,93,99,104,106,108,150,151,153,157,164,165,166,181,182,183,203,206,223,225,226,237,238,239,251,277,280,],[8,8,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,-58,-67,-68,-69,-72,-73,-160,-85,-87,-89,-74,-79,-82,-162,-84,-86,-88,-76,-125,8,-78,-161,-75,-127,8,-77,-83,-90,-126,-107,-108,]),'MINUS':([2,5,6,7,9,10,11,12,13,14,15,16,17,21,22,24,26,28,29,30,31,32,33,34,36,39,40,41,45,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90,91,92,93,94,96,97,99,100,101,102,103,104,105,106,107,108,110,115,116,117,118,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,148,150,151,152,153,154,157,158,160,162,163,164,165,166,167,172,173,174,175,177,179,181,182,183,196,197,198,200,201,203,204,206,208,209,211,213,217,218,219,221,223,225,226,230,233,235,237,238,239,241,243,244,251,256,257,261,265,268,277,279,280,],[21,21,-5,-6,55,-59,-60,-61,-62,-63,-64,-65,-66,21,21,-28,21,-32,-40,-41,-42,-43,-44,-71,21,21,21,21,-122,-58,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-67,-68,-69,-11,-23,-24,-25,-27,21,21,21,21,21,21,-26,55,-30,21,-72,-73,21,21,21,-160,21,21,21,55,-85,55,-87,55,-89,21,-121,-166,21,21,21,-9,-10,-12,-13,-14,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-29,21,-57,55,-74,-79,21,-82,55,-162,21,21,55,55,-84,-86,-88,55,21,-165,55,-124,-114,55,-76,-125,21,21,-31,-56,21,21,-78,-106,-161,21,21,21,21,55,-123,-113,21,-75,-127,21,257,55,55,-77,-83,-90,21,21,55,-126,257,257,257,21,21,-107,21,-108,]),'EXC_DOT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,237,238,239,241,243,251,265,268,277,279,280,],[22,22,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,22,22,22,-71,22,22,22,22,-58,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-67,-68,-69,22,22,22,22,22,22,22,-72,-73,22,22,22,-160,22,22,22,-85,-87,-89,22,22,22,22,22,-74,-79,22,-82,-162,22,22,-84,-86,-88,22,-76,-125,22,22,22,22,-78,-106,-161,22,22,22,22,22,-75,-127,22,-77,-83,-90,22,22,-126,22,22,-107,22,-108,]),'PRE_INCREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,237,238,239,241,243,251,265,268,277,279,280,],[23,23,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,23,23,23,-71,23,23,23,23,-58,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-67,-68,-69,23,23,23,23,23,23,23,-72,-73,23,23,23,-160,23,23,23,-85,-87,-89,23,23,23,23,23,-74,-79,23,-82,-162,23,23,-84,-86,-88,23,-76,-125,23,23,23,23,-78,-106,-161,23,23,23,23,23,-75,-127,23,-77,-83,-90,23,23,-126,23,23,-107,23,-108,]),'PRE_DECREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,237,238,239,241,243,251,265,268,277,279,280,],[25,25,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,25,25,25,-71,25,25,25,25,-58,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-67,-68,-69,25,25,25,25,25,25,25,-72,-73,25,25,25,-160,25,25,25,-85,-87,-89,25,25,25,25,25,-74,-79,25,-82,-162,25,25,-84,-86,-88,25,-76,-125,25,25,25,25,-78,-106,-161,25,25,25,25,25,-75,-127,25,-77,-83,-90,25,25,-126,25,25,-107,25,-108,]),'LPAREN':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,27,34,35,36,37,38,39,40,41,42,43,46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,85,91,92,93,94,95,96,97,99,100,101,102,104,106,108,110,117,118,119,122,144,150,151,152,153,155,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,237,238,239,241,243,251,265,268,277,279,280,],[26,26,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,26,26,26,91,-71,97,26,101,102,26,26,26,110,110,118,97,121,-129,-58,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-67,-68,-69,26,26,26,26,26,26,91,26,-72,-73,26,97,26,26,-160,26,26,26,-85,-87,-89,26,26,26,26,-128,26,-74,-79,26,-82,97,-162,26,26,-84,-86,-88,26,-76,-125,26,26,26,26,-78,-106,-161,26,26,26,26,26,-75,-127,26,-77,-83,-90,26,26,-126,26,26,-107,26,-108,]),'ARRAY_TYPE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,121,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,229,237,238,239,241,243,251,265,268,277,279,280,],[27,27,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,27,27,85,-71,27,27,27,27,-58,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-67,-68,-69,27,27,27,27,27,27,27,-72,-73,27,27,27,-160,27,27,27,-85,-87,-89,27,27,27,27,194,27,-74,-79,27,-82,-162,27,27,-84,-86,-88,27,-76,-125,27,27,27,27,-78,-106,-161,27,27,27,27,27,-75,-127,27,194,-77,-83,-90,27,27,-126,27,27,-107,27,-108,]),'NUMBER_INTEGER':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,230,237,238,239,241,243,251,256,257,261,265,268,277,279,280,],[29,29,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,29,29,29,-71,29,29,29,29,-58,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-67,-68,-69,29,29,29,29,29,29,29,-72,-73,29,29,29,-160,29,29,29,-85,-87,-89,29,29,29,29,29,-74,-79,29,-82,-162,29,29,-84,-86,-88,29,-76,-125,29,29,29,29,-78,-106,-161,29,29,29,29,29,-75,-127,29,259,-77,-83,-90,29,29,-126,259,259,259,29,29,-107,29,-108,]),'NUMBER_REAL':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,230,237,238,239,241,243,251,256,257,261,265,268,277,279,280,],[30,30,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,30,30,30,-71,30,30,30,30,-58,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-67,-68,-69,30,30,30,30,30,30,30,-72,-73,30,30,30,-160,30,30,30,-85,-87,-89,30,30,30,30,30,-74,-79,30,-82,-162,30,30,-84,-86,-88,30,-76,-125,30,30,30,30,-78,-106,-161,30,30,30,30,30,-75,-127,30,258,-77,-83,-90,30,30,-126,258,258,258,30,30,-107,30,-108,]),'CONSTANT_ENCAPSED_STRING':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,230,237,238,239,241,243,251,256,257,261,265,268,277,279,280,],[31,31,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,31,31,31,-71,31,31,31,31,-58,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-67,-68,-69,31,31,31,31,31,31,31,-72,-73,31,31,31,-160,31,31,31,-85,-87,-89,31,31,31,31,31,-74,-79,31,-82,-162,31,31,-84,-86,-88,31,-76,-125,31,31,31,31,-78,-106,-161,31,31,31,31,31,-75,-127,31,260,-77,-83,-90,31,31,-126,260,260,260,31,31,-107,31,-108,]),'TRUE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,237,238,239,241,243,251,265,268,277,279,280,],[32,32,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,32,32,32,-71,32,32,32,32,-58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-67,-68,-69,32,32,32,32,32,32,32,-72,-73,32,32,32,-160,32,32,32,-85,-87,-89,32,32,32,32,32,-74,-79,32,-82,-162,32,32,-84,-86,-88,32,-76,-125,32,32,32,32,-78,-106,-161,32,32,32,32,32,-75,-127,32,-77,-83,-90,32,32,-126,32,32,-107,32,-108,]),'FALSE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,237,238,239,241,243,251,265,268,277,279,280,],[33,33,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,33,33,33,-71,33,33,33,33,-58,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-67,-68,-69,33,33,33,33,33,33,33,-72,-73,33,33,33,-160,33,33,33,-85,-87,-89,33,33,33,33,33,-74,-79,33,-82,-162,33,33,-84,-86,-88,33,-76,-125,33,33,33,33,-78,-106,-161,33,33,33,33,33,-75,-127,33,-77,-83,-90,33,33,-126,33,33,-107,33,-108,]),'WHILE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,98,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[35,35,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,35,-58,-67,-68,-69,-72,-73,35,35,155,-160,35,-85,-87,-89,35,-74,-79,35,-82,-162,35,-84,-86,-88,-76,-125,35,-78,-106,-161,35,-75,-127,35,-77,-83,-90,-126,35,-107,35,-108,]),'DO':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[36,36,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,36,-58,-67,-68,-69,-72,-73,36,36,-160,36,-85,-87,-89,36,-74,-79,36,-82,-162,36,-84,-86,-88,-76,-125,36,-78,-106,-161,36,-75,-127,36,-77,-83,-90,-126,36,-107,36,-108,]),'FOR':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[37,37,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,37,-58,-67,-68,-69,-72,-73,37,37,-160,37,-85,-87,-89,37,-74,-79,37,-82,-162,37,-84,-86,-88,-76,-125,37,-78,-106,-161,37,-75,-127,37,-77,-83,-90,-126,37,-107,37,-108,]),'FOREACH':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[38,38,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,38,-58,-67,-68,-69,-72,-73,38,38,-160,38,-85,-87,-89,38,-74,-79,38,-82,-162,38,-84,-86,-88,-76,-125,38,-78,-106,-161,38,-75,-127,38,-77,-83,-90,-126,38,-107,38,-108,]),'BREAK':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[39,39,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,39,-58,-67,-68,-69,-72,-73,39,39,-160,39,-85,-87,-89,39,-74,-79,39,-82,-162,39,-84,-86,-88,-76,-125,39,-78,-106,-161,39,-75,-127,39,-77,-83,-90,-126,39,-107,39,-108,]),'CONTINUE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[40,40,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,40,-58,-67,-68,-69,-72,-73,40,40,-160,40,-85,-87,-89,40,-74,-79,40,-82,-162,40,-84,-86,-88,-76,-125,40,-78,-106,-161,40,-75,-127,40,-77,-83,-90,-126,40,-107,40,-108,]),'RETURN':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[41,41,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,41,-58,-67,-68,-69,-72,-73,41,41,-160,41,-85,-87,-89,41,-74,-79,41,-82,-162,41,-84,-86,-88,-76,-125,41,-78,-106,-161,41,-75,-127,41,-77,-83,-90,-126,41,-107,41,-108,]),'EXIT':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[42,42,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,42,-58,-67,-68,-69,-72,-73,42,42,-160,42,-85,-87,-89,42,-74,-79,42,-82,-162,42,-84,-86,-88,-76,-125,42,-78,-106,-161,42,-75,-127,42,-77,-83,-90,-126,42,-107,42,-108,]),'DIE':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[43,43,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,43,-58,-67,-68,-69,-72,-73,43,43,-160,43,-85,-87,-89,43,-74,-79,43,-82,-162,43,-84,-86,-88,-76,-125,43,-78,-106,-161,43,-75,-127,43,-77,-83,-90,-126,43,-107,43,-108,]),'GLOBAL':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[44,44,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,44,-58,-67,-68,-69,-72,-73,44,44,-160,44,-85,-87,-89,44,-74,-79,44,-82,-162,44,-84,-86,-88,-76,-125,44,-78,-106,-161,44,-75,-127,44,-77,-83,-90,-126,44,-107,44,-108,]),'VARIABLE':([2,5,6,7,10,11,12,13,14,15,16,17,21,22,23,25,26,34,36,39,40,41,44,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,114,117,118,119,121,144,149,150,151,152,153,157,158,160,164,165,166,170,172,180,181,182,183,188,189,190,191,192,193,194,195,196,200,201,203,204,206,208,209,211,213,214,221,223,225,226,229,232,236,237,238,239,241,243,246,251,265,268,269,277,279,280,],[45,45,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,45,45,45,45,45,-71,45,45,45,45,113,-58,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-67,-68,-69,45,45,45,45,45,45,45,-72,-73,45,45,45,-160,45,45,45,-85,-87,-89,45,171,45,45,45,187,45,45,-74,-79,45,-82,-162,45,45,-84,-86,-88,113,45,222,-76,-125,45,231,-140,-139,-141,-142,-143,-144,-145,45,45,45,-78,-106,-161,45,45,45,45,247,45,-75,-127,45,187,-138,45,-77,-83,-90,45,45,270,-126,45,45,247,-107,45,-108,]),'ID':([2,5,6,7,8,10,11,12,13,14,15,16,17,21,22,26,34,36,39,40,41,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80,81,91,92,93,94,96,97,99,100,101,102,104,106,108,110,117,118,119,144,150,151,152,153,157,158,160,164,165,166,172,181,182,183,196,200,201,203,204,206,208,209,211,213,221,223,225,226,237,238,239,241,243,251,265,268,277,279,280,],[46,46,-5,-6,52,-59,-60,-61,-62,-63,-64,-65,-66,46,46,46,-71,46,46,46,46,122,-58,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-67,-68,-69,46,46,46,46,46,46,46,-72,-73,46,46,46,-160,46,46,46,-85,-87,-89,46,46,46,46,46,-74,-79,46,-82,-162,46,46,-84,-86,-88,46,-76,-125,46,46,46,46,-78,-106,-161,46,46,46,46,46,-75,-127,46,-77,-83,-90,46,46,-126,46,46,-107,46,-108,]),'IF':([2,5,6,7,10,11,12,13,14,15,16,17,34,36,53,68,69,70,92,93,94,96,99,100,104,106,108,119,150,151,152,153,157,158,164,165,166,181,182,183,203,204,206,208,223,225,226,237,238,239,251,268,277,279,280,],[47,47,-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-71,47,-58,-67,-68,-69,-72,-73,47,47,-160,47,-85,-87,-89,47,-74,-79,47,-82,-162,47,-84,-86,-88,47,-125,47,-78,-106,-161,47,-75,-127,47,-77,-83,-90,-126,47,-107,47,-108,]),'RKEY':([6,7,10,11,12,13,14,15,16,17,24,28,29,30,31,32,33,34,45,53,68,69,70,71,72,73,74,75,82,90,92,93,99,100,104,106,108,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,146,150,151,153,156,157,158,164,165,166,173,175,177,181,182,183,197,198,203,206,207,217,218,219,223,224,225,226,233,237,238,239,251,252,277,280,],[-5,-6,-59,-60,-61,-62,-63,-64,-65,-66,-28,-32,-40,-41,-42,-43,-44,-71,-122,-58,-67,-68,-69,-11,-23,-24,-25,-27,-26,-30,-72,-73,-160,157,-85,-87,-89,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-29,-57,-74,-79,-82,206,-162,-159,-84,-86,-88,-165,-124,-114,-76,-125,225,-31,-56,-78,-161,-158,249,-123,-113,-75,251,-127,-8,-33,-77,-83,-90,-126,-7,-107,-108,]),'AMPERSAND':([8,91,118,121,189,191,192,193,194,195,200,201,214,221,229,269,],[51,149,180,190,232,-141,-142,-143,-144,-145,149,236,246,180,190,246,]),'SEMICOLON':([9,18,19,20,24,28,29,30,31,32,33,39,40,41,42,43,45,71,72,73,74,75,82,90,101,103,105,107,109,111,112,113,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,146,160,161,162,168,169,171,173,175,177,197,198,204,205,210,211,212,215,216,218,219,233,242,244,248,249,267,],[53,68,69,70,-28,-32,-40,-41,-42,-43,-44,104,106,108,-51,-53,-122,-11,-23,-24,-25,-27,-26,-30,160,164,165,166,-50,-52,-81,-99,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-29,-57,209,211,-110,-55,-80,-100,-165,-124,-114,-31,-56,-106,238,241,243,-109,-54,-103,-123,-113,-33,265,-112,-102,-101,-111,]),'PLUS':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,230,233,235,244,256,257,261,],[54,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,54,-30,54,54,54,-121,-166,-9,-10,-12,-13,-14,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-29,-57,54,54,54,54,54,-165,54,-124,-114,54,-31,-56,54,-123,-113,256,54,54,54,256,256,256,]),'DIVIDE':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[56,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,56,-30,56,56,56,-121,-166,56,56,-12,-13,-14,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-29,-57,56,56,56,56,56,-165,56,-124,-114,56,-31,-56,56,-123,-113,56,56,56,]),'PERCENT':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[57,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,57,-30,57,57,57,-121,-166,57,57,-12,-13,-14,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-29,-57,57,57,57,57,57,-165,57,-124,-114,57,-31,-56,57,-123,-113,57,57,57,]),'TIMES':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[58,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,58,-30,58,58,58,-121,-166,58,58,-12,-13,-14,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-29,-57,58,58,58,58,58,-165,58,-124,-114,58,-31,-56,58,-123,-113,58,58,58,]),'EQUALS':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[59,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,59,-30,59,59,59,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,59,59,59,59,59,59,59,59,59,-29,-57,59,59,59,59,59,-165,59,-124,-114,59,-31,-56,59,-123,-113,59,59,59,]),'NOT_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[60,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,60,-30,60,60,60,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,60,60,60,60,60,60,60,60,60,-29,-57,60,60,60,60,60,-165,60,-124,-114,60,-31,-56,60,-123,-113,60,60,60,]),'GREAT_THAN':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[61,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,61,-30,61,61,61,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,61,61,61,61,61,61,61,61,61,-29,-57,61,61,61,61,61,-165,61,-124,-114,61,-31,-56,61,-123,-113,61,61,61,]),'GREAT_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[62,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,62,-30,62,62,62,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,62,62,62,62,62,62,62,62,62,-29,-57,62,62,62,62,62,-165,62,-124,-114,62,-31,-56,62,-123,-113,62,62,62,]),'LESS_THAN':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[63,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,63,-30,63,63,63,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,63,63,63,63,63,63,63,63,63,-29,-57,63,63,63,63,63,-165,63,-124,-114,63,-31,-56,63,-123,-113,63,63,63,]),'LESS_EQUAL':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[64,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,64,-30,64,64,64,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,64,64,64,64,64,64,64,64,64,-29,-57,64,64,64,64,64,-165,64,-124,-114,64,-31,-56,64,-123,-113,64,64,64,]),'AND':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[65,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,65,-30,65,65,65,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,65,65,65,65,65,65,65,-29,-57,65,65,65,65,65,-165,65,-124,-114,65,-31,-56,65,-123,-113,65,65,65,]),'OR':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[66,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,66,-30,66,66,66,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,66,66,66,66,66,66,66,-29,-57,66,66,66,66,66,-165,66,-124,-114,66,-31,-56,66,-123,-113,66,66,66,]),'INTE_DOT':([9,24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,90,103,105,107,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,148,154,162,163,167,173,174,175,177,179,197,198,217,218,219,233,235,244,],[67,-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,67,-30,67,67,67,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,67,67,67,67,67,67,67,-29,-57,67,67,67,67,67,-165,67,-124,-114,67,-31,-56,67,-123,-113,-33,67,67,]),'ELSE':([10,11,12,13,14,15,16,17,34,53,68,69,70,92,93,99,104,106,108,150,151,153,157,164,165,166,181,203,206,223,237,238,239,277,280,],[-59,-60,-61,-62,-63,-64,-65,-66,94,-58,-67,-68,-69,-72,94,-160,-85,-87,-89,-74,-79,-82,-162,-84,-86,-88,-76,-78,-161,-75,-77,-83,-90,-107,-108,]),'ELSEIF':([10,11,12,13,14,15,16,17,34,53,68,69,70,92,93,99,104,106,108,150,151,153,157,164,165,166,181,203,206,223,237,238,239,277,280,],[-59,-60,-61,-62,-63,-64,-65,-66,95,-58,-67,-68,-69,-72,-73,-160,-85,-87,-89,-74,-79,-82,-162,-84,-86,-88,-76,95,-161,-75,-77,-83,-90,-107,-108,]),'POS_INCREMENT':([24,45,115,116,173,175,218,],[74,-122,-121,-166,-165,-124,-123,]),'POS_DECREMENT':([24,45,115,116,173,175,218,],[75,-122,-121,-166,-165,-124,-123,]),'RPAREN':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,83,84,85,86,87,88,89,90,91,110,115,116,118,121,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,145,146,147,148,154,159,162,167,173,175,176,177,178,179,184,186,187,197,198,199,202,209,212,218,219,220,222,228,231,233,234,235,240,241,243,244,245,247,250,253,254,255,258,259,260,262,263,264,265,266,267,270,271,272,273,274,275,276,278,],[-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,143,144,-47,-45,-46,-48,-49,-30,146,168,-121,-166,177,185,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-29,198,-57,-153,-154,204,208,-110,215,-165,-124,219,-114,-116,-119,227,-133,-134,-31,-56,-152,-155,-91,-109,-123,-113,-115,-120,-132,-135,-33,-168,-156,-97,-95,-92,-112,268,-105,-118,-164,-136,-146,-149,-150,-151,-167,-157,-96,-93,-94,-111,-104,-117,-163,-147,-148,-137,-98,279,]),'DDOT':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,90,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,173,175,177,197,198,218,219,233,],[-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,-30,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,196,-34,-35,-36,-37,-38,-39,-29,-57,-165,-124,-114,-31,-56,-123,-113,-33,]),'ATTR_ASSOC':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,90,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,146,148,173,175,177,197,198,218,219,233,245,247,270,],[-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,-30,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-29,-57,201,-165,-124,-114,-31,-56,-123,-113,-33,269,-105,-104,]),'COLON':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,90,112,113,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,146,147,148,162,171,173,175,177,178,179,186,187,197,198,202,216,218,219,222,231,233,234,235,244,249,250,253,254,255,258,259,260,263,273,274,275,],[-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,-30,170,-99,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-29,-57,200,-154,213,-100,-165,-124,-114,221,-119,229,-134,-31,-56,-155,170,-123,-113,-120,-135,-33,200,-156,213,-101,221,229,-136,-146,-149,-150,-151,-157,-147,-148,-137,]),'AS':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,90,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,146,163,173,175,177,197,198,218,219,233,],[-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,-30,-121,-166,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-29,-57,214,-165,-124,-114,-31,-56,-123,-113,-33,]),'RBRACKET':([24,28,29,30,31,32,33,45,71,72,73,74,75,82,90,115,116,117,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,146,173,174,175,177,197,198,218,219,233,],[-28,-32,-40,-41,-42,-43,-44,-122,-11,-23,-24,-25,-27,-26,-30,-121,-166,175,-9,-10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-34,-35,-36,-37,-38,-39,-29,-57,-165,218,-124,-114,-31,-56,-123,-113,-33,]),'ADD_ASSIGN':([24,45,115,116,173,175,218,],[76,-122,-121,-166,-165,-124,-123,]),'SUB_ASSIGN':([24,45,115,116,173,175,218,],[77,-122,-121,-166,-165,-124,-123,]),'MOD_ASSIGN':([24,45,115,116,173,175,218,],[78,-122,-121,-166,-165,-124,-123,]),'PLUS_ASSIGN':([24,45,115,116,173,175,218,],[79,-122,-121,-166,-165,-124,-123,]),'DIVIDE_ASSIGN':([24,45,115,116,173,175,218,],[80,-122,-121,-166,-165,-124,-123,]),'ASSIGN':([24,45,115,116,173,175,187,218,231,],[81,-122,-121,-166,-165,-124,230,-123,261,]),'INT_TYPE':([26,121,229,],[86,191,191,]),'FLOAT_TYPE':([26,121,229,],[87,193,193,]),'STRING_TYPE':([26,121,229,],[88,192,192,]),'BOOL_TYPE':([26,121,229,],[89,195,195,]),'LKEY':([36,94,96,114,119,120,152,185,204,208,227,268,279,],[100,100,100,172,100,183,100,-131,-106,100,-130,100,100,]),'DOLAR':([44,170,],[114,114,]),'LBRACKET':([45,116,175,218,],[117,117,-124,-123,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'main_program':([2,5,],[3,49,]),'inner_statement':([2,5,183,226,],[5,5,226,226,]),'function_declaration_statement':([2,5,183,226,],[6,6,6,6,]),'statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[7,7,99,99,99,158,99,99,158,7,99,7,99,99,]),'expr':([2,5,21,22,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,91,94,96,97,100,101,102,110,117,118,119,144,152,158,160,172,183,196,200,201,208,209,211,213,221,226,241,243,265,268,279,],[9,9,71,72,83,9,103,105,107,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,148,9,9,154,9,162,163,167,174,179,9,197,9,9,162,217,9,233,148,235,9,162,162,244,179,9,162,162,162,9,9,]),'if_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'while_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'do_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'for_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'foreach_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'break_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'continue_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'return_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'exit_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'die_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'global_statement':([2,5,36,94,96,100,119,152,158,183,208,226,268,279,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'variable':([2,5,21,22,23,25,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,91,94,96,97,100,101,102,110,117,118,119,144,149,152,158,160,172,183,196,200,201,208,209,211,213,221,226,236,241,243,265,268,279,],[24,24,24,24,73,82,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,202,24,24,24,24,24,24,24,24,24,24,24,24,24,24,263,24,24,24,24,24,]),'function_call':([2,5,21,22,26,36,39,40,41,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77,78,79,80,81,91,94,96,97,100,101,102,110,117,118,119,144,152,158,160,172,183,196,200,201,208,209,211,213,221,226,241,243,265,268,279,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'statement_if':([2,5,36,94,96,100,119,152,158,181,183,208,226,268,279,],[34,34,34,34,34,34,34,34,34,223,34,34,34,34,34,]),'fds_id':([8,],[50,]),'typecast_operator':([26,],[84,]),'array_declaration':([27,85,],[90,90,]),'statement_else':([34,93,],[92,150,]),'statement_elseif':([34,203,],[93,237,]),'expr_parentheses':([35,47,95,155,],[96,119,152,205,]),'statement_block_optional':([36,94,96,119,152,208,268,279,],[98,151,153,181,203,239,277,280,]),'exit_expr':([42,43,],[109,111,]),'global_var':([44,170,],[112,216,]),'variable_array_selector':([45,116,],[115,173,]),'selector':([45,116,],[116,116,]),'fds_parameter':([50,],[120,]),'array_pair_list':([91,],[145,]),'array_pair':([91,200,],[147,234,]),'statement_MUL':([100,158,],[156,207,]),'for_parameters':([101,],[159,]),'for_expr_OPT':([101,160,209,211,241,243,265,],[161,210,240,242,264,266,276,]),'statement_COLON_GLOBAL':([112,216,],[169,248,]),'function_call_parameter_list':([118,],[176,]),'function_call_parameter':([118,221,],[178,250,]),'fds_statements':([120,],[182,]),'parameter_list':([121,],[184,]),'parameter':([121,229,],[186,253,]),'parameter_prefix':([121,229,],[188,188,]),'parameter_type':([121,229,],[189,189,]),'array_pair_list_ARR_PAIR':([147,234,],[199,262,]),'for_expr_COLON_EXPR':([162,244,],[212,267,]),'fc_parameter_list_COLON_PARAMETER':([178,250,],[220,271,]),'inner_statement_MUL':([183,226,],[224,252,]),'parameter_list_colon_parameter':([186,253,],[228,272,]),'ampersand_variable':([214,269,],[245,278,]),'static_scalar':([230,256,257,261,],[254,273,274,275,]),'common_scalar':([230,256,257,261,],[255,255,255,255,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> BEGIN_PROGRAM main_program END_PROGRAM','main',3,'p_main','Parser.py',26),
  ('main -> BEGIN_PROGRAM END_PROGRAM','main',2,'p_main','Parser.py',27),
  ('main_program -> inner_statement main_program','main_program',2,'p_main_program','Parser.py',36),
  ('main_program -> inner_statement','main_program',1,'p_main_program','Parser.py',37),
  ('inner_statement -> function_declaration_statement','inner_statement',1,'p_inner_statement','Parser.py',46),
  ('inner_statement -> statement','inner_statement',1,'p_inner_statement','Parser.py',47),
  ('inner_statement_MUL -> inner_statement inner_statement_MUL','inner_statement_MUL',2,'p_inner_statement_MUL','Parser.py',56),
  ('inner_statement_MUL -> inner_statement','inner_statement_MUL',1,'p_inner_statement_MUL','Parser.py',57),
  ('expr -> expr PLUS expr','expr',3,'p_expr','Parser.py',66),
  ('expr -> expr MINUS expr','expr',3,'p_expr','Parser.py',67),
  ('expr -> MINUS expr','expr',2,'p_expr','Parser.py',68),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','Parser.py',69),
  ('expr -> expr PERCENT expr','expr',3,'p_expr','Parser.py',70),
  ('expr -> expr TIMES expr','expr',3,'p_expr','Parser.py',71),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','Parser.py',72),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr','Parser.py',73),
  ('expr -> expr GREAT_THAN expr','expr',3,'p_expr','Parser.py',74),
  ('expr -> expr GREAT_EQUAL expr','expr',3,'p_expr','Parser.py',75),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','Parser.py',76),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr','Parser.py',77),
  ('expr -> expr AND expr','expr',3,'p_expr','Parser.py',78),
  ('expr -> expr OR expr','expr',3,'p_expr','Parser.py',79),
  ('expr -> EXC_DOT expr','expr',2,'p_expr','Parser.py',80),
  ('expr -> PRE_INCREMENT variable','expr',2,'p_expr','Parser.py',81),
  ('expr -> variable POS_INCREMENT','expr',2,'p_expr','Parser.py',82),
  ('expr -> PRE_DECREMENT variable','expr',2,'p_expr','Parser.py',83),
  ('expr -> variable POS_DECREMENT','expr',2,'p_expr','Parser.py',84),
  ('expr -> variable','expr',1,'p_expr','Parser.py',85),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','Parser.py',86),
  ('expr -> ARRAY_TYPE array_declaration','expr',2,'p_expr','Parser.py',87),
  ('expr -> LPAREN typecast_operator RPAREN expr','expr',4,'p_expr','Parser.py',88),
  ('expr -> function_call','expr',1,'p_expr','Parser.py',89),
  ('expr -> expr INTE_DOT expr DDOT expr','expr',5,'p_expr','Parser.py',90),
  ('expr -> variable ADD_ASSIGN expr','expr',3,'p_expr','Parser.py',91),
  ('expr -> variable SUB_ASSIGN expr','expr',3,'p_expr','Parser.py',92),
  ('expr -> variable MOD_ASSIGN expr','expr',3,'p_expr','Parser.py',93),
  ('expr -> variable PLUS_ASSIGN expr','expr',3,'p_expr','Parser.py',94),
  ('expr -> variable DIVIDE_ASSIGN expr','expr',3,'p_expr','Parser.py',95),
  ('expr -> variable ASSIGN expr','expr',3,'p_expr','Parser.py',96),
  ('expr -> NUMBER_INTEGER','expr',1,'p_expr','Parser.py',97),
  ('expr -> NUMBER_REAL','expr',1,'p_expr','Parser.py',98),
  ('expr -> CONSTANT_ENCAPSED_STRING','expr',1,'p_expr','Parser.py',99),
  ('expr -> TRUE','expr',1,'p_expr','Parser.py',100),
  ('expr -> FALSE','expr',1,'p_expr','Parser.py',101),
  ('typecast_operator -> INT_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',168),
  ('typecast_operator -> FLOAT_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',169),
  ('typecast_operator -> ARRAY_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',170),
  ('typecast_operator -> STRING_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',171),
  ('typecast_operator -> BOOL_TYPE','typecast_operator',1,'p_typecast_operator','Parser.py',172),
  ('exit_statement -> EXIT exit_expr','exit_statement',2,'p_exit_statement','Parser.py',177),
  ('exit_statement -> EXIT','exit_statement',1,'p_exit_statement','Parser.py',178),
  ('die_statement -> DIE exit_expr','die_statement',2,'p_die_statement','Parser.py',187),
  ('die_statement -> DIE','die_statement',1,'p_die_statement','Parser.py',188),
  ('exit_expr -> LPAREN expr RPAREN','exit_expr',3,'p_exit_expr','Parser.py',197),
  ('exit_expr -> LPAREN RPAREN','exit_expr',2,'p_exit_expr','Parser.py',198),
  ('array_declaration -> LPAREN array_pair_list RPAREN','array_declaration',3,'p_array_declaration','Parser.py',207),
  ('array_declaration -> LPAREN RPAREN','array_declaration',2,'p_array_declaration','Parser.py',208),
  ('statement -> expr SEMICOLON','statement',2,'p_statement','Parser.py',217),
  ('statement -> if_statement','statement',1,'p_statement','Parser.py',218),
  ('statement -> while_statement','statement',1,'p_statement','Parser.py',219),
  ('statement -> do_statement','statement',1,'p_statement','Parser.py',220),
  ('statement -> for_statement','statement',1,'p_statement','Parser.py',221),
  ('statement -> foreach_statement','statement',1,'p_statement','Parser.py',222),
  ('statement -> break_statement','statement',1,'p_statement','Parser.py',223),
  ('statement -> continue_statement','statement',1,'p_statement','Parser.py',224),
  ('statement -> return_statement','statement',1,'p_statement','Parser.py',225),
  ('statement -> exit_statement SEMICOLON','statement',2,'p_statement','Parser.py',226),
  ('statement -> die_statement SEMICOLON','statement',2,'p_statement','Parser.py',227),
  ('statement -> global_statement SEMICOLON','statement',2,'p_statement','Parser.py',228),
  ('S -> IF','S',1,'p_IF','Parser.py',257),
  ('if_statement -> statement_if','if_statement',1,'p_if_statement','Parser.py',272),
  ('if_statement -> statement_if statement_else','if_statement',2,'p_if_statement','Parser.py',273),
  ('if_statement -> statement_if statement_elseif','if_statement',2,'p_if_statement','Parser.py',274),
  ('if_statement -> statement_if statement_elseif statement_else','if_statement',3,'p_if_statement','Parser.py',275),
  ('statement_if -> IF expr_parentheses statement_block_optional statement_if','statement_if',4,'p_statement_if','Parser.py',288),
  ('statement_if -> IF expr_parentheses statement_block_optional','statement_if',3,'p_statement_if','Parser.py',289),
  ('statement_elseif -> ELSEIF expr_parentheses statement_block_optional statement_elseif','statement_elseif',4,'p_statement_elseif','Parser.py',298),
  ('statement_elseif -> ELSEIF expr_parentheses statement_block_optional','statement_elseif',3,'p_statement_elseif','Parser.py',299),
  ('statement_else -> ELSE statement_block_optional','statement_else',2,'p_statement_else','Parser.py',308),
  ('global_statement -> GLOBAL global_var statement_COLON_GLOBAL','global_statement',3,'p_global_statement','Parser.py',315),
  ('global_statement -> GLOBAL global_var','global_statement',2,'p_global_statement','Parser.py',316),
  ('while_statement -> WHILE expr_parentheses statement_block_optional','while_statement',3,'p_while_statement','Parser.py',326),
  ('do_statement -> DO statement_block_optional WHILE expr_parentheses SEMICOLON','do_statement',5,'p_do_statement','Parser.py',333),
  ('break_statement -> BREAK expr SEMICOLON','break_statement',3,'p_break_statement','Parser.py',339),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','Parser.py',340),
  ('continue_statement -> CONTINUE expr SEMICOLON','continue_statement',3,'p_continue_statement','Parser.py',349),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','Parser.py',350),
  ('return_statement -> RETURN expr SEMICOLON','return_statement',3,'p_return_statement','Parser.py',359),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','Parser.py',360),
  ('for_statement -> FOR LPAREN for_parameters RPAREN statement_block_optional','for_statement',5,'p_for_statement','Parser.py',369),
  ('for_parameters -> SEMICOLON SEMICOLON','for_parameters',2,'p_for_parameters','Parser.py',375),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',376),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON','for_parameters',4,'p_for_parameters','Parser.py',377),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',378),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON','for_parameters',3,'p_for_parameters','Parser.py',379),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','Parser.py',380),
  ('for_parameters -> SEMICOLON SEMICOLON for_expr_OPT','for_parameters',3,'p_for_parameters','Parser.py',381),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',5,'p_for_parameters','Parser.py',382),
  ('global_var -> VARIABLE','global_var',1,'p_global_var','Parser.py',404),
  ('global_var -> DOLAR VARIABLE','global_var',2,'p_global_var','Parser.py',405),
  ('global_var -> DOLAR LKEY expr RKEY','global_var',4,'p_global_var','Parser.py',406),
  ('statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL','statement_COLON_GLOBAL',3,'p_statement_COLON_GLOBAL','Parser.py',417),
  ('statement_COLON_GLOBAL -> COLON global_var','statement_COLON_GLOBAL',2,'p_statement_COLON_GLOBAL','Parser.py',418),
  ('ampersand_variable -> AMPERSAND VARIABLE','ampersand_variable',2,'p_ampersand_variable','Parser.py',427),
  ('ampersand_variable -> VARIABLE','ampersand_variable',1,'p_ampersand_variable','Parser.py',428),
  ('expr_parentheses -> LPAREN expr RPAREN','expr_parentheses',3,'p_expr_parentheses','Parser.py',437),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_block_optional','foreach_statement',7,'p_foreach_statement','Parser.py',444),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_block_optional','foreach_statement',9,'p_foreach_statement','Parser.py',445),
  ('for_expr_OPT -> expr for_expr_COLON_EXPR','for_expr_OPT',2,'p_for_expr_OPT','Parser.py',454),
  ('for_expr_OPT -> expr','for_expr_OPT',1,'p_for_expr_OPT','Parser.py',455),
  ('for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR','for_expr_COLON_EXPR',3,'p_for_expr_COLON_EXPR','Parser.py',464),
  ('for_expr_COLON_EXPR -> COLON expr','for_expr_COLON_EXPR',2,'p_for_expr_COLON_EXPR','Parser.py',465),
  ('function_call -> ID LPAREN function_call_parameter_list RPAREN','function_call',4,'p_function_call','Parser.py',474),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','Parser.py',475),
  ('function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER','function_call_parameter_list',2,'p_function_call_parameter_list','Parser.py',484),
  ('function_call_parameter_list -> function_call_parameter','function_call_parameter_list',1,'p_function_call_parameter_list','Parser.py',485),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER','fc_parameter_list_COLON_PARAMETER',3,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',494),
  ('fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter','fc_parameter_list_COLON_PARAMETER',2,'p_fc_parameter_list_COLON_PARAMETER','Parser.py',495),
  ('function_call_parameter -> expr','function_call_parameter',1,'p_function_call_parameter','Parser.py',504),
  ('function_call_parameter -> AMPERSAND VARIABLE','function_call_parameter',2,'p_function_call_parameter','Parser.py',505),
  ('variable -> VARIABLE variable_array_selector','variable',2,'p_variable','Parser.py',514),
  ('variable -> VARIABLE','variable',1,'p_variable','Parser.py',515),
  ('selector -> LBRACKET expr RBRACKET','selector',3,'p_selector','Parser.py',524),
  ('selector -> LBRACKET RBRACKET','selector',2,'p_selector','Parser.py',525),
  ('function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements','function_declaration_statement',4,'p_function_declaration_statement','Parser.py',534),
  ('fds_statements -> LKEY inner_statement_MUL RKEY','fds_statements',3,'p_fds_statements','Parser.py',540),
  ('fds_statements -> LKEY RKEY','fds_statements',2,'p_fds_statements','Parser.py',541),
  ('fds_id -> AMPERSAND ID','fds_id',2,'p_fds_id','Parser.py',550),
  ('fds_id -> ID','fds_id',1,'p_fds_id','Parser.py',551),
  ('fds_parameter -> LPAREN parameter_list RPAREN','fds_parameter',3,'p_fds_parameter','Parser.py',560),
  ('fds_parameter -> LPAREN RPAREN','fds_parameter',2,'p_fds_parameter','Parser.py',561),
  ('parameter_list -> parameter parameter_list_colon_parameter','parameter_list',2,'p_parameter_list','Parser.py',570),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser.py',571),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','Parser.py',580),
  ('parameter -> parameter_prefix VARIABLE','parameter',2,'p_parameter','Parser.py',581),
  ('parameter -> VARIABLE ASSIGN static_scalar','parameter',3,'p_parameter','Parser.py',582),
  ('parameter -> parameter_prefix VARIABLE ASSIGN static_scalar','parameter',4,'p_parameter','Parser.py',583),
  ('parameter_prefix -> parameter_type AMPERSAND','parameter_prefix',2,'p_parameter_prefix','Parser.py',596),
  ('parameter_prefix -> AMPERSAND','parameter_prefix',1,'p_parameter_prefix','Parser.py',597),
  ('parameter_prefix -> parameter_type','parameter_prefix',1,'p_parameter_prefix','Parser.py',598),
  ('parameter_type -> INT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',609),
  ('parameter_type -> STRING_TYPE','parameter_type',1,'p_parameter_type','Parser.py',610),
  ('parameter_type -> FLOAT_TYPE','parameter_type',1,'p_parameter_type','Parser.py',611),
  ('parameter_type -> ARRAY_TYPE','parameter_type',1,'p_parameter_type','Parser.py',612),
  ('parameter_type -> BOOL_TYPE','parameter_type',1,'p_parameter_type','Parser.py',613),
  ('static_scalar -> common_scalar','static_scalar',1,'p_static_scalar','Parser.py',619),
  ('static_scalar -> PLUS static_scalar','static_scalar',2,'p_static_scalar','Parser.py',620),
  ('static_scalar -> MINUS static_scalar','static_scalar',2,'p_static_scalar','Parser.py',621),
  ('common_scalar -> NUMBER_REAL','common_scalar',1,'p_common_scalar','Parser.py',632),
  ('common_scalar -> NUMBER_INTEGER','common_scalar',1,'p_common_scalar','Parser.py',633),
  ('common_scalar -> CONSTANT_ENCAPSED_STRING','common_scalar',1,'p_common_scalar','Parser.py',634),
  ('array_pair_list -> array_pair array_pair_list_ARR_PAIR','array_pair_list',2,'p_array_pair_list','Parser.py',640),
  ('array_pair_list -> array_pair','array_pair_list',1,'p_array_pair_list','Parser.py',641),
  ('array_pair -> expr','array_pair',1,'p_array_pair','Parser.py',650),
  ('array_pair -> AMPERSAND variable','array_pair',2,'p_array_pair','Parser.py',651),
  ('array_pair -> expr ATTR_ASSOC expr','array_pair',3,'p_array_pair','Parser.py',652),
  ('array_pair -> expr ATTR_ASSOC AMPERSAND variable','array_pair',4,'p_array_pair','Parser.py',653),
  ('statement_MUL -> statement statement_MUL','statement_MUL',2,'p_statement_MUL','Parser.py',669),
  ('statement_MUL -> statement','statement_MUL',1,'p_statement_MUL','Parser.py',670),
  ('statement_block_optional -> statement','statement_block_optional',1,'p_statement_block_optional','Parser.py',679),
  ('statement_block_optional -> LKEY statement_MUL RKEY','statement_block_optional',3,'p_statement_block_optional','Parser.py',680),
  ('statement_block_optional -> LKEY RKEY','statement_block_optional',2,'p_statement_block_optional','Parser.py',681),
  ('parameter_list_colon_parameter -> COLON parameter parameter_list_colon_parameter','parameter_list_colon_parameter',3,'p_parameter_list_colon_parameter','Parser.py',692),
  ('parameter_list_colon_parameter -> COLON parameter','parameter_list_colon_parameter',2,'p_parameter_list_colon_parameter','Parser.py',693),
  ('variable_array_selector -> selector variable_array_selector','variable_array_selector',2,'p_variable_array_selector','Parser.py',702),
  ('variable_array_selector -> selector','variable_array_selector',1,'p_variable_array_selector','Parser.py',703),
  ('array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR','array_pair_list_ARR_PAIR',3,'p_array_pair_list_ARR_PAIR','Parser.py',712),
  ('array_pair_list_ARR_PAIR -> COLON array_pair','array_pair_list_ARR_PAIR',2,'p_array_pair_list_ARR_PAIR','Parser.py',713),
]

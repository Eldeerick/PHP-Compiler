Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    OR
    PERCENT
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     inner_statement -> function_declaration_statement
Rule 4     inner_statement -> statement
Rule 5     statement -> expr SEMICOLON
Rule 6     statement -> statement_if statement_elseif statement_else
Rule 7     statement -> WHILE expr_paren statement_BLOCK_OPT
Rule 8     statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
Rule 9     statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
Rule 10    statement -> statement_foreach
Rule 11    statement -> BREAK expr_OPT SEMICOLON
Rule 12    statement -> CONTINUE expr_OPT SEMICOLON
Rule 13    statement -> RETURN expr_return_OPT SEMICOLON
Rule 14    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 15    ampersand_variable -> AMPERSAND_OPT VARIABLE
Rule 16    global_var -> VARIABLE
Rule 17    global_var -> DOLAR VARIABLE
Rule 18    global_var -> DOLAR LKEY expr RKEY
Rule 19    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 20    statement_COLON_GLOBAL -> <empty>
Rule 21    expr_paren -> LPAREN expr RPAREN
Rule 22    expr_return_OPT -> expr
Rule 23    expr_return_OPT -> <empty>
Rule 24    statement_if -> IF expr_paren statement_BLOCK_OPT
Rule 25    statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT
Rule 26    statement_elseif -> <empty>
Rule 27    statement_else -> ELSE statement_BLOCK_OPT
Rule 28    statement_else -> <empty>
Rule 29    statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
Rule 30    foreach_first_param -> variable
Rule 31    foreach_first_param -> expr
Rule 32    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 33    for_expr_OPT -> <empty>
Rule 34    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 35    function_call -> base_variable
Rule 36    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 37    function_call_parameter_list -> <empty>
Rule 38    function_call_parameter -> variable
Rule 39    function_call_parameter -> AMPERSAND VARIABLE
Rule 40    assignment_list_element -> variable
Rule 41    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 42    unary_operator -> EXC_DOT
Rule 43    unary_operator -> PLUS
Rule 44    unary_operator -> MINUS
Rule 45    type_cast_operator -> INT_TYPE
Rule 46    type_cast_operator -> DOUBLE_TYPE
Rule 47    type_cast_operator -> FLOAT_TYPE
Rule 48    type_cast_operator -> REAL_TYPE
Rule 49    type_cast_operator -> STRING_TYPE
Rule 50    type_cast_operator -> ARRAY_TYPE
Rule 51    type_cast_operator -> BOOLEAN_TYPE
Rule 52    type_cast_operator -> BOOL_TYPE
Rule 53    type_cast_operator -> UNSET
Rule 54    arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr
Rule 55    arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr
Rule 56    arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr
Rule 57    arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr
Rule 58    arithmetic_expr -> LPAREN arithmetic_expr RPAREN
Rule 59    arithmetic_expr -> NUMBER_INTEGER
Rule 60    arithmetic_expr -> NUMBER_REAL
Rule 61    assign_operator -> ADD_ASSIGN
Rule 62    assign_operator -> SUB_ASSIGN
Rule 63    assign_operator -> MOD_ASSIGN
Rule 64    assign_operator -> PLUS_ASSIGN
Rule 65    assign_operator -> DIVIDE_ASSIGN
Rule 66    assign_operator -> ASSIGN
Rule 67    comparission_operator -> EQUALS
Rule 68    comparission_operator -> GREAT_THAN
Rule 69    comparission_operator -> LESS_THAN
Rule 70    comparission_operator -> LESS_EQUAL
Rule 71    comparission_operator -> GREAT_EQUAL
Rule 72    comparission_operator -> NOT_EQUAL
Rule 73    comparission_operator -> LEFT_LOGICAL
Rule 74    comparission_operator -> RIGHT_LOGICAL
Rule 75    expr -> INCREMENT variable
Rule 76    expr -> variable INCREMENT
Rule 77    expr -> DECREMENT variable
Rule 78    expr -> variable DECREMENT
Rule 79    expr -> variable LBRACKET expr RBRACKET
Rule 80    expr -> LPAREN expr RPAREN
Rule 81    expr -> unary_operator expr
Rule 82    expr -> expr INTE_DOT expr DDOT expr
Rule 83    expr -> expr comparission_operator expr
Rule 84    expr -> variable assign_operator expr
Rule 85    expr -> variable assign_operator AMPERSAND expr
Rule 86    expr -> arithmetic_expr expr
Rule 87    expr -> LPAREN type_cast_operator RPAREN expr
Rule 88    expr -> EXIT expr_EXIT
Rule 89    expr -> DIE expr_EXIT
Rule 90    expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 91    expr -> function_call
Rule 92    expr -> variable
Rule 93    expr -> NUMBER_REAL
Rule 94    expr -> NUMBER_INTEGER
Rule 95    expr -> CONSTANT_ENCAPSED_STRING
Rule 96    expr -> TRUE
Rule 97    expr -> FALSE
Rule 98    encaps -> encaps_var
Rule 99    encaps -> VARIABLE
Rule 100   encaps -> LPAREN
Rule 101   encaps -> RPAREN
Rule 102   encaps -> LKEY
Rule 103   encaps -> RKEY
Rule 104   encaps_var -> VARIABLE encaps_var_OPT
Rule 105   encaps_var -> DOLAR LBRACKET expr RBRACKET
Rule 106   encaps_var -> DOLAR LKEY ID LBRACKET expr RBRACKET RKEY
Rule 107   encaps_var -> LKEY variable RKEY
Rule 108   encaps_var_OPT -> LBRACKET encaps_var_offset RBRACKET
Rule 109   encaps_var_OPT -> <empty>
Rule 110   encaps_var_offset -> STRING
Rule 111   encaps_var_offset -> VARIABLE
Rule 112   expr_EXIT -> exit_expr
Rule 113   expr_EXIT -> <empty>
Rule 114   exit_expr -> LPAREN expr_OPT RPAREN
Rule 115   variable -> base_variable
Rule 116   variable -> function_call
Rule 117   base_variable -> reference_variable
Rule 118   base_variable -> simple_indirect_reference_DOLAR reference_variable
Rule 119   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 120   compound_variable -> VARIABLE
Rule 121   compound_variable -> DOLAR LKEY expr RKEY
Rule 122   selector -> LBRACKET selector_EXPR RBRACKET
Rule 123   function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
Rule 124   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 125   parameter_list -> <empty>
Rule 126   parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
Rule 127   parameter_type -> INT_TYPE
Rule 128   parameter_type -> BOOLEAN_TYPE
Rule 129   parameter_type -> STRING_TYPE
Rule 130   parameter_type -> FLOAT_TYPE
Rule 131   parameter_type -> ARRAY_TYPE
Rule 132   parameter_type -> BOOL_TYPE
Rule 133   parameter_type -> REAL_TYPE
Rule 134   parameter_type -> DOUBLE_TYPE
Rule 135   parameter_type -> <empty>
Rule 136   static_scalar -> common_scalar
Rule 137   static_scalar -> PLUS static_scalar
Rule 138   static_scalar -> MINUS static_scalar
Rule 139   common_scalar -> NUMBER_REAL
Rule 140   common_scalar -> NUMBER_INTEGER
Rule 141   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 142   static_array_pair_list -> static_array_pair static_array_pair_list_COLON_STATIC static_array_pair_list_COLON
Rule 143   static_array_pair -> static_scalar static_array_pair_ATTR_STATIC
Rule 144   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 145   array_pair_list -> <empty>
Rule 146   array_pair -> expr array_pair_ATTR_EXPR_OPT
Rule 147   array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable
Rule 148   main_INNER -> inner_statement main_INNER
Rule 149   main_INNER -> inner_statement
Rule 150   statement_MUL -> statement statement_MUL
Rule 151   statement_MUL -> <empty>
Rule 152   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 153   inner_statement_MUL -> <empty>
Rule 154   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 155   for_expr_COLON_EXPR -> <empty>
Rule 156   statement_BLOCK_OPT -> statement
Rule 157   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 158   AMPERSAND_OPT -> AMPERSAND
Rule 159   AMPERSAND_OPT -> <empty>
Rule 160   statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable
Rule 161   statement_attr_variable_OPT -> <empty>
Rule 162   function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 163   function_call_list_COLON_FUNCTION -> <empty>
Rule 164   expr_without_variable_COLON_ASSIGNMENT -> COLON assignment_list_element expr_without_variable_COLON_ASSIGNMENT
Rule 165   expr_without_variable_COLON_ASSIGNMENT -> <empty>
Rule 166   assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 167   assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 168   expr_OPT -> expr
Rule 169   expr_OPT -> <empty>
Rule 170   expr_without_variable_ENCAPS -> encaps expr_without_variable_ENCAPS
Rule 171   expr_without_variable_ENCAPS -> <empty>
Rule 172   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 173   parameter_list_COLON_PARAMETER -> <empty>
Rule 174   parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar
Rule 175   parameter_ASSIGN_STATIC_OPT -> <empty>
Rule 176   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 177   reference_variable_SELECTOR -> <empty>
Rule 178   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 179   simple_indirect_reference_DOLAR -> <empty>
Rule 180   selector_EXPR -> expr
Rule 181   selector_EXPR -> <empty>
Rule 182   static_scalar_OPT -> static_array_pair_list
Rule 183   static_scalar_OPT -> <empty>
Rule 184   static_array_pair_list_COLON_STATIC -> COLON static_array_pair static_array_pair_list_COLON_STATIC
Rule 185   static_array_pair_list_COLON_STATIC -> <empty>
Rule 186   static_array_pair_list_COLON -> COLON
Rule 187   static_array_pair_list_COLON -> <empty>
Rule 188   static_array_pair_ATTR_STATIC -> ATTR_ASSOC static_scalar
Rule 189   static_array_pair_ATTR_STATIC -> <empty>
Rule 190   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 191   array_pair_list_ARR_PAIR -> <empty>
Rule 192   array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr
Rule 193   array_pair_ATTR_EXPR_OPT -> <empty>
Rule 194   array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC
Rule 195   array_pair_EXPR_ATTR_OPT -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 61
AMPERSAND            : 39 85 147 158
AND                  : 
APOSTROFE            : 
ARRAY_TYPE           : 50 90 131
ARROBA               : 
AS                   : 29
ASPAS                : 
ASSIGN               : 66 174
ATTR_ASSOC           : 160 188 192 194
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 51 128
BOOL_TYPE            : 52 132
BREAK                : 11
CASE                 : 
CLONE                : 
COLON                : 19 154 162 164 166 172 184 186 190
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 95 141
CONTINUE             : 12
CRASE                : 
DDOT                 : 82
DECLARE              : 
DECREMENT            : 77 78
DIE                  : 89
DIVIDE               : 57
DIVIDE_ASSIGN        : 65
DO                   : 8
DOLAR                : 17 18 105 106 121 178
DOUBLE_TYPE          : 46 134
ELSE                 : 27
ELSEIF               : 25
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 67
EXC_DOT              : 42
EXIT                 : 88
FALSE                : 97
FLOAT_TYPE           : 47 130
FOR                  : 9
FOREACH              : 29
FUNCTION             : 123
GLOBAL               : 14
GREAT_EQUAL          : 71
GREAT_THAN           : 68
ID                   : 34 106 123
IDENTATION           : 
IF                   : 24
INCREMENT            : 75 76
INTE_DOT             : 82
INT_TYPE             : 45 127
LBRACKET             : 79 105 106 108 122
LEFT_LOGICAL         : 73
LESS_EQUAL           : 70
LESS_THAN            : 69
LIST                 : 41
LKEY                 : 18 102 106 107 121 123 157
LPAREN               : 9 21 29 34 41 58 80 87 90 100 114 123
MINUS                : 44 55 138
MOD_ASSIGN           : 63
NOT_EQUAL            : 72
NUMBER_INTEGER       : 59 94 140
NUMBER_REAL          : 60 93 139
OR                   : 
PERCENT              : 
PLUS                 : 43 54 137
PLUS_ASSIGN          : 64
RBRACKET             : 79 105 106 108 122
REAL_TYPE            : 48 133
RETURN               : 13
RIGHT_LOGICAL        : 74
RKEY                 : 18 103 106 107 121 123 157
RPAREN               : 9 21 29 34 41 58 80 87 90 101 114 123
SEMICOLON            : 5 8 9 9 11 12 13 14
STRING               : 110
STRING_TYPE          : 49 129
SUB_ASSIGN           : 62
TIMES                : 56
TRUE                 : 96
UNSET                : 53
VAR                  : 
VARIABLE             : 15 16 17 39 99 104 111 120 126
WHILE                : 7 8
error                : 

Nonterminals, with rules where they appear

AMPERSAND_OPT        : 15 123 126
ampersand_variable   : 29 160
arithmetic_expr      : 54 54 55 55 56 56 57 57 58 86
array_pair           : 144 190
array_pair_ATTR_EXPR_OPT : 146
array_pair_EXPR_ATTR_OPT : 147
array_pair_list      : 90
array_pair_list_ARR_PAIR : 144 190
assign_operator      : 84 85
assignment_list_element : 41 164 166
assignment_list_element_COLON_ASSIGNMENT : 41 166
base_variable        : 35 115
common_scalar        : 136
comparission_operator : 83
compound_variable    : 119
encaps               : 170
encaps_var           : 98
encaps_var_OPT       : 104
encaps_var_offset    : 108
exit_expr            : 112
expr                 : 5 18 21 22 31 32 79 80 81 82 82 82 83 83 84 85 86 87 105 106 121 146 154 168 180 192 194
expr_EXIT            : 88 89
expr_OPT             : 11 12 114
expr_paren           : 7 8 24 25
expr_return_OPT      : 13
expr_without_variable_COLON_ASSIGNMENT : 164
expr_without_variable_ENCAPS : 170
for_expr_COLON_EXPR  : 32 154
for_expr_OPT         : 9 9 9
foreach_first_param  : 29
function_call        : 91 116
function_call_list_COLON_FUNCTION : 36 162
function_call_parameter : 36 162
function_call_parameter_list : 34
function_declaration_statement : 3
global_var           : 14 19
inner_statement      : 148 149 152
inner_statement_MUL  : 123 152
main                 : 0
main_INNER           : 1 148
parameter            : 124 172
parameter_ASSIGN_STATIC_OPT : 126
parameter_list       : 123
parameter_list_COLON_PARAMETER : 124 172
parameter_type       : 126
reference_variable   : 117 118
reference_variable_SELECTOR : 119 176
selector             : 176
selector_EXPR        : 122
simple_indirect_reference_DOLAR : 118 178
statement            : 4 150 156
statement_BLOCK_OPT  : 7 8 9 24 25 27 29
statement_COLON_GLOBAL : 14 19
statement_MUL        : 150 157
statement_attr_variable_OPT : 29
statement_else       : 6
statement_elseif     : 6
statement_foreach    : 10
statement_if         : 6
static_array_pair    : 142 184
static_array_pair_ATTR_STATIC : 143
static_array_pair_list : 182
static_array_pair_list_COLON : 142
static_array_pair_list_COLON_STATIC : 142 184
static_scalar        : 137 138 143 174 188
static_scalar_OPT    : 
type_cast_operator   : 87
unary_operator       : 81
variable             : 30 38 40 75 76 77 78 79 84 85 92 107 147

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (148) main_INNER -> . inner_statement main_INNER
    (149) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (123) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 46


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (148) main_INNER -> inner_statement . main_INNER
    (149) main_INNER -> inner_statement .
    (148) main_INNER -> . inner_statement main_INNER
    (149) main_INNER -> . inner_statement
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (123) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    END_PROGRAM     reduce using rule 149 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 47
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 6

    (3) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 3 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 3 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 3 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 3 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 3 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 3 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 3 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 3 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 3 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 3 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 3 (inner_statement -> function_declaration_statement .)


state 7

    (4) inner_statement -> statement .

    FUNCTION        reduce using rule 4 (inner_statement -> statement .)
    WHILE           reduce using rule 4 (inner_statement -> statement .)
    DO              reduce using rule 4 (inner_statement -> statement .)
    FOR             reduce using rule 4 (inner_statement -> statement .)
    BREAK           reduce using rule 4 (inner_statement -> statement .)
    CONTINUE        reduce using rule 4 (inner_statement -> statement .)
    RETURN          reduce using rule 4 (inner_statement -> statement .)
    GLOBAL          reduce using rule 4 (inner_statement -> statement .)
    INCREMENT       reduce using rule 4 (inner_statement -> statement .)
    DECREMENT       reduce using rule 4 (inner_statement -> statement .)
    LPAREN          reduce using rule 4 (inner_statement -> statement .)
    EXIT            reduce using rule 4 (inner_statement -> statement .)
    DIE             reduce using rule 4 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 4 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 4 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 4 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (inner_statement -> statement .)
    TRUE            reduce using rule 4 (inner_statement -> statement .)
    FALSE           reduce using rule 4 (inner_statement -> statement .)
    IF              reduce using rule 4 (inner_statement -> statement .)
    FOREACH         reduce using rule 4 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 4 (inner_statement -> statement .)
    PLUS            reduce using rule 4 (inner_statement -> statement .)
    MINUS           reduce using rule 4 (inner_statement -> statement .)
    ID              reduce using rule 4 (inner_statement -> statement .)
    DOLAR           reduce using rule 4 (inner_statement -> statement .)
    VARIABLE        reduce using rule 4 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 4 (inner_statement -> statement .)
    RKEY            reduce using rule 4 (inner_statement -> statement .)


state 8

    (123) function_declaration_statement -> FUNCTION . AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (158) AMPERSAND_OPT -> . AMPERSAND
    (159) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 49
    ID              reduce using rule 159 (AMPERSAND_OPT -> .)

    AMPERSAND_OPT                  shift and go to state 48

state 9

    (34) function_call -> ID . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 50


state 10

    (80) expr -> LPAREN . expr RPAREN
    (87) expr -> LPAREN . type_cast_operator RPAREN expr
    (58) arithmetic_expr -> LPAREN . arithmetic_expr RPAREN
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (45) type_cast_operator -> . INT_TYPE
    (46) type_cast_operator -> . DOUBLE_TYPE
    (47) type_cast_operator -> . FLOAT_TYPE
    (48) type_cast_operator -> . REAL_TYPE
    (49) type_cast_operator -> . STRING_TYPE
    (50) type_cast_operator -> . ARRAY_TYPE
    (51) type_cast_operator -> . BOOLEAN_TYPE
    (52) type_cast_operator -> . BOOL_TYPE
    (53) type_cast_operator -> . UNSET
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 54
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    INT_TYPE        shift and go to state 55
    DOUBLE_TYPE     shift and go to state 56
    FLOAT_TYPE      shift and go to state 57
    REAL_TYPE       shift and go to state 58
    STRING_TYPE     shift and go to state 59
    BOOLEAN_TYPE    shift and go to state 60
    BOOL_TYPE       shift and go to state 61
    UNSET           shift and go to state 62
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 51
    type_cast_operator             shift and go to state 52
    arithmetic_expr                shift and go to state 53
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 11

    (5) statement -> expr . SEMICOLON
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    SEMICOLON       shift and go to state 63
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 12

    (6) statement -> statement_if . statement_elseif statement_else
    (25) statement_elseif -> . ELSEIF expr_paren statement_BLOCK_OPT
    (26) statement_elseif -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 75
    ELSE            reduce using rule 26 (statement_elseif -> .)
    FUNCTION        reduce using rule 26 (statement_elseif -> .)
    WHILE           reduce using rule 26 (statement_elseif -> .)
    DO              reduce using rule 26 (statement_elseif -> .)
    FOR             reduce using rule 26 (statement_elseif -> .)
    BREAK           reduce using rule 26 (statement_elseif -> .)
    CONTINUE        reduce using rule 26 (statement_elseif -> .)
    RETURN          reduce using rule 26 (statement_elseif -> .)
    GLOBAL          reduce using rule 26 (statement_elseif -> .)
    INCREMENT       reduce using rule 26 (statement_elseif -> .)
    DECREMENT       reduce using rule 26 (statement_elseif -> .)
    LPAREN          reduce using rule 26 (statement_elseif -> .)
    EXIT            reduce using rule 26 (statement_elseif -> .)
    DIE             reduce using rule 26 (statement_elseif -> .)
    ARRAY_TYPE      reduce using rule 26 (statement_elseif -> .)
    NUMBER_REAL     reduce using rule 26 (statement_elseif -> .)
    NUMBER_INTEGER  reduce using rule 26 (statement_elseif -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 26 (statement_elseif -> .)
    TRUE            reduce using rule 26 (statement_elseif -> .)
    FALSE           reduce using rule 26 (statement_elseif -> .)
    IF              reduce using rule 26 (statement_elseif -> .)
    FOREACH         reduce using rule 26 (statement_elseif -> .)
    EXC_DOT         reduce using rule 26 (statement_elseif -> .)
    PLUS            reduce using rule 26 (statement_elseif -> .)
    MINUS           reduce using rule 26 (statement_elseif -> .)
    ID              reduce using rule 26 (statement_elseif -> .)
    DOLAR           reduce using rule 26 (statement_elseif -> .)
    VARIABLE        reduce using rule 26 (statement_elseif -> .)
    END_PROGRAM     reduce using rule 26 (statement_elseif -> .)
    RKEY            reduce using rule 26 (statement_elseif -> .)

  ! ELSEIF          [ reduce using rule 26 (statement_elseif -> .) ]

    statement_elseif               shift and go to state 74

state 13

    (7) statement -> WHILE . expr_paren statement_BLOCK_OPT
    (21) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 77

    expr_paren                     shift and go to state 76

state 14

    (8) statement -> DO . statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (156) statement_BLOCK_OPT -> . statement
    (157) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 80
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 78
    statement                      shift and go to state 79
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 15

    (9) statement -> FOR . LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 81


state 16

    (10) statement -> statement_foreach .

    FUNCTION        reduce using rule 10 (statement -> statement_foreach .)
    WHILE           reduce using rule 10 (statement -> statement_foreach .)
    DO              reduce using rule 10 (statement -> statement_foreach .)
    FOR             reduce using rule 10 (statement -> statement_foreach .)
    BREAK           reduce using rule 10 (statement -> statement_foreach .)
    CONTINUE        reduce using rule 10 (statement -> statement_foreach .)
    RETURN          reduce using rule 10 (statement -> statement_foreach .)
    GLOBAL          reduce using rule 10 (statement -> statement_foreach .)
    INCREMENT       reduce using rule 10 (statement -> statement_foreach .)
    DECREMENT       reduce using rule 10 (statement -> statement_foreach .)
    LPAREN          reduce using rule 10 (statement -> statement_foreach .)
    EXIT            reduce using rule 10 (statement -> statement_foreach .)
    DIE             reduce using rule 10 (statement -> statement_foreach .)
    ARRAY_TYPE      reduce using rule 10 (statement -> statement_foreach .)
    NUMBER_REAL     reduce using rule 10 (statement -> statement_foreach .)
    NUMBER_INTEGER  reduce using rule 10 (statement -> statement_foreach .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (statement -> statement_foreach .)
    TRUE            reduce using rule 10 (statement -> statement_foreach .)
    FALSE           reduce using rule 10 (statement -> statement_foreach .)
    IF              reduce using rule 10 (statement -> statement_foreach .)
    FOREACH         reduce using rule 10 (statement -> statement_foreach .)
    EXC_DOT         reduce using rule 10 (statement -> statement_foreach .)
    PLUS            reduce using rule 10 (statement -> statement_foreach .)
    MINUS           reduce using rule 10 (statement -> statement_foreach .)
    ID              reduce using rule 10 (statement -> statement_foreach .)
    DOLAR           reduce using rule 10 (statement -> statement_foreach .)
    VARIABLE        reduce using rule 10 (statement -> statement_foreach .)
    END_PROGRAM     reduce using rule 10 (statement -> statement_foreach .)
    ELSE            reduce using rule 10 (statement -> statement_foreach .)
    RKEY            reduce using rule 10 (statement -> statement_foreach .)
    ELSEIF          reduce using rule 10 (statement -> statement_foreach .)


state 17

    (11) statement -> BREAK . expr_OPT SEMICOLON
    (168) expr_OPT -> . expr
    (169) expr_OPT -> .
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 169 (expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 82
    expr                           shift and go to state 83
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 18

    (12) statement -> CONTINUE . expr_OPT SEMICOLON
    (168) expr_OPT -> . expr
    (169) expr_OPT -> .
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 169 (expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 84
    expr                           shift and go to state 83
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 19

    (13) statement -> RETURN . expr_return_OPT SEMICOLON
    (22) expr_return_OPT -> . expr
    (23) expr_return_OPT -> .
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 23 (expr_return_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr_return_OPT                shift and go to state 85
    expr                           shift and go to state 86
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 20

    (14) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (16) global_var -> . VARIABLE
    (17) global_var -> . DOLAR VARIABLE
    (18) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 88
    DOLAR           shift and go to state 89

    global_var                     shift and go to state 87

state 21

    (75) expr -> INCREMENT . variable
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 90
    base_variable                  shift and go to state 37
    function_call                  shift and go to state 91
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 22

    (76) expr -> variable . INCREMENT
    (78) expr -> variable . DECREMENT
    (79) expr -> variable . LBRACKET expr RBRACKET
    (84) expr -> variable . assign_operator expr
    (85) expr -> variable . assign_operator AMPERSAND expr
    (92) expr -> variable .
    (61) assign_operator -> . ADD_ASSIGN
    (62) assign_operator -> . SUB_ASSIGN
    (63) assign_operator -> . MOD_ASSIGN
    (64) assign_operator -> . PLUS_ASSIGN
    (65) assign_operator -> . DIVIDE_ASSIGN
    (66) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    LBRACKET        shift and go to state 94
    SEMICOLON       reduce using rule 92 (expr -> variable .)
    INTE_DOT        reduce using rule 92 (expr -> variable .)
    EQUALS          reduce using rule 92 (expr -> variable .)
    GREAT_THAN      reduce using rule 92 (expr -> variable .)
    LESS_THAN       reduce using rule 92 (expr -> variable .)
    LESS_EQUAL      reduce using rule 92 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 92 (expr -> variable .)
    NOT_EQUAL       reduce using rule 92 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 92 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 92 (expr -> variable .)
    RPAREN          reduce using rule 92 (expr -> variable .)
    DDOT            reduce using rule 92 (expr -> variable .)
    COLON           reduce using rule 92 (expr -> variable .)
    RBRACKET        reduce using rule 92 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 92 (expr -> variable .)
    AS              reduce using rule 92 (expr -> variable .)
    RKEY            reduce using rule 92 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 96
    SUB_ASSIGN      shift and go to state 97
    MOD_ASSIGN      shift and go to state 98
    PLUS_ASSIGN     shift and go to state 99
    DIVIDE_ASSIGN   shift and go to state 100
    ASSIGN          shift and go to state 101

    assign_operator                shift and go to state 95

state 23

    (77) expr -> DECREMENT . variable
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 102
    base_variable                  shift and go to state 37
    function_call                  shift and go to state 91
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 24

    (81) expr -> unary_operator . expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    unary_operator                 shift and go to state 24
    expr                           shift and go to state 103
    variable                       shift and go to state 22
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 25

    (86) expr -> arithmetic_expr . expr
    (54) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (55) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (56) arithmetic_expr -> arithmetic_expr . TIMES arithmetic_expr
    (57) arithmetic_expr -> arithmetic_expr . DIVIDE arithmetic_expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    arithmetic_expr                shift and go to state 25
    expr                           shift and go to state 104
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 26

    (88) expr -> EXIT . expr_EXIT
    (112) expr_EXIT -> . exit_expr
    (113) expr_EXIT -> .
    (114) exit_expr -> . LPAREN expr_OPT RPAREN

    SEMICOLON       reduce using rule 113 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 113 (expr_EXIT -> .)
    EQUALS          reduce using rule 113 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 113 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 113 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 113 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 113 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 113 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 113 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 113 (expr_EXIT -> .)
    RPAREN          reduce using rule 113 (expr_EXIT -> .)
    DDOT            reduce using rule 113 (expr_EXIT -> .)
    COLON           reduce using rule 113 (expr_EXIT -> .)
    RBRACKET        reduce using rule 113 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 113 (expr_EXIT -> .)
    AS              reduce using rule 113 (expr_EXIT -> .)
    RKEY            reduce using rule 113 (expr_EXIT -> .)
    LPAREN          shift and go to state 111

    expr_EXIT                      shift and go to state 109
    exit_expr                      shift and go to state 110

state 27

    (89) expr -> DIE . expr_EXIT
    (112) expr_EXIT -> . exit_expr
    (113) expr_EXIT -> .
    (114) exit_expr -> . LPAREN expr_OPT RPAREN

    SEMICOLON       reduce using rule 113 (expr_EXIT -> .)
    INTE_DOT        reduce using rule 113 (expr_EXIT -> .)
    EQUALS          reduce using rule 113 (expr_EXIT -> .)
    GREAT_THAN      reduce using rule 113 (expr_EXIT -> .)
    LESS_THAN       reduce using rule 113 (expr_EXIT -> .)
    LESS_EQUAL      reduce using rule 113 (expr_EXIT -> .)
    GREAT_EQUAL     reduce using rule 113 (expr_EXIT -> .)
    NOT_EQUAL       reduce using rule 113 (expr_EXIT -> .)
    LEFT_LOGICAL    reduce using rule 113 (expr_EXIT -> .)
    RIGHT_LOGICAL   reduce using rule 113 (expr_EXIT -> .)
    RPAREN          reduce using rule 113 (expr_EXIT -> .)
    DDOT            reduce using rule 113 (expr_EXIT -> .)
    COLON           reduce using rule 113 (expr_EXIT -> .)
    RBRACKET        reduce using rule 113 (expr_EXIT -> .)
    ATTR_ASSOC      reduce using rule 113 (expr_EXIT -> .)
    AS              reduce using rule 113 (expr_EXIT -> .)
    RKEY            reduce using rule 113 (expr_EXIT -> .)
    LPAREN          shift and go to state 111

    expr_EXIT                      shift and go to state 112
    exit_expr                      shift and go to state 110

state 28

    (90) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN

    LPAREN          shift and go to state 113


state 29

    (91) expr -> function_call .
    (116) variable -> function_call .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for DDOT resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for COLON resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for AS resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for RKEY resolved using rule 91 (expr -> function_call .)
    SEMICOLON       reduce using rule 91 (expr -> function_call .)
    INTE_DOT        reduce using rule 91 (expr -> function_call .)
    EQUALS          reduce using rule 91 (expr -> function_call .)
    GREAT_THAN      reduce using rule 91 (expr -> function_call .)
    LESS_THAN       reduce using rule 91 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 91 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 91 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 91 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 91 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 91 (expr -> function_call .)
    RPAREN          reduce using rule 91 (expr -> function_call .)
    DDOT            reduce using rule 91 (expr -> function_call .)
    COLON           reduce using rule 91 (expr -> function_call .)
    RBRACKET        reduce using rule 91 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 91 (expr -> function_call .)
    AS              reduce using rule 91 (expr -> function_call .)
    RKEY            reduce using rule 91 (expr -> function_call .)
    INCREMENT       reduce using rule 116 (variable -> function_call .)
    DECREMENT       reduce using rule 116 (variable -> function_call .)
    LBRACKET        reduce using rule 116 (variable -> function_call .)
    ADD_ASSIGN      reduce using rule 116 (variable -> function_call .)
    SUB_ASSIGN      reduce using rule 116 (variable -> function_call .)
    MOD_ASSIGN      reduce using rule 116 (variable -> function_call .)
    PLUS_ASSIGN     reduce using rule 116 (variable -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 116 (variable -> function_call .)
    ASSIGN          reduce using rule 116 (variable -> function_call .)

  ! SEMICOLON       [ reduce using rule 116 (variable -> function_call .) ]
  ! INTE_DOT        [ reduce using rule 116 (variable -> function_call .) ]
  ! EQUALS          [ reduce using rule 116 (variable -> function_call .) ]
  ! GREAT_THAN      [ reduce using rule 116 (variable -> function_call .) ]
  ! LESS_THAN       [ reduce using rule 116 (variable -> function_call .) ]
  ! LESS_EQUAL      [ reduce using rule 116 (variable -> function_call .) ]
  ! GREAT_EQUAL     [ reduce using rule 116 (variable -> function_call .) ]
  ! NOT_EQUAL       [ reduce using rule 116 (variable -> function_call .) ]
  ! LEFT_LOGICAL    [ reduce using rule 116 (variable -> function_call .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 116 (variable -> function_call .) ]
  ! RPAREN          [ reduce using rule 116 (variable -> function_call .) ]
  ! DDOT            [ reduce using rule 116 (variable -> function_call .) ]
  ! COLON           [ reduce using rule 116 (variable -> function_call .) ]
  ! RBRACKET        [ reduce using rule 116 (variable -> function_call .) ]
  ! ATTR_ASSOC      [ reduce using rule 116 (variable -> function_call .) ]
  ! AS              [ reduce using rule 116 (variable -> function_call .) ]
  ! RKEY            [ reduce using rule 116 (variable -> function_call .) ]


state 30

    (93) expr -> NUMBER_REAL .
    (60) arithmetic_expr -> NUMBER_REAL .

  ! reduce/reduce conflict for RPAREN resolved using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    SEMICOLON       reduce using rule 93 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 93 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 93 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 93 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 93 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 93 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 93 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 93 (expr -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 93 (expr -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 93 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 93 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 93 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 93 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 93 (expr -> NUMBER_REAL .)
    AS              reduce using rule 93 (expr -> NUMBER_REAL .)
    RKEY            reduce using rule 93 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    MINUS           reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    TIMES           reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    INCREMENT       reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    DECREMENT       reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    LPAREN          reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    EXIT            reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    DIE             reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    ARRAY_TYPE      reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    NUMBER_REAL     reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    NUMBER_INTEGER  reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    TRUE            reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    FALSE           reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    EXC_DOT         reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    ID              reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    DOLAR           reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    VARIABLE        reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)

  ! RPAREN          [ reduce using rule 93 (expr -> NUMBER_REAL .) ]


state 31

    (94) expr -> NUMBER_INTEGER .
    (59) arithmetic_expr -> NUMBER_INTEGER .

  ! reduce/reduce conflict for RPAREN resolved using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    SEMICOLON       reduce using rule 94 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 94 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 94 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 94 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 94 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 94 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 94 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 94 (expr -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 94 (expr -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 94 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 94 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 94 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 94 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 94 (expr -> NUMBER_INTEGER .)
    AS              reduce using rule 94 (expr -> NUMBER_INTEGER .)
    RKEY            reduce using rule 94 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    INCREMENT       reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    DECREMENT       reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    LPAREN          reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    EXIT            reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    DIE             reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    ARRAY_TYPE      reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    NUMBER_REAL     reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    NUMBER_INTEGER  reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    TRUE            reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    FALSE           reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    EXC_DOT         reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    ID              reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    DOLAR           reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    VARIABLE        reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)

  ! RPAREN          [ reduce using rule 94 (expr -> NUMBER_INTEGER .) ]


state 32

    (95) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 95 (expr -> CONSTANT_ENCAPSED_STRING .)


state 33

    (96) expr -> TRUE .

    SEMICOLON       reduce using rule 96 (expr -> TRUE .)
    INTE_DOT        reduce using rule 96 (expr -> TRUE .)
    EQUALS          reduce using rule 96 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 96 (expr -> TRUE .)
    LESS_THAN       reduce using rule 96 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 96 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 96 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 96 (expr -> TRUE .)
    LEFT_LOGICAL    reduce using rule 96 (expr -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 96 (expr -> TRUE .)
    RPAREN          reduce using rule 96 (expr -> TRUE .)
    DDOT            reduce using rule 96 (expr -> TRUE .)
    COLON           reduce using rule 96 (expr -> TRUE .)
    RBRACKET        reduce using rule 96 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 96 (expr -> TRUE .)
    AS              reduce using rule 96 (expr -> TRUE .)
    RKEY            reduce using rule 96 (expr -> TRUE .)


state 34

    (97) expr -> FALSE .

    SEMICOLON       reduce using rule 97 (expr -> FALSE .)
    INTE_DOT        reduce using rule 97 (expr -> FALSE .)
    EQUALS          reduce using rule 97 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 97 (expr -> FALSE .)
    LESS_THAN       reduce using rule 97 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 97 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 97 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 97 (expr -> FALSE .)
    LEFT_LOGICAL    reduce using rule 97 (expr -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 97 (expr -> FALSE .)
    RPAREN          reduce using rule 97 (expr -> FALSE .)
    DDOT            reduce using rule 97 (expr -> FALSE .)
    COLON           reduce using rule 97 (expr -> FALSE .)
    RBRACKET        reduce using rule 97 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 97 (expr -> FALSE .)
    AS              reduce using rule 97 (expr -> FALSE .)
    RKEY            reduce using rule 97 (expr -> FALSE .)


state 35

    (24) statement_if -> IF . expr_paren statement_BLOCK_OPT
    (21) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 77

    expr_paren                     shift and go to state 114

state 36

    (29) statement_foreach -> FOREACH . LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 115


state 37

    (115) variable -> base_variable .
    (35) function_call -> base_variable .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for INTE_DOT resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for EQUALS resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for INCREMENT resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for ADD_ASSIGN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for SUB_ASSIGN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for MOD_ASSIGN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for PLUS_ASSIGN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for DIVIDE_ASSIGN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for DDOT resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for ATTR_ASSOC resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for AS resolved using rule 35 (function_call -> base_variable .)
  ! reduce/reduce conflict for RKEY resolved using rule 35 (function_call -> base_variable .)
    SEMICOLON       reduce using rule 35 (function_call -> base_variable .)
    INTE_DOT        reduce using rule 35 (function_call -> base_variable .)
    EQUALS          reduce using rule 35 (function_call -> base_variable .)
    GREAT_THAN      reduce using rule 35 (function_call -> base_variable .)
    LESS_THAN       reduce using rule 35 (function_call -> base_variable .)
    LESS_EQUAL      reduce using rule 35 (function_call -> base_variable .)
    GREAT_EQUAL     reduce using rule 35 (function_call -> base_variable .)
    NOT_EQUAL       reduce using rule 35 (function_call -> base_variable .)
    LEFT_LOGICAL    reduce using rule 35 (function_call -> base_variable .)
    RIGHT_LOGICAL   reduce using rule 35 (function_call -> base_variable .)
    INCREMENT       reduce using rule 35 (function_call -> base_variable .)
    DECREMENT       reduce using rule 35 (function_call -> base_variable .)
    LBRACKET        reduce using rule 35 (function_call -> base_variable .)
    ADD_ASSIGN      reduce using rule 35 (function_call -> base_variable .)
    SUB_ASSIGN      reduce using rule 35 (function_call -> base_variable .)
    MOD_ASSIGN      reduce using rule 35 (function_call -> base_variable .)
    PLUS_ASSIGN     reduce using rule 35 (function_call -> base_variable .)
    DIVIDE_ASSIGN   reduce using rule 35 (function_call -> base_variable .)
    ASSIGN          reduce using rule 35 (function_call -> base_variable .)
    RPAREN          reduce using rule 35 (function_call -> base_variable .)
    DDOT            reduce using rule 35 (function_call -> base_variable .)
    COLON           reduce using rule 35 (function_call -> base_variable .)
    RBRACKET        reduce using rule 35 (function_call -> base_variable .)
    ATTR_ASSOC      reduce using rule 35 (function_call -> base_variable .)
    AS              reduce using rule 35 (function_call -> base_variable .)
    RKEY            reduce using rule 35 (function_call -> base_variable .)

  ! INCREMENT       [ reduce using rule 115 (variable -> base_variable .) ]
  ! DECREMENT       [ reduce using rule 115 (variable -> base_variable .) ]
  ! LBRACKET        [ reduce using rule 115 (variable -> base_variable .) ]
  ! ADD_ASSIGN      [ reduce using rule 115 (variable -> base_variable .) ]
  ! SUB_ASSIGN      [ reduce using rule 115 (variable -> base_variable .) ]
  ! MOD_ASSIGN      [ reduce using rule 115 (variable -> base_variable .) ]
  ! PLUS_ASSIGN     [ reduce using rule 115 (variable -> base_variable .) ]
  ! DIVIDE_ASSIGN   [ reduce using rule 115 (variable -> base_variable .) ]
  ! ASSIGN          [ reduce using rule 115 (variable -> base_variable .) ]
  ! SEMICOLON       [ reduce using rule 115 (variable -> base_variable .) ]
  ! INTE_DOT        [ reduce using rule 115 (variable -> base_variable .) ]
  ! EQUALS          [ reduce using rule 115 (variable -> base_variable .) ]
  ! GREAT_THAN      [ reduce using rule 115 (variable -> base_variable .) ]
  ! LESS_THAN       [ reduce using rule 115 (variable -> base_variable .) ]
  ! LESS_EQUAL      [ reduce using rule 115 (variable -> base_variable .) ]
  ! GREAT_EQUAL     [ reduce using rule 115 (variable -> base_variable .) ]
  ! NOT_EQUAL       [ reduce using rule 115 (variable -> base_variable .) ]
  ! LEFT_LOGICAL    [ reduce using rule 115 (variable -> base_variable .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 115 (variable -> base_variable .) ]
  ! RPAREN          [ reduce using rule 115 (variable -> base_variable .) ]
  ! DDOT            [ reduce using rule 115 (variable -> base_variable .) ]
  ! COLON           [ reduce using rule 115 (variable -> base_variable .) ]
  ! RBRACKET        [ reduce using rule 115 (variable -> base_variable .) ]
  ! ATTR_ASSOC      [ reduce using rule 115 (variable -> base_variable .) ]
  ! AS              [ reduce using rule 115 (variable -> base_variable .) ]
  ! RKEY            [ reduce using rule 115 (variable -> base_variable .) ]


state 38

    (42) unary_operator -> EXC_DOT .

    INCREMENT       reduce using rule 42 (unary_operator -> EXC_DOT .)
    DECREMENT       reduce using rule 42 (unary_operator -> EXC_DOT .)
    LPAREN          reduce using rule 42 (unary_operator -> EXC_DOT .)
    EXIT            reduce using rule 42 (unary_operator -> EXC_DOT .)
    DIE             reduce using rule 42 (unary_operator -> EXC_DOT .)
    ARRAY_TYPE      reduce using rule 42 (unary_operator -> EXC_DOT .)
    NUMBER_REAL     reduce using rule 42 (unary_operator -> EXC_DOT .)
    NUMBER_INTEGER  reduce using rule 42 (unary_operator -> EXC_DOT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 42 (unary_operator -> EXC_DOT .)
    TRUE            reduce using rule 42 (unary_operator -> EXC_DOT .)
    FALSE           reduce using rule 42 (unary_operator -> EXC_DOT .)
    EXC_DOT         reduce using rule 42 (unary_operator -> EXC_DOT .)
    PLUS            reduce using rule 42 (unary_operator -> EXC_DOT .)
    MINUS           reduce using rule 42 (unary_operator -> EXC_DOT .)
    ID              reduce using rule 42 (unary_operator -> EXC_DOT .)
    DOLAR           reduce using rule 42 (unary_operator -> EXC_DOT .)
    VARIABLE        reduce using rule 42 (unary_operator -> EXC_DOT .)


state 39

    (43) unary_operator -> PLUS .

    INCREMENT       reduce using rule 43 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 43 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 43 (unary_operator -> PLUS .)
    EXIT            reduce using rule 43 (unary_operator -> PLUS .)
    DIE             reduce using rule 43 (unary_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 43 (unary_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 43 (unary_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 43 (unary_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 43 (unary_operator -> PLUS .)
    TRUE            reduce using rule 43 (unary_operator -> PLUS .)
    FALSE           reduce using rule 43 (unary_operator -> PLUS .)
    EXC_DOT         reduce using rule 43 (unary_operator -> PLUS .)
    PLUS            reduce using rule 43 (unary_operator -> PLUS .)
    MINUS           reduce using rule 43 (unary_operator -> PLUS .)
    ID              reduce using rule 43 (unary_operator -> PLUS .)
    DOLAR           reduce using rule 43 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 43 (unary_operator -> PLUS .)


state 40

    (44) unary_operator -> MINUS .

    INCREMENT       reduce using rule 44 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 44 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 44 (unary_operator -> MINUS .)
    EXIT            reduce using rule 44 (unary_operator -> MINUS .)
    DIE             reduce using rule 44 (unary_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 44 (unary_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 44 (unary_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 44 (unary_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (unary_operator -> MINUS .)
    TRUE            reduce using rule 44 (unary_operator -> MINUS .)
    FALSE           reduce using rule 44 (unary_operator -> MINUS .)
    EXC_DOT         reduce using rule 44 (unary_operator -> MINUS .)
    PLUS            reduce using rule 44 (unary_operator -> MINUS .)
    MINUS           reduce using rule 44 (unary_operator -> MINUS .)
    ID              reduce using rule 44 (unary_operator -> MINUS .)
    DOLAR           reduce using rule 44 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 44 (unary_operator -> MINUS .)


state 41

    (117) base_variable -> reference_variable .

    INCREMENT       reduce using rule 117 (base_variable -> reference_variable .)
    DECREMENT       reduce using rule 117 (base_variable -> reference_variable .)
    LBRACKET        reduce using rule 117 (base_variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 117 (base_variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 117 (base_variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 117 (base_variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 117 (base_variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 117 (base_variable -> reference_variable .)
    ASSIGN          reduce using rule 117 (base_variable -> reference_variable .)
    SEMICOLON       reduce using rule 117 (base_variable -> reference_variable .)
    INTE_DOT        reduce using rule 117 (base_variable -> reference_variable .)
    EQUALS          reduce using rule 117 (base_variable -> reference_variable .)
    GREAT_THAN      reduce using rule 117 (base_variable -> reference_variable .)
    LESS_THAN       reduce using rule 117 (base_variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 117 (base_variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 117 (base_variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 117 (base_variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 117 (base_variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 117 (base_variable -> reference_variable .)
    RPAREN          reduce using rule 117 (base_variable -> reference_variable .)
    DDOT            reduce using rule 117 (base_variable -> reference_variable .)
    COLON           reduce using rule 117 (base_variable -> reference_variable .)
    RBRACKET        reduce using rule 117 (base_variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 117 (base_variable -> reference_variable .)
    AS              reduce using rule 117 (base_variable -> reference_variable .)
    RKEY            reduce using rule 117 (base_variable -> reference_variable .)


state 42

    (118) base_variable -> simple_indirect_reference_DOLAR . reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 45
    DOLAR           shift and go to state 117

    reference_variable             shift and go to state 116
    compound_variable              shift and go to state 43

state 43

    (119) reference_variable -> compound_variable . reference_variable_SELECTOR
    (176) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (177) reference_variable_SELECTOR -> .
    (122) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 177 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 177 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 177 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 177 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 177 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 177 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 177 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 177 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 177 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 177 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 177 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 177 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 177 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 177 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 177 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 177 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 177 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 177 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 177 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 177 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 177 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 177 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 177 (reference_variable_SELECTOR -> .)
    AS              reduce using rule 177 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 177 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 120

  ! LBRACKET        [ reduce using rule 177 (reference_variable_SELECTOR -> .) ]

    reference_variable_SELECTOR    shift and go to state 118
    selector                       shift and go to state 119

state 44

    (178) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (121) compound_variable -> DOLAR . LKEY expr RKEY
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    LKEY            shift and go to state 123
    DOLAR           shift and go to state 121
    VARIABLE        reduce using rule 179 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 122

state 45

    (120) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 120 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 120 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 120 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 120 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 120 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 120 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 120 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 120 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 120 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 120 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 120 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 120 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 120 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 120 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 120 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 120 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 120 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 120 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 120 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 120 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 120 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 120 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 120 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 120 (compound_variable -> VARIABLE .)
    AS              reduce using rule 120 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 120 (compound_variable -> VARIABLE .)


state 46

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 47

    (148) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 148 (main_INNER -> inner_statement main_INNER .)


state 48

    (123) function_declaration_statement -> FUNCTION AMPERSAND_OPT . ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    ID              shift and go to state 124


state 49

    (158) AMPERSAND_OPT -> AMPERSAND .

    ID              reduce using rule 158 (AMPERSAND_OPT -> AMPERSAND .)
    VARIABLE        reduce using rule 158 (AMPERSAND_OPT -> AMPERSAND .)


state 50

    (34) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (36) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (37) function_call_parameter_list -> .
    (38) function_call_parameter -> . variable
    (39) function_call_parameter -> . AMPERSAND VARIABLE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 37 (function_call_parameter_list -> .)
    AMPERSAND       shift and go to state 128
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter_list   shift and go to state 125
    function_call_parameter        shift and go to state 126
    variable                       shift and go to state 127
    base_variable                  shift and go to state 37
    function_call                  shift and go to state 91
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 51

    (80) expr -> LPAREN expr . RPAREN
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    RPAREN          shift and go to state 129
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 52

    (87) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 130


state 53

    (58) arithmetic_expr -> LPAREN arithmetic_expr . RPAREN
    (86) expr -> arithmetic_expr . expr
    (54) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (55) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (56) arithmetic_expr -> arithmetic_expr . TIMES arithmetic_expr
    (57) arithmetic_expr -> arithmetic_expr . DIVIDE arithmetic_expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          shift and go to state 131
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    arithmetic_expr                shift and go to state 25
    expr                           shift and go to state 104
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 54

    (90) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (50) type_cast_operator -> ARRAY_TYPE .

    LPAREN          shift and go to state 113
    RPAREN          reduce using rule 50 (type_cast_operator -> ARRAY_TYPE .)


state 55

    (45) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 45 (type_cast_operator -> INT_TYPE .)


state 56

    (46) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 46 (type_cast_operator -> DOUBLE_TYPE .)


state 57

    (47) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 47 (type_cast_operator -> FLOAT_TYPE .)


state 58

    (48) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 48 (type_cast_operator -> REAL_TYPE .)


state 59

    (49) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 49 (type_cast_operator -> STRING_TYPE .)


state 60

    (51) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 51 (type_cast_operator -> BOOLEAN_TYPE .)


state 61

    (52) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 52 (type_cast_operator -> BOOL_TYPE .)


state 62

    (53) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 53 (type_cast_operator -> UNSET .)


state 63

    (5) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 5 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expr SEMICOLON .)
    DO              reduce using rule 5 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 5 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 5 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 5 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 5 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 5 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 5 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 5 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 5 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 5 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 5 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 5 (statement -> expr SEMICOLON .)
    IF              reduce using rule 5 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 5 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 5 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 5 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 5 (statement -> expr SEMICOLON .)
    ID              reduce using rule 5 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 5 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 5 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 5 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 5 (statement -> expr SEMICOLON .)


state 64

    (82) expr -> expr INTE_DOT . expr DDOT expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 132
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 65

    (83) expr -> expr comparission_operator . expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 133
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 66

    (67) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 67 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 67 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 67 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 67 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 67 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 67 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 67 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 67 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 67 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 67 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 67 (comparission_operator -> EQUALS .)
    EXC_DOT         reduce using rule 67 (comparission_operator -> EQUALS .)
    PLUS            reduce using rule 67 (comparission_operator -> EQUALS .)
    MINUS           reduce using rule 67 (comparission_operator -> EQUALS .)
    ID              reduce using rule 67 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 67 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 67 (comparission_operator -> EQUALS .)


state 67

    (68) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    EXC_DOT         reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    PLUS            reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    MINUS           reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 68 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 68 (comparission_operator -> GREAT_THAN .)


state 68

    (69) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 69 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 69 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 69 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 69 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 69 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 69 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 69 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 69 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 69 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 69 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 69 (comparission_operator -> LESS_THAN .)
    EXC_DOT         reduce using rule 69 (comparission_operator -> LESS_THAN .)
    PLUS            reduce using rule 69 (comparission_operator -> LESS_THAN .)
    MINUS           reduce using rule 69 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 69 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 69 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 69 (comparission_operator -> LESS_THAN .)


state 69

    (70) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    EXC_DOT         reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    PLUS            reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    MINUS           reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 70 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 70 (comparission_operator -> LESS_EQUAL .)


state 70

    (71) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    EXC_DOT         reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    PLUS            reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    MINUS           reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 71 (comparission_operator -> GREAT_EQUAL .)


state 71

    (72) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    EXC_DOT         reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    PLUS            reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    MINUS           reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 72 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 72 (comparission_operator -> NOT_EQUAL .)


state 72

    (73) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    EXC_DOT         reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    PLUS            reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    MINUS           reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 73 (comparission_operator -> LEFT_LOGICAL .)


state 73

    (74) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    EXC_DOT         reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    PLUS            reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    MINUS           reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 74 (comparission_operator -> RIGHT_LOGICAL .)


state 74

    (6) statement -> statement_if statement_elseif . statement_else
    (27) statement_else -> . ELSE statement_BLOCK_OPT
    (28) statement_else -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 135
    FUNCTION        reduce using rule 28 (statement_else -> .)
    WHILE           reduce using rule 28 (statement_else -> .)
    DO              reduce using rule 28 (statement_else -> .)
    FOR             reduce using rule 28 (statement_else -> .)
    BREAK           reduce using rule 28 (statement_else -> .)
    CONTINUE        reduce using rule 28 (statement_else -> .)
    RETURN          reduce using rule 28 (statement_else -> .)
    GLOBAL          reduce using rule 28 (statement_else -> .)
    INCREMENT       reduce using rule 28 (statement_else -> .)
    DECREMENT       reduce using rule 28 (statement_else -> .)
    LPAREN          reduce using rule 28 (statement_else -> .)
    EXIT            reduce using rule 28 (statement_else -> .)
    DIE             reduce using rule 28 (statement_else -> .)
    ARRAY_TYPE      reduce using rule 28 (statement_else -> .)
    NUMBER_REAL     reduce using rule 28 (statement_else -> .)
    NUMBER_INTEGER  reduce using rule 28 (statement_else -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 28 (statement_else -> .)
    TRUE            reduce using rule 28 (statement_else -> .)
    FALSE           reduce using rule 28 (statement_else -> .)
    IF              reduce using rule 28 (statement_else -> .)
    FOREACH         reduce using rule 28 (statement_else -> .)
    EXC_DOT         reduce using rule 28 (statement_else -> .)
    PLUS            reduce using rule 28 (statement_else -> .)
    MINUS           reduce using rule 28 (statement_else -> .)
    ID              reduce using rule 28 (statement_else -> .)
    DOLAR           reduce using rule 28 (statement_else -> .)
    VARIABLE        reduce using rule 28 (statement_else -> .)
    END_PROGRAM     reduce using rule 28 (statement_else -> .)
    RKEY            reduce using rule 28 (statement_else -> .)
    ELSEIF          reduce using rule 28 (statement_else -> .)

  ! ELSE            [ reduce using rule 28 (statement_else -> .) ]

    statement_else                 shift and go to state 134

state 75

    (25) statement_elseif -> ELSEIF . expr_paren statement_BLOCK_OPT
    (21) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 77

    expr_paren                     shift and go to state 136

state 76

    (7) statement -> WHILE expr_paren . statement_BLOCK_OPT
    (156) statement_BLOCK_OPT -> . statement
    (157) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 80
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 137
    statement                      shift and go to state 79
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 77

    (21) expr_paren -> LPAREN . expr RPAREN
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 138
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 78

    (8) statement -> DO statement_BLOCK_OPT . WHILE expr_paren SEMICOLON

    WHILE           shift and go to state 139


state 79

    (156) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    EXC_DOT         reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    PLUS            reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 156 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 156 (statement_BLOCK_OPT -> statement .)


state 80

    (157) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (150) statement_MUL -> . statement statement_MUL
    (151) statement_MUL -> .
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 151 (statement_MUL -> .)
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement_MUL                  shift and go to state 140
    statement                      shift and go to state 141
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 81

    (9) statement -> FOR LPAREN . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (32) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (33) for_expr_OPT -> .
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 33 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 142
    expr                           shift and go to state 143
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 82

    (11) statement -> BREAK expr_OPT . SEMICOLON

    SEMICOLON       shift and go to state 144


state 83

    (168) expr_OPT -> expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    SEMICOLON       reduce using rule 168 (expr_OPT -> expr .)
    RPAREN          reduce using rule 168 (expr_OPT -> expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 84

    (12) statement -> CONTINUE expr_OPT . SEMICOLON

    SEMICOLON       shift and go to state 145


state 85

    (13) statement -> RETURN expr_return_OPT . SEMICOLON

    SEMICOLON       shift and go to state 146


state 86

    (22) expr_return_OPT -> expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    SEMICOLON       reduce using rule 22 (expr_return_OPT -> expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 87

    (14) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (19) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (20) statement_COLON_GLOBAL -> .

    COLON           shift and go to state 148
    SEMICOLON       reduce using rule 20 (statement_COLON_GLOBAL -> .)

    statement_COLON_GLOBAL         shift and go to state 147

state 88

    (16) global_var -> VARIABLE .

    COLON           reduce using rule 16 (global_var -> VARIABLE .)
    SEMICOLON       reduce using rule 16 (global_var -> VARIABLE .)


state 89

    (17) global_var -> DOLAR . VARIABLE
    (18) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 149
    LKEY            shift and go to state 150


state 90

    (75) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 75 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 75 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 75 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 75 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 75 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 75 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 75 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 75 (expr -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 75 (expr -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 75 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 75 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 75 (expr -> INCREMENT variable .)
    COLON           reduce using rule 75 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 75 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 75 (expr -> INCREMENT variable .)
    AS              reduce using rule 75 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 75 (expr -> INCREMENT variable .)


state 91

    (116) variable -> function_call .

    SEMICOLON       reduce using rule 116 (variable -> function_call .)
    INTE_DOT        reduce using rule 116 (variable -> function_call .)
    EQUALS          reduce using rule 116 (variable -> function_call .)
    GREAT_THAN      reduce using rule 116 (variable -> function_call .)
    LESS_THAN       reduce using rule 116 (variable -> function_call .)
    LESS_EQUAL      reduce using rule 116 (variable -> function_call .)
    GREAT_EQUAL     reduce using rule 116 (variable -> function_call .)
    NOT_EQUAL       reduce using rule 116 (variable -> function_call .)
    LEFT_LOGICAL    reduce using rule 116 (variable -> function_call .)
    RIGHT_LOGICAL   reduce using rule 116 (variable -> function_call .)
    RPAREN          reduce using rule 116 (variable -> function_call .)
    DDOT            reduce using rule 116 (variable -> function_call .)
    COLON           reduce using rule 116 (variable -> function_call .)
    RBRACKET        reduce using rule 116 (variable -> function_call .)
    ATTR_ASSOC      reduce using rule 116 (variable -> function_call .)
    AS              reduce using rule 116 (variable -> function_call .)
    RKEY            reduce using rule 116 (variable -> function_call .)


state 92

    (76) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 76 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 76 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 76 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 76 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 76 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 76 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 76 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 76 (expr -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 76 (expr -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 76 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 76 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 76 (expr -> variable INCREMENT .)
    COLON           reduce using rule 76 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 76 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 76 (expr -> variable INCREMENT .)
    AS              reduce using rule 76 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 76 (expr -> variable INCREMENT .)


state 93

    (78) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 78 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 78 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 78 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 78 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 78 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 78 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 78 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 78 (expr -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 78 (expr -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 78 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 78 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 78 (expr -> variable DECREMENT .)
    COLON           reduce using rule 78 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 78 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 78 (expr -> variable DECREMENT .)
    AS              reduce using rule 78 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 78 (expr -> variable DECREMENT .)


state 94

    (79) expr -> variable LBRACKET . expr RBRACKET
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 22
    expr                           shift and go to state 151
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 95

    (84) expr -> variable assign_operator . expr
    (85) expr -> variable assign_operator . AMPERSAND expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 153
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 22
    expr                           shift and go to state 152
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 96

    (61) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    EXC_DOT         reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 61 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 61 (assign_operator -> ADD_ASSIGN .)


state 97

    (62) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    EXC_DOT         reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 62 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 62 (assign_operator -> SUB_ASSIGN .)


state 98

    (63) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    EXC_DOT         reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 63 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 63 (assign_operator -> MOD_ASSIGN .)


state 99

    (64) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    EXC_DOT         reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    PLUS            reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 64 (assign_operator -> PLUS_ASSIGN .)


state 100

    (65) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    EXC_DOT         reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    PLUS            reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 65 (assign_operator -> DIVIDE_ASSIGN .)


state 101

    (66) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 66 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 66 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 66 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 66 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 66 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 66 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 66 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 66 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 66 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 66 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 66 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 66 (assign_operator -> ASSIGN .)
    EXC_DOT         reduce using rule 66 (assign_operator -> ASSIGN .)
    PLUS            reduce using rule 66 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 66 (assign_operator -> ASSIGN .)
    ID              reduce using rule 66 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 66 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 66 (assign_operator -> ASSIGN .)


state 102

    (77) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 77 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 77 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 77 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 77 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 77 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 77 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 77 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 77 (expr -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 77 (expr -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 77 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 77 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 77 (expr -> DECREMENT variable .)
    COLON           reduce using rule 77 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 77 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 77 (expr -> DECREMENT variable .)
    AS              reduce using rule 77 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 77 (expr -> DECREMENT variable .)


state 103

    (81) expr -> unary_operator expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
    SEMICOLON       reduce using rule 81 (expr -> unary_operator expr .)
    RPAREN          reduce using rule 81 (expr -> unary_operator expr .)
    DDOT            reduce using rule 81 (expr -> unary_operator expr .)
    COLON           reduce using rule 81 (expr -> unary_operator expr .)
    RBRACKET        reduce using rule 81 (expr -> unary_operator expr .)
    ATTR_ASSOC      reduce using rule 81 (expr -> unary_operator expr .)
    AS              reduce using rule 81 (expr -> unary_operator expr .)
    RKEY            reduce using rule 81 (expr -> unary_operator expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

  ! INTE_DOT        [ reduce using rule 81 (expr -> unary_operator expr .) ]
  ! EQUALS          [ reduce using rule 81 (expr -> unary_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 81 (expr -> unary_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 81 (expr -> unary_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 81 (expr -> unary_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 81 (expr -> unary_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 81 (expr -> unary_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 81 (expr -> unary_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 81 (expr -> unary_operator expr .) ]

    comparission_operator          shift and go to state 65

state 104

    (86) expr -> arithmetic_expr expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
    SEMICOLON       reduce using rule 86 (expr -> arithmetic_expr expr .)
    RPAREN          reduce using rule 86 (expr -> arithmetic_expr expr .)
    DDOT            reduce using rule 86 (expr -> arithmetic_expr expr .)
    COLON           reduce using rule 86 (expr -> arithmetic_expr expr .)
    RBRACKET        reduce using rule 86 (expr -> arithmetic_expr expr .)
    ATTR_ASSOC      reduce using rule 86 (expr -> arithmetic_expr expr .)
    AS              reduce using rule 86 (expr -> arithmetic_expr expr .)
    RKEY            reduce using rule 86 (expr -> arithmetic_expr expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

  ! INTE_DOT        [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]
  ! EQUALS          [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]
  ! GREAT_THAN      [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]
  ! LESS_THAN       [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]
  ! LESS_EQUAL      [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]
  ! NOT_EQUAL       [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 86 (expr -> arithmetic_expr expr .) ]

    comparission_operator          shift and go to state 65

state 105

    (54) arithmetic_expr -> arithmetic_expr PLUS . arithmetic_expr
    (43) unary_operator -> PLUS .
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL

    INCREMENT       reduce using rule 43 (unary_operator -> PLUS .)
    DECREMENT       reduce using rule 43 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 43 (unary_operator -> PLUS .)
    EXIT            reduce using rule 43 (unary_operator -> PLUS .)
    DIE             reduce using rule 43 (unary_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 43 (unary_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 43 (unary_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 43 (unary_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 43 (unary_operator -> PLUS .)
    TRUE            reduce using rule 43 (unary_operator -> PLUS .)
    FALSE           reduce using rule 43 (unary_operator -> PLUS .)
    EXC_DOT         reduce using rule 43 (unary_operator -> PLUS .)
    PLUS            reduce using rule 43 (unary_operator -> PLUS .)
    MINUS           reduce using rule 43 (unary_operator -> PLUS .)
    ID              reduce using rule 43 (unary_operator -> PLUS .)
    DOLAR           reduce using rule 43 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 43 (unary_operator -> PLUS .)

  ! LPAREN          [ shift and go to state 155 ]
  ! NUMBER_INTEGER  [ shift and go to state 156 ]
  ! NUMBER_REAL     [ shift and go to state 157 ]

    arithmetic_expr                shift and go to state 154

state 106

    (55) arithmetic_expr -> arithmetic_expr MINUS . arithmetic_expr
    (44) unary_operator -> MINUS .
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL

    INCREMENT       reduce using rule 44 (unary_operator -> MINUS .)
    DECREMENT       reduce using rule 44 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 44 (unary_operator -> MINUS .)
    EXIT            reduce using rule 44 (unary_operator -> MINUS .)
    DIE             reduce using rule 44 (unary_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 44 (unary_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 44 (unary_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 44 (unary_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (unary_operator -> MINUS .)
    TRUE            reduce using rule 44 (unary_operator -> MINUS .)
    FALSE           reduce using rule 44 (unary_operator -> MINUS .)
    EXC_DOT         reduce using rule 44 (unary_operator -> MINUS .)
    PLUS            reduce using rule 44 (unary_operator -> MINUS .)
    MINUS           reduce using rule 44 (unary_operator -> MINUS .)
    ID              reduce using rule 44 (unary_operator -> MINUS .)
    DOLAR           reduce using rule 44 (unary_operator -> MINUS .)
    VARIABLE        reduce using rule 44 (unary_operator -> MINUS .)

  ! LPAREN          [ shift and go to state 155 ]
  ! NUMBER_INTEGER  [ shift and go to state 156 ]
  ! NUMBER_REAL     [ shift and go to state 157 ]

    arithmetic_expr                shift and go to state 158

state 107

    (56) arithmetic_expr -> arithmetic_expr TIMES . arithmetic_expr
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL

    LPAREN          shift and go to state 155
    NUMBER_INTEGER  shift and go to state 156
    NUMBER_REAL     shift and go to state 157

    arithmetic_expr                shift and go to state 159

state 108

    (57) arithmetic_expr -> arithmetic_expr DIVIDE . arithmetic_expr
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL

    LPAREN          shift and go to state 155
    NUMBER_INTEGER  shift and go to state 156
    NUMBER_REAL     shift and go to state 157

    arithmetic_expr                shift and go to state 160

state 109

    (88) expr -> EXIT expr_EXIT .

    SEMICOLON       reduce using rule 88 (expr -> EXIT expr_EXIT .)
    INTE_DOT        reduce using rule 88 (expr -> EXIT expr_EXIT .)
    EQUALS          reduce using rule 88 (expr -> EXIT expr_EXIT .)
    GREAT_THAN      reduce using rule 88 (expr -> EXIT expr_EXIT .)
    LESS_THAN       reduce using rule 88 (expr -> EXIT expr_EXIT .)
    LESS_EQUAL      reduce using rule 88 (expr -> EXIT expr_EXIT .)
    GREAT_EQUAL     reduce using rule 88 (expr -> EXIT expr_EXIT .)
    NOT_EQUAL       reduce using rule 88 (expr -> EXIT expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 88 (expr -> EXIT expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 88 (expr -> EXIT expr_EXIT .)
    RPAREN          reduce using rule 88 (expr -> EXIT expr_EXIT .)
    DDOT            reduce using rule 88 (expr -> EXIT expr_EXIT .)
    COLON           reduce using rule 88 (expr -> EXIT expr_EXIT .)
    RBRACKET        reduce using rule 88 (expr -> EXIT expr_EXIT .)
    ATTR_ASSOC      reduce using rule 88 (expr -> EXIT expr_EXIT .)
    AS              reduce using rule 88 (expr -> EXIT expr_EXIT .)
    RKEY            reduce using rule 88 (expr -> EXIT expr_EXIT .)


state 110

    (112) expr_EXIT -> exit_expr .

    SEMICOLON       reduce using rule 112 (expr_EXIT -> exit_expr .)
    INTE_DOT        reduce using rule 112 (expr_EXIT -> exit_expr .)
    EQUALS          reduce using rule 112 (expr_EXIT -> exit_expr .)
    GREAT_THAN      reduce using rule 112 (expr_EXIT -> exit_expr .)
    LESS_THAN       reduce using rule 112 (expr_EXIT -> exit_expr .)
    LESS_EQUAL      reduce using rule 112 (expr_EXIT -> exit_expr .)
    GREAT_EQUAL     reduce using rule 112 (expr_EXIT -> exit_expr .)
    NOT_EQUAL       reduce using rule 112 (expr_EXIT -> exit_expr .)
    LEFT_LOGICAL    reduce using rule 112 (expr_EXIT -> exit_expr .)
    RIGHT_LOGICAL   reduce using rule 112 (expr_EXIT -> exit_expr .)
    RPAREN          reduce using rule 112 (expr_EXIT -> exit_expr .)
    DDOT            reduce using rule 112 (expr_EXIT -> exit_expr .)
    COLON           reduce using rule 112 (expr_EXIT -> exit_expr .)
    RBRACKET        reduce using rule 112 (expr_EXIT -> exit_expr .)
    ATTR_ASSOC      reduce using rule 112 (expr_EXIT -> exit_expr .)
    AS              reduce using rule 112 (expr_EXIT -> exit_expr .)
    RKEY            reduce using rule 112 (expr_EXIT -> exit_expr .)


state 111

    (114) exit_expr -> LPAREN . expr_OPT RPAREN
    (168) expr_OPT -> . expr
    (169) expr_OPT -> .
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 169 (expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr_OPT                       shift and go to state 161
    expr                           shift and go to state 83
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 112

    (89) expr -> DIE expr_EXIT .

    SEMICOLON       reduce using rule 89 (expr -> DIE expr_EXIT .)
    INTE_DOT        reduce using rule 89 (expr -> DIE expr_EXIT .)
    EQUALS          reduce using rule 89 (expr -> DIE expr_EXIT .)
    GREAT_THAN      reduce using rule 89 (expr -> DIE expr_EXIT .)
    LESS_THAN       reduce using rule 89 (expr -> DIE expr_EXIT .)
    LESS_EQUAL      reduce using rule 89 (expr -> DIE expr_EXIT .)
    GREAT_EQUAL     reduce using rule 89 (expr -> DIE expr_EXIT .)
    NOT_EQUAL       reduce using rule 89 (expr -> DIE expr_EXIT .)
    LEFT_LOGICAL    reduce using rule 89 (expr -> DIE expr_EXIT .)
    RIGHT_LOGICAL   reduce using rule 89 (expr -> DIE expr_EXIT .)
    RPAREN          reduce using rule 89 (expr -> DIE expr_EXIT .)
    DDOT            reduce using rule 89 (expr -> DIE expr_EXIT .)
    COLON           reduce using rule 89 (expr -> DIE expr_EXIT .)
    RBRACKET        reduce using rule 89 (expr -> DIE expr_EXIT .)
    ATTR_ASSOC      reduce using rule 89 (expr -> DIE expr_EXIT .)
    AS              reduce using rule 89 (expr -> DIE expr_EXIT .)
    RKEY            reduce using rule 89 (expr -> DIE expr_EXIT .)


state 113

    (90) expr -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (144) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (145) array_pair_list -> .
    (146) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (147) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (194) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (195) array_pair_EXPR_ATTR_OPT -> .
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 145 (array_pair_list -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    AMPERSAND       reduce using rule 195 (array_pair_EXPR_ATTR_OPT -> .)
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    array_pair_list                shift and go to state 162
    array_pair                     shift and go to state 163
    expr                           shift and go to state 164
    array_pair_EXPR_ATTR_OPT       shift and go to state 165
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 114

    (24) statement_if -> IF expr_paren . statement_BLOCK_OPT
    (156) statement_BLOCK_OPT -> . statement
    (157) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 80
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 166
    statement                      shift and go to state 79
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 115

    (29) statement_foreach -> FOREACH LPAREN . foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (30) foreach_first_param -> . variable
    (31) foreach_first_param -> . expr
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    ID              shift and go to state 9
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    foreach_first_param            shift and go to state 167
    variable                       shift and go to state 168
    expr                           shift and go to state 169
    base_variable                  shift and go to state 37
    function_call                  shift and go to state 170
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 116

    (118) base_variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LBRACKET        reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    AS              reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 118 (base_variable -> simple_indirect_reference_DOLAR reference_variable .)


state 117

    (121) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 123


state 118

    (119) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AS              reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 119 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 119

    (176) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (176) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (177) reference_variable_SELECTOR -> .
    (122) selector -> . LBRACKET selector_EXPR RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 177 (reference_variable_SELECTOR -> .)
    DECREMENT       reduce using rule 177 (reference_variable_SELECTOR -> .)
    ADD_ASSIGN      reduce using rule 177 (reference_variable_SELECTOR -> .)
    SUB_ASSIGN      reduce using rule 177 (reference_variable_SELECTOR -> .)
    MOD_ASSIGN      reduce using rule 177 (reference_variable_SELECTOR -> .)
    PLUS_ASSIGN     reduce using rule 177 (reference_variable_SELECTOR -> .)
    DIVIDE_ASSIGN   reduce using rule 177 (reference_variable_SELECTOR -> .)
    ASSIGN          reduce using rule 177 (reference_variable_SELECTOR -> .)
    SEMICOLON       reduce using rule 177 (reference_variable_SELECTOR -> .)
    INTE_DOT        reduce using rule 177 (reference_variable_SELECTOR -> .)
    EQUALS          reduce using rule 177 (reference_variable_SELECTOR -> .)
    GREAT_THAN      reduce using rule 177 (reference_variable_SELECTOR -> .)
    LESS_THAN       reduce using rule 177 (reference_variable_SELECTOR -> .)
    LESS_EQUAL      reduce using rule 177 (reference_variable_SELECTOR -> .)
    GREAT_EQUAL     reduce using rule 177 (reference_variable_SELECTOR -> .)
    NOT_EQUAL       reduce using rule 177 (reference_variable_SELECTOR -> .)
    LEFT_LOGICAL    reduce using rule 177 (reference_variable_SELECTOR -> .)
    RIGHT_LOGICAL   reduce using rule 177 (reference_variable_SELECTOR -> .)
    RPAREN          reduce using rule 177 (reference_variable_SELECTOR -> .)
    DDOT            reduce using rule 177 (reference_variable_SELECTOR -> .)
    COLON           reduce using rule 177 (reference_variable_SELECTOR -> .)
    RBRACKET        reduce using rule 177 (reference_variable_SELECTOR -> .)
    ATTR_ASSOC      reduce using rule 177 (reference_variable_SELECTOR -> .)
    AS              reduce using rule 177 (reference_variable_SELECTOR -> .)
    RKEY            reduce using rule 177 (reference_variable_SELECTOR -> .)
    LBRACKET        shift and go to state 120

  ! LBRACKET        [ reduce using rule 177 (reference_variable_SELECTOR -> .) ]

    selector                       shift and go to state 119
    reference_variable_SELECTOR    shift and go to state 171

state 120

    (122) selector -> LBRACKET . selector_EXPR RBRACKET
    (180) selector_EXPR -> . expr
    (181) selector_EXPR -> .
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RBRACKET        reduce using rule 181 (selector_EXPR -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    selector_EXPR                  shift and go to state 172
    expr                           shift and go to state 173
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 121

    (178) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .

  ! shift/reduce conflict for DOLAR resolved as shift
    DOLAR           shift and go to state 121
    VARIABLE        reduce using rule 179 (simple_indirect_reference_DOLAR -> .)

  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    simple_indirect_reference_DOLAR shift and go to state 122

state 122

    (178) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 178 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 178 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 123

    (121) compound_variable -> DOLAR LKEY . expr RKEY
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 174
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 124

    (123) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID . LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY

    LPAREN          shift and go to state 175


state 125

    (34) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 176


state 126

    (36) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (162) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (163) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 178
    RPAREN          reduce using rule 163 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 177

state 127

    (38) function_call_parameter -> variable .

    COLON           reduce using rule 38 (function_call_parameter -> variable .)
    RPAREN          reduce using rule 38 (function_call_parameter -> variable .)


state 128

    (39) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 179


state 129

    (80) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 80 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 80 (expr -> LPAREN expr RPAREN .)


state 130

    (87) expr -> LPAREN type_cast_operator RPAREN . expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 180
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 131

    (58) arithmetic_expr -> LPAREN arithmetic_expr RPAREN .

    PLUS            reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    MINUS           reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    TIMES           reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    DIVIDE          reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    INCREMENT       reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    DECREMENT       reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    LPAREN          reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    EXIT            reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    DIE             reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    ARRAY_TYPE      reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    NUMBER_REAL     reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    TRUE            reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    FALSE           reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    EXC_DOT         reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    ID              reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    DOLAR           reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    VARIABLE        reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)
    RPAREN          reduce using rule 58 (arithmetic_expr -> LPAREN arithmetic_expr RPAREN .)


state 132

    (82) expr -> expr INTE_DOT expr . DDOT expr
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    DDOT            shift and go to state 181
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 133

    (83) expr -> expr comparission_operator expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
    SEMICOLON       reduce using rule 83 (expr -> expr comparission_operator expr .)
    RPAREN          reduce using rule 83 (expr -> expr comparission_operator expr .)
    DDOT            reduce using rule 83 (expr -> expr comparission_operator expr .)
    COLON           reduce using rule 83 (expr -> expr comparission_operator expr .)
    RBRACKET        reduce using rule 83 (expr -> expr comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 83 (expr -> expr comparission_operator expr .)
    AS              reduce using rule 83 (expr -> expr comparission_operator expr .)
    RKEY            reduce using rule 83 (expr -> expr comparission_operator expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

  ! INTE_DOT        [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]
  ! EQUALS          [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 83 (expr -> expr comparission_operator expr .) ]

    comparission_operator          shift and go to state 65

state 134

    (6) statement -> statement_if statement_elseif statement_else .

    FUNCTION        reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    WHILE           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    DO              reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    FOR             reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    BREAK           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    CONTINUE        reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    RETURN          reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    GLOBAL          reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    INCREMENT       reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    DECREMENT       reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    LPAREN          reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    EXIT            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    DIE             reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    TRUE            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    FALSE           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    IF              reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    FOREACH         reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    EXC_DOT         reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    PLUS            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    MINUS           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    ID              reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    DOLAR           reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    VARIABLE        reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    ELSE            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    RKEY            reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)
    ELSEIF          reduce using rule 6 (statement -> statement_if statement_elseif statement_else .)


state 135

    (27) statement_else -> ELSE . statement_BLOCK_OPT
    (156) statement_BLOCK_OPT -> . statement
    (157) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 80
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 182
    statement                      shift and go to state 79
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 136

    (25) statement_elseif -> ELSEIF expr_paren . statement_BLOCK_OPT
    (156) statement_BLOCK_OPT -> . statement
    (157) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 80
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 183
    statement                      shift and go to state 79
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 137

    (7) statement -> WHILE expr_paren statement_BLOCK_OPT .

    FUNCTION        reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ELSE            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 7 (statement -> WHILE expr_paren statement_BLOCK_OPT .)


state 138

    (21) expr_paren -> LPAREN expr . RPAREN
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    RPAREN          shift and go to state 184
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 139

    (8) statement -> DO statement_BLOCK_OPT WHILE . expr_paren SEMICOLON
    (21) expr_paren -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 77

    expr_paren                     shift and go to state 185

state 140

    (157) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 186


state 141

    (150) statement_MUL -> statement . statement_MUL
    (150) statement_MUL -> . statement statement_MUL
    (151) statement_MUL -> .
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 151 (statement_MUL -> .)
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement                      shift and go to state 141
    statement_MUL                  shift and go to state 187
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 142

    (9) statement -> FOR LPAREN for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    SEMICOLON       shift and go to state 188


state 143

    (32) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (154) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (155) for_expr_COLON_EXPR -> .
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    INTE_DOT        shift and go to state 64
    COLON           shift and go to state 190
    SEMICOLON       reduce using rule 155 (for_expr_COLON_EXPR -> .)
    RPAREN          reduce using rule 155 (for_expr_COLON_EXPR -> .)
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    for_expr_COLON_EXPR            shift and go to state 189
    comparission_operator          shift and go to state 65

state 144

    (11) statement -> BREAK expr_OPT SEMICOLON .

    FUNCTION        reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    DO              reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    FOR             reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    CONTINUE        reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    GLOBAL          reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    INCREMENT       reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    DECREMENT       reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    LPAREN          reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    EXIT            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    DIE             reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    TRUE            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    FALSE           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    IF              reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    FOREACH         reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    PLUS            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    MINUS           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    ID              reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    DOLAR           reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    VARIABLE        reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    RKEY            reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)
    ELSEIF          reduce using rule 11 (statement -> BREAK expr_OPT SEMICOLON .)


state 145

    (12) statement -> CONTINUE expr_OPT SEMICOLON .

    FUNCTION        reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DO              reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FOR             reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    BREAK           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    CONTINUE        reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    GLOBAL          reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    INCREMENT       reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DECREMENT       reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    LPAREN          reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    EXIT            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DIE             reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    TRUE            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FALSE           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    IF              reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    FOREACH         reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    PLUS            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    MINUS           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ID              reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    DOLAR           reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    VARIABLE        reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    RKEY            reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)
    ELSEIF          reduce using rule 12 (statement -> CONTINUE expr_OPT SEMICOLON .)


state 146

    (13) statement -> RETURN expr_return_OPT SEMICOLON .

    FUNCTION        reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DO              reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FOR             reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    CONTINUE        reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    GLOBAL          reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    INCREMENT       reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DECREMENT       reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    LPAREN          reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    EXIT            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DIE             reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ARRAY_TYPE      reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    NUMBER_REAL     reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    TRUE            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FALSE           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    IF              reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    FOREACH         reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    EXC_DOT         reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    PLUS            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    MINUS           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ID              reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    DOLAR           reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    VARIABLE        reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    END_PROGRAM     reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    RKEY            reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)
    ELSEIF          reduce using rule 13 (statement -> RETURN expr_return_OPT SEMICOLON .)


state 147

    (14) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 191


state 148

    (19) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (16) global_var -> . VARIABLE
    (17) global_var -> . DOLAR VARIABLE
    (18) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 88
    DOLAR           shift and go to state 89

    global_var                     shift and go to state 192

state 149

    (17) global_var -> DOLAR VARIABLE .

    COLON           reduce using rule 17 (global_var -> DOLAR VARIABLE .)
    SEMICOLON       reduce using rule 17 (global_var -> DOLAR VARIABLE .)


state 150

    (18) global_var -> DOLAR LKEY . expr RKEY
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 193
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 151

    (79) expr -> variable LBRACKET expr . RBRACKET
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    RBRACKET        shift and go to state 194
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 152

    (84) expr -> variable assign_operator expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
    SEMICOLON       reduce using rule 84 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 84 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 84 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 84 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 84 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 84 (expr -> variable assign_operator expr .)
    AS              reduce using rule 84 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 84 (expr -> variable assign_operator expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

  ! INTE_DOT        [ reduce using rule 84 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 84 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 84 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 84 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 84 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 84 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 84 (expr -> variable assign_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 84 (expr -> variable assign_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 84 (expr -> variable assign_operator expr .) ]

    comparission_operator          shift and go to state 65

state 153

    (85) expr -> variable assign_operator AMPERSAND . expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 22
    expr                           shift and go to state 195
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 154

    (54) arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .
    (54) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (55) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (56) arithmetic_expr -> arithmetic_expr . TIMES arithmetic_expr
    (57) arithmetic_expr -> arithmetic_expr . DIVIDE arithmetic_expr

    PLUS            reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    MINUS           reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    INCREMENT       reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    DECREMENT       reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    LPAREN          reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    EXIT            reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    DIE             reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ARRAY_TYPE      reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    NUMBER_REAL     reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    NUMBER_INTEGER  reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    TRUE            reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    FALSE           reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    EXC_DOT         reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    ID              reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    DOLAR           reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    VARIABLE        reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    RPAREN          reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .)
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108

  ! TIMES           [ reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .) ]
  ! DIVIDE          [ reduce using rule 54 (arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr .) ]
  ! PLUS            [ shift and go to state 196 ]
  ! MINUS           [ shift and go to state 197 ]


state 155

    (58) arithmetic_expr -> LPAREN . arithmetic_expr RPAREN
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL

    LPAREN          shift and go to state 155
    NUMBER_INTEGER  shift and go to state 156
    NUMBER_REAL     shift and go to state 157

    arithmetic_expr                shift and go to state 198

state 156

    (59) arithmetic_expr -> NUMBER_INTEGER .

    PLUS            reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    INCREMENT       reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    DECREMENT       reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    LPAREN          reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    EXIT            reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    DIE             reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    ARRAY_TYPE      reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    NUMBER_REAL     reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    NUMBER_INTEGER  reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    TRUE            reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    FALSE           reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    EXC_DOT         reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    ID              reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    DOLAR           reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    VARIABLE        reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 59 (arithmetic_expr -> NUMBER_INTEGER .)


state 157

    (60) arithmetic_expr -> NUMBER_REAL .

    PLUS            reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    MINUS           reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    TIMES           reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    INCREMENT       reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    DECREMENT       reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    LPAREN          reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    EXIT            reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    DIE             reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    ARRAY_TYPE      reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    NUMBER_REAL     reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    NUMBER_INTEGER  reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    TRUE            reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    FALSE           reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    EXC_DOT         reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    ID              reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    DOLAR           reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    VARIABLE        reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 60 (arithmetic_expr -> NUMBER_REAL .)


state 158

    (55) arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .
    (54) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (55) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (56) arithmetic_expr -> arithmetic_expr . TIMES arithmetic_expr
    (57) arithmetic_expr -> arithmetic_expr . DIVIDE arithmetic_expr

    PLUS            reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    MINUS           reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    INCREMENT       reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    DECREMENT       reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    LPAREN          reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    EXIT            reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    DIE             reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    ARRAY_TYPE      reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    NUMBER_REAL     reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    NUMBER_INTEGER  reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    CONSTANT_ENCAPSED_STRING reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    TRUE            reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    FALSE           reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    EXC_DOT         reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    ID              reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    DOLAR           reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    VARIABLE        reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    RPAREN          reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .)
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108

  ! TIMES           [ reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .) ]
  ! DIVIDE          [ reduce using rule 55 (arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr .) ]
  ! PLUS            [ shift and go to state 196 ]
  ! MINUS           [ shift and go to state 197 ]


state 159

    (56) arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .
    (54) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (55) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (56) arithmetic_expr -> arithmetic_expr . TIMES arithmetic_expr
    (57) arithmetic_expr -> arithmetic_expr . DIVIDE arithmetic_expr

    PLUS            reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    MINUS           reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    TIMES           reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    DIVIDE          reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    INCREMENT       reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    DECREMENT       reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    LPAREN          reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    EXIT            reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    DIE             reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    ARRAY_TYPE      reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    NUMBER_REAL     reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    NUMBER_INTEGER  reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    CONSTANT_ENCAPSED_STRING reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    TRUE            reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    FALSE           reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    EXC_DOT         reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    ID              reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    DOLAR           reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    VARIABLE        reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)
    RPAREN          reduce using rule 56 (arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr .)

  ! PLUS            [ shift and go to state 196 ]
  ! MINUS           [ shift and go to state 197 ]
  ! TIMES           [ shift and go to state 107 ]
  ! DIVIDE          [ shift and go to state 108 ]


state 160

    (57) arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .
    (54) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (55) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (56) arithmetic_expr -> arithmetic_expr . TIMES arithmetic_expr
    (57) arithmetic_expr -> arithmetic_expr . DIVIDE arithmetic_expr

    PLUS            reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    MINUS           reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    TIMES           reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    DIVIDE          reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    INCREMENT       reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    DECREMENT       reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    LPAREN          reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    EXIT            reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    DIE             reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    ARRAY_TYPE      reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    NUMBER_REAL     reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    NUMBER_INTEGER  reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    TRUE            reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    FALSE           reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    EXC_DOT         reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    ID              reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    DOLAR           reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    VARIABLE        reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)
    RPAREN          reduce using rule 57 (arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr .)

  ! PLUS            [ shift and go to state 196 ]
  ! MINUS           [ shift and go to state 197 ]
  ! TIMES           [ shift and go to state 107 ]
  ! DIVIDE          [ shift and go to state 108 ]


state 161

    (114) exit_expr -> LPAREN expr_OPT . RPAREN

    RPAREN          shift and go to state 199


state 162

    (90) expr -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 200


state 163

    (144) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (190) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (191) array_pair_list_ARR_PAIR -> .

    COLON           shift and go to state 202
    RPAREN          reduce using rule 191 (array_pair_list_ARR_PAIR -> .)

    array_pair_list_ARR_PAIR       shift and go to state 201

state 164

    (146) array_pair -> expr . array_pair_ATTR_EXPR_OPT
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (194) array_pair_EXPR_ATTR_OPT -> expr . ATTR_ASSOC
    (192) array_pair_ATTR_EXPR_OPT -> . ATTR_ASSOC expr
    (193) array_pair_ATTR_EXPR_OPT -> .
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    INTE_DOT        shift and go to state 64
    ATTR_ASSOC      shift and go to state 204
    COLON           reduce using rule 193 (array_pair_ATTR_EXPR_OPT -> .)
    RPAREN          reduce using rule 193 (array_pair_ATTR_EXPR_OPT -> .)
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    array_pair_ATTR_EXPR_OPT       shift and go to state 203
    comparission_operator          shift and go to state 65

state 165

    (147) array_pair -> array_pair_EXPR_ATTR_OPT . AMPERSAND variable

    AMPERSAND       shift and go to state 205


state 166

    (24) statement_if -> IF expr_paren statement_BLOCK_OPT .

    ELSEIF          reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ELSE            reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 24 (statement_if -> IF expr_paren statement_BLOCK_OPT .)


state 167

    (29) statement_foreach -> FOREACH LPAREN foreach_first_param . AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT

    AS              shift and go to state 206


state 168

    (30) foreach_first_param -> variable .
    (76) expr -> variable . INCREMENT
    (78) expr -> variable . DECREMENT
    (79) expr -> variable . LBRACKET expr RBRACKET
    (84) expr -> variable . assign_operator expr
    (85) expr -> variable . assign_operator AMPERSAND expr
    (92) expr -> variable .
    (61) assign_operator -> . ADD_ASSIGN
    (62) assign_operator -> . SUB_ASSIGN
    (63) assign_operator -> . MOD_ASSIGN
    (64) assign_operator -> . PLUS_ASSIGN
    (65) assign_operator -> . DIVIDE_ASSIGN
    (66) assign_operator -> . ASSIGN

  ! reduce/reduce conflict for AS resolved using rule 30 (foreach_first_param -> variable .)
    AS              reduce using rule 30 (foreach_first_param -> variable .)
    INCREMENT       shift and go to state 92
    DECREMENT       shift and go to state 93
    LBRACKET        shift and go to state 94
    INTE_DOT        reduce using rule 92 (expr -> variable .)
    EQUALS          reduce using rule 92 (expr -> variable .)
    GREAT_THAN      reduce using rule 92 (expr -> variable .)
    LESS_THAN       reduce using rule 92 (expr -> variable .)
    LESS_EQUAL      reduce using rule 92 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 92 (expr -> variable .)
    NOT_EQUAL       reduce using rule 92 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 92 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 92 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 96
    SUB_ASSIGN      shift and go to state 97
    MOD_ASSIGN      shift and go to state 98
    PLUS_ASSIGN     shift and go to state 99
    DIVIDE_ASSIGN   shift and go to state 100
    ASSIGN          shift and go to state 101

  ! AS              [ reduce using rule 92 (expr -> variable .) ]

    assign_operator                shift and go to state 95

state 169

    (31) foreach_first_param -> expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    AS              reduce using rule 31 (foreach_first_param -> expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 170

    (116) variable -> function_call .
    (91) expr -> function_call .

  ! reduce/reduce conflict for INTE_DOT resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for EQUALS resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_THAN resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for GREAT_EQUAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for LEFT_LOGICAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for RIGHT_LOGICAL resolved using rule 91 (expr -> function_call .)
  ! reduce/reduce conflict for AS resolved using rule 91 (expr -> function_call .)
    INCREMENT       reduce using rule 116 (variable -> function_call .)
    DECREMENT       reduce using rule 116 (variable -> function_call .)
    LBRACKET        reduce using rule 116 (variable -> function_call .)
    ADD_ASSIGN      reduce using rule 116 (variable -> function_call .)
    SUB_ASSIGN      reduce using rule 116 (variable -> function_call .)
    MOD_ASSIGN      reduce using rule 116 (variable -> function_call .)
    PLUS_ASSIGN     reduce using rule 116 (variable -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 116 (variable -> function_call .)
    ASSIGN          reduce using rule 116 (variable -> function_call .)
    INTE_DOT        reduce using rule 91 (expr -> function_call .)
    EQUALS          reduce using rule 91 (expr -> function_call .)
    GREAT_THAN      reduce using rule 91 (expr -> function_call .)
    LESS_THAN       reduce using rule 91 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 91 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 91 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 91 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 91 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 91 (expr -> function_call .)
    AS              reduce using rule 91 (expr -> function_call .)

  ! AS              [ reduce using rule 116 (variable -> function_call .) ]
  ! INTE_DOT        [ reduce using rule 116 (variable -> function_call .) ]
  ! EQUALS          [ reduce using rule 116 (variable -> function_call .) ]
  ! GREAT_THAN      [ reduce using rule 116 (variable -> function_call .) ]
  ! LESS_THAN       [ reduce using rule 116 (variable -> function_call .) ]
  ! LESS_EQUAL      [ reduce using rule 116 (variable -> function_call .) ]
  ! GREAT_EQUAL     [ reduce using rule 116 (variable -> function_call .) ]
  ! NOT_EQUAL       [ reduce using rule 116 (variable -> function_call .) ]
  ! LEFT_LOGICAL    [ reduce using rule 116 (variable -> function_call .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 116 (variable -> function_call .) ]


state 171

    (176) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LBRACKET        reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 176 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 172

    (122) selector -> LBRACKET selector_EXPR . RBRACKET

    RBRACKET        shift and go to state 207


state 173

    (180) selector_EXPR -> expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    RBRACKET        reduce using rule 180 (selector_EXPR -> expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 174

    (121) compound_variable -> DOLAR LKEY expr . RKEY
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    RKEY            shift and go to state 208
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 175

    (123) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN . parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (124) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (125) parameter_list -> .
    (126) parameter -> . parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (127) parameter_type -> . INT_TYPE
    (128) parameter_type -> . BOOLEAN_TYPE
    (129) parameter_type -> . STRING_TYPE
    (130) parameter_type -> . FLOAT_TYPE
    (131) parameter_type -> . ARRAY_TYPE
    (132) parameter_type -> . BOOL_TYPE
    (133) parameter_type -> . REAL_TYPE
    (134) parameter_type -> . DOUBLE_TYPE
    (135) parameter_type -> .

    RPAREN          reduce using rule 125 (parameter_list -> .)
    INT_TYPE        shift and go to state 212
    BOOLEAN_TYPE    shift and go to state 213
    STRING_TYPE     shift and go to state 214
    FLOAT_TYPE      shift and go to state 215
    ARRAY_TYPE      shift and go to state 216
    BOOL_TYPE       shift and go to state 217
    REAL_TYPE       shift and go to state 218
    DOUBLE_TYPE     shift and go to state 219
    AMPERSAND       reduce using rule 135 (parameter_type -> .)
    VARIABLE        reduce using rule 135 (parameter_type -> .)

    parameter_list                 shift and go to state 209
    parameter                      shift and go to state 210
    parameter_type                 shift and go to state 211

state 176

    (34) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INCREMENT       reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DECREMENT       reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ADD_ASSIGN      reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    SUB_ASSIGN      reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MOD_ASSIGN      reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS_ASSIGN     reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ASSIGN          reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 34 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 177

    (36) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 36 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 178

    (162) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (38) function_call_parameter -> . variable
    (39) function_call_parameter -> . AMPERSAND VARIABLE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       shift and go to state 128
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    function_call_parameter        shift and go to state 220
    variable                       shift and go to state 127
    base_variable                  shift and go to state 37
    function_call                  shift and go to state 91
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 179

    (39) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 39 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 39 (function_call_parameter -> AMPERSAND VARIABLE .)


state 180

    (87) expr -> LPAREN type_cast_operator RPAREN expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
    SEMICOLON       reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

  ! INTE_DOT        [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 87 (expr -> LPAREN type_cast_operator RPAREN expr .) ]

    comparission_operator          shift and go to state 65

state 181

    (82) expr -> expr INTE_DOT expr DDOT . expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 221
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 182

    (27) statement_else -> ELSE statement_BLOCK_OPT .

    ELSE            reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    PLUS            reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 27 (statement_else -> ELSE statement_BLOCK_OPT .)


state 183

    (25) statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .

    ELSE            reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    WHILE           reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DO              reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FOR             reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    BREAK           reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    RETURN          reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    LPAREN          reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    EXIT            reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DIE             reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    TRUE            reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FALSE           reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    IF              reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    FOREACH         reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    PLUS            reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    MINUS           reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ID              reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    DOLAR           reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    RKEY            reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 25 (statement_elseif -> ELSEIF expr_paren statement_BLOCK_OPT .)


state 184

    (21) expr_paren -> LPAREN expr RPAREN .

    LKEY            reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    DO              reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    FOR             reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    DIE             reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    IF              reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    EXC_DOT         reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    ID              reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 21 (expr_paren -> LPAREN expr RPAREN .)


state 185

    (8) statement -> DO statement_BLOCK_OPT WHILE expr_paren . SEMICOLON

    SEMICOLON       shift and go to state 222


state 186

    (157) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PLUS            reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 157 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 187

    (150) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 150 (statement_MUL -> statement statement_MUL .)


state 188

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (32) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (33) for_expr_OPT -> .
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    SEMICOLON       reduce using rule 33 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 223
    expr                           shift and go to state 143
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 189

    (32) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 32 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 32 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 190

    (154) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 224
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 191

    (14) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOREACH         reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXC_DOT         reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    PLUS            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 14 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 192

    (19) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (19) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (20) statement_COLON_GLOBAL -> .

    COLON           shift and go to state 148
    SEMICOLON       reduce using rule 20 (statement_COLON_GLOBAL -> .)

    statement_COLON_GLOBAL         shift and go to state 225

state 193

    (18) global_var -> DOLAR LKEY expr . RKEY
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    RKEY            shift and go to state 226
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 194

    (79) expr -> variable LBRACKET expr RBRACKET .

    SEMICOLON       reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    COLON           reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    AS              reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 79 (expr -> variable LBRACKET expr RBRACKET .)


state 195

    (85) expr -> variable assign_operator AMPERSAND expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
    SEMICOLON       reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

  ! INTE_DOT        [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 85 (expr -> variable assign_operator AMPERSAND expr .) ]

    comparission_operator          shift and go to state 65

state 196

    (54) arithmetic_expr -> arithmetic_expr PLUS . arithmetic_expr
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL

    LPAREN          shift and go to state 155
    NUMBER_INTEGER  shift and go to state 156
    NUMBER_REAL     shift and go to state 157

    arithmetic_expr                shift and go to state 154

state 197

    (55) arithmetic_expr -> arithmetic_expr MINUS . arithmetic_expr
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL

    LPAREN          shift and go to state 155
    NUMBER_INTEGER  shift and go to state 156
    NUMBER_REAL     shift and go to state 157

    arithmetic_expr                shift and go to state 158

state 198

    (58) arithmetic_expr -> LPAREN arithmetic_expr . RPAREN
    (54) arithmetic_expr -> arithmetic_expr . PLUS arithmetic_expr
    (55) arithmetic_expr -> arithmetic_expr . MINUS arithmetic_expr
    (56) arithmetic_expr -> arithmetic_expr . TIMES arithmetic_expr
    (57) arithmetic_expr -> arithmetic_expr . DIVIDE arithmetic_expr

    RPAREN          shift and go to state 131
    PLUS            shift and go to state 196
    MINUS           shift and go to state 197
    TIMES           shift and go to state 107
    DIVIDE          shift and go to state 108


state 199

    (114) exit_expr -> LPAREN expr_OPT RPAREN .

    SEMICOLON       reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    INTE_DOT        reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    EQUALS          reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    GREAT_THAN      reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LESS_THAN       reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LESS_EQUAL      reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    GREAT_EQUAL     reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    NOT_EQUAL       reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    LEFT_LOGICAL    reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RIGHT_LOGICAL   reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RPAREN          reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    DDOT            reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    COLON           reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RBRACKET        reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    ATTR_ASSOC      reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    AS              reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)
    RKEY            reduce using rule 114 (exit_expr -> LPAREN expr_OPT RPAREN .)


state 200

    (90) expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 90 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 201

    (144) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 144 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 202

    (190) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (146) array_pair -> . expr array_pair_ATTR_EXPR_OPT
    (147) array_pair -> . array_pair_EXPR_ATTR_OPT AMPERSAND variable
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (194) array_pair_EXPR_ATTR_OPT -> . expr ATTR_ASSOC
    (195) array_pair_EXPR_ATTR_OPT -> .
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    AMPERSAND       reduce using rule 195 (array_pair_EXPR_ATTR_OPT -> .)
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    array_pair                     shift and go to state 227
    expr                           shift and go to state 164
    array_pair_EXPR_ATTR_OPT       shift and go to state 165
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 203

    (146) array_pair -> expr array_pair_ATTR_EXPR_OPT .

    COLON           reduce using rule 146 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)
    RPAREN          reduce using rule 146 (array_pair -> expr array_pair_ATTR_EXPR_OPT .)


state 204

    (194) array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .
    (192) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC . expr
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    AMPERSAND       reduce using rule 194 (array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    expr                           shift and go to state 228
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 205

    (147) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND . variable
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    variable                       shift and go to state 229
    base_variable                  shift and go to state 37
    function_call                  shift and go to state 91
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 206

    (29) statement_foreach -> FOREACH LPAREN foreach_first_param AS . ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (15) ampersand_variable -> . AMPERSAND_OPT VARIABLE
    (158) AMPERSAND_OPT -> . AMPERSAND
    (159) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 49
    VARIABLE        reduce using rule 159 (AMPERSAND_OPT -> .)

    ampersand_variable             shift and go to state 230
    AMPERSAND_OPT                  shift and go to state 231

state 207

    (122) selector -> LBRACKET selector_EXPR RBRACKET .

    LBRACKET        reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INCREMENT       reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DECREMENT       reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ADD_ASSIGN      reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SUB_ASSIGN      reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    MOD_ASSIGN      reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    PLUS_ASSIGN     reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ASSIGN          reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    SEMICOLON       reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    INTE_DOT        reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    EQUALS          reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_THAN      reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_THAN       reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LESS_EQUAL      reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    GREAT_EQUAL     reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    NOT_EQUAL       reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    LEFT_LOGICAL    reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RPAREN          reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    DDOT            reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    COLON           reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RBRACKET        reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    ATTR_ASSOC      reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    AS              reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)
    RKEY            reduce using rule 122 (selector -> LBRACKET selector_EXPR RBRACKET .)


state 208

    (121) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    AS              reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 121 (compound_variable -> DOLAR LKEY expr RKEY .)


state 209

    (123) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list . RPAREN LKEY inner_statement_MUL RKEY

    RPAREN          shift and go to state 232


state 210

    (124) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (172) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (173) parameter_list_COLON_PARAMETER -> .

    COLON           shift and go to state 234
    RPAREN          reduce using rule 173 (parameter_list_COLON_PARAMETER -> .)

    parameter_list_COLON_PARAMETER shift and go to state 233

state 211

    (126) parameter -> parameter_type . AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (158) AMPERSAND_OPT -> . AMPERSAND
    (159) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 49
    VARIABLE        reduce using rule 159 (AMPERSAND_OPT -> .)

    AMPERSAND_OPT                  shift and go to state 235

state 212

    (127) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 127 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 127 (parameter_type -> INT_TYPE .)


state 213

    (128) parameter_type -> BOOLEAN_TYPE .

    AMPERSAND       reduce using rule 128 (parameter_type -> BOOLEAN_TYPE .)
    VARIABLE        reduce using rule 128 (parameter_type -> BOOLEAN_TYPE .)


state 214

    (129) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 129 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 129 (parameter_type -> STRING_TYPE .)


state 215

    (130) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 130 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 130 (parameter_type -> FLOAT_TYPE .)


state 216

    (131) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 131 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 131 (parameter_type -> ARRAY_TYPE .)


state 217

    (132) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 132 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 132 (parameter_type -> BOOL_TYPE .)


state 218

    (133) parameter_type -> REAL_TYPE .

    AMPERSAND       reduce using rule 133 (parameter_type -> REAL_TYPE .)
    VARIABLE        reduce using rule 133 (parameter_type -> REAL_TYPE .)


state 219

    (134) parameter_type -> DOUBLE_TYPE .

    AMPERSAND       reduce using rule 134 (parameter_type -> DOUBLE_TYPE .)
    VARIABLE        reduce using rule 134 (parameter_type -> DOUBLE_TYPE .)


state 220

    (162) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (162) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (163) function_call_list_COLON_FUNCTION -> .

    COLON           shift and go to state 178
    RPAREN          reduce using rule 163 (function_call_list_COLON_FUNCTION -> .)

    function_call_list_COLON_FUNCTION shift and go to state 236

state 221

    (82) expr -> expr INTE_DOT expr DDOT expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
    SEMICOLON       reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .)
    AS              reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

  ! INTE_DOT        [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 82 (expr -> expr INTE_DOT expr DDOT expr .) ]

    comparission_operator          shift and go to state 65

state 222

    (8) statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .

    FUNCTION        reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DO              reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FOR             reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    CONTINUE        reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    GLOBAL          reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    INCREMENT       reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DECREMENT       reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    LPAREN          reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    EXIT            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DIE             reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ARRAY_TYPE      reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    NUMBER_REAL     reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    TRUE            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FALSE           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    IF              reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    FOREACH         reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    EXC_DOT         reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    PLUS            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    MINUS           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ID              reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    DOLAR           reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    VARIABLE        reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    END_PROGRAM     reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    RKEY            reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)
    ELSEIF          reduce using rule 8 (statement -> DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON .)


state 223

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT

    SEMICOLON       shift and go to state 237


state 224

    (154) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (154) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (155) for_expr_COLON_EXPR -> .
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    INTE_DOT        shift and go to state 64
    COLON           shift and go to state 190
    SEMICOLON       reduce using rule 155 (for_expr_COLON_EXPR -> .)
    RPAREN          reduce using rule 155 (for_expr_COLON_EXPR -> .)
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    for_expr_COLON_EXPR            shift and go to state 238
    comparission_operator          shift and go to state 65

state 225

    (19) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 19 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 226

    (18) global_var -> DOLAR LKEY expr RKEY .

    COLON           reduce using rule 18 (global_var -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 18 (global_var -> DOLAR LKEY expr RKEY .)


state 227

    (190) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (190) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (191) array_pair_list_ARR_PAIR -> .

    COLON           shift and go to state 202
    RPAREN          reduce using rule 191 (array_pair_list_ARR_PAIR -> .)

    array_pair_list_ARR_PAIR       shift and go to state 239

state 228

    (192) array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .
    (82) expr -> expr . INTE_DOT expr DDOT expr
    (83) expr -> expr . comparission_operator expr
    (67) comparission_operator -> . EQUALS
    (68) comparission_operator -> . GREAT_THAN
    (69) comparission_operator -> . LESS_THAN
    (70) comparission_operator -> . LESS_EQUAL
    (71) comparission_operator -> . GREAT_EQUAL
    (72) comparission_operator -> . NOT_EQUAL
    (73) comparission_operator -> . LEFT_LOGICAL
    (74) comparission_operator -> . RIGHT_LOGICAL

    COLON           reduce using rule 192 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    RPAREN          reduce using rule 192 (array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 66
    GREAT_THAN      shift and go to state 67
    LESS_THAN       shift and go to state 68
    LESS_EQUAL      shift and go to state 69
    GREAT_EQUAL     shift and go to state 70
    NOT_EQUAL       shift and go to state 71
    LEFT_LOGICAL    shift and go to state 72
    RIGHT_LOGICAL   shift and go to state 73

    comparission_operator          shift and go to state 65

state 229

    (147) array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .

    COLON           reduce using rule 147 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)
    RPAREN          reduce using rule 147 (array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable .)


state 230

    (29) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable . statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (160) statement_attr_variable_OPT -> . ATTR_ASSOC ampersand_variable
    (161) statement_attr_variable_OPT -> .

    ATTR_ASSOC      shift and go to state 241
    RPAREN          reduce using rule 161 (statement_attr_variable_OPT -> .)

    statement_attr_variable_OPT    shift and go to state 240

state 231

    (15) ampersand_variable -> AMPERSAND_OPT . VARIABLE

    VARIABLE        shift and go to state 242


state 232

    (123) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN . LKEY inner_statement_MUL RKEY

    LKEY            shift and go to state 243


state 233

    (124) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 124 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 234

    (172) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (126) parameter -> . parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT
    (127) parameter_type -> . INT_TYPE
    (128) parameter_type -> . BOOLEAN_TYPE
    (129) parameter_type -> . STRING_TYPE
    (130) parameter_type -> . FLOAT_TYPE
    (131) parameter_type -> . ARRAY_TYPE
    (132) parameter_type -> . BOOL_TYPE
    (133) parameter_type -> . REAL_TYPE
    (134) parameter_type -> . DOUBLE_TYPE
    (135) parameter_type -> .

    INT_TYPE        shift and go to state 212
    BOOLEAN_TYPE    shift and go to state 213
    STRING_TYPE     shift and go to state 214
    FLOAT_TYPE      shift and go to state 215
    ARRAY_TYPE      shift and go to state 216
    BOOL_TYPE       shift and go to state 217
    REAL_TYPE       shift and go to state 218
    DOUBLE_TYPE     shift and go to state 219
    AMPERSAND       reduce using rule 135 (parameter_type -> .)
    VARIABLE        reduce using rule 135 (parameter_type -> .)

    parameter                      shift and go to state 244
    parameter_type                 shift and go to state 211

state 235

    (126) parameter -> parameter_type AMPERSAND_OPT . VARIABLE parameter_ASSIGN_STATIC_OPT

    VARIABLE        shift and go to state 245


state 236

    (162) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 162 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 237

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT RPAREN statement_BLOCK_OPT
    (32) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (33) for_expr_OPT -> .
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RPAREN          reduce using rule 33 (for_expr_OPT -> .)
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    for_expr_OPT                   shift and go to state 246
    expr                           shift and go to state 143
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 238

    (154) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 154 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 154 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 239

    (190) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 190 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 240

    (29) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 247


state 241

    (160) statement_attr_variable_OPT -> ATTR_ASSOC . ampersand_variable
    (15) ampersand_variable -> . AMPERSAND_OPT VARIABLE
    (158) AMPERSAND_OPT -> . AMPERSAND
    (159) AMPERSAND_OPT -> .

    AMPERSAND       shift and go to state 49
    VARIABLE        reduce using rule 159 (AMPERSAND_OPT -> .)

    ampersand_variable             shift and go to state 248
    AMPERSAND_OPT                  shift and go to state 231

state 242

    (15) ampersand_variable -> AMPERSAND_OPT VARIABLE .

    ATTR_ASSOC      reduce using rule 15 (ampersand_variable -> AMPERSAND_OPT VARIABLE .)
    RPAREN          reduce using rule 15 (ampersand_variable -> AMPERSAND_OPT VARIABLE .)


state 243

    (123) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY . inner_statement_MUL RKEY
    (152) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (153) inner_statement_MUL -> .
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (123) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 153 (inner_statement_MUL -> .)
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement_MUL            shift and go to state 249
    inner_statement                shift and go to state 250
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 244

    (172) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (172) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (173) parameter_list_COLON_PARAMETER -> .

    COLON           shift and go to state 234
    RPAREN          reduce using rule 173 (parameter_list_COLON_PARAMETER -> .)

    parameter_list_COLON_PARAMETER shift and go to state 251

state 245

    (126) parameter -> parameter_type AMPERSAND_OPT VARIABLE . parameter_ASSIGN_STATIC_OPT
    (174) parameter_ASSIGN_STATIC_OPT -> . ASSIGN static_scalar
    (175) parameter_ASSIGN_STATIC_OPT -> .

    ASSIGN          shift and go to state 253
    COLON           reduce using rule 175 (parameter_ASSIGN_STATIC_OPT -> .)
    RPAREN          reduce using rule 175 (parameter_ASSIGN_STATIC_OPT -> .)

    parameter_ASSIGN_STATIC_OPT    shift and go to state 252

state 246

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 254


state 247

    (29) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN . statement_BLOCK_OPT
    (156) statement_BLOCK_OPT -> . statement
    (157) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 80
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 255
    statement                      shift and go to state 79
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 248

    (160) statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable .

    RPAREN          reduce using rule 160 (statement_attr_variable_OPT -> ATTR_ASSOC ampersand_variable .)


state 249

    (123) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 256


state 250

    (152) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (152) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (153) inner_statement_MUL -> .
    (3) inner_statement -> . function_declaration_statement
    (4) inner_statement -> . statement
    (123) function_declaration_statement -> . FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RKEY            reduce using rule 153 (inner_statement_MUL -> .)
    FUNCTION        shift and go to state 8
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    inner_statement                shift and go to state 250
    inner_statement_MUL            shift and go to state 257
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 251

    (172) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 172 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 252

    (126) parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .

    COLON           reduce using rule 126 (parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .)
    RPAREN          reduce using rule 126 (parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT .)


state 253

    (174) parameter_ASSIGN_STATIC_OPT -> ASSIGN . static_scalar
    (136) static_scalar -> . common_scalar
    (137) static_scalar -> . PLUS static_scalar
    (138) static_scalar -> . MINUS static_scalar
    (139) common_scalar -> . NUMBER_REAL
    (140) common_scalar -> . NUMBER_INTEGER
    (141) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 260
    MINUS           shift and go to state 261
    NUMBER_REAL     shift and go to state 262
    NUMBER_INTEGER  shift and go to state 263
    CONSTANT_ENCAPSED_STRING shift and go to state 264

    static_scalar                  shift and go to state 258
    common_scalar                  shift and go to state 259

state 254

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN . statement_BLOCK_OPT
    (156) statement_BLOCK_OPT -> . statement
    (157) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (5) statement -> . expr SEMICOLON
    (6) statement -> . statement_if statement_elseif statement_else
    (7) statement -> . WHILE expr_paren statement_BLOCK_OPT
    (8) statement -> . DO statement_BLOCK_OPT WHILE expr_paren SEMICOLON
    (9) statement -> . FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT
    (10) statement -> . statement_foreach
    (11) statement -> . BREAK expr_OPT SEMICOLON
    (12) statement -> . CONTINUE expr_OPT SEMICOLON
    (13) statement -> . RETURN expr_return_OPT SEMICOLON
    (14) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (75) expr -> . INCREMENT variable
    (76) expr -> . variable INCREMENT
    (77) expr -> . DECREMENT variable
    (78) expr -> . variable DECREMENT
    (79) expr -> . variable LBRACKET expr RBRACKET
    (80) expr -> . LPAREN expr RPAREN
    (81) expr -> . unary_operator expr
    (82) expr -> . expr INTE_DOT expr DDOT expr
    (83) expr -> . expr comparission_operator expr
    (84) expr -> . variable assign_operator expr
    (85) expr -> . variable assign_operator AMPERSAND expr
    (86) expr -> . arithmetic_expr expr
    (87) expr -> . LPAREN type_cast_operator RPAREN expr
    (88) expr -> . EXIT expr_EXIT
    (89) expr -> . DIE expr_EXIT
    (90) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (91) expr -> . function_call
    (92) expr -> . variable
    (93) expr -> . NUMBER_REAL
    (94) expr -> . NUMBER_INTEGER
    (95) expr -> . CONSTANT_ENCAPSED_STRING
    (96) expr -> . TRUE
    (97) expr -> . FALSE
    (24) statement_if -> . IF expr_paren statement_BLOCK_OPT
    (29) statement_foreach -> . FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT
    (115) variable -> . base_variable
    (116) variable -> . function_call
    (42) unary_operator -> . EXC_DOT
    (43) unary_operator -> . PLUS
    (44) unary_operator -> . MINUS
    (54) arithmetic_expr -> . arithmetic_expr PLUS arithmetic_expr
    (55) arithmetic_expr -> . arithmetic_expr MINUS arithmetic_expr
    (56) arithmetic_expr -> . arithmetic_expr TIMES arithmetic_expr
    (57) arithmetic_expr -> . arithmetic_expr DIVIDE arithmetic_expr
    (58) arithmetic_expr -> . LPAREN arithmetic_expr RPAREN
    (59) arithmetic_expr -> . NUMBER_INTEGER
    (60) arithmetic_expr -> . NUMBER_REAL
    (34) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (35) function_call -> . base_variable
    (117) base_variable -> . reference_variable
    (118) base_variable -> . simple_indirect_reference_DOLAR reference_variable
    (119) reference_variable -> . compound_variable reference_variable_SELECTOR
    (178) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (179) simple_indirect_reference_DOLAR -> .
    (120) compound_variable -> . VARIABLE
    (121) compound_variable -> . DOLAR LKEY expr RKEY

  ! shift/reduce conflict for DOLAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    LKEY            shift and go to state 80
    WHILE           shift and go to state 13
    DO              shift and go to state 14
    FOR             shift and go to state 15
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    GLOBAL          shift and go to state 20
    INCREMENT       shift and go to state 21
    DECREMENT       shift and go to state 23
    LPAREN          shift and go to state 10
    EXIT            shift and go to state 26
    DIE             shift and go to state 27
    ARRAY_TYPE      shift and go to state 28
    NUMBER_REAL     shift and go to state 30
    NUMBER_INTEGER  shift and go to state 31
    CONSTANT_ENCAPSED_STRING shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    IF              shift and go to state 35
    FOREACH         shift and go to state 36
    EXC_DOT         shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    ID              shift and go to state 9
    DOLAR           shift and go to state 44
    VARIABLE        shift and go to state 45

  ! VARIABLE        [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]
  ! DOLAR           [ reduce using rule 179 (simple_indirect_reference_DOLAR -> .) ]

    statement_BLOCK_OPT            shift and go to state 265
    statement                      shift and go to state 79
    expr                           shift and go to state 11
    statement_if                   shift and go to state 12
    statement_foreach              shift and go to state 16
    variable                       shift and go to state 22
    unary_operator                 shift and go to state 24
    arithmetic_expr                shift and go to state 25
    function_call                  shift and go to state 29
    base_variable                  shift and go to state 37
    reference_variable             shift and go to state 41
    simple_indirect_reference_DOLAR shift and go to state 42
    compound_variable              shift and go to state 43

state 255

    (29) statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 29 (statement_foreach -> FOREACH LPAREN foreach_first_param AS ampersand_variable statement_attr_variable_OPT RPAREN statement_BLOCK_OPT .)


state 256

    (123) function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    PLUS            reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 123 (function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY .)


state 257

    (152) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 152 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 258

    (174) parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .

    COLON           reduce using rule 174 (parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .)
    RPAREN          reduce using rule 174 (parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar .)


state 259

    (136) static_scalar -> common_scalar .

    COLON           reduce using rule 136 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 136 (static_scalar -> common_scalar .)


state 260

    (137) static_scalar -> PLUS . static_scalar
    (136) static_scalar -> . common_scalar
    (137) static_scalar -> . PLUS static_scalar
    (138) static_scalar -> . MINUS static_scalar
    (139) common_scalar -> . NUMBER_REAL
    (140) common_scalar -> . NUMBER_INTEGER
    (141) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 260
    MINUS           shift and go to state 261
    NUMBER_REAL     shift and go to state 262
    NUMBER_INTEGER  shift and go to state 263
    CONSTANT_ENCAPSED_STRING shift and go to state 264

    static_scalar                  shift and go to state 266
    common_scalar                  shift and go to state 259

state 261

    (138) static_scalar -> MINUS . static_scalar
    (136) static_scalar -> . common_scalar
    (137) static_scalar -> . PLUS static_scalar
    (138) static_scalar -> . MINUS static_scalar
    (139) common_scalar -> . NUMBER_REAL
    (140) common_scalar -> . NUMBER_INTEGER
    (141) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 260
    MINUS           shift and go to state 261
    NUMBER_REAL     shift and go to state 262
    NUMBER_INTEGER  shift and go to state 263
    CONSTANT_ENCAPSED_STRING shift and go to state 264

    static_scalar                  shift and go to state 267
    common_scalar                  shift and go to state 259

state 262

    (139) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 139 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 139 (common_scalar -> NUMBER_REAL .)


state 263

    (140) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 140 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 140 (common_scalar -> NUMBER_INTEGER .)


state 264

    (141) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 141 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 141 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 265

    (9) statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    PLUS            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 9 (statement -> FOR LPAREN for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT RPAREN statement_BLOCK_OPT .)


state 266

    (137) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 137 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 137 (static_scalar -> PLUS static_scalar .)


state 267

    (138) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 138 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 138 (static_scalar -> MINUS static_scalar .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOLAR in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 5 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 5 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 10 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 10 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 12 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 14 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 14 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 17 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 17 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 18 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 18 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 19 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 19 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 21 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 21 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 23 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 23 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 24 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 24 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 25 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 25 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 43 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 44 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 50 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 50 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 53 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 53 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 64 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 64 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 65 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 65 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 74 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 76 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 76 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 77 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 77 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 80 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 80 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 81 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 81 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 94 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 94 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 95 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 95 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 103 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 103 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 104 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 104 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 104 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 111 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 111 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 113 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 113 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 114 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 114 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 115 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 115 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 119 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 120 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 120 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 121 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 123 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 123 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 130 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 130 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 133 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 133 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 135 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 135 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 136 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 136 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 141 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 141 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 150 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 150 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 152 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 152 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 152 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 152 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 152 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 152 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 153 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 153 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 178 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 178 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 180 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 180 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 180 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 180 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 180 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 180 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 180 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 180 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 180 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 181 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 181 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 188 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 188 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 190 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 190 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 195 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 195 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 195 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 195 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 195 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 195 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 195 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 195 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 195 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 202 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 202 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 204 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 204 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 205 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 205 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 221 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 221 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 221 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 221 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 221 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 221 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 221 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 221 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 221 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 237 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 237 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 243 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 243 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 247 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 247 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 250 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 250 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 254 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 254 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (expr -> function_call)
WARNING: rejected rule (variable -> function_call) in state 29
WARNING: reduce/reduce conflict in state 30 resolved using rule (arithmetic_expr -> NUMBER_REAL)
WARNING: rejected rule (expr -> NUMBER_REAL) in state 30
WARNING: reduce/reduce conflict in state 31 resolved using rule (arithmetic_expr -> NUMBER_INTEGER)
WARNING: rejected rule (expr -> NUMBER_INTEGER) in state 31
WARNING: reduce/reduce conflict in state 37 resolved using rule (function_call -> base_variable)
WARNING: rejected rule (variable -> base_variable) in state 37
WARNING: reduce/reduce conflict in state 168 resolved using rule (foreach_first_param -> variable)
WARNING: rejected rule (expr -> variable) in state 168
WARNING: reduce/reduce conflict in state 170 resolved using rule (expr -> function_call)
WARNING: rejected rule (variable -> function_call) in state 170
WARNING: Rule (variable -> base_variable) is never reduced

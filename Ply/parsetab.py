
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_ASSIGN AMPERSAND AND APOSTROFE ARRAY_TYPE ARROBA AS ASPAS ASSIGN ATTR_ASSOC BEGIN_PROGRAM BOOLEAN_TYPE BOOL_TYPE BREAK CASE CLONE COLON COMMENT_MULTI COMMENT_SINGLE CONCATENATE CONSTANT_ENCAPSED_STRING CONTINUE CRASE DDOT DECLARE DECREMENT DIE DIVIDE DIVIDE_ASSIGN DO DOLAR DOUBLE_TYPE ELSE ELSEIF ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDWHILE END_PROGRAM EQUAL EXIT FALSE FLOAT_TYPE FOR FOREACH FUNCTION GLOBAL GREAT_EQUAL GREAT_THAN ID IDENTATION IF INCREMENT INTE_DOT INT_TYPE LBRACKET LEFT_LOGICAL LESS_EQUAL LESS_THAN LIST LKEY LPAREN MINUS MOD_ASSIGN NOT_EQUAL NUMBER_INTEGER NUMBER_REAL OR PERCENT PLUS PLUS_ASSIGN RBRACKET REAL_TYPE RETURN RIGHT_LOGICAL RKEY RPAREN SEMICOLON STRING STRING_TYPE SUB_ASSIGN SWITCH TIMES TRUE UNSET VAR VARIABLE WHILE\n  main : BEGIN_PROGRAM main_INNER END_PROGRAM \n  \n  main_INNER : inner_statement main_INNER\n    | \n  \n  inner_statement : function_declaration_statement \n    | \n  \n  AMPERSAND_OPT : AMPERSAND\n    | \n  \n  function_declaration_statement : FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement  RKEY\n  \n  INNER_STATEMENT_OPT : inner_statement \n    |  \n  \n  parameter_list : parameter parameter_list_COLON_PARAMETER \n  \n  parameter_list_COLON_PARAMETER : COLON parameter parameter_list_COLON_PARAMETER\n    | \n   \n  parameter : parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT\n  \n  parameter_type : INT_TYPE\n    | BOOLEAN_TYPE\n    | STRING_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE \n    | BOOL_TYPE\n    | REAL_TYPE\n    | DOUBLE_TYPE\n    | \n  \n  parameter_ASSIGN_STATIC_OPT : ASSIGN static_scalar\n    |\n  \n  static_scalar : common_scalar\n    | PLUS static_scalar\n    | MINUS static_scalar\n    \n  \n  common_scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  static_scalar_OPT : static_array_pair_list\n    | \n  \n  static_array_pair_list : static_array_pair static_array_pair_list_COLON_STATIC static_array_pair_list_COLON \n  \n  static_array_pair_list_COLON_STATIC : COLON static_array_pair static_array_pair_list_COLON_STATIC\n    | \n  \n  static_array_pair_list_COLON : COLON\n    | \n   \n  static_array_pair : static_scalar static_array_pair_ATTR_STATIC\n  \n  static_array_pair_ATTR_STATIC : ATTR_ASSOC static_scalar\n    | \n  '
    
_lr_action_items = {'BEGIN_PROGRAM':([0,],[2,]),'$end':([1,7,],[0,-1,]),'END_PROGRAM':([2,3,4,5,8,35,],[-3,7,-3,-4,-2,-8,]),'FUNCTION':([2,4,5,28,35,],[6,6,-4,6,-8,]),'RKEY':([5,28,31,35,],[-4,-5,35,-8,]),'AMPERSAND':([6,12,15,16,17,18,19,20,21,22,23,26,],[10,-23,10,-15,-16,-17,-18,-19,-20,-21,-22,-23,]),'ID':([6,9,10,],[-7,11,-6,]),'VARIABLE':([10,12,15,16,17,18,19,20,21,22,23,26,27,],[-6,-23,-7,-15,-16,-17,-18,-19,-20,-21,-22,-23,30,]),'LPAREN':([11,],[12,]),'INT_TYPE':([12,26,],[16,16,]),'BOOLEAN_TYPE':([12,26,],[17,17,]),'STRING_TYPE':([12,26,],[18,18,]),'FLOAT_TYPE':([12,26,],[19,19,]),'ARRAY_TYPE':([12,26,],[20,20,]),'BOOL_TYPE':([12,26,],[21,21,]),'REAL_TYPE':([12,26,],[22,22,]),'DOUBLE_TYPE':([12,26,],[23,23,]),'RPAREN':([13,14,25,29,30,32,33,36,37,40,41,42,43,44,],[24,-13,-11,-13,-25,-12,-14,-24,-26,-29,-30,-31,-27,-28,]),'COLON':([14,29,30,33,36,37,40,41,42,43,44,],[26,26,-25,-14,-24,-26,-29,-30,-31,-27,-28,]),'LKEY':([24,],[28,]),'ASSIGN':([30,],[34,]),'PLUS':([34,38,39,],[38,38,38,]),'MINUS':([34,38,39,],[39,39,39,]),'NUMBER_REAL':([34,38,39,],[40,40,40,]),'NUMBER_INTEGER':([34,38,39,],[41,41,41,]),'CONSTANT_ENCAPSED_STRING':([34,38,39,],[42,42,42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'main_INNER':([2,4,],[3,8,]),'inner_statement':([2,4,28,],[4,4,31,]),'function_declaration_statement':([2,4,28,],[5,5,5,]),'AMPERSAND_OPT':([6,15,],[9,27,]),'parameter_list':([12,],[13,]),'parameter':([12,26,],[14,29,]),'parameter_type':([12,26,],[15,15,]),'parameter_list_COLON_PARAMETER':([14,29,],[25,32,]),'parameter_ASSIGN_STATIC_OPT':([30,],[33,]),'static_scalar':([34,38,39,],[36,43,44,]),'common_scalar':([34,38,39,],[37,37,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> BEGIN_PROGRAM main_INNER END_PROGRAM','main',3,'p_main','ExpressionLanguageParser.py',7),
  ('main_INNER -> inner_statement main_INNER','main_INNER',2,'p_main_INNER','ExpressionLanguageParser.py',12),
  ('main_INNER -> <empty>','main_INNER',0,'p_main_INNER','ExpressionLanguageParser.py',13),
  ('inner_statement -> function_declaration_statement','inner_statement',1,'p_inner_statement','ExpressionLanguageParser.py',18),
  ('inner_statement -> <empty>','inner_statement',0,'p_inner_statement','ExpressionLanguageParser.py',19),
  ('AMPERSAND_OPT -> AMPERSAND','AMPERSAND_OPT',1,'p_AMPERSAND_OPT','ExpressionLanguageParser.py',24),
  ('AMPERSAND_OPT -> <empty>','AMPERSAND_OPT',0,'p_AMPERSAND_OPT','ExpressionLanguageParser.py',25),
  ('function_declaration_statement -> FUNCTION AMPERSAND_OPT ID LPAREN parameter_list RPAREN LKEY inner_statement RKEY','function_declaration_statement',9,'p_function_declaration_statement','ExpressionLanguageParser.py',32),
  ('INNER_STATEMENT_OPT -> inner_statement','INNER_STATEMENT_OPT',1,'p_INNER_STATEMENT_OPT','ExpressionLanguageParser.py',37),
  ('INNER_STATEMENT_OPT -> <empty>','INNER_STATEMENT_OPT',0,'p_INNER_STATEMENT_OPT','ExpressionLanguageParser.py',38),
  ('parameter_list -> parameter parameter_list_COLON_PARAMETER','parameter_list',2,'p_parameter_list','ExpressionLanguageParser.py',43),
  ('parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER','parameter_list_COLON_PARAMETER',3,'p_parameter_list_COLON_PARAMETER','ExpressionLanguageParser.py',48),
  ('parameter_list_COLON_PARAMETER -> <empty>','parameter_list_COLON_PARAMETER',0,'p_parameter_list_COLON_PARAMETER','ExpressionLanguageParser.py',49),
  ('parameter -> parameter_type AMPERSAND_OPT VARIABLE parameter_ASSIGN_STATIC_OPT','parameter',4,'p_parameter','ExpressionLanguageParser.py',54),
  ('parameter_type -> INT_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',59),
  ('parameter_type -> BOOLEAN_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',60),
  ('parameter_type -> STRING_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',61),
  ('parameter_type -> FLOAT_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',62),
  ('parameter_type -> ARRAY_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',63),
  ('parameter_type -> BOOL_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',64),
  ('parameter_type -> REAL_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',65),
  ('parameter_type -> DOUBLE_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',66),
  ('parameter_type -> <empty>','parameter_type',0,'p_parameter_type','ExpressionLanguageParser.py',67),
  ('parameter_ASSIGN_STATIC_OPT -> ASSIGN static_scalar','parameter_ASSIGN_STATIC_OPT',2,'p_parameter_ASSIGN_STATIC_OPT','ExpressionLanguageParser.py',72),
  ('parameter_ASSIGN_STATIC_OPT -> <empty>','parameter_ASSIGN_STATIC_OPT',0,'p_parameter_ASSIGN_STATIC_OPT','ExpressionLanguageParser.py',73),
  ('static_scalar -> common_scalar','static_scalar',1,'p_static_scalar','ExpressionLanguageParser.py',78),
  ('static_scalar -> PLUS static_scalar','static_scalar',2,'p_static_scalar','ExpressionLanguageParser.py',79),
  ('static_scalar -> MINUS static_scalar','static_scalar',2,'p_static_scalar','ExpressionLanguageParser.py',80),
  ('common_scalar -> NUMBER_REAL','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',86),
  ('common_scalar -> NUMBER_INTEGER','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',87),
  ('common_scalar -> CONSTANT_ENCAPSED_STRING','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',88),
  ('static_scalar_OPT -> static_array_pair_list','static_scalar_OPT',1,'p_static_scalar_OPT','ExpressionLanguageParser.py',93),
  ('static_scalar_OPT -> <empty>','static_scalar_OPT',0,'p_static_scalar_OPT','ExpressionLanguageParser.py',94),
  ('static_array_pair_list -> static_array_pair static_array_pair_list_COLON_STATIC static_array_pair_list_COLON','static_array_pair_list',3,'p_static_array_pair_list','ExpressionLanguageParser.py',99),
  ('static_array_pair_list_COLON_STATIC -> COLON static_array_pair static_array_pair_list_COLON_STATIC','static_array_pair_list_COLON_STATIC',3,'p_static_array_pair_list_COLON_STATIC','ExpressionLanguageParser.py',104),
  ('static_array_pair_list_COLON_STATIC -> <empty>','static_array_pair_list_COLON_STATIC',0,'p_static_array_pair_list_COLON_STATIC','ExpressionLanguageParser.py',105),
  ('static_array_pair_list_COLON -> COLON','static_array_pair_list_COLON',1,'p_static_array_pair_list_COLON','ExpressionLanguageParser.py',110),
  ('static_array_pair_list_COLON -> <empty>','static_array_pair_list_COLON',0,'p_static_array_pair_list_COLON','ExpressionLanguageParser.py',111),
  ('static_array_pair -> static_scalar static_array_pair_ATTR_STATIC','static_array_pair',2,'p_static_array_pair','ExpressionLanguageParser.py',116),
  ('static_array_pair_ATTR_STATIC -> ATTR_ASSOC static_scalar','static_array_pair_ATTR_STATIC',2,'p_static_array_pair_ATTR_STATIC','ExpressionLanguageParser.py',121),
  ('static_array_pair_ATTR_STATIC -> <empty>','static_array_pair_ATTR_STATIC',0,'p_static_array_pair_ATTR_STATIC','ExpressionLanguageParser.py',122),
]

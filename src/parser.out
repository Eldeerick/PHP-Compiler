Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    LIST
    STRING
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     main_INNER -> inner_statement main_INNER
Rule 4     main_INNER -> inner_statement
Rule 5     inner_statement -> function_declaration_statement
Rule 6     inner_statement -> statement
Rule 7     inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 8     inner_statement_MUL -> inner_statement
Rule 9     expr -> MINUS expr1 expr2
Rule 10    expr -> expr1 expr2
Rule 11    expr -> expr3
Rule 12    expr -> MINUS expr1
Rule 13    expr -> expr1
Rule 14    expr2 -> INTE_DOT expr DDOT expr
Rule 15    expr2 -> comparission_operator expr
Rule 16    expr2 -> arithmetic_operator expr
Rule 17    expr3 -> variable assign_operator expr
Rule 18    expr3 -> variable assign_operator AMPERSAND expr
Rule 19    expr3 -> LPAREN type_cast_operator RPAREN expr
Rule 20    expr1 -> INCREMENT variable
Rule 21    expr1 -> variable INCREMENT
Rule 22    expr1 -> DECREMENT variable
Rule 23    expr1 -> variable DECREMENT
Rule 24    expr1 -> variable
Rule 25    expr1 -> LPAREN expr RPAREN
Rule 26    expr1 -> ARRAY_TYPE array_declaration
Rule 27    expr1 -> function_call
Rule 28    expr1 -> scalar
Rule 29    expr1 -> TRUE
Rule 30    expr1 -> FALSE
Rule 31    exit_statement -> EXIT exit_expr
Rule 32    exit_statement -> EXIT
Rule 33    die_statement -> DIE exit_expr
Rule 34    die_statement -> DIE
Rule 35    exit_expr -> LPAREN expr RPAREN
Rule 36    exit_expr -> LPAREN RPAREN
Rule 37    array_declaration -> LPAREN array_pair_list RPAREN
Rule 38    array_declaration -> LPAREN RPAREN
Rule 39    statement -> expr SEMICOLON
Rule 40    statement -> if_statement
Rule 41    statement -> while_statement
Rule 42    statement -> do_statement
Rule 43    statement -> for_statement
Rule 44    statement -> foreach_statement
Rule 45    statement -> break_statement
Rule 46    statement -> continue_statement
Rule 47    statement -> return_statement
Rule 48    statement -> exit_statement SEMICOLON
Rule 49    statement -> die_statement SEMICOLON
Rule 50    statement -> global_statement SEMICOLON
Rule 51    global_statement -> GLOBAL global_var statement_COLON_GLOBAL
Rule 52    global_statement -> GLOBAL global_var
Rule 53    if_statement -> statement_if if_statement_complement
Rule 54    if_statement -> statement_if
Rule 55    if_statement_complement -> statement_elseif
Rule 56    if_statement_complement -> statement_else
Rule 57    statement_if -> IF expr_parentheses statement_BLOCK_OPT
Rule 58    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT
Rule 59    statement_else -> ELSE statement_BLOCK_OPT
Rule 60    while_statement -> WHILE expr_parentheses statement_BLOCK_OPT
Rule 61    do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
Rule 62    break_statement -> BREAK expr SEMICOLON
Rule 63    break_statement -> BREAK SEMICOLON
Rule 64    continue_statement -> CONTINUE expr SEMICOLON
Rule 65    continue_statement -> CONTINUE SEMICOLON
Rule 66    return_statement -> RETURN expr SEMICOLON
Rule 67    return_statement -> RETURN SEMICOLON
Rule 68    for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
Rule 69    for_parameters -> SEMICOLON SEMICOLON
Rule 70    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 71    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 72    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 73    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 74    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 75    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 76    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 77    global_var -> VARIABLE
Rule 78    global_var -> DOLAR VARIABLE
Rule 79    global_var -> DOLAR LKEY expr RKEY
Rule 80    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 81    statement_COLON_GLOBAL -> COLON global_var
Rule 82    ampersand_variable -> AMPERSAND VARIABLE
Rule 83    ampersand_variable -> VARIABLE
Rule 84    expr_parentheses -> LPAREN expr RPAREN
Rule 85    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 86    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 87    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 88    for_expr_OPT -> expr
Rule 89    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 90    function_call -> ID LPAREN RPAREN
Rule 91    function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 92    function_call_parameter_list -> function_call_parameter
Rule 93    fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 94    fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter
Rule 95    function_call_parameter -> expr
Rule 96    function_call_parameter -> AMPERSAND VARIABLE
Rule 97    unary_operator -> EXC_DOT
Rule 98    unary_operator -> PLUS
Rule 99    unary_operator -> MINUS
Rule 100   type_cast_operator -> INT_TYPE
Rule 101   type_cast_operator -> DOUBLE_TYPE
Rule 102   type_cast_operator -> FLOAT_TYPE
Rule 103   type_cast_operator -> REAL_TYPE
Rule 104   type_cast_operator -> STRING_TYPE
Rule 105   type_cast_operator -> ARRAY_TYPE
Rule 106   type_cast_operator -> BOOLEAN_TYPE
Rule 107   type_cast_operator -> BOOL_TYPE
Rule 108   type_cast_operator -> UNSET
Rule 109   assign_operator -> ADD_ASSIGN
Rule 110   assign_operator -> SUB_ASSIGN
Rule 111   assign_operator -> MOD_ASSIGN
Rule 112   assign_operator -> PLUS_ASSIGN
Rule 113   assign_operator -> DIVIDE_ASSIGN
Rule 114   assign_operator -> ASSIGN
Rule 115   arithmetic_operator -> PLUS
Rule 116   arithmetic_operator -> DIVIDE
Rule 117   arithmetic_operator -> PERCENT
Rule 118   arithmetic_operator -> TIMES
Rule 119   arithmetic_operator -> MINUS
Rule 120   comparission_operator -> EQUALS
Rule 121   comparission_operator -> GREAT_THAN
Rule 122   comparission_operator -> LESS_THAN
Rule 123   comparission_operator -> LESS_EQUAL
Rule 124   comparission_operator -> GREAT_EQUAL
Rule 125   comparission_operator -> NOT_EQUAL
Rule 126   comparission_operator -> LEFT_LOGICAL
Rule 127   comparission_operator -> RIGHT_LOGICAL
Rule 128   comparission_operator -> AND
Rule 129   comparission_operator -> OR
Rule 130   scalar -> NUMBER_REAL
Rule 131   scalar -> NUMBER_INTEGER
Rule 132   scalar -> CONSTANT_ENCAPSED_STRING
Rule 133   variable -> reference_variable
Rule 134   variable -> simple_indirect_reference_DOLAR reference_variable
Rule 135   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 136   reference_variable -> compound_variable
Rule 137   compound_variable -> VARIABLE
Rule 138   compound_variable -> DOLAR LKEY expr RKEY
Rule 139   selector -> LBRACKET expr RBRACKET
Rule 140   selector -> LBRACKET RBRACKET
Rule 141   function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements
Rule 142   fds_statements -> LKEY inner_statement_MUL RKEY
Rule 143   fds_statements -> LKEY RKEY
Rule 144   fds_id -> AMPERSAND ID
Rule 145   fds_id -> ID
Rule 146   fds_parameter -> LPAREN parameter_list RPAREN
Rule 147   fds_parameter -> LPAREN RPAREN
Rule 148   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 149   parameter_list -> parameter
Rule 150   parameter -> VARIABLE
Rule 151   parameter -> parameter_prefix VARIABLE
Rule 152   parameter -> VARIABLE ASSIGN static_scalar
Rule 153   parameter -> parameter_prefix VARIABLE ASSIGN static_scalar
Rule 154   parameter_prefix -> parameter_type AMPERSAND
Rule 155   parameter_prefix -> AMPERSAND
Rule 156   parameter_prefix -> parameter_type
Rule 157   parameter_type -> INT_TYPE
Rule 158   parameter_type -> BOOLEAN_TYPE
Rule 159   parameter_type -> STRING_TYPE
Rule 160   parameter_type -> FLOAT_TYPE
Rule 161   parameter_type -> ARRAY_TYPE
Rule 162   parameter_type -> BOOL_TYPE
Rule 163   parameter_type -> REAL_TYPE
Rule 164   parameter_type -> DOUBLE_TYPE
Rule 165   static_scalar -> common_scalar
Rule 166   static_scalar -> PLUS static_scalar
Rule 167   static_scalar -> MINUS static_scalar
Rule 168   common_scalar -> NUMBER_REAL
Rule 169   common_scalar -> NUMBER_INTEGER
Rule 170   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 171   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 172   array_pair_list -> array_pair
Rule 173   array_pair -> expr
Rule 174   array_pair -> AMPERSAND variable
Rule 175   array_pair -> expr ATTR_ASSOC expr
Rule 176   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 177   statement_MUL -> statement statement_MUL
Rule 178   statement_MUL -> statement
Rule 179   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 180   for_expr_COLON_EXPR -> COLON expr
Rule 181   statement_BLOCK_OPT -> statement
Rule 182   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 183   statement_BLOCK_OPT -> LKEY RKEY
Rule 184   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 185   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 186   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 187   reference_variable_SELECTOR -> selector
Rule 188   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 189   simple_indirect_reference_DOLAR -> DOLAR
Rule 190   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 191   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 109
AMPERSAND            : 18 82 96 144 154 155 174 176
AND                  : 128
APOSTROFE            : 
ARRAY_TYPE           : 26 105 161
ARROBA               : 
AS                   : 85 86
ASPAS                : 
ASSIGN               : 114 152 153
ATTR_ASSOC           : 86 175 176
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 106 158
BOOL_TYPE            : 107 162
BREAK                : 62 63
CASE                 : 
CLONE                : 
COLON                : 80 81 93 94 179 180 184 185 190 191
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 132 170
CONTINUE             : 64 65
CRASE                : 
DDOT                 : 14
DECLARE              : 
DECREMENT            : 22 23
DIE                  : 33 34
DIVIDE               : 116
DIVIDE_ASSIGN        : 113
DO                   : 61
DOLAR                : 78 79 138 188 189
DOUBLE_TYPE          : 101 164
ELSE                 : 59
ELSEIF               : 58
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 120
EXC_DOT              : 97
EXIT                 : 31 32
FALSE                : 30
FLOAT_TYPE           : 102 160
FOR                  : 68
FOREACH              : 85 86
FUNCTION             : 141
GLOBAL               : 51 52
GREAT_EQUAL          : 124
GREAT_THAN           : 121
ID                   : 89 90 144 145
IDENTATION           : 
IF                   : 57
INCREMENT            : 20 21
INTE_DOT             : 14
INT_TYPE             : 100 157
LBRACKET             : 139 140
LEFT_LOGICAL         : 126
LESS_EQUAL           : 123
LESS_THAN            : 122
LIST                 : 
LKEY                 : 79 138 142 143 182 183
LPAREN               : 19 25 35 36 37 38 68 84 85 86 89 90 146 147
MINUS                : 9 12 99 119 167
MOD_ASSIGN           : 111
NOT_EQUAL            : 125
NUMBER_INTEGER       : 131 169
NUMBER_REAL          : 130 168
OR                   : 129
PERCENT              : 117
PLUS                 : 98 115 166
PLUS_ASSIGN          : 112
RBRACKET             : 139 140
REAL_TYPE            : 103 163
RETURN               : 66 67
RIGHT_LOGICAL        : 127
RKEY                 : 79 138 142 143 182 183
RPAREN               : 19 25 35 36 37 38 68 84 85 86 89 90 146 147
SEMICOLON            : 39 48 49 50 61 62 63 64 65 66 67 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76
STRING               : 
STRING_TYPE          : 104 159
SUB_ASSIGN           : 110
TIMES                : 118
TRUE                 : 29
UNSET                : 108
VAR                  : 
VARIABLE             : 77 78 82 83 96 137 150 151 152 153
WHILE                : 60 61
error                : 

Nonterminals, with rules where they appear

ampersand_variable   : 85 86 86
arithmetic_operator  : 16
array_declaration    : 26
array_pair           : 171 172 190 191
array_pair_list      : 37
array_pair_list_ARR_PAIR : 171 190
assign_operator      : 17 18
break_statement      : 45
common_scalar        : 165
comparission_operator : 15
compound_variable    : 135 136
continue_statement   : 46
die_statement        : 49
do_statement         : 42
exit_expr            : 31 33
exit_statement       : 48
expr                 : 14 14 15 16 17 18 19 25 35 39 62 64 66 79 84 85 86 87 88 95 138 139 173 175 175 176 179 180
expr1                : 9 10 12 13
expr2                : 9 10
expr3                : 11
expr_parentheses     : 57 58 60 61
fc_parameter_list_COLON_PARAMETER : 91 93
fds_id               : 141
fds_parameter        : 141
fds_statements       : 141
for_expr_COLON_EXPR  : 87 179
for_expr_OPT         : 70 71 71 72 72 73 74 74 75 76 76 76
for_parameters       : 68
for_statement        : 43
foreach_statement    : 44
function_call        : 27
function_call_parameter : 91 92 93 94
function_call_parameter_list : 89
function_declaration_statement : 5
global_statement     : 50
global_var           : 51 52 80 81
if_statement         : 40
if_statement_complement : 53
inner_statement      : 3 4 7 8
inner_statement_MUL  : 7 142
main                 : 0
main_INNER           : 1 3
parameter            : 148 149 184 185
parameter_list       : 146
parameter_list_COLON_PARAMETER : 148 184
parameter_prefix     : 151 153
parameter_type       : 154 156
reference_variable   : 133 134
reference_variable_SELECTOR : 135 186
return_statement     : 47
scalar               : 28
selector             : 186 187
simple_indirect_reference_DOLAR : 134 188
statement            : 6 177 178 181
statement_BLOCK_OPT  : 57 58 59 60 61 68 85 86
statement_COLON_GLOBAL : 51 80
statement_MUL        : 177 182
statement_else       : 56
statement_elseif     : 55
statement_if         : 53 54
static_scalar        : 152 153 166 167
type_cast_operator   : 19
unary_operator       : 
variable             : 17 18 20 21 22 23 24 174 176
while_statement      : 41

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (141) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 54


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (3) main_INNER -> inner_statement . main_INNER
    (4) main_INNER -> inner_statement .
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (141) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     reduce using rule 4 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 55
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 6

    (5) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 5 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 5 (inner_statement -> function_declaration_statement .)


state 7

    (6) inner_statement -> statement .

    FUNCTION        reduce using rule 6 (inner_statement -> statement .)
    MINUS           reduce using rule 6 (inner_statement -> statement .)
    WHILE           reduce using rule 6 (inner_statement -> statement .)
    DO              reduce using rule 6 (inner_statement -> statement .)
    FOR             reduce using rule 6 (inner_statement -> statement .)
    FOREACH         reduce using rule 6 (inner_statement -> statement .)
    BREAK           reduce using rule 6 (inner_statement -> statement .)
    CONTINUE        reduce using rule 6 (inner_statement -> statement .)
    RETURN          reduce using rule 6 (inner_statement -> statement .)
    EXIT            reduce using rule 6 (inner_statement -> statement .)
    DIE             reduce using rule 6 (inner_statement -> statement .)
    GLOBAL          reduce using rule 6 (inner_statement -> statement .)
    INCREMENT       reduce using rule 6 (inner_statement -> statement .)
    DECREMENT       reduce using rule 6 (inner_statement -> statement .)
    LPAREN          reduce using rule 6 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 6 (inner_statement -> statement .)
    TRUE            reduce using rule 6 (inner_statement -> statement .)
    FALSE           reduce using rule 6 (inner_statement -> statement .)
    IF              reduce using rule 6 (inner_statement -> statement .)
    ID              reduce using rule 6 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 6 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 6 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (inner_statement -> statement .)
    DOLAR           reduce using rule 6 (inner_statement -> statement .)
    VARIABLE        reduce using rule 6 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 6 (inner_statement -> statement .)
    RKEY            reduce using rule 6 (inner_statement -> statement .)


state 8

    (141) function_declaration_statement -> FUNCTION . fds_id fds_parameter fds_statements
    (144) fds_id -> . AMPERSAND ID
    (145) fds_id -> . ID

    AMPERSAND       shift and go to state 57
    ID              shift and go to state 58

    fds_id                         shift and go to state 56

state 9

    (39) statement -> expr . SEMICOLON

    SEMICOLON       shift and go to state 59


state 10

    (40) statement -> if_statement .

    FUNCTION        reduce using rule 40 (statement -> if_statement .)
    MINUS           reduce using rule 40 (statement -> if_statement .)
    WHILE           reduce using rule 40 (statement -> if_statement .)
    DO              reduce using rule 40 (statement -> if_statement .)
    FOR             reduce using rule 40 (statement -> if_statement .)
    FOREACH         reduce using rule 40 (statement -> if_statement .)
    BREAK           reduce using rule 40 (statement -> if_statement .)
    CONTINUE        reduce using rule 40 (statement -> if_statement .)
    RETURN          reduce using rule 40 (statement -> if_statement .)
    EXIT            reduce using rule 40 (statement -> if_statement .)
    DIE             reduce using rule 40 (statement -> if_statement .)
    GLOBAL          reduce using rule 40 (statement -> if_statement .)
    INCREMENT       reduce using rule 40 (statement -> if_statement .)
    DECREMENT       reduce using rule 40 (statement -> if_statement .)
    LPAREN          reduce using rule 40 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 40 (statement -> if_statement .)
    TRUE            reduce using rule 40 (statement -> if_statement .)
    FALSE           reduce using rule 40 (statement -> if_statement .)
    IF              reduce using rule 40 (statement -> if_statement .)
    ID              reduce using rule 40 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 40 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 40 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 40 (statement -> if_statement .)
    DOLAR           reduce using rule 40 (statement -> if_statement .)
    VARIABLE        reduce using rule 40 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 40 (statement -> if_statement .)
    RKEY            reduce using rule 40 (statement -> if_statement .)
    ELSEIF          reduce using rule 40 (statement -> if_statement .)
    ELSE            reduce using rule 40 (statement -> if_statement .)


state 11

    (41) statement -> while_statement .

    FUNCTION        reduce using rule 41 (statement -> while_statement .)
    MINUS           reduce using rule 41 (statement -> while_statement .)
    WHILE           reduce using rule 41 (statement -> while_statement .)
    DO              reduce using rule 41 (statement -> while_statement .)
    FOR             reduce using rule 41 (statement -> while_statement .)
    FOREACH         reduce using rule 41 (statement -> while_statement .)
    BREAK           reduce using rule 41 (statement -> while_statement .)
    CONTINUE        reduce using rule 41 (statement -> while_statement .)
    RETURN          reduce using rule 41 (statement -> while_statement .)
    EXIT            reduce using rule 41 (statement -> while_statement .)
    DIE             reduce using rule 41 (statement -> while_statement .)
    GLOBAL          reduce using rule 41 (statement -> while_statement .)
    INCREMENT       reduce using rule 41 (statement -> while_statement .)
    DECREMENT       reduce using rule 41 (statement -> while_statement .)
    LPAREN          reduce using rule 41 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 41 (statement -> while_statement .)
    TRUE            reduce using rule 41 (statement -> while_statement .)
    FALSE           reduce using rule 41 (statement -> while_statement .)
    IF              reduce using rule 41 (statement -> while_statement .)
    ID              reduce using rule 41 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 41 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 41 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 41 (statement -> while_statement .)
    DOLAR           reduce using rule 41 (statement -> while_statement .)
    VARIABLE        reduce using rule 41 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 41 (statement -> while_statement .)
    RKEY            reduce using rule 41 (statement -> while_statement .)
    ELSEIF          reduce using rule 41 (statement -> while_statement .)
    ELSE            reduce using rule 41 (statement -> while_statement .)


state 12

    (42) statement -> do_statement .

    FUNCTION        reduce using rule 42 (statement -> do_statement .)
    MINUS           reduce using rule 42 (statement -> do_statement .)
    WHILE           reduce using rule 42 (statement -> do_statement .)
    DO              reduce using rule 42 (statement -> do_statement .)
    FOR             reduce using rule 42 (statement -> do_statement .)
    FOREACH         reduce using rule 42 (statement -> do_statement .)
    BREAK           reduce using rule 42 (statement -> do_statement .)
    CONTINUE        reduce using rule 42 (statement -> do_statement .)
    RETURN          reduce using rule 42 (statement -> do_statement .)
    EXIT            reduce using rule 42 (statement -> do_statement .)
    DIE             reduce using rule 42 (statement -> do_statement .)
    GLOBAL          reduce using rule 42 (statement -> do_statement .)
    INCREMENT       reduce using rule 42 (statement -> do_statement .)
    DECREMENT       reduce using rule 42 (statement -> do_statement .)
    LPAREN          reduce using rule 42 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 42 (statement -> do_statement .)
    TRUE            reduce using rule 42 (statement -> do_statement .)
    FALSE           reduce using rule 42 (statement -> do_statement .)
    IF              reduce using rule 42 (statement -> do_statement .)
    ID              reduce using rule 42 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 42 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 42 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 42 (statement -> do_statement .)
    DOLAR           reduce using rule 42 (statement -> do_statement .)
    VARIABLE        reduce using rule 42 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 42 (statement -> do_statement .)
    RKEY            reduce using rule 42 (statement -> do_statement .)
    ELSEIF          reduce using rule 42 (statement -> do_statement .)
    ELSE            reduce using rule 42 (statement -> do_statement .)


state 13

    (43) statement -> for_statement .

    FUNCTION        reduce using rule 43 (statement -> for_statement .)
    MINUS           reduce using rule 43 (statement -> for_statement .)
    WHILE           reduce using rule 43 (statement -> for_statement .)
    DO              reduce using rule 43 (statement -> for_statement .)
    FOR             reduce using rule 43 (statement -> for_statement .)
    FOREACH         reduce using rule 43 (statement -> for_statement .)
    BREAK           reduce using rule 43 (statement -> for_statement .)
    CONTINUE        reduce using rule 43 (statement -> for_statement .)
    RETURN          reduce using rule 43 (statement -> for_statement .)
    EXIT            reduce using rule 43 (statement -> for_statement .)
    DIE             reduce using rule 43 (statement -> for_statement .)
    GLOBAL          reduce using rule 43 (statement -> for_statement .)
    INCREMENT       reduce using rule 43 (statement -> for_statement .)
    DECREMENT       reduce using rule 43 (statement -> for_statement .)
    LPAREN          reduce using rule 43 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 43 (statement -> for_statement .)
    TRUE            reduce using rule 43 (statement -> for_statement .)
    FALSE           reduce using rule 43 (statement -> for_statement .)
    IF              reduce using rule 43 (statement -> for_statement .)
    ID              reduce using rule 43 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 43 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 43 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 43 (statement -> for_statement .)
    DOLAR           reduce using rule 43 (statement -> for_statement .)
    VARIABLE        reduce using rule 43 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 43 (statement -> for_statement .)
    RKEY            reduce using rule 43 (statement -> for_statement .)
    ELSEIF          reduce using rule 43 (statement -> for_statement .)
    ELSE            reduce using rule 43 (statement -> for_statement .)


state 14

    (44) statement -> foreach_statement .

    FUNCTION        reduce using rule 44 (statement -> foreach_statement .)
    MINUS           reduce using rule 44 (statement -> foreach_statement .)
    WHILE           reduce using rule 44 (statement -> foreach_statement .)
    DO              reduce using rule 44 (statement -> foreach_statement .)
    FOR             reduce using rule 44 (statement -> foreach_statement .)
    FOREACH         reduce using rule 44 (statement -> foreach_statement .)
    BREAK           reduce using rule 44 (statement -> foreach_statement .)
    CONTINUE        reduce using rule 44 (statement -> foreach_statement .)
    RETURN          reduce using rule 44 (statement -> foreach_statement .)
    EXIT            reduce using rule 44 (statement -> foreach_statement .)
    DIE             reduce using rule 44 (statement -> foreach_statement .)
    GLOBAL          reduce using rule 44 (statement -> foreach_statement .)
    INCREMENT       reduce using rule 44 (statement -> foreach_statement .)
    DECREMENT       reduce using rule 44 (statement -> foreach_statement .)
    LPAREN          reduce using rule 44 (statement -> foreach_statement .)
    ARRAY_TYPE      reduce using rule 44 (statement -> foreach_statement .)
    TRUE            reduce using rule 44 (statement -> foreach_statement .)
    FALSE           reduce using rule 44 (statement -> foreach_statement .)
    IF              reduce using rule 44 (statement -> foreach_statement .)
    ID              reduce using rule 44 (statement -> foreach_statement .)
    NUMBER_REAL     reduce using rule 44 (statement -> foreach_statement .)
    NUMBER_INTEGER  reduce using rule 44 (statement -> foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (statement -> foreach_statement .)
    DOLAR           reduce using rule 44 (statement -> foreach_statement .)
    VARIABLE        reduce using rule 44 (statement -> foreach_statement .)
    END_PROGRAM     reduce using rule 44 (statement -> foreach_statement .)
    RKEY            reduce using rule 44 (statement -> foreach_statement .)
    ELSEIF          reduce using rule 44 (statement -> foreach_statement .)
    ELSE            reduce using rule 44 (statement -> foreach_statement .)


state 15

    (45) statement -> break_statement .

    FUNCTION        reduce using rule 45 (statement -> break_statement .)
    MINUS           reduce using rule 45 (statement -> break_statement .)
    WHILE           reduce using rule 45 (statement -> break_statement .)
    DO              reduce using rule 45 (statement -> break_statement .)
    FOR             reduce using rule 45 (statement -> break_statement .)
    FOREACH         reduce using rule 45 (statement -> break_statement .)
    BREAK           reduce using rule 45 (statement -> break_statement .)
    CONTINUE        reduce using rule 45 (statement -> break_statement .)
    RETURN          reduce using rule 45 (statement -> break_statement .)
    EXIT            reduce using rule 45 (statement -> break_statement .)
    DIE             reduce using rule 45 (statement -> break_statement .)
    GLOBAL          reduce using rule 45 (statement -> break_statement .)
    INCREMENT       reduce using rule 45 (statement -> break_statement .)
    DECREMENT       reduce using rule 45 (statement -> break_statement .)
    LPAREN          reduce using rule 45 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 45 (statement -> break_statement .)
    TRUE            reduce using rule 45 (statement -> break_statement .)
    FALSE           reduce using rule 45 (statement -> break_statement .)
    IF              reduce using rule 45 (statement -> break_statement .)
    ID              reduce using rule 45 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 45 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 45 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 45 (statement -> break_statement .)
    DOLAR           reduce using rule 45 (statement -> break_statement .)
    VARIABLE        reduce using rule 45 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 45 (statement -> break_statement .)
    RKEY            reduce using rule 45 (statement -> break_statement .)
    ELSEIF          reduce using rule 45 (statement -> break_statement .)
    ELSE            reduce using rule 45 (statement -> break_statement .)


state 16

    (46) statement -> continue_statement .

    FUNCTION        reduce using rule 46 (statement -> continue_statement .)
    MINUS           reduce using rule 46 (statement -> continue_statement .)
    WHILE           reduce using rule 46 (statement -> continue_statement .)
    DO              reduce using rule 46 (statement -> continue_statement .)
    FOR             reduce using rule 46 (statement -> continue_statement .)
    FOREACH         reduce using rule 46 (statement -> continue_statement .)
    BREAK           reduce using rule 46 (statement -> continue_statement .)
    CONTINUE        reduce using rule 46 (statement -> continue_statement .)
    RETURN          reduce using rule 46 (statement -> continue_statement .)
    EXIT            reduce using rule 46 (statement -> continue_statement .)
    DIE             reduce using rule 46 (statement -> continue_statement .)
    GLOBAL          reduce using rule 46 (statement -> continue_statement .)
    INCREMENT       reduce using rule 46 (statement -> continue_statement .)
    DECREMENT       reduce using rule 46 (statement -> continue_statement .)
    LPAREN          reduce using rule 46 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 46 (statement -> continue_statement .)
    TRUE            reduce using rule 46 (statement -> continue_statement .)
    FALSE           reduce using rule 46 (statement -> continue_statement .)
    IF              reduce using rule 46 (statement -> continue_statement .)
    ID              reduce using rule 46 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 46 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 46 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (statement -> continue_statement .)
    DOLAR           reduce using rule 46 (statement -> continue_statement .)
    VARIABLE        reduce using rule 46 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 46 (statement -> continue_statement .)
    RKEY            reduce using rule 46 (statement -> continue_statement .)
    ELSEIF          reduce using rule 46 (statement -> continue_statement .)
    ELSE            reduce using rule 46 (statement -> continue_statement .)


state 17

    (47) statement -> return_statement .

    FUNCTION        reduce using rule 47 (statement -> return_statement .)
    MINUS           reduce using rule 47 (statement -> return_statement .)
    WHILE           reduce using rule 47 (statement -> return_statement .)
    DO              reduce using rule 47 (statement -> return_statement .)
    FOR             reduce using rule 47 (statement -> return_statement .)
    FOREACH         reduce using rule 47 (statement -> return_statement .)
    BREAK           reduce using rule 47 (statement -> return_statement .)
    CONTINUE        reduce using rule 47 (statement -> return_statement .)
    RETURN          reduce using rule 47 (statement -> return_statement .)
    EXIT            reduce using rule 47 (statement -> return_statement .)
    DIE             reduce using rule 47 (statement -> return_statement .)
    GLOBAL          reduce using rule 47 (statement -> return_statement .)
    INCREMENT       reduce using rule 47 (statement -> return_statement .)
    DECREMENT       reduce using rule 47 (statement -> return_statement .)
    LPAREN          reduce using rule 47 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 47 (statement -> return_statement .)
    TRUE            reduce using rule 47 (statement -> return_statement .)
    FALSE           reduce using rule 47 (statement -> return_statement .)
    IF              reduce using rule 47 (statement -> return_statement .)
    ID              reduce using rule 47 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 47 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 47 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (statement -> return_statement .)
    DOLAR           reduce using rule 47 (statement -> return_statement .)
    VARIABLE        reduce using rule 47 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 47 (statement -> return_statement .)
    RKEY            reduce using rule 47 (statement -> return_statement .)
    ELSEIF          reduce using rule 47 (statement -> return_statement .)
    ELSE            reduce using rule 47 (statement -> return_statement .)


state 18

    (48) statement -> exit_statement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 19

    (49) statement -> die_statement . SEMICOLON

    SEMICOLON       shift and go to state 61


state 20

    (50) statement -> global_statement . SEMICOLON

    SEMICOLON       shift and go to state 62


state 21

    (9) expr -> MINUS . expr1 expr2
    (12) expr -> MINUS . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 65
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr1                          shift and go to state 63
    variable                       shift and go to state 64
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 22

    (10) expr -> expr1 . expr2
    (13) expr -> expr1 .
    (14) expr2 -> . INTE_DOT expr DDOT expr
    (15) expr2 -> . comparission_operator expr
    (16) expr2 -> . arithmetic_operator expr
    (120) comparission_operator -> . EQUALS
    (121) comparission_operator -> . GREAT_THAN
    (122) comparission_operator -> . LESS_THAN
    (123) comparission_operator -> . LESS_EQUAL
    (124) comparission_operator -> . GREAT_EQUAL
    (125) comparission_operator -> . NOT_EQUAL
    (126) comparission_operator -> . LEFT_LOGICAL
    (127) comparission_operator -> . RIGHT_LOGICAL
    (128) comparission_operator -> . AND
    (129) comparission_operator -> . OR
    (115) arithmetic_operator -> . PLUS
    (116) arithmetic_operator -> . DIVIDE
    (117) arithmetic_operator -> . PERCENT
    (118) arithmetic_operator -> . TIMES
    (119) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 13 (expr -> expr1 .)
    RPAREN          reduce using rule 13 (expr -> expr1 .)
    DDOT            reduce using rule 13 (expr -> expr1 .)
    COLON           reduce using rule 13 (expr -> expr1 .)
    AS              reduce using rule 13 (expr -> expr1 .)
    ATTR_ASSOC      reduce using rule 13 (expr -> expr1 .)
    RBRACKET        reduce using rule 13 (expr -> expr1 .)
    RKEY            reduce using rule 13 (expr -> expr1 .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    DIVIDE          shift and go to state 81
    PERCENT         shift and go to state 82
    TIMES           shift and go to state 83
    MINUS           shift and go to state 84

    expr2                          shift and go to state 66
    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 23

    (11) expr -> expr3 .

    SEMICOLON       reduce using rule 11 (expr -> expr3 .)
    RPAREN          reduce using rule 11 (expr -> expr3 .)
    DDOT            reduce using rule 11 (expr -> expr3 .)
    COLON           reduce using rule 11 (expr -> expr3 .)
    AS              reduce using rule 11 (expr -> expr3 .)
    ATTR_ASSOC      reduce using rule 11 (expr -> expr3 .)
    RBRACKET        reduce using rule 11 (expr -> expr3 .)
    RKEY            reduce using rule 11 (expr -> expr3 .)


state 24

    (53) if_statement -> statement_if . if_statement_complement
    (54) if_statement -> statement_if .
    (55) if_statement_complement -> . statement_elseif
    (56) if_statement_complement -> . statement_else
    (58) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT
    (59) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 54 (if_statement -> statement_if .)
    MINUS           reduce using rule 54 (if_statement -> statement_if .)
    WHILE           reduce using rule 54 (if_statement -> statement_if .)
    DO              reduce using rule 54 (if_statement -> statement_if .)
    FOR             reduce using rule 54 (if_statement -> statement_if .)
    FOREACH         reduce using rule 54 (if_statement -> statement_if .)
    BREAK           reduce using rule 54 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 54 (if_statement -> statement_if .)
    RETURN          reduce using rule 54 (if_statement -> statement_if .)
    EXIT            reduce using rule 54 (if_statement -> statement_if .)
    DIE             reduce using rule 54 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 54 (if_statement -> statement_if .)
    INCREMENT       reduce using rule 54 (if_statement -> statement_if .)
    DECREMENT       reduce using rule 54 (if_statement -> statement_if .)
    LPAREN          reduce using rule 54 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 54 (if_statement -> statement_if .)
    TRUE            reduce using rule 54 (if_statement -> statement_if .)
    FALSE           reduce using rule 54 (if_statement -> statement_if .)
    IF              reduce using rule 54 (if_statement -> statement_if .)
    ID              reduce using rule 54 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 54 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 54 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (if_statement -> statement_if .)
    DOLAR           reduce using rule 54 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 54 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 54 (if_statement -> statement_if .)
    RKEY            reduce using rule 54 (if_statement -> statement_if .)
    ELSEIF          shift and go to state 88
    ELSE            shift and go to state 89

  ! ELSEIF          [ reduce using rule 54 (if_statement -> statement_if .) ]
  ! ELSE            [ reduce using rule 54 (if_statement -> statement_if .) ]

    if_statement_complement        shift and go to state 85
    statement_elseif               shift and go to state 86
    statement_else                 shift and go to state 87

state 25

    (60) while_statement -> WHILE . expr_parentheses statement_BLOCK_OPT
    (84) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 91

    expr_parentheses               shift and go to state 90

state 26

    (61) do_statement -> DO . statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (181) statement_BLOCK_OPT -> . statement
    (182) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (183) statement_BLOCK_OPT -> . LKEY RKEY
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 94
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    statement_BLOCK_OPT            shift and go to state 92
    statement                      shift and go to state 93
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 27

    (68) for_statement -> FOR . LPAREN for_parameters RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 95


state 28

    (25) expr1 -> LPAREN . expr RPAREN
    (19) expr3 -> LPAREN . type_cast_operator RPAREN expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (100) type_cast_operator -> . INT_TYPE
    (101) type_cast_operator -> . DOUBLE_TYPE
    (102) type_cast_operator -> . FLOAT_TYPE
    (103) type_cast_operator -> . REAL_TYPE
    (104) type_cast_operator -> . STRING_TYPE
    (105) type_cast_operator -> . ARRAY_TYPE
    (106) type_cast_operator -> . BOOLEAN_TYPE
    (107) type_cast_operator -> . BOOL_TYPE
    (108) type_cast_operator -> . UNSET
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INT_TYPE        shift and go to state 98
    DOUBLE_TYPE     shift and go to state 99
    FLOAT_TYPE      shift and go to state 100
    REAL_TYPE       shift and go to state 101
    STRING_TYPE     shift and go to state 102
    ARRAY_TYPE      shift and go to state 103
    BOOLEAN_TYPE    shift and go to state 104
    BOOL_TYPE       shift and go to state 105
    UNSET           shift and go to state 106
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 96
    type_cast_operator             shift and go to state 97
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 29

    (85) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 107


state 30

    (62) break_statement -> BREAK . expr SEMICOLON
    (63) break_statement -> BREAK . SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 109
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 108
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 31

    (64) continue_statement -> CONTINUE . expr SEMICOLON
    (65) continue_statement -> CONTINUE . SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 111
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 110
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 32

    (66) return_statement -> RETURN . expr SEMICOLON
    (67) return_statement -> RETURN . SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 113
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 112
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 33

    (31) exit_statement -> EXIT . exit_expr
    (32) exit_statement -> EXIT .
    (35) exit_expr -> . LPAREN expr RPAREN
    (36) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 32 (exit_statement -> EXIT .)
    LPAREN          shift and go to state 115

    exit_expr                      shift and go to state 114

state 34

    (33) die_statement -> DIE . exit_expr
    (34) die_statement -> DIE .
    (35) exit_expr -> . LPAREN expr RPAREN
    (36) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 34 (die_statement -> DIE .)
    LPAREN          shift and go to state 115

    exit_expr                      shift and go to state 116

state 35

    (51) global_statement -> GLOBAL . global_var statement_COLON_GLOBAL
    (52) global_statement -> GLOBAL . global_var
    (77) global_var -> . VARIABLE
    (78) global_var -> . DOLAR VARIABLE
    (79) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 118
    DOLAR           shift and go to state 119

    global_var                     shift and go to state 117

state 36

    (20) expr1 -> INCREMENT . variable
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    variable                       shift and go to state 120
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 37

    (21) expr1 -> variable . INCREMENT
    (23) expr1 -> variable . DECREMENT
    (24) expr1 -> variable .
    (17) expr3 -> variable . assign_operator expr
    (18) expr3 -> variable . assign_operator AMPERSAND expr
    (109) assign_operator -> . ADD_ASSIGN
    (110) assign_operator -> . SUB_ASSIGN
    (111) assign_operator -> . MOD_ASSIGN
    (112) assign_operator -> . PLUS_ASSIGN
    (113) assign_operator -> . DIVIDE_ASSIGN
    (114) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 121
    DECREMENT       shift and go to state 122
    INTE_DOT        reduce using rule 24 (expr1 -> variable .)
    EQUALS          reduce using rule 24 (expr1 -> variable .)
    GREAT_THAN      reduce using rule 24 (expr1 -> variable .)
    LESS_THAN       reduce using rule 24 (expr1 -> variable .)
    LESS_EQUAL      reduce using rule 24 (expr1 -> variable .)
    GREAT_EQUAL     reduce using rule 24 (expr1 -> variable .)
    NOT_EQUAL       reduce using rule 24 (expr1 -> variable .)
    LEFT_LOGICAL    reduce using rule 24 (expr1 -> variable .)
    RIGHT_LOGICAL   reduce using rule 24 (expr1 -> variable .)
    AND             reduce using rule 24 (expr1 -> variable .)
    OR              reduce using rule 24 (expr1 -> variable .)
    PLUS            reduce using rule 24 (expr1 -> variable .)
    DIVIDE          reduce using rule 24 (expr1 -> variable .)
    PERCENT         reduce using rule 24 (expr1 -> variable .)
    TIMES           reduce using rule 24 (expr1 -> variable .)
    MINUS           reduce using rule 24 (expr1 -> variable .)
    SEMICOLON       reduce using rule 24 (expr1 -> variable .)
    RPAREN          reduce using rule 24 (expr1 -> variable .)
    DDOT            reduce using rule 24 (expr1 -> variable .)
    COLON           reduce using rule 24 (expr1 -> variable .)
    AS              reduce using rule 24 (expr1 -> variable .)
    ATTR_ASSOC      reduce using rule 24 (expr1 -> variable .)
    RBRACKET        reduce using rule 24 (expr1 -> variable .)
    RKEY            reduce using rule 24 (expr1 -> variable .)
    ADD_ASSIGN      shift and go to state 124
    SUB_ASSIGN      shift and go to state 125
    MOD_ASSIGN      shift and go to state 126
    PLUS_ASSIGN     shift and go to state 127
    DIVIDE_ASSIGN   shift and go to state 128
    ASSIGN          shift and go to state 129

    assign_operator                shift and go to state 123

state 38

    (22) expr1 -> DECREMENT . variable
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    variable                       shift and go to state 130
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 39

    (26) expr1 -> ARRAY_TYPE . array_declaration
    (37) array_declaration -> . LPAREN array_pair_list RPAREN
    (38) array_declaration -> . LPAREN RPAREN

    LPAREN          shift and go to state 132

    array_declaration              shift and go to state 131

state 40

    (27) expr1 -> function_call .

    INTE_DOT        reduce using rule 27 (expr1 -> function_call .)
    EQUALS          reduce using rule 27 (expr1 -> function_call .)
    GREAT_THAN      reduce using rule 27 (expr1 -> function_call .)
    LESS_THAN       reduce using rule 27 (expr1 -> function_call .)
    LESS_EQUAL      reduce using rule 27 (expr1 -> function_call .)
    GREAT_EQUAL     reduce using rule 27 (expr1 -> function_call .)
    NOT_EQUAL       reduce using rule 27 (expr1 -> function_call .)
    LEFT_LOGICAL    reduce using rule 27 (expr1 -> function_call .)
    RIGHT_LOGICAL   reduce using rule 27 (expr1 -> function_call .)
    AND             reduce using rule 27 (expr1 -> function_call .)
    OR              reduce using rule 27 (expr1 -> function_call .)
    PLUS            reduce using rule 27 (expr1 -> function_call .)
    DIVIDE          reduce using rule 27 (expr1 -> function_call .)
    PERCENT         reduce using rule 27 (expr1 -> function_call .)
    TIMES           reduce using rule 27 (expr1 -> function_call .)
    MINUS           reduce using rule 27 (expr1 -> function_call .)
    SEMICOLON       reduce using rule 27 (expr1 -> function_call .)
    RPAREN          reduce using rule 27 (expr1 -> function_call .)
    DDOT            reduce using rule 27 (expr1 -> function_call .)
    COLON           reduce using rule 27 (expr1 -> function_call .)
    AS              reduce using rule 27 (expr1 -> function_call .)
    ATTR_ASSOC      reduce using rule 27 (expr1 -> function_call .)
    RBRACKET        reduce using rule 27 (expr1 -> function_call .)
    RKEY            reduce using rule 27 (expr1 -> function_call .)


state 41

    (28) expr1 -> scalar .

    INTE_DOT        reduce using rule 28 (expr1 -> scalar .)
    EQUALS          reduce using rule 28 (expr1 -> scalar .)
    GREAT_THAN      reduce using rule 28 (expr1 -> scalar .)
    LESS_THAN       reduce using rule 28 (expr1 -> scalar .)
    LESS_EQUAL      reduce using rule 28 (expr1 -> scalar .)
    GREAT_EQUAL     reduce using rule 28 (expr1 -> scalar .)
    NOT_EQUAL       reduce using rule 28 (expr1 -> scalar .)
    LEFT_LOGICAL    reduce using rule 28 (expr1 -> scalar .)
    RIGHT_LOGICAL   reduce using rule 28 (expr1 -> scalar .)
    AND             reduce using rule 28 (expr1 -> scalar .)
    OR              reduce using rule 28 (expr1 -> scalar .)
    PLUS            reduce using rule 28 (expr1 -> scalar .)
    DIVIDE          reduce using rule 28 (expr1 -> scalar .)
    PERCENT         reduce using rule 28 (expr1 -> scalar .)
    TIMES           reduce using rule 28 (expr1 -> scalar .)
    MINUS           reduce using rule 28 (expr1 -> scalar .)
    SEMICOLON       reduce using rule 28 (expr1 -> scalar .)
    RPAREN          reduce using rule 28 (expr1 -> scalar .)
    DDOT            reduce using rule 28 (expr1 -> scalar .)
    COLON           reduce using rule 28 (expr1 -> scalar .)
    AS              reduce using rule 28 (expr1 -> scalar .)
    ATTR_ASSOC      reduce using rule 28 (expr1 -> scalar .)
    RBRACKET        reduce using rule 28 (expr1 -> scalar .)
    RKEY            reduce using rule 28 (expr1 -> scalar .)


state 42

    (29) expr1 -> TRUE .

    INTE_DOT        reduce using rule 29 (expr1 -> TRUE .)
    EQUALS          reduce using rule 29 (expr1 -> TRUE .)
    GREAT_THAN      reduce using rule 29 (expr1 -> TRUE .)
    LESS_THAN       reduce using rule 29 (expr1 -> TRUE .)
    LESS_EQUAL      reduce using rule 29 (expr1 -> TRUE .)
    GREAT_EQUAL     reduce using rule 29 (expr1 -> TRUE .)
    NOT_EQUAL       reduce using rule 29 (expr1 -> TRUE .)
    LEFT_LOGICAL    reduce using rule 29 (expr1 -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 29 (expr1 -> TRUE .)
    AND             reduce using rule 29 (expr1 -> TRUE .)
    OR              reduce using rule 29 (expr1 -> TRUE .)
    PLUS            reduce using rule 29 (expr1 -> TRUE .)
    DIVIDE          reduce using rule 29 (expr1 -> TRUE .)
    PERCENT         reduce using rule 29 (expr1 -> TRUE .)
    TIMES           reduce using rule 29 (expr1 -> TRUE .)
    MINUS           reduce using rule 29 (expr1 -> TRUE .)
    SEMICOLON       reduce using rule 29 (expr1 -> TRUE .)
    RPAREN          reduce using rule 29 (expr1 -> TRUE .)
    DDOT            reduce using rule 29 (expr1 -> TRUE .)
    COLON           reduce using rule 29 (expr1 -> TRUE .)
    AS              reduce using rule 29 (expr1 -> TRUE .)
    ATTR_ASSOC      reduce using rule 29 (expr1 -> TRUE .)
    RBRACKET        reduce using rule 29 (expr1 -> TRUE .)
    RKEY            reduce using rule 29 (expr1 -> TRUE .)


state 43

    (30) expr1 -> FALSE .

    INTE_DOT        reduce using rule 30 (expr1 -> FALSE .)
    EQUALS          reduce using rule 30 (expr1 -> FALSE .)
    GREAT_THAN      reduce using rule 30 (expr1 -> FALSE .)
    LESS_THAN       reduce using rule 30 (expr1 -> FALSE .)
    LESS_EQUAL      reduce using rule 30 (expr1 -> FALSE .)
    GREAT_EQUAL     reduce using rule 30 (expr1 -> FALSE .)
    NOT_EQUAL       reduce using rule 30 (expr1 -> FALSE .)
    LEFT_LOGICAL    reduce using rule 30 (expr1 -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 30 (expr1 -> FALSE .)
    AND             reduce using rule 30 (expr1 -> FALSE .)
    OR              reduce using rule 30 (expr1 -> FALSE .)
    PLUS            reduce using rule 30 (expr1 -> FALSE .)
    DIVIDE          reduce using rule 30 (expr1 -> FALSE .)
    PERCENT         reduce using rule 30 (expr1 -> FALSE .)
    TIMES           reduce using rule 30 (expr1 -> FALSE .)
    MINUS           reduce using rule 30 (expr1 -> FALSE .)
    SEMICOLON       reduce using rule 30 (expr1 -> FALSE .)
    RPAREN          reduce using rule 30 (expr1 -> FALSE .)
    DDOT            reduce using rule 30 (expr1 -> FALSE .)
    COLON           reduce using rule 30 (expr1 -> FALSE .)
    AS              reduce using rule 30 (expr1 -> FALSE .)
    ATTR_ASSOC      reduce using rule 30 (expr1 -> FALSE .)
    RBRACKET        reduce using rule 30 (expr1 -> FALSE .)
    RKEY            reduce using rule 30 (expr1 -> FALSE .)


state 44

    (57) statement_if -> IF . expr_parentheses statement_BLOCK_OPT
    (84) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 91

    expr_parentheses               shift and go to state 133

state 45

    (133) variable -> reference_variable .

    INCREMENT       reduce using rule 133 (variable -> reference_variable .)
    DECREMENT       reduce using rule 133 (variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 133 (variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 133 (variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 133 (variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 133 (variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 133 (variable -> reference_variable .)
    ASSIGN          reduce using rule 133 (variable -> reference_variable .)
    INTE_DOT        reduce using rule 133 (variable -> reference_variable .)
    EQUALS          reduce using rule 133 (variable -> reference_variable .)
    GREAT_THAN      reduce using rule 133 (variable -> reference_variable .)
    LESS_THAN       reduce using rule 133 (variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 133 (variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 133 (variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 133 (variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 133 (variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 133 (variable -> reference_variable .)
    AND             reduce using rule 133 (variable -> reference_variable .)
    OR              reduce using rule 133 (variable -> reference_variable .)
    PLUS            reduce using rule 133 (variable -> reference_variable .)
    DIVIDE          reduce using rule 133 (variable -> reference_variable .)
    PERCENT         reduce using rule 133 (variable -> reference_variable .)
    TIMES           reduce using rule 133 (variable -> reference_variable .)
    MINUS           reduce using rule 133 (variable -> reference_variable .)
    SEMICOLON       reduce using rule 133 (variable -> reference_variable .)
    RPAREN          reduce using rule 133 (variable -> reference_variable .)
    DDOT            reduce using rule 133 (variable -> reference_variable .)
    COLON           reduce using rule 133 (variable -> reference_variable .)
    AS              reduce using rule 133 (variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 133 (variable -> reference_variable .)
    RBRACKET        reduce using rule 133 (variable -> reference_variable .)
    RKEY            reduce using rule 133 (variable -> reference_variable .)


state 46

    (134) variable -> simple_indirect_reference_DOLAR . reference_variable
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 53
    DOLAR           shift and go to state 135

    reference_variable             shift and go to state 134
    compound_variable              shift and go to state 51

state 47

    (89) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (90) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 136


state 48

    (130) scalar -> NUMBER_REAL .

    INTE_DOT        reduce using rule 130 (scalar -> NUMBER_REAL .)
    EQUALS          reduce using rule 130 (scalar -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 130 (scalar -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 130 (scalar -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 130 (scalar -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 130 (scalar -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 130 (scalar -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 130 (scalar -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 130 (scalar -> NUMBER_REAL .)
    AND             reduce using rule 130 (scalar -> NUMBER_REAL .)
    OR              reduce using rule 130 (scalar -> NUMBER_REAL .)
    PLUS            reduce using rule 130 (scalar -> NUMBER_REAL .)
    DIVIDE          reduce using rule 130 (scalar -> NUMBER_REAL .)
    PERCENT         reduce using rule 130 (scalar -> NUMBER_REAL .)
    TIMES           reduce using rule 130 (scalar -> NUMBER_REAL .)
    MINUS           reduce using rule 130 (scalar -> NUMBER_REAL .)
    SEMICOLON       reduce using rule 130 (scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 130 (scalar -> NUMBER_REAL .)
    DDOT            reduce using rule 130 (scalar -> NUMBER_REAL .)
    COLON           reduce using rule 130 (scalar -> NUMBER_REAL .)
    AS              reduce using rule 130 (scalar -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 130 (scalar -> NUMBER_REAL .)
    RBRACKET        reduce using rule 130 (scalar -> NUMBER_REAL .)
    RKEY            reduce using rule 130 (scalar -> NUMBER_REAL .)


state 49

    (131) scalar -> NUMBER_INTEGER .

    INTE_DOT        reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    AND             reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    OR              reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    PLUS            reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    TIMES           reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    MINUS           reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    SEMICOLON       reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    DDOT            reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    COLON           reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    AS              reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 131 (scalar -> NUMBER_INTEGER .)
    RKEY            reduce using rule 131 (scalar -> NUMBER_INTEGER .)


state 50

    (132) scalar -> CONSTANT_ENCAPSED_STRING .

    INTE_DOT        reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    SEMICOLON       reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 132 (scalar -> CONSTANT_ENCAPSED_STRING .)


state 51

    (135) reference_variable -> compound_variable . reference_variable_SELECTOR
    (136) reference_variable -> compound_variable .
    (186) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (187) reference_variable_SELECTOR -> . selector
    (139) selector -> . LBRACKET expr RBRACKET
    (140) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 136 (reference_variable -> compound_variable .)
    DECREMENT       reduce using rule 136 (reference_variable -> compound_variable .)
    ADD_ASSIGN      reduce using rule 136 (reference_variable -> compound_variable .)
    SUB_ASSIGN      reduce using rule 136 (reference_variable -> compound_variable .)
    MOD_ASSIGN      reduce using rule 136 (reference_variable -> compound_variable .)
    PLUS_ASSIGN     reduce using rule 136 (reference_variable -> compound_variable .)
    DIVIDE_ASSIGN   reduce using rule 136 (reference_variable -> compound_variable .)
    ASSIGN          reduce using rule 136 (reference_variable -> compound_variable .)
    INTE_DOT        reduce using rule 136 (reference_variable -> compound_variable .)
    EQUALS          reduce using rule 136 (reference_variable -> compound_variable .)
    GREAT_THAN      reduce using rule 136 (reference_variable -> compound_variable .)
    LESS_THAN       reduce using rule 136 (reference_variable -> compound_variable .)
    LESS_EQUAL      reduce using rule 136 (reference_variable -> compound_variable .)
    GREAT_EQUAL     reduce using rule 136 (reference_variable -> compound_variable .)
    NOT_EQUAL       reduce using rule 136 (reference_variable -> compound_variable .)
    LEFT_LOGICAL    reduce using rule 136 (reference_variable -> compound_variable .)
    RIGHT_LOGICAL   reduce using rule 136 (reference_variable -> compound_variable .)
    AND             reduce using rule 136 (reference_variable -> compound_variable .)
    OR              reduce using rule 136 (reference_variable -> compound_variable .)
    PLUS            reduce using rule 136 (reference_variable -> compound_variable .)
    DIVIDE          reduce using rule 136 (reference_variable -> compound_variable .)
    PERCENT         reduce using rule 136 (reference_variable -> compound_variable .)
    TIMES           reduce using rule 136 (reference_variable -> compound_variable .)
    MINUS           reduce using rule 136 (reference_variable -> compound_variable .)
    SEMICOLON       reduce using rule 136 (reference_variable -> compound_variable .)
    RPAREN          reduce using rule 136 (reference_variable -> compound_variable .)
    DDOT            reduce using rule 136 (reference_variable -> compound_variable .)
    COLON           reduce using rule 136 (reference_variable -> compound_variable .)
    AS              reduce using rule 136 (reference_variable -> compound_variable .)
    ATTR_ASSOC      reduce using rule 136 (reference_variable -> compound_variable .)
    RBRACKET        reduce using rule 136 (reference_variable -> compound_variable .)
    RKEY            reduce using rule 136 (reference_variable -> compound_variable .)
    LBRACKET        shift and go to state 139

    reference_variable_SELECTOR    shift and go to state 137
    selector                       shift and go to state 138

state 52

    (188) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> DOLAR .
    (138) compound_variable -> DOLAR . LKEY expr RKEY
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 189 (simple_indirect_reference_DOLAR -> DOLAR .)
    LKEY            shift and go to state 142
    DOLAR           shift and go to state 140

  ! DOLAR           [ reduce using rule 189 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 141

state 53

    (137) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 137 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 137 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 137 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 137 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 137 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 137 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 137 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 137 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 137 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 137 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 137 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 137 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 137 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 137 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 137 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 137 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 137 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 137 (compound_variable -> VARIABLE .)
    AND             reduce using rule 137 (compound_variable -> VARIABLE .)
    OR              reduce using rule 137 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 137 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 137 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 137 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 137 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 137 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 137 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 137 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 137 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 137 (compound_variable -> VARIABLE .)
    AS              reduce using rule 137 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 137 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 137 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 137 (compound_variable -> VARIABLE .)


state 54

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 55

    (3) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 3 (main_INNER -> inner_statement main_INNER .)


state 56

    (141) function_declaration_statement -> FUNCTION fds_id . fds_parameter fds_statements
    (146) fds_parameter -> . LPAREN parameter_list RPAREN
    (147) fds_parameter -> . LPAREN RPAREN

    LPAREN          shift and go to state 144

    fds_parameter                  shift and go to state 143

state 57

    (144) fds_id -> AMPERSAND . ID

    ID              shift and go to state 145


state 58

    (145) fds_id -> ID .

    LPAREN          reduce using rule 145 (fds_id -> ID .)


state 59

    (39) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 39 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 39 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> expr SEMICOLON .)
    DO              reduce using rule 39 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 39 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 39 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 39 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 39 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 39 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 39 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 39 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 39 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 39 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 39 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 39 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 39 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 39 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 39 (statement -> expr SEMICOLON .)
    IF              reduce using rule 39 (statement -> expr SEMICOLON .)
    ID              reduce using rule 39 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 39 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 39 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 39 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 39 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 39 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 39 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 39 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 39 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 39 (statement -> expr SEMICOLON .)


state 60

    (48) statement -> exit_statement SEMICOLON .

    FUNCTION        reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    MINUS           reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    WHILE           reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    DO              reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    FOR             reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    FOREACH         reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    BREAK           reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    CONTINUE        reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    RETURN          reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    EXIT            reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    DIE             reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    GLOBAL          reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    INCREMENT       reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    DECREMENT       reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    LPAREN          reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    TRUE            reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    FALSE           reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    IF              reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    ID              reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    DOLAR           reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    VARIABLE        reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    RKEY            reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    ELSEIF          reduce using rule 48 (statement -> exit_statement SEMICOLON .)
    ELSE            reduce using rule 48 (statement -> exit_statement SEMICOLON .)


state 61

    (49) statement -> die_statement SEMICOLON .

    FUNCTION        reduce using rule 49 (statement -> die_statement SEMICOLON .)
    MINUS           reduce using rule 49 (statement -> die_statement SEMICOLON .)
    WHILE           reduce using rule 49 (statement -> die_statement SEMICOLON .)
    DO              reduce using rule 49 (statement -> die_statement SEMICOLON .)
    FOR             reduce using rule 49 (statement -> die_statement SEMICOLON .)
    FOREACH         reduce using rule 49 (statement -> die_statement SEMICOLON .)
    BREAK           reduce using rule 49 (statement -> die_statement SEMICOLON .)
    CONTINUE        reduce using rule 49 (statement -> die_statement SEMICOLON .)
    RETURN          reduce using rule 49 (statement -> die_statement SEMICOLON .)
    EXIT            reduce using rule 49 (statement -> die_statement SEMICOLON .)
    DIE             reduce using rule 49 (statement -> die_statement SEMICOLON .)
    GLOBAL          reduce using rule 49 (statement -> die_statement SEMICOLON .)
    INCREMENT       reduce using rule 49 (statement -> die_statement SEMICOLON .)
    DECREMENT       reduce using rule 49 (statement -> die_statement SEMICOLON .)
    LPAREN          reduce using rule 49 (statement -> die_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 49 (statement -> die_statement SEMICOLON .)
    TRUE            reduce using rule 49 (statement -> die_statement SEMICOLON .)
    FALSE           reduce using rule 49 (statement -> die_statement SEMICOLON .)
    IF              reduce using rule 49 (statement -> die_statement SEMICOLON .)
    ID              reduce using rule 49 (statement -> die_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 49 (statement -> die_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 49 (statement -> die_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (statement -> die_statement SEMICOLON .)
    DOLAR           reduce using rule 49 (statement -> die_statement SEMICOLON .)
    VARIABLE        reduce using rule 49 (statement -> die_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 49 (statement -> die_statement SEMICOLON .)
    RKEY            reduce using rule 49 (statement -> die_statement SEMICOLON .)
    ELSEIF          reduce using rule 49 (statement -> die_statement SEMICOLON .)
    ELSE            reduce using rule 49 (statement -> die_statement SEMICOLON .)


state 62

    (50) statement -> global_statement SEMICOLON .

    FUNCTION        reduce using rule 50 (statement -> global_statement SEMICOLON .)
    MINUS           reduce using rule 50 (statement -> global_statement SEMICOLON .)
    WHILE           reduce using rule 50 (statement -> global_statement SEMICOLON .)
    DO              reduce using rule 50 (statement -> global_statement SEMICOLON .)
    FOR             reduce using rule 50 (statement -> global_statement SEMICOLON .)
    FOREACH         reduce using rule 50 (statement -> global_statement SEMICOLON .)
    BREAK           reduce using rule 50 (statement -> global_statement SEMICOLON .)
    CONTINUE        reduce using rule 50 (statement -> global_statement SEMICOLON .)
    RETURN          reduce using rule 50 (statement -> global_statement SEMICOLON .)
    EXIT            reduce using rule 50 (statement -> global_statement SEMICOLON .)
    DIE             reduce using rule 50 (statement -> global_statement SEMICOLON .)
    GLOBAL          reduce using rule 50 (statement -> global_statement SEMICOLON .)
    INCREMENT       reduce using rule 50 (statement -> global_statement SEMICOLON .)
    DECREMENT       reduce using rule 50 (statement -> global_statement SEMICOLON .)
    LPAREN          reduce using rule 50 (statement -> global_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 50 (statement -> global_statement SEMICOLON .)
    TRUE            reduce using rule 50 (statement -> global_statement SEMICOLON .)
    FALSE           reduce using rule 50 (statement -> global_statement SEMICOLON .)
    IF              reduce using rule 50 (statement -> global_statement SEMICOLON .)
    ID              reduce using rule 50 (statement -> global_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 50 (statement -> global_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 50 (statement -> global_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (statement -> global_statement SEMICOLON .)
    DOLAR           reduce using rule 50 (statement -> global_statement SEMICOLON .)
    VARIABLE        reduce using rule 50 (statement -> global_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 50 (statement -> global_statement SEMICOLON .)
    RKEY            reduce using rule 50 (statement -> global_statement SEMICOLON .)
    ELSEIF          reduce using rule 50 (statement -> global_statement SEMICOLON .)
    ELSE            reduce using rule 50 (statement -> global_statement SEMICOLON .)


state 63

    (9) expr -> MINUS expr1 . expr2
    (12) expr -> MINUS expr1 .
    (14) expr2 -> . INTE_DOT expr DDOT expr
    (15) expr2 -> . comparission_operator expr
    (16) expr2 -> . arithmetic_operator expr
    (120) comparission_operator -> . EQUALS
    (121) comparission_operator -> . GREAT_THAN
    (122) comparission_operator -> . LESS_THAN
    (123) comparission_operator -> . LESS_EQUAL
    (124) comparission_operator -> . GREAT_EQUAL
    (125) comparission_operator -> . NOT_EQUAL
    (126) comparission_operator -> . LEFT_LOGICAL
    (127) comparission_operator -> . RIGHT_LOGICAL
    (128) comparission_operator -> . AND
    (129) comparission_operator -> . OR
    (115) arithmetic_operator -> . PLUS
    (116) arithmetic_operator -> . DIVIDE
    (117) arithmetic_operator -> . PERCENT
    (118) arithmetic_operator -> . TIMES
    (119) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 12 (expr -> MINUS expr1 .)
    RPAREN          reduce using rule 12 (expr -> MINUS expr1 .)
    DDOT            reduce using rule 12 (expr -> MINUS expr1 .)
    COLON           reduce using rule 12 (expr -> MINUS expr1 .)
    AS              reduce using rule 12 (expr -> MINUS expr1 .)
    ATTR_ASSOC      reduce using rule 12 (expr -> MINUS expr1 .)
    RBRACKET        reduce using rule 12 (expr -> MINUS expr1 .)
    RKEY            reduce using rule 12 (expr -> MINUS expr1 .)
    INTE_DOT        shift and go to state 67
    EQUALS          shift and go to state 70
    GREAT_THAN      shift and go to state 71
    LESS_THAN       shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    GREAT_EQUAL     shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    LEFT_LOGICAL    shift and go to state 76
    RIGHT_LOGICAL   shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    PLUS            shift and go to state 80
    DIVIDE          shift and go to state 81
    PERCENT         shift and go to state 82
    TIMES           shift and go to state 83
    MINUS           shift and go to state 84

    expr2                          shift and go to state 146
    comparission_operator          shift and go to state 68
    arithmetic_operator            shift and go to state 69

state 64

    (21) expr1 -> variable . INCREMENT
    (23) expr1 -> variable . DECREMENT
    (24) expr1 -> variable .

    INCREMENT       shift and go to state 121
    DECREMENT       shift and go to state 122
    INTE_DOT        reduce using rule 24 (expr1 -> variable .)
    EQUALS          reduce using rule 24 (expr1 -> variable .)
    GREAT_THAN      reduce using rule 24 (expr1 -> variable .)
    LESS_THAN       reduce using rule 24 (expr1 -> variable .)
    LESS_EQUAL      reduce using rule 24 (expr1 -> variable .)
    GREAT_EQUAL     reduce using rule 24 (expr1 -> variable .)
    NOT_EQUAL       reduce using rule 24 (expr1 -> variable .)
    LEFT_LOGICAL    reduce using rule 24 (expr1 -> variable .)
    RIGHT_LOGICAL   reduce using rule 24 (expr1 -> variable .)
    AND             reduce using rule 24 (expr1 -> variable .)
    OR              reduce using rule 24 (expr1 -> variable .)
    PLUS            reduce using rule 24 (expr1 -> variable .)
    DIVIDE          reduce using rule 24 (expr1 -> variable .)
    PERCENT         reduce using rule 24 (expr1 -> variable .)
    TIMES           reduce using rule 24 (expr1 -> variable .)
    MINUS           reduce using rule 24 (expr1 -> variable .)
    SEMICOLON       reduce using rule 24 (expr1 -> variable .)
    RPAREN          reduce using rule 24 (expr1 -> variable .)
    DDOT            reduce using rule 24 (expr1 -> variable .)
    COLON           reduce using rule 24 (expr1 -> variable .)
    AS              reduce using rule 24 (expr1 -> variable .)
    ATTR_ASSOC      reduce using rule 24 (expr1 -> variable .)
    RBRACKET        reduce using rule 24 (expr1 -> variable .)
    RKEY            reduce using rule 24 (expr1 -> variable .)


state 65

    (25) expr1 -> LPAREN . expr RPAREN
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 96
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 66

    (10) expr -> expr1 expr2 .

    SEMICOLON       reduce using rule 10 (expr -> expr1 expr2 .)
    RPAREN          reduce using rule 10 (expr -> expr1 expr2 .)
    DDOT            reduce using rule 10 (expr -> expr1 expr2 .)
    COLON           reduce using rule 10 (expr -> expr1 expr2 .)
    AS              reduce using rule 10 (expr -> expr1 expr2 .)
    ATTR_ASSOC      reduce using rule 10 (expr -> expr1 expr2 .)
    RBRACKET        reduce using rule 10 (expr -> expr1 expr2 .)
    RKEY            reduce using rule 10 (expr -> expr1 expr2 .)


state 67

    (14) expr2 -> INTE_DOT . expr DDOT expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 147
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 68

    (15) expr2 -> comparission_operator . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 148
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 69

    (16) expr2 -> arithmetic_operator . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 149
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 70

    (120) comparission_operator -> EQUALS .

    MINUS           reduce using rule 120 (comparission_operator -> EQUALS .)
    INCREMENT       reduce using rule 120 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 120 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 120 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 120 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 120 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 120 (comparission_operator -> EQUALS .)
    ID              reduce using rule 120 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 120 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 120 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 120 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 120 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 120 (comparission_operator -> EQUALS .)


state 71

    (121) comparission_operator -> GREAT_THAN .

    MINUS           reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    INCREMENT       reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 121 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 121 (comparission_operator -> GREAT_THAN .)


state 72

    (122) comparission_operator -> LESS_THAN .

    MINUS           reduce using rule 122 (comparission_operator -> LESS_THAN .)
    INCREMENT       reduce using rule 122 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 122 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 122 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 122 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 122 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 122 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 122 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 122 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 122 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 122 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 122 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 122 (comparission_operator -> LESS_THAN .)


state 73

    (123) comparission_operator -> LESS_EQUAL .

    MINUS           reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    INCREMENT       reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 123 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 123 (comparission_operator -> LESS_EQUAL .)


state 74

    (124) comparission_operator -> GREAT_EQUAL .

    MINUS           reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    INCREMENT       reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 124 (comparission_operator -> GREAT_EQUAL .)


state 75

    (125) comparission_operator -> NOT_EQUAL .

    MINUS           reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    INCREMENT       reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 125 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 125 (comparission_operator -> NOT_EQUAL .)


state 76

    (126) comparission_operator -> LEFT_LOGICAL .

    MINUS           reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    INCREMENT       reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 126 (comparission_operator -> LEFT_LOGICAL .)


state 77

    (127) comparission_operator -> RIGHT_LOGICAL .

    MINUS           reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    INCREMENT       reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 127 (comparission_operator -> RIGHT_LOGICAL .)


state 78

    (128) comparission_operator -> AND .

    MINUS           reduce using rule 128 (comparission_operator -> AND .)
    INCREMENT       reduce using rule 128 (comparission_operator -> AND .)
    DECREMENT       reduce using rule 128 (comparission_operator -> AND .)
    LPAREN          reduce using rule 128 (comparission_operator -> AND .)
    ARRAY_TYPE      reduce using rule 128 (comparission_operator -> AND .)
    TRUE            reduce using rule 128 (comparission_operator -> AND .)
    FALSE           reduce using rule 128 (comparission_operator -> AND .)
    ID              reduce using rule 128 (comparission_operator -> AND .)
    NUMBER_REAL     reduce using rule 128 (comparission_operator -> AND .)
    NUMBER_INTEGER  reduce using rule 128 (comparission_operator -> AND .)
    CONSTANT_ENCAPSED_STRING reduce using rule 128 (comparission_operator -> AND .)
    DOLAR           reduce using rule 128 (comparission_operator -> AND .)
    VARIABLE        reduce using rule 128 (comparission_operator -> AND .)


state 79

    (129) comparission_operator -> OR .

    MINUS           reduce using rule 129 (comparission_operator -> OR .)
    INCREMENT       reduce using rule 129 (comparission_operator -> OR .)
    DECREMENT       reduce using rule 129 (comparission_operator -> OR .)
    LPAREN          reduce using rule 129 (comparission_operator -> OR .)
    ARRAY_TYPE      reduce using rule 129 (comparission_operator -> OR .)
    TRUE            reduce using rule 129 (comparission_operator -> OR .)
    FALSE           reduce using rule 129 (comparission_operator -> OR .)
    ID              reduce using rule 129 (comparission_operator -> OR .)
    NUMBER_REAL     reduce using rule 129 (comparission_operator -> OR .)
    NUMBER_INTEGER  reduce using rule 129 (comparission_operator -> OR .)
    CONSTANT_ENCAPSED_STRING reduce using rule 129 (comparission_operator -> OR .)
    DOLAR           reduce using rule 129 (comparission_operator -> OR .)
    VARIABLE        reduce using rule 129 (comparission_operator -> OR .)


state 80

    (115) arithmetic_operator -> PLUS .

    MINUS           reduce using rule 115 (arithmetic_operator -> PLUS .)
    INCREMENT       reduce using rule 115 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 115 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 115 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 115 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 115 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 115 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 115 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 115 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 115 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 115 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 115 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 115 (arithmetic_operator -> PLUS .)


state 81

    (116) arithmetic_operator -> DIVIDE .

    MINUS           reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    INCREMENT       reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 116 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 116 (arithmetic_operator -> DIVIDE .)


state 82

    (117) arithmetic_operator -> PERCENT .

    MINUS           reduce using rule 117 (arithmetic_operator -> PERCENT .)
    INCREMENT       reduce using rule 117 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 117 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 117 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 117 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 117 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 117 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 117 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 117 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 117 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 117 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 117 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 117 (arithmetic_operator -> PERCENT .)


state 83

    (118) arithmetic_operator -> TIMES .

    MINUS           reduce using rule 118 (arithmetic_operator -> TIMES .)
    INCREMENT       reduce using rule 118 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 118 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 118 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 118 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 118 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 118 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 118 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 118 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 118 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 118 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 118 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 118 (arithmetic_operator -> TIMES .)


state 84

    (119) arithmetic_operator -> MINUS .

    MINUS           reduce using rule 119 (arithmetic_operator -> MINUS .)
    INCREMENT       reduce using rule 119 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 119 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 119 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 119 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 119 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 119 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 119 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 119 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 119 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 119 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 119 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 119 (arithmetic_operator -> MINUS .)


state 85

    (53) if_statement -> statement_if if_statement_complement .

    FUNCTION        reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    MINUS           reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    WHILE           reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    DO              reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    FOR             reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    FOREACH         reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    BREAK           reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    CONTINUE        reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    RETURN          reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    EXIT            reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    DIE             reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    GLOBAL          reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    INCREMENT       reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    DECREMENT       reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    LPAREN          reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    ARRAY_TYPE      reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    TRUE            reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    FALSE           reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    IF              reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    ID              reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    NUMBER_REAL     reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    NUMBER_INTEGER  reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    DOLAR           reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    VARIABLE        reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    END_PROGRAM     reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    RKEY            reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    ELSEIF          reduce using rule 53 (if_statement -> statement_if if_statement_complement .)
    ELSE            reduce using rule 53 (if_statement -> statement_if if_statement_complement .)


state 86

    (55) if_statement_complement -> statement_elseif .

    FUNCTION        reduce using rule 55 (if_statement_complement -> statement_elseif .)
    MINUS           reduce using rule 55 (if_statement_complement -> statement_elseif .)
    WHILE           reduce using rule 55 (if_statement_complement -> statement_elseif .)
    DO              reduce using rule 55 (if_statement_complement -> statement_elseif .)
    FOR             reduce using rule 55 (if_statement_complement -> statement_elseif .)
    FOREACH         reduce using rule 55 (if_statement_complement -> statement_elseif .)
    BREAK           reduce using rule 55 (if_statement_complement -> statement_elseif .)
    CONTINUE        reduce using rule 55 (if_statement_complement -> statement_elseif .)
    RETURN          reduce using rule 55 (if_statement_complement -> statement_elseif .)
    EXIT            reduce using rule 55 (if_statement_complement -> statement_elseif .)
    DIE             reduce using rule 55 (if_statement_complement -> statement_elseif .)
    GLOBAL          reduce using rule 55 (if_statement_complement -> statement_elseif .)
    INCREMENT       reduce using rule 55 (if_statement_complement -> statement_elseif .)
    DECREMENT       reduce using rule 55 (if_statement_complement -> statement_elseif .)
    LPAREN          reduce using rule 55 (if_statement_complement -> statement_elseif .)
    ARRAY_TYPE      reduce using rule 55 (if_statement_complement -> statement_elseif .)
    TRUE            reduce using rule 55 (if_statement_complement -> statement_elseif .)
    FALSE           reduce using rule 55 (if_statement_complement -> statement_elseif .)
    IF              reduce using rule 55 (if_statement_complement -> statement_elseif .)
    ID              reduce using rule 55 (if_statement_complement -> statement_elseif .)
    NUMBER_REAL     reduce using rule 55 (if_statement_complement -> statement_elseif .)
    NUMBER_INTEGER  reduce using rule 55 (if_statement_complement -> statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 55 (if_statement_complement -> statement_elseif .)
    DOLAR           reduce using rule 55 (if_statement_complement -> statement_elseif .)
    VARIABLE        reduce using rule 55 (if_statement_complement -> statement_elseif .)
    END_PROGRAM     reduce using rule 55 (if_statement_complement -> statement_elseif .)
    RKEY            reduce using rule 55 (if_statement_complement -> statement_elseif .)
    ELSEIF          reduce using rule 55 (if_statement_complement -> statement_elseif .)
    ELSE            reduce using rule 55 (if_statement_complement -> statement_elseif .)


state 87

    (56) if_statement_complement -> statement_else .

    FUNCTION        reduce using rule 56 (if_statement_complement -> statement_else .)
    MINUS           reduce using rule 56 (if_statement_complement -> statement_else .)
    WHILE           reduce using rule 56 (if_statement_complement -> statement_else .)
    DO              reduce using rule 56 (if_statement_complement -> statement_else .)
    FOR             reduce using rule 56 (if_statement_complement -> statement_else .)
    FOREACH         reduce using rule 56 (if_statement_complement -> statement_else .)
    BREAK           reduce using rule 56 (if_statement_complement -> statement_else .)
    CONTINUE        reduce using rule 56 (if_statement_complement -> statement_else .)
    RETURN          reduce using rule 56 (if_statement_complement -> statement_else .)
    EXIT            reduce using rule 56 (if_statement_complement -> statement_else .)
    DIE             reduce using rule 56 (if_statement_complement -> statement_else .)
    GLOBAL          reduce using rule 56 (if_statement_complement -> statement_else .)
    INCREMENT       reduce using rule 56 (if_statement_complement -> statement_else .)
    DECREMENT       reduce using rule 56 (if_statement_complement -> statement_else .)
    LPAREN          reduce using rule 56 (if_statement_complement -> statement_else .)
    ARRAY_TYPE      reduce using rule 56 (if_statement_complement -> statement_else .)
    TRUE            reduce using rule 56 (if_statement_complement -> statement_else .)
    FALSE           reduce using rule 56 (if_statement_complement -> statement_else .)
    IF              reduce using rule 56 (if_statement_complement -> statement_else .)
    ID              reduce using rule 56 (if_statement_complement -> statement_else .)
    NUMBER_REAL     reduce using rule 56 (if_statement_complement -> statement_else .)
    NUMBER_INTEGER  reduce using rule 56 (if_statement_complement -> statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 56 (if_statement_complement -> statement_else .)
    DOLAR           reduce using rule 56 (if_statement_complement -> statement_else .)
    VARIABLE        reduce using rule 56 (if_statement_complement -> statement_else .)
    END_PROGRAM     reduce using rule 56 (if_statement_complement -> statement_else .)
    RKEY            reduce using rule 56 (if_statement_complement -> statement_else .)
    ELSEIF          reduce using rule 56 (if_statement_complement -> statement_else .)
    ELSE            reduce using rule 56 (if_statement_complement -> statement_else .)


state 88

    (58) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT
    (84) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 91

    expr_parentheses               shift and go to state 150

state 89

    (59) statement_else -> ELSE . statement_BLOCK_OPT
    (181) statement_BLOCK_OPT -> . statement
    (182) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (183) statement_BLOCK_OPT -> . LKEY RKEY
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 94
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    statement_BLOCK_OPT            shift and go to state 151
    statement                      shift and go to state 93
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 90

    (60) while_statement -> WHILE expr_parentheses . statement_BLOCK_OPT
    (181) statement_BLOCK_OPT -> . statement
    (182) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (183) statement_BLOCK_OPT -> . LKEY RKEY
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 94
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    statement_BLOCK_OPT            shift and go to state 152
    statement                      shift and go to state 93
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 91

    (84) expr_parentheses -> LPAREN . expr RPAREN
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 153
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 92

    (61) do_statement -> DO statement_BLOCK_OPT . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 154


state 93

    (181) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 181 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 181 (statement_BLOCK_OPT -> statement .)


state 94

    (182) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (183) statement_BLOCK_OPT -> LKEY . RKEY
    (177) statement_MUL -> . statement statement_MUL
    (178) statement_MUL -> . statement
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 156
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    statement_MUL                  shift and go to state 155
    statement                      shift and go to state 157
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 95

    (68) for_statement -> FOR LPAREN . for_parameters RPAREN statement_BLOCK_OPT
    (69) for_parameters -> . SEMICOLON SEMICOLON
    (70) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (71) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (72) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (73) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (74) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (75) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (76) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (87) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (88) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 159
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    for_parameters                 shift and go to state 158
    for_expr_OPT                   shift and go to state 160
    expr                           shift and go to state 161
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 96

    (25) expr1 -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 162


state 97

    (19) expr3 -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 163


state 98

    (100) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 100 (type_cast_operator -> INT_TYPE .)


state 99

    (101) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 101 (type_cast_operator -> DOUBLE_TYPE .)


state 100

    (102) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 102 (type_cast_operator -> FLOAT_TYPE .)


state 101

    (103) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 103 (type_cast_operator -> REAL_TYPE .)


state 102

    (104) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 104 (type_cast_operator -> STRING_TYPE .)


state 103

    (105) type_cast_operator -> ARRAY_TYPE .
    (26) expr1 -> ARRAY_TYPE . array_declaration
    (37) array_declaration -> . LPAREN array_pair_list RPAREN
    (38) array_declaration -> . LPAREN RPAREN

    RPAREN          reduce using rule 105 (type_cast_operator -> ARRAY_TYPE .)
    LPAREN          shift and go to state 132

    array_declaration              shift and go to state 131

state 104

    (106) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 106 (type_cast_operator -> BOOLEAN_TYPE .)


state 105

    (107) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 107 (type_cast_operator -> BOOL_TYPE .)


state 106

    (108) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 108 (type_cast_operator -> UNSET .)


state 107

    (85) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 164
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 108

    (62) break_statement -> BREAK expr . SEMICOLON

    SEMICOLON       shift and go to state 165


state 109

    (63) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    DOLAR           reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 63 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 63 (break_statement -> BREAK SEMICOLON .)


state 110

    (64) continue_statement -> CONTINUE expr . SEMICOLON

    SEMICOLON       shift and go to state 166


state 111

    (65) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    DOLAR           reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 65 (continue_statement -> CONTINUE SEMICOLON .)


state 112

    (66) return_statement -> RETURN expr . SEMICOLON

    SEMICOLON       shift and go to state 167


state 113

    (67) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    DOLAR           reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 67 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 67 (return_statement -> RETURN SEMICOLON .)


state 114

    (31) exit_statement -> EXIT exit_expr .

    SEMICOLON       reduce using rule 31 (exit_statement -> EXIT exit_expr .)


state 115

    (35) exit_expr -> LPAREN . expr RPAREN
    (36) exit_expr -> LPAREN . RPAREN
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 169
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 168
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 116

    (33) die_statement -> DIE exit_expr .

    SEMICOLON       reduce using rule 33 (die_statement -> DIE exit_expr .)


state 117

    (51) global_statement -> GLOBAL global_var . statement_COLON_GLOBAL
    (52) global_statement -> GLOBAL global_var .
    (80) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (81) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 52 (global_statement -> GLOBAL global_var .)
    COLON           shift and go to state 171

    statement_COLON_GLOBAL         shift and go to state 170

state 118

    (77) global_var -> VARIABLE .

    COLON           reduce using rule 77 (global_var -> VARIABLE .)
    SEMICOLON       reduce using rule 77 (global_var -> VARIABLE .)


state 119

    (78) global_var -> DOLAR . VARIABLE
    (79) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 172
    LKEY            shift and go to state 173


state 120

    (20) expr1 -> INCREMENT variable .

    INTE_DOT        reduce using rule 20 (expr1 -> INCREMENT variable .)
    EQUALS          reduce using rule 20 (expr1 -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 20 (expr1 -> INCREMENT variable .)
    LESS_THAN       reduce using rule 20 (expr1 -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 20 (expr1 -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 20 (expr1 -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 20 (expr1 -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 20 (expr1 -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 20 (expr1 -> INCREMENT variable .)
    AND             reduce using rule 20 (expr1 -> INCREMENT variable .)
    OR              reduce using rule 20 (expr1 -> INCREMENT variable .)
    PLUS            reduce using rule 20 (expr1 -> INCREMENT variable .)
    DIVIDE          reduce using rule 20 (expr1 -> INCREMENT variable .)
    PERCENT         reduce using rule 20 (expr1 -> INCREMENT variable .)
    TIMES           reduce using rule 20 (expr1 -> INCREMENT variable .)
    MINUS           reduce using rule 20 (expr1 -> INCREMENT variable .)
    SEMICOLON       reduce using rule 20 (expr1 -> INCREMENT variable .)
    RPAREN          reduce using rule 20 (expr1 -> INCREMENT variable .)
    DDOT            reduce using rule 20 (expr1 -> INCREMENT variable .)
    COLON           reduce using rule 20 (expr1 -> INCREMENT variable .)
    AS              reduce using rule 20 (expr1 -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 20 (expr1 -> INCREMENT variable .)
    RBRACKET        reduce using rule 20 (expr1 -> INCREMENT variable .)
    RKEY            reduce using rule 20 (expr1 -> INCREMENT variable .)


state 121

    (21) expr1 -> variable INCREMENT .

    INTE_DOT        reduce using rule 21 (expr1 -> variable INCREMENT .)
    EQUALS          reduce using rule 21 (expr1 -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 21 (expr1 -> variable INCREMENT .)
    LESS_THAN       reduce using rule 21 (expr1 -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 21 (expr1 -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 21 (expr1 -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 21 (expr1 -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 21 (expr1 -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 21 (expr1 -> variable INCREMENT .)
    AND             reduce using rule 21 (expr1 -> variable INCREMENT .)
    OR              reduce using rule 21 (expr1 -> variable INCREMENT .)
    PLUS            reduce using rule 21 (expr1 -> variable INCREMENT .)
    DIVIDE          reduce using rule 21 (expr1 -> variable INCREMENT .)
    PERCENT         reduce using rule 21 (expr1 -> variable INCREMENT .)
    TIMES           reduce using rule 21 (expr1 -> variable INCREMENT .)
    MINUS           reduce using rule 21 (expr1 -> variable INCREMENT .)
    SEMICOLON       reduce using rule 21 (expr1 -> variable INCREMENT .)
    RPAREN          reduce using rule 21 (expr1 -> variable INCREMENT .)
    DDOT            reduce using rule 21 (expr1 -> variable INCREMENT .)
    COLON           reduce using rule 21 (expr1 -> variable INCREMENT .)
    AS              reduce using rule 21 (expr1 -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 21 (expr1 -> variable INCREMENT .)
    RBRACKET        reduce using rule 21 (expr1 -> variable INCREMENT .)
    RKEY            reduce using rule 21 (expr1 -> variable INCREMENT .)


state 122

    (23) expr1 -> variable DECREMENT .

    INTE_DOT        reduce using rule 23 (expr1 -> variable DECREMENT .)
    EQUALS          reduce using rule 23 (expr1 -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 23 (expr1 -> variable DECREMENT .)
    LESS_THAN       reduce using rule 23 (expr1 -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 23 (expr1 -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 23 (expr1 -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 23 (expr1 -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 23 (expr1 -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 23 (expr1 -> variable DECREMENT .)
    AND             reduce using rule 23 (expr1 -> variable DECREMENT .)
    OR              reduce using rule 23 (expr1 -> variable DECREMENT .)
    PLUS            reduce using rule 23 (expr1 -> variable DECREMENT .)
    DIVIDE          reduce using rule 23 (expr1 -> variable DECREMENT .)
    PERCENT         reduce using rule 23 (expr1 -> variable DECREMENT .)
    TIMES           reduce using rule 23 (expr1 -> variable DECREMENT .)
    MINUS           reduce using rule 23 (expr1 -> variable DECREMENT .)
    SEMICOLON       reduce using rule 23 (expr1 -> variable DECREMENT .)
    RPAREN          reduce using rule 23 (expr1 -> variable DECREMENT .)
    DDOT            reduce using rule 23 (expr1 -> variable DECREMENT .)
    COLON           reduce using rule 23 (expr1 -> variable DECREMENT .)
    AS              reduce using rule 23 (expr1 -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 23 (expr1 -> variable DECREMENT .)
    RBRACKET        reduce using rule 23 (expr1 -> variable DECREMENT .)
    RKEY            reduce using rule 23 (expr1 -> variable DECREMENT .)


state 123

    (17) expr3 -> variable assign_operator . expr
    (18) expr3 -> variable assign_operator . AMPERSAND expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 175
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    variable                       shift and go to state 37
    expr                           shift and go to state 174
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 124

    (109) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 109 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 109 (assign_operator -> ADD_ASSIGN .)


state 125

    (110) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 110 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 110 (assign_operator -> SUB_ASSIGN .)


state 126

    (111) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 111 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 111 (assign_operator -> MOD_ASSIGN .)


state 127

    (112) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 112 (assign_operator -> PLUS_ASSIGN .)


state 128

    (113) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 113 (assign_operator -> DIVIDE_ASSIGN .)


state 129

    (114) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 114 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 114 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 114 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 114 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 114 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 114 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 114 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 114 (assign_operator -> ASSIGN .)
    ID              reduce using rule 114 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 114 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 114 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 114 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 114 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 114 (assign_operator -> ASSIGN .)


state 130

    (22) expr1 -> DECREMENT variable .

    INTE_DOT        reduce using rule 22 (expr1 -> DECREMENT variable .)
    EQUALS          reduce using rule 22 (expr1 -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 22 (expr1 -> DECREMENT variable .)
    LESS_THAN       reduce using rule 22 (expr1 -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 22 (expr1 -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 22 (expr1 -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 22 (expr1 -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 22 (expr1 -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 22 (expr1 -> DECREMENT variable .)
    AND             reduce using rule 22 (expr1 -> DECREMENT variable .)
    OR              reduce using rule 22 (expr1 -> DECREMENT variable .)
    PLUS            reduce using rule 22 (expr1 -> DECREMENT variable .)
    DIVIDE          reduce using rule 22 (expr1 -> DECREMENT variable .)
    PERCENT         reduce using rule 22 (expr1 -> DECREMENT variable .)
    TIMES           reduce using rule 22 (expr1 -> DECREMENT variable .)
    MINUS           reduce using rule 22 (expr1 -> DECREMENT variable .)
    SEMICOLON       reduce using rule 22 (expr1 -> DECREMENT variable .)
    RPAREN          reduce using rule 22 (expr1 -> DECREMENT variable .)
    DDOT            reduce using rule 22 (expr1 -> DECREMENT variable .)
    COLON           reduce using rule 22 (expr1 -> DECREMENT variable .)
    AS              reduce using rule 22 (expr1 -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 22 (expr1 -> DECREMENT variable .)
    RBRACKET        reduce using rule 22 (expr1 -> DECREMENT variable .)
    RKEY            reduce using rule 22 (expr1 -> DECREMENT variable .)


state 131

    (26) expr1 -> ARRAY_TYPE array_declaration .

    INTE_DOT        reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    EQUALS          reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    GREAT_THAN      reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    LESS_THAN       reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    LESS_EQUAL      reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    GREAT_EQUAL     reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    NOT_EQUAL       reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    LEFT_LOGICAL    reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    RIGHT_LOGICAL   reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    AND             reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    OR              reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    PLUS            reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    DIVIDE          reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    PERCENT         reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    TIMES           reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    MINUS           reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    SEMICOLON       reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    RPAREN          reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    DDOT            reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    COLON           reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    AS              reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    ATTR_ASSOC      reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    RBRACKET        reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)
    RKEY            reduce using rule 26 (expr1 -> ARRAY_TYPE array_declaration .)


state 132

    (37) array_declaration -> LPAREN . array_pair_list RPAREN
    (38) array_declaration -> LPAREN . RPAREN
    (171) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (172) array_pair_list -> . array_pair
    (173) array_pair -> . expr
    (174) array_pair -> . AMPERSAND variable
    (175) array_pair -> . expr ATTR_ASSOC expr
    (176) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 177
    AMPERSAND       shift and go to state 180
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    array_pair_list                shift and go to state 176
    array_pair                     shift and go to state 178
    expr                           shift and go to state 179
    variable                       shift and go to state 37
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 133

    (57) statement_if -> IF expr_parentheses . statement_BLOCK_OPT
    (181) statement_BLOCK_OPT -> . statement
    (182) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (183) statement_BLOCK_OPT -> . LKEY RKEY
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 94
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    statement_BLOCK_OPT            shift and go to state 181
    statement                      shift and go to state 93
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 134

    (134) variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    AND             reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    OR              reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    AS              reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 134 (variable -> simple_indirect_reference_DOLAR reference_variable .)


state 135

    (138) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 142


state 136

    (89) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (90) function_call -> ID LPAREN . RPAREN
    (91) function_call_parameter_list -> . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (92) function_call_parameter_list -> . function_call_parameter
    (95) function_call_parameter -> . expr
    (96) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 183
    AMPERSAND       shift and go to state 186
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    function_call_parameter_list   shift and go to state 182
    function_call_parameter        shift and go to state 184
    expr                           shift and go to state 185
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 137

    (135) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AND             reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    OR              reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AS              reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 135 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 138

    (186) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (187) reference_variable_SELECTOR -> selector .
    (186) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (187) reference_variable_SELECTOR -> . selector
    (139) selector -> . LBRACKET expr RBRACKET
    (140) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    DECREMENT       reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    ADD_ASSIGN      reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    SUB_ASSIGN      reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    MOD_ASSIGN      reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    PLUS_ASSIGN     reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    DIVIDE_ASSIGN   reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    ASSIGN          reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    INTE_DOT        reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    EQUALS          reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    GREAT_THAN      reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    LESS_THAN       reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    LESS_EQUAL      reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    GREAT_EQUAL     reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    NOT_EQUAL       reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    LEFT_LOGICAL    reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    RIGHT_LOGICAL   reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    AND             reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    OR              reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    PLUS            reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    DIVIDE          reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    PERCENT         reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    TIMES           reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    MINUS           reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    SEMICOLON       reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    RPAREN          reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    DDOT            reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    COLON           reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    AS              reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    ATTR_ASSOC      reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    RBRACKET        reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    RKEY            reduce using rule 187 (reference_variable_SELECTOR -> selector .)
    LBRACKET        shift and go to state 139

    selector                       shift and go to state 138
    reference_variable_SELECTOR    shift and go to state 187

state 139

    (139) selector -> LBRACKET . expr RBRACKET
    (140) selector -> LBRACKET . RBRACKET
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RBRACKET        shift and go to state 189
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 188
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 140

    (188) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> DOLAR .
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 189 (simple_indirect_reference_DOLAR -> DOLAR .)
    DOLAR           shift and go to state 140

  ! DOLAR           [ reduce using rule 189 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 141

state 141

    (188) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 188 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 188 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 142

    (138) compound_variable -> DOLAR LKEY . expr RKEY
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 190
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 143

    (141) function_declaration_statement -> FUNCTION fds_id fds_parameter . fds_statements
    (142) fds_statements -> . LKEY inner_statement_MUL RKEY
    (143) fds_statements -> . LKEY RKEY

    LKEY            shift and go to state 192

    fds_statements                 shift and go to state 191

state 144

    (146) fds_parameter -> LPAREN . parameter_list RPAREN
    (147) fds_parameter -> LPAREN . RPAREN
    (148) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (149) parameter_list -> . parameter
    (150) parameter -> . VARIABLE
    (151) parameter -> . parameter_prefix VARIABLE
    (152) parameter -> . VARIABLE ASSIGN static_scalar
    (153) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (154) parameter_prefix -> . parameter_type AMPERSAND
    (155) parameter_prefix -> . AMPERSAND
    (156) parameter_prefix -> . parameter_type
    (157) parameter_type -> . INT_TYPE
    (158) parameter_type -> . BOOLEAN_TYPE
    (159) parameter_type -> . STRING_TYPE
    (160) parameter_type -> . FLOAT_TYPE
    (161) parameter_type -> . ARRAY_TYPE
    (162) parameter_type -> . BOOL_TYPE
    (163) parameter_type -> . REAL_TYPE
    (164) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 194
    VARIABLE        shift and go to state 196
    AMPERSAND       shift and go to state 199
    INT_TYPE        shift and go to state 200
    BOOLEAN_TYPE    shift and go to state 201
    STRING_TYPE     shift and go to state 202
    FLOAT_TYPE      shift and go to state 203
    ARRAY_TYPE      shift and go to state 204
    BOOL_TYPE       shift and go to state 205
    REAL_TYPE       shift and go to state 206
    DOUBLE_TYPE     shift and go to state 207

    parameter_list                 shift and go to state 193
    parameter                      shift and go to state 195
    parameter_prefix               shift and go to state 197
    parameter_type                 shift and go to state 198

state 145

    (144) fds_id -> AMPERSAND ID .

    LPAREN          reduce using rule 144 (fds_id -> AMPERSAND ID .)


state 146

    (9) expr -> MINUS expr1 expr2 .

    SEMICOLON       reduce using rule 9 (expr -> MINUS expr1 expr2 .)
    RPAREN          reduce using rule 9 (expr -> MINUS expr1 expr2 .)
    DDOT            reduce using rule 9 (expr -> MINUS expr1 expr2 .)
    COLON           reduce using rule 9 (expr -> MINUS expr1 expr2 .)
    AS              reduce using rule 9 (expr -> MINUS expr1 expr2 .)
    ATTR_ASSOC      reduce using rule 9 (expr -> MINUS expr1 expr2 .)
    RBRACKET        reduce using rule 9 (expr -> MINUS expr1 expr2 .)
    RKEY            reduce using rule 9 (expr -> MINUS expr1 expr2 .)


state 147

    (14) expr2 -> INTE_DOT expr . DDOT expr

    DDOT            shift and go to state 208


state 148

    (15) expr2 -> comparission_operator expr .

    SEMICOLON       reduce using rule 15 (expr2 -> comparission_operator expr .)
    RPAREN          reduce using rule 15 (expr2 -> comparission_operator expr .)
    DDOT            reduce using rule 15 (expr2 -> comparission_operator expr .)
    COLON           reduce using rule 15 (expr2 -> comparission_operator expr .)
    AS              reduce using rule 15 (expr2 -> comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 15 (expr2 -> comparission_operator expr .)
    RBRACKET        reduce using rule 15 (expr2 -> comparission_operator expr .)
    RKEY            reduce using rule 15 (expr2 -> comparission_operator expr .)


state 149

    (16) expr2 -> arithmetic_operator expr .

    SEMICOLON       reduce using rule 16 (expr2 -> arithmetic_operator expr .)
    RPAREN          reduce using rule 16 (expr2 -> arithmetic_operator expr .)
    DDOT            reduce using rule 16 (expr2 -> arithmetic_operator expr .)
    COLON           reduce using rule 16 (expr2 -> arithmetic_operator expr .)
    AS              reduce using rule 16 (expr2 -> arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 16 (expr2 -> arithmetic_operator expr .)
    RBRACKET        reduce using rule 16 (expr2 -> arithmetic_operator expr .)
    RKEY            reduce using rule 16 (expr2 -> arithmetic_operator expr .)


state 150

    (58) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT
    (181) statement_BLOCK_OPT -> . statement
    (182) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (183) statement_BLOCK_OPT -> . LKEY RKEY
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 94
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    statement_BLOCK_OPT            shift and go to state 209
    statement                      shift and go to state 93
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 151

    (59) statement_else -> ELSE statement_BLOCK_OPT .

    FUNCTION        reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSE            reduce using rule 59 (statement_else -> ELSE statement_BLOCK_OPT .)


state 152

    (60) while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 60 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)


state 153

    (84) expr_parentheses -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 210


state 154

    (61) do_statement -> DO statement_BLOCK_OPT WHILE . expr_parentheses SEMICOLON
    (84) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 91

    expr_parentheses               shift and go to state 211

state 155

    (182) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 212


state 156

    (183) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    MINUS           reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOREACH         reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    INCREMENT       reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    DECREMENT       reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    DOLAR           reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 183 (statement_BLOCK_OPT -> LKEY RKEY .)


state 157

    (177) statement_MUL -> statement . statement_MUL
    (178) statement_MUL -> statement .
    (177) statement_MUL -> . statement statement_MUL
    (178) statement_MUL -> . statement
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 178 (statement_MUL -> statement .)
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    statement                      shift and go to state 157
    statement_MUL                  shift and go to state 213
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 158

    (68) for_statement -> FOR LPAREN for_parameters . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 214


state 159

    (69) for_parameters -> SEMICOLON . SEMICOLON
    (73) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (74) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (75) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (87) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (88) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 215
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    for_expr_OPT                   shift and go to state 216
    expr                           shift and go to state 161
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 160

    (70) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (71) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (72) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (76) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 217


state 161

    (87) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (88) for_expr_OPT -> expr .
    (179) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (180) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 88 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 88 (for_expr_OPT -> expr .)
    COLON           shift and go to state 219

    for_expr_COLON_EXPR            shift and go to state 218

state 162

    (25) expr1 -> LPAREN expr RPAREN .

    INTE_DOT        reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    AND             reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    OR              reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    COLON           reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    AS              reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 25 (expr1 -> LPAREN expr RPAREN .)


state 163

    (19) expr3 -> LPAREN type_cast_operator RPAREN . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 220
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 164

    (85) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    AS              shift and go to state 221


state 165

    (62) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    MINUS           reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    FOREACH         reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    DOLAR           reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 62 (break_statement -> BREAK expr SEMICOLON .)


state 166

    (64) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    MINUS           reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOREACH         reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    DOLAR           reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 64 (continue_statement -> CONTINUE expr SEMICOLON .)


state 167

    (66) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    DOLAR           reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 66 (return_statement -> RETURN expr SEMICOLON .)


state 168

    (35) exit_expr -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 222


state 169

    (36) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 36 (exit_expr -> LPAREN RPAREN .)


state 170

    (51) global_statement -> GLOBAL global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 51 (global_statement -> GLOBAL global_var statement_COLON_GLOBAL .)


state 171

    (80) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (81) statement_COLON_GLOBAL -> COLON . global_var
    (77) global_var -> . VARIABLE
    (78) global_var -> . DOLAR VARIABLE
    (79) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 118
    DOLAR           shift and go to state 119

    global_var                     shift and go to state 223

state 172

    (78) global_var -> DOLAR VARIABLE .

    COLON           reduce using rule 78 (global_var -> DOLAR VARIABLE .)
    SEMICOLON       reduce using rule 78 (global_var -> DOLAR VARIABLE .)


state 173

    (79) global_var -> DOLAR LKEY . expr RKEY
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 224
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 174

    (17) expr3 -> variable assign_operator expr .

    SEMICOLON       reduce using rule 17 (expr3 -> variable assign_operator expr .)
    RPAREN          reduce using rule 17 (expr3 -> variable assign_operator expr .)
    DDOT            reduce using rule 17 (expr3 -> variable assign_operator expr .)
    COLON           reduce using rule 17 (expr3 -> variable assign_operator expr .)
    AS              reduce using rule 17 (expr3 -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 17 (expr3 -> variable assign_operator expr .)
    RBRACKET        reduce using rule 17 (expr3 -> variable assign_operator expr .)
    RKEY            reduce using rule 17 (expr3 -> variable assign_operator expr .)


state 175

    (18) expr3 -> variable assign_operator AMPERSAND . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    variable                       shift and go to state 37
    expr                           shift and go to state 225
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 176

    (37) array_declaration -> LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 226


state 177

    (38) array_declaration -> LPAREN RPAREN .

    INTE_DOT        reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    EQUALS          reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    AND             reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    OR              reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    PLUS            reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    PERCENT         reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    TIMES           reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    MINUS           reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    RPAREN          reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    DDOT            reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    COLON           reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    AS              reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 38 (array_declaration -> LPAREN RPAREN .)
    RKEY            reduce using rule 38 (array_declaration -> LPAREN RPAREN .)


state 178

    (171) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (172) array_pair_list -> array_pair .
    (190) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (191) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 172 (array_pair_list -> array_pair .)
    COLON           shift and go to state 228

    array_pair_list_ARR_PAIR       shift and go to state 227

state 179

    (173) array_pair -> expr .
    (175) array_pair -> expr . ATTR_ASSOC expr
    (176) array_pair -> expr . ATTR_ASSOC AMPERSAND variable

    COLON           reduce using rule 173 (array_pair -> expr .)
    RPAREN          reduce using rule 173 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 229


state 180

    (174) array_pair -> AMPERSAND . variable
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    variable                       shift and go to state 230
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 181

    (57) statement_if -> IF expr_parentheses statement_BLOCK_OPT .

    ELSEIF          reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 57 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)


state 182

    (89) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 231


state 183

    (90) function_call -> ID LPAREN RPAREN .

    INTE_DOT        reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    AS              reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 90 (function_call -> ID LPAREN RPAREN .)
    RKEY            reduce using rule 90 (function_call -> ID LPAREN RPAREN .)


state 184

    (91) function_call_parameter_list -> function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (92) function_call_parameter_list -> function_call_parameter .
    (93) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (94) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 92 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 233

    fc_parameter_list_COLON_PARAMETER shift and go to state 232

state 185

    (95) function_call_parameter -> expr .

    COLON           reduce using rule 95 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 95 (function_call_parameter -> expr .)


state 186

    (96) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 234


state 187

    (186) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AND             reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    OR              reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 186 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 188

    (139) selector -> LBRACKET expr . RBRACKET

    RBRACKET        shift and go to state 235


state 189

    (140) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    PLUS_ASSIGN     reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    LEFT_LOGICAL    reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    AND             reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    OR              reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    AS              reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 140 (selector -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 140 (selector -> LBRACKET RBRACKET .)


state 190

    (138) compound_variable -> DOLAR LKEY expr . RKEY

    RKEY            shift and go to state 236


state 191

    (141) function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .

    FUNCTION        reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    MINUS           reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    WHILE           reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DO              reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOR             reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOREACH         reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    BREAK           reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONTINUE        reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RETURN          reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXIT            reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DIE             reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    GLOBAL          reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    INCREMENT       reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DECREMENT       reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    LPAREN          reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ARRAY_TYPE      reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    TRUE            reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FALSE           reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    IF              reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ID              reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_REAL     reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_INTEGER  reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONSTANT_ENCAPSED_STRING reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DOLAR           reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    VARIABLE        reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    END_PROGRAM     reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RKEY            reduce using rule 141 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)


state 192

    (142) fds_statements -> LKEY . inner_statement_MUL RKEY
    (143) fds_statements -> LKEY . RKEY
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (141) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 238
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    inner_statement_MUL            shift and go to state 237
    inner_statement                shift and go to state 239
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 193

    (146) fds_parameter -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 240


state 194

    (147) fds_parameter -> LPAREN RPAREN .

    LKEY            reduce using rule 147 (fds_parameter -> LPAREN RPAREN .)


state 195

    (148) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (149) parameter_list -> parameter .
    (184) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (185) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 149 (parameter_list -> parameter .)
    COLON           shift and go to state 242

    parameter_list_COLON_PARAMETER shift and go to state 241

state 196

    (150) parameter -> VARIABLE .
    (152) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 150 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 150 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 243


state 197

    (151) parameter -> parameter_prefix . VARIABLE
    (153) parameter -> parameter_prefix . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 244


state 198

    (154) parameter_prefix -> parameter_type . AMPERSAND
    (156) parameter_prefix -> parameter_type .

    AMPERSAND       shift and go to state 245
    VARIABLE        reduce using rule 156 (parameter_prefix -> parameter_type .)


state 199

    (155) parameter_prefix -> AMPERSAND .

    VARIABLE        reduce using rule 155 (parameter_prefix -> AMPERSAND .)


state 200

    (157) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 157 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 157 (parameter_type -> INT_TYPE .)


state 201

    (158) parameter_type -> BOOLEAN_TYPE .

    AMPERSAND       reduce using rule 158 (parameter_type -> BOOLEAN_TYPE .)
    VARIABLE        reduce using rule 158 (parameter_type -> BOOLEAN_TYPE .)


state 202

    (159) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 159 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 159 (parameter_type -> STRING_TYPE .)


state 203

    (160) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 160 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 160 (parameter_type -> FLOAT_TYPE .)


state 204

    (161) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 161 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 161 (parameter_type -> ARRAY_TYPE .)


state 205

    (162) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 162 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 162 (parameter_type -> BOOL_TYPE .)


state 206

    (163) parameter_type -> REAL_TYPE .

    AMPERSAND       reduce using rule 163 (parameter_type -> REAL_TYPE .)
    VARIABLE        reduce using rule 163 (parameter_type -> REAL_TYPE .)


state 207

    (164) parameter_type -> DOUBLE_TYPE .

    AMPERSAND       reduce using rule 164 (parameter_type -> DOUBLE_TYPE .)
    VARIABLE        reduce using rule 164 (parameter_type -> DOUBLE_TYPE .)


state 208

    (14) expr2 -> INTE_DOT expr DDOT . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 246
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 209

    (58) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 58 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)


state 210

    (84) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 84 (expr_parentheses -> LPAREN expr RPAREN .)


state 211

    (61) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 247


state 212

    (182) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 182 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 213

    (177) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 177 (statement_MUL -> statement statement_MUL .)


state 214

    (68) for_statement -> FOR LPAREN for_parameters RPAREN . statement_BLOCK_OPT
    (181) statement_BLOCK_OPT -> . statement
    (182) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (183) statement_BLOCK_OPT -> . LKEY RKEY
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 94
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    statement_BLOCK_OPT            shift and go to state 248
    statement                      shift and go to state 93
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 215

    (69) for_parameters -> SEMICOLON SEMICOLON .
    (75) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (87) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (88) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 69 (for_parameters -> SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    for_expr_OPT                   shift and go to state 249
    expr                           shift and go to state 161
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 216

    (73) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (74) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 250


state 217

    (70) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (71) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (72) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (76) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (87) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (88) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 252
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    for_expr_OPT                   shift and go to state 251
    expr                           shift and go to state 161
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 218

    (87) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 87 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 87 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 219

    (179) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (180) for_expr_COLON_EXPR -> COLON . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 253
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 220

    (19) expr3 -> LPAREN type_cast_operator RPAREN expr .

    SEMICOLON       reduce using rule 19 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 19 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 19 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 19 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 19 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 19 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 19 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 19 (expr3 -> LPAREN type_cast_operator RPAREN expr .)


state 221

    (85) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (82) ampersand_variable -> . AMPERSAND VARIABLE
    (83) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 255
    VARIABLE        shift and go to state 256

    ampersand_variable             shift and go to state 254

state 222

    (35) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 35 (exit_expr -> LPAREN expr RPAREN .)


state 223

    (80) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (81) statement_COLON_GLOBAL -> COLON global_var .
    (80) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (81) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 81 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 171

    statement_COLON_GLOBAL         shift and go to state 257

state 224

    (79) global_var -> DOLAR LKEY expr . RKEY

    RKEY            shift and go to state 258


state 225

    (18) expr3 -> variable assign_operator AMPERSAND expr .

    SEMICOLON       reduce using rule 18 (expr3 -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 18 (expr3 -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 18 (expr3 -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 18 (expr3 -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 18 (expr3 -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 18 (expr3 -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 18 (expr3 -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 18 (expr3 -> variable assign_operator AMPERSAND expr .)


state 226

    (37) array_declaration -> LPAREN array_pair_list RPAREN .

    INTE_DOT        reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    SEMICOLON       reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 37 (array_declaration -> LPAREN array_pair_list RPAREN .)


state 227

    (171) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 171 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 228

    (190) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (191) array_pair_list_ARR_PAIR -> COLON . array_pair
    (173) array_pair -> . expr
    (174) array_pair -> . AMPERSAND variable
    (175) array_pair -> . expr ATTR_ASSOC expr
    (176) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 180
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    array_pair                     shift and go to state 259
    expr                           shift and go to state 179
    variable                       shift and go to state 37
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 229

    (175) array_pair -> expr ATTR_ASSOC . expr
    (176) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 261
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 260
    variable                       shift and go to state 37
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 230

    (174) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 174 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 174 (array_pair -> AMPERSAND variable .)


state 231

    (89) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    INTE_DOT        reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    SEMICOLON       reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 89 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 232

    (91) function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 91 (function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 233

    (93) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (94) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter
    (95) function_call_parameter -> . expr
    (96) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 186
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    function_call_parameter        shift and go to state 262
    expr                           shift and go to state 185
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 234

    (96) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 96 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 96 (function_call_parameter -> AMPERSAND VARIABLE .)


state 235

    (139) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    PLUS_ASSIGN     reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    AS              reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 139 (selector -> LBRACKET expr RBRACKET .)


state 236

    (138) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    AND             reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    OR              reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    AS              reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 138 (compound_variable -> DOLAR LKEY expr RKEY .)


state 237

    (142) fds_statements -> LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 263


state 238

    (143) fds_statements -> LKEY RKEY .

    FUNCTION        reduce using rule 143 (fds_statements -> LKEY RKEY .)
    MINUS           reduce using rule 143 (fds_statements -> LKEY RKEY .)
    WHILE           reduce using rule 143 (fds_statements -> LKEY RKEY .)
    DO              reduce using rule 143 (fds_statements -> LKEY RKEY .)
    FOR             reduce using rule 143 (fds_statements -> LKEY RKEY .)
    FOREACH         reduce using rule 143 (fds_statements -> LKEY RKEY .)
    BREAK           reduce using rule 143 (fds_statements -> LKEY RKEY .)
    CONTINUE        reduce using rule 143 (fds_statements -> LKEY RKEY .)
    RETURN          reduce using rule 143 (fds_statements -> LKEY RKEY .)
    EXIT            reduce using rule 143 (fds_statements -> LKEY RKEY .)
    DIE             reduce using rule 143 (fds_statements -> LKEY RKEY .)
    GLOBAL          reduce using rule 143 (fds_statements -> LKEY RKEY .)
    INCREMENT       reduce using rule 143 (fds_statements -> LKEY RKEY .)
    DECREMENT       reduce using rule 143 (fds_statements -> LKEY RKEY .)
    LPAREN          reduce using rule 143 (fds_statements -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 143 (fds_statements -> LKEY RKEY .)
    TRUE            reduce using rule 143 (fds_statements -> LKEY RKEY .)
    FALSE           reduce using rule 143 (fds_statements -> LKEY RKEY .)
    IF              reduce using rule 143 (fds_statements -> LKEY RKEY .)
    ID              reduce using rule 143 (fds_statements -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 143 (fds_statements -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 143 (fds_statements -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 143 (fds_statements -> LKEY RKEY .)
    DOLAR           reduce using rule 143 (fds_statements -> LKEY RKEY .)
    VARIABLE        reduce using rule 143 (fds_statements -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 143 (fds_statements -> LKEY RKEY .)
    RKEY            reduce using rule 143 (fds_statements -> LKEY RKEY .)


state 239

    (7) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (8) inner_statement_MUL -> inner_statement .
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (141) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 8 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    inner_statement                shift and go to state 239
    inner_statement_MUL            shift and go to state 264
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 240

    (146) fds_parameter -> LPAREN parameter_list RPAREN .

    LKEY            reduce using rule 146 (fds_parameter -> LPAREN parameter_list RPAREN .)


state 241

    (148) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 148 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 242

    (184) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (185) parameter_list_COLON_PARAMETER -> COLON . parameter
    (150) parameter -> . VARIABLE
    (151) parameter -> . parameter_prefix VARIABLE
    (152) parameter -> . VARIABLE ASSIGN static_scalar
    (153) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (154) parameter_prefix -> . parameter_type AMPERSAND
    (155) parameter_prefix -> . AMPERSAND
    (156) parameter_prefix -> . parameter_type
    (157) parameter_type -> . INT_TYPE
    (158) parameter_type -> . BOOLEAN_TYPE
    (159) parameter_type -> . STRING_TYPE
    (160) parameter_type -> . FLOAT_TYPE
    (161) parameter_type -> . ARRAY_TYPE
    (162) parameter_type -> . BOOL_TYPE
    (163) parameter_type -> . REAL_TYPE
    (164) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 196
    AMPERSAND       shift and go to state 199
    INT_TYPE        shift and go to state 200
    BOOLEAN_TYPE    shift and go to state 201
    STRING_TYPE     shift and go to state 202
    FLOAT_TYPE      shift and go to state 203
    ARRAY_TYPE      shift and go to state 204
    BOOL_TYPE       shift and go to state 205
    REAL_TYPE       shift and go to state 206
    DOUBLE_TYPE     shift and go to state 207

    parameter                      shift and go to state 265
    parameter_prefix               shift and go to state 197
    parameter_type                 shift and go to state 198

state 243

    (152) parameter -> VARIABLE ASSIGN . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 268
    MINUS           shift and go to state 269
    NUMBER_REAL     shift and go to state 270
    NUMBER_INTEGER  shift and go to state 271
    CONSTANT_ENCAPSED_STRING shift and go to state 272

    static_scalar                  shift and go to state 266
    common_scalar                  shift and go to state 267

state 244

    (151) parameter -> parameter_prefix VARIABLE .
    (153) parameter -> parameter_prefix VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 151 (parameter -> parameter_prefix VARIABLE .)
    RPAREN          reduce using rule 151 (parameter -> parameter_prefix VARIABLE .)
    ASSIGN          shift and go to state 273


state 245

    (154) parameter_prefix -> parameter_type AMPERSAND .

    VARIABLE        reduce using rule 154 (parameter_prefix -> parameter_type AMPERSAND .)


state 246

    (14) expr2 -> INTE_DOT expr DDOT expr .

    SEMICOLON       reduce using rule 14 (expr2 -> INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 14 (expr2 -> INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 14 (expr2 -> INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 14 (expr2 -> INTE_DOT expr DDOT expr .)
    AS              reduce using rule 14 (expr2 -> INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 14 (expr2 -> INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 14 (expr2 -> INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 14 (expr2 -> INTE_DOT expr DDOT expr .)


state 247

    (61) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    MINUS           reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOREACH         reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    INCREMENT       reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DECREMENT       reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DOLAR           reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 61 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)


state 248

    (68) for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 68 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)


state 249

    (75) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 75 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 250

    (73) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (74) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (87) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (88) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 73 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    for_expr_OPT                   shift and go to state 274
    expr                           shift and go to state 161
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 251

    (71) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (76) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 275


state 252

    (70) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (72) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (87) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (88) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 70 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    for_expr_OPT                   shift and go to state 276
    expr                           shift and go to state 161
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 253

    (179) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (180) for_expr_COLON_EXPR -> COLON expr .
    (179) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (180) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 180 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 180 (for_expr_COLON_EXPR -> COLON expr .)
    COLON           shift and go to state 219

    for_expr_COLON_EXPR            shift and go to state 277

state 254

    (85) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 278
    ATTR_ASSOC      shift and go to state 279


state 255

    (82) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 280


state 256

    (83) ampersand_variable -> VARIABLE .

    RPAREN          reduce using rule 83 (ampersand_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 83 (ampersand_variable -> VARIABLE .)


state 257

    (80) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 80 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 258

    (79) global_var -> DOLAR LKEY expr RKEY .

    COLON           reduce using rule 79 (global_var -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 79 (global_var -> DOLAR LKEY expr RKEY .)


state 259

    (190) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (191) array_pair_list_ARR_PAIR -> COLON array_pair .
    (190) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (191) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 191 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 228

    array_pair_list_ARR_PAIR       shift and go to state 281

state 260

    (175) array_pair -> expr ATTR_ASSOC expr .

    COLON           reduce using rule 175 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 175 (array_pair -> expr ATTR_ASSOC expr .)


state 261

    (176) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    variable                       shift and go to state 282
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 262

    (93) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (94) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .
    (93) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (94) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 94 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .)
    COLON           shift and go to state 233

    fc_parameter_list_COLON_PARAMETER shift and go to state 283

state 263

    (142) fds_statements -> LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 142 (fds_statements -> LKEY inner_statement_MUL RKEY .)


state 264

    (7) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 7 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 265

    (184) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (185) parameter_list_COLON_PARAMETER -> COLON parameter .
    (184) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (185) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 185 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 242

    parameter_list_COLON_PARAMETER shift and go to state 284

state 266

    (152) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 152 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 152 (parameter -> VARIABLE ASSIGN static_scalar .)


state 267

    (165) static_scalar -> common_scalar .

    COLON           reduce using rule 165 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 165 (static_scalar -> common_scalar .)


state 268

    (166) static_scalar -> PLUS . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 268
    MINUS           shift and go to state 269
    NUMBER_REAL     shift and go to state 270
    NUMBER_INTEGER  shift and go to state 271
    CONSTANT_ENCAPSED_STRING shift and go to state 272

    static_scalar                  shift and go to state 285
    common_scalar                  shift and go to state 267

state 269

    (167) static_scalar -> MINUS . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 268
    MINUS           shift and go to state 269
    NUMBER_REAL     shift and go to state 270
    NUMBER_INTEGER  shift and go to state 271
    CONSTANT_ENCAPSED_STRING shift and go to state 272

    static_scalar                  shift and go to state 286
    common_scalar                  shift and go to state 267

state 270

    (168) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 168 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 168 (common_scalar -> NUMBER_REAL .)


state 271

    (169) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 169 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 169 (common_scalar -> NUMBER_INTEGER .)


state 272

    (170) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 170 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 170 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 273

    (153) parameter -> parameter_prefix VARIABLE ASSIGN . static_scalar
    (165) static_scalar -> . common_scalar
    (166) static_scalar -> . PLUS static_scalar
    (167) static_scalar -> . MINUS static_scalar
    (168) common_scalar -> . NUMBER_REAL
    (169) common_scalar -> . NUMBER_INTEGER
    (170) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 268
    MINUS           shift and go to state 269
    NUMBER_REAL     shift and go to state 270
    NUMBER_INTEGER  shift and go to state 271
    CONSTANT_ENCAPSED_STRING shift and go to state 272

    static_scalar                  shift and go to state 287
    common_scalar                  shift and go to state 267

state 274

    (74) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 74 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 275

    (71) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (76) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (87) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (88) for_expr_OPT -> . expr
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 71 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    for_expr_OPT                   shift and go to state 288
    expr                           shift and go to state 161
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 276

    (72) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 72 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 277

    (179) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 179 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 179 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 278

    (85) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN . statement_BLOCK_OPT
    (181) statement_BLOCK_OPT -> . statement
    (182) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (183) statement_BLOCK_OPT -> . LKEY RKEY
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 94
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 289
    statement                      shift and go to state 93
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 279

    (86) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC . ampersand_variable RPAREN statement_BLOCK_OPT
    (82) ampersand_variable -> . AMPERSAND VARIABLE
    (83) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 255
    VARIABLE        shift and go to state 256

    ampersand_variable             shift and go to state 290

state 280

    (82) ampersand_variable -> AMPERSAND VARIABLE .

    RPAREN          reduce using rule 82 (ampersand_variable -> AMPERSAND VARIABLE .)
    ATTR_ASSOC      reduce using rule 82 (ampersand_variable -> AMPERSAND VARIABLE .)


state 281

    (190) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 190 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 282

    (176) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 176 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 176 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 283

    (93) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 93 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 284

    (184) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 184 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 285

    (166) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 166 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 166 (static_scalar -> PLUS static_scalar .)


state 286

    (167) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 167 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 167 (static_scalar -> MINUS static_scalar .)


state 287

    (153) parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 153 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 153 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)


state 288

    (76) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 76 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 289

    (85) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 85 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)


state 290

    (86) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 291


state 291

    (86) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN . statement_BLOCK_OPT
    (181) statement_BLOCK_OPT -> . statement
    (182) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (183) statement_BLOCK_OPT -> . LKEY RKEY
    (39) statement -> . expr SEMICOLON
    (40) statement -> . if_statement
    (41) statement -> . while_statement
    (42) statement -> . do_statement
    (43) statement -> . for_statement
    (44) statement -> . foreach_statement
    (45) statement -> . break_statement
    (46) statement -> . continue_statement
    (47) statement -> . return_statement
    (48) statement -> . exit_statement SEMICOLON
    (49) statement -> . die_statement SEMICOLON
    (50) statement -> . global_statement SEMICOLON
    (9) expr -> . MINUS expr1 expr2
    (10) expr -> . expr1 expr2
    (11) expr -> . expr3
    (12) expr -> . MINUS expr1
    (13) expr -> . expr1
    (53) if_statement -> . statement_if if_statement_complement
    (54) if_statement -> . statement_if
    (60) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (61) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (68) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (85) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (86) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (62) break_statement -> . BREAK expr SEMICOLON
    (63) break_statement -> . BREAK SEMICOLON
    (64) continue_statement -> . CONTINUE expr SEMICOLON
    (65) continue_statement -> . CONTINUE SEMICOLON
    (66) return_statement -> . RETURN expr SEMICOLON
    (67) return_statement -> . RETURN SEMICOLON
    (31) exit_statement -> . EXIT exit_expr
    (32) exit_statement -> . EXIT
    (33) die_statement -> . DIE exit_expr
    (34) die_statement -> . DIE
    (51) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (52) global_statement -> . GLOBAL global_var
    (20) expr1 -> . INCREMENT variable
    (21) expr1 -> . variable INCREMENT
    (22) expr1 -> . DECREMENT variable
    (23) expr1 -> . variable DECREMENT
    (24) expr1 -> . variable
    (25) expr1 -> . LPAREN expr RPAREN
    (26) expr1 -> . ARRAY_TYPE array_declaration
    (27) expr1 -> . function_call
    (28) expr1 -> . scalar
    (29) expr1 -> . TRUE
    (30) expr1 -> . FALSE
    (17) expr3 -> . variable assign_operator expr
    (18) expr3 -> . variable assign_operator AMPERSAND expr
    (19) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (57) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (133) variable -> . reference_variable
    (134) variable -> . simple_indirect_reference_DOLAR reference_variable
    (89) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (90) function_call -> . ID LPAREN RPAREN
    (130) scalar -> . NUMBER_REAL
    (131) scalar -> . NUMBER_INTEGER
    (132) scalar -> . CONSTANT_ENCAPSED_STRING
    (135) reference_variable -> . compound_variable reference_variable_SELECTOR
    (136) reference_variable -> . compound_variable
    (188) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (189) simple_indirect_reference_DOLAR -> . DOLAR
    (137) compound_variable -> . VARIABLE
    (138) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 94
    MINUS           shift and go to state 21
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    FOREACH         shift and go to state 29
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    RETURN          shift and go to state 32
    EXIT            shift and go to state 33
    DIE             shift and go to state 34
    GLOBAL          shift and go to state 35
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 38
    LPAREN          shift and go to state 28
    ARRAY_TYPE      shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    IF              shift and go to state 44
    ID              shift and go to state 47
    NUMBER_REAL     shift and go to state 48
    NUMBER_INTEGER  shift and go to state 49
    CONSTANT_ENCAPSED_STRING shift and go to state 50
    DOLAR           shift and go to state 52
    VARIABLE        shift and go to state 53

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 292
    statement                      shift and go to state 93
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    expr1                          shift and go to state 22
    expr3                          shift and go to state 23
    statement_if                   shift and go to state 24
    variable                       shift and go to state 37
    function_call                  shift and go to state 40
    scalar                         shift and go to state 41
    reference_variable             shift and go to state 45
    simple_indirect_reference_DOLAR shift and go to state 46
    compound_variable              shift and go to state 51

state 292

    (86) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 86 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 24 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 24 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 52 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 140 resolved as shift

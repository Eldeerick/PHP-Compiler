
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSADD_ASSIGN AMPERSAND AND APOSTROFE ARRAY_TYPE ARROBA AS ASPAS ASSIGN ATTR_ASSOC BEGIN_PROGRAM BOOLEAN_TYPE BOOL_TYPE BREAK CASE CLONE COLON COMMENT_MULTI COMMENT_SINGLE CONCATENATE CONSTANT_ENCAPSED_STRING CONTINUE CRASE DDOT DECLARE DECREMENT DIE DIVIDE DIVIDE_ASSIGN DO DOLAR DOUBLE_TYPE ELSE ELSEIF ENDDECLARE END_PROGRAM EQUALS EXC_DOT EXIT FALSE FLOAT_TYPE FOR FOREACH FUNCTION GLOBAL GREAT_EQUAL GREAT_THAN ID IDENTATION IF INCREMENT INTE_DOT INT_TYPE LBRACKET LEFT_LOGICAL LESS_EQUAL LESS_THAN LIST LKEY LPAREN MINUS MOD_ASSIGN NOT_EQUAL NUMBER_INTEGER NUMBER_REAL OR PERCENT PLUS PLUS_ASSIGN RBRACKET REAL_TYPE RETURN RIGHT_LOGICAL RKEY RPAREN SEMICOLON STRING STRING_TYPE SUB_ASSIGN TIMES TRUE UNSET VAR VARIABLE WHILE\n  main : BEGIN_PROGRAM main_INNER END_PROGRAM \n  | BEGIN_PROGRAM END_PROGRAM\n  \n  main_INNER : inner_statement main_INNER\n    | inner_statement\n  \n  inner_statement : function_declaration_statement\n    | statement\n  \n  statement : expr SEMICOLON\n    | if_statement\n    | while_statement\n    | do_statement\n    | for_statement\n    | foreach_statement\n    | break_statement\n    | continue_statement\n    | return_statement\n    | GLOBAL global_var statement_COLON_GLOBAL SEMICOLON\n    | GLOBAL global_var SEMICOLON\n  \n  if_statement : statement_if if_statement_complement\n    | statement_if\n  \n  if_statement_complement : statement_elseif\n    | statement_elseif statement_else\n    | statement_else\n  \n  while_statement : WHILE expr_parentheses statement_BLOCK_OPT\n  \n  do_statement : DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON\n  \n  break_statement : BREAK expr SEMICOLON\n    | BREAK SEMICOLON\n  \n  continue_statement : CONTINUE expr SEMICOLON\n    | CONTINUE SEMICOLON\n  \n  return_statement : RETURN expr SEMICOLON \n    | RETURN SEMICOLON\n  \n  for_statement : FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT\n  \n  for_parameters : SEMICOLON SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT\n  | SEMICOLON for_expr_OPT SEMICOLON\n  | SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  | SEMICOLON SEMICOLON for_expr_OPT\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  \n  global_var : VARIABLE\n    | DOLAR VARIABLE\n    | DOLAR LKEY expr RKEY \n  \n  statement_COLON_GLOBAL : COLON global_var statement_COLON_GLOBAL\n    | COLON global_var\n  \n  ampersand_variable : AMPERSAND VARIABLE\n    | VARIABLE\n  \n  expr_parentheses : LPAREN expr RPAREN\n  \n  statement_if : IF expr_parentheses statement_BLOCK_OPT\n  \n  statement_elseif : ELSEIF expr_parentheses statement_BLOCK_OPT\n  \n  statement_else : ELSE statement_BLOCK_OPT\n  \n  foreach_statement : FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT\n  | FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT\n  \n  for_expr_OPT : expr for_expr_COLON_EXPR\n   | expr\n  \n  function_call : ID LPAREN function_call_parameter_list RPAREN\n    | ID LPAREN RPAREN\n  \n  function_call_parameter_list : function_call_parameter function_call_list_COLON_FUNCTION\n    | function_call_parameter\n  \n  function_call_parameter : expr\n    | AMPERSAND VARIABLE\n  \n  assignment_list_element : variable\n    | LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT  RPAREN\n  \n  unary_operator : EXC_DOT\n    | PLUS\n    | MINUS\n  \n    type_cast_operator : INT_TYPE\n      | DOUBLE_TYPE\n      | FLOAT_TYPE\n      | REAL_TYPE\n      | STRING_TYPE\n      | ARRAY_TYPE\n      | BOOLEAN_TYPE\n      | BOOL_TYPE\n      | UNSET\n  \n  assign_operator : ADD_ASSIGN\n    | SUB_ASSIGN\n    | MOD_ASSIGN\n    | PLUS_ASSIGN\n    | DIVIDE_ASSIGN\n    | ASSIGN\n  \n  arithmetic_operator : PLUS\n    | DIVIDE\n    | PERCENT\n    | TIMES\n    | MINUS\n  \n  comparission_operator : EQUALS\n    | GREAT_THAN\n    | LESS_THAN\n    | LESS_EQUAL\n    | GREAT_EQUAL\n    | NOT_EQUAL\n    | LEFT_LOGICAL\n    | RIGHT_LOGICAL\n    | AND\n    | OR\n   \n  expr : INCREMENT variable\n    | variable INCREMENT\n    | DECREMENT variable\n    | variable DECREMENT\n    | variable assign_operator expr\n    | variable assign_operator AMPERSAND expr\n    | variable\n    | LPAREN expr RPAREN\n    | expr INTE_DOT expr DDOT expr\n    | expr comparission_operator expr\n    | expr arithmetic_operator expr\n    | MINUS expr %prec UMINUS\n    | LPAREN type_cast_operator RPAREN expr\n    | EXIT exit_expr\n    | EXIT\n    | DIE exit_expr\n    | DIE\n    | ARRAY_TYPE LPAREN array_pair_list RPAREN\n    | ARRAY_TYPE LPAREN RPAREN\n    | function_call\n    | scalar\n    | TRUE\n    | FALSE\n  \n  scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  exit_expr : LPAREN expr RPAREN\n    | LPAREN RPAREN\n  \n  variable : reference_variable\n    | simple_indirect_reference_DOLAR reference_variable\n  \n  reference_variable : compound_variable reference_variable_SELECTOR\n    | compound_variable\n  \n  compound_variable : VARIABLE \n    | DOLAR LKEY expr RKEY \n  \n  selector : LBRACKET expr RBRACKET \n    | LBRACKET RBRACKET\n  \n  function_declaration_statement : FUNCTION fds_id fds_parameter fds_statements\n  \n  fds_statements : LKEY inner_statement_MUL RKEY\n    | LKEY RKEY\n  \n  fds_id : AMPERSAND ID\n    | ID\n  \n  fds_parameter : LPAREN parameter_list RPAREN\n    | LPAREN RPAREN\n  \n  parameter_list : parameter parameter_list_COLON_PARAMETER \n    | parameter\n   \n  parameter : VARIABLE\n    | VARIABLE ASSIGN static_scalar\n    | parameter_type VARIABLE\n    | parameter_type AMPERSAND VARIABLE\n    | AMPERSAND VARIABLE\n    | AMPERSAND VARIABLE ASSIGN static_scalar\n    | parameter_type AMPERSAND VARIABLE ASSIGN static_scalar\n  \n  parameter_type : INT_TYPE\n    | BOOLEAN_TYPE\n    | STRING_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE \n    | BOOL_TYPE\n    | REAL_TYPE\n    | DOUBLE_TYPE\n  \n  static_scalar : common_scalar\n    | PLUS static_scalar\n    | MINUS static_scalar\n  \n  common_scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  array_pair_list : array_pair array_pair_list_ARR_PAIR \n    | array_pair\n   \n  array_pair : expr\n    | expr ATTR_ASSOC expr\n    | expr ATTR_ASSOC AMPERSAND variable\n    | AMPERSAND variable\n  \n  inner_statement_MUL : inner_statement inner_statement_MUL\n    | inner_statement\n  \n  statement_MUL : statement statement_MUL\n    | statement\n  \n  for_expr_COLON_EXPR : COLON expr for_expr_COLON_EXPR\n    | COLON expr\n  \n  statement_BLOCK_OPT : statement \n    | LKEY statement_MUL RKEY \n    | LKEY RKEY\n  \n  function_call_list_COLON_FUNCTION : COLON function_call_parameter function_call_list_COLON_FUNCTION\n    | COLON function_call_parameter\n  \n  assignment_list_element_COLON_ASSIGNMENT : COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT\n    | \n  \n  parameter_list_COLON_PARAMETER : COLON parameter parameter_list_COLON_PARAMETER\n    | COLON parameter\n  \n  reference_variable_SELECTOR : selector reference_variable_SELECTOR\n    | selector\n  \n  simple_indirect_reference_DOLAR : DOLAR simple_indirect_reference_DOLAR\n    | DOLAR\n  \n  array_pair_list_ARR_PAIR : COLON array_pair array_pair_list_ARR_PAIR\n    | COLON array_pair\n  '
    
_lr_action_items = {'BEGIN_PROGRAM':([0,],[2,]),'$end':([1,4,49,],[0,-2,-1,]),'END_PROGRAM':([2,3,5,6,7,10,11,12,13,14,15,16,17,31,50,54,103,104,105,111,116,118,120,138,153,155,156,160,167,168,169,175,180,197,208,211,227,242,243,253,281,285,],[4,49,-4,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,-3,-7,-18,-20,-22,-174,-26,-28,-30,-17,-21,-50,-23,-176,-25,-27,-29,-48,-132,-16,-49,-175,-134,-24,-31,-133,-51,-52,]),'FUNCTION':([2,5,6,7,10,11,12,13,14,15,16,17,31,54,103,104,105,111,116,118,120,138,153,155,156,160,167,168,169,175,180,181,197,208,211,227,228,242,243,253,281,285,],[8,8,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,-7,-18,-20,-22,-174,-26,-28,-30,-17,-21,-50,-23,-176,-25,-27,-29,-48,-132,8,-16,-49,-175,-134,8,-24,-31,-133,-51,-52,]),'GLOBAL':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[18,18,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,18,-7,-18,-20,-22,18,18,-174,18,-26,-28,-30,18,-17,-21,18,-50,-23,-176,18,-25,-27,-29,-48,-132,18,-16,-49,-47,-175,18,-134,18,-24,-31,-133,18,-51,18,-52,]),'INCREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,20,22,23,31,33,36,37,38,39,46,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,121,123,124,125,126,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,176,178,180,181,196,197,205,206,208,209,211,213,214,216,218,222,224,225,227,228,242,243,245,247,253,268,271,281,284,285,],[19,19,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,77,19,19,-19,19,19,19,19,-124,-127,-128,-7,19,19,19,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,19,-75,-76,-77,-78,-79,-80,19,19,-18,-20,-22,19,19,19,-174,19,19,19,-26,-28,-30,-125,19,19,-126,-184,19,19,-17,19,19,19,-21,19,-50,-23,-176,19,19,-25,-27,-29,-48,-183,-131,-132,19,19,-16,19,19,-49,-47,-175,19,19,19,19,19,-130,-129,-134,19,-24,-31,19,19,-133,19,19,-51,19,-52,]),'DECREMENT':([2,5,6,7,10,11,12,13,14,15,16,17,20,22,23,31,33,36,37,38,39,46,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,121,123,124,125,126,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,176,178,180,181,196,197,205,206,208,209,211,213,214,216,218,222,224,225,227,228,242,243,245,247,253,268,271,281,284,285,],[21,21,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,78,21,21,-19,21,21,21,21,-124,-127,-128,-7,21,21,21,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,21,-75,-76,-77,-78,-79,-80,21,21,-18,-20,-22,21,21,21,-174,21,21,21,-26,-28,-30,-125,21,21,-126,-184,21,21,-17,21,21,21,-21,21,-50,-23,-176,21,21,-25,-27,-29,-48,-183,-131,-132,21,21,-16,21,21,-49,-47,-175,21,21,21,21,21,-130,-129,-134,21,-24,-31,21,21,-133,21,21,-51,21,-52,]),'LPAREN':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,24,25,26,31,32,33,34,35,36,37,38,41,45,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,89,100,102,103,104,105,106,107,108,109,111,112,113,114,116,118,120,123,124,127,130,133,138,141,143,145,153,154,155,156,158,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,242,243,245,247,253,268,271,281,284,285,],[22,22,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,22,22,100,100,102,-19,109,22,113,114,22,22,22,123,109,132,-136,-7,22,22,22,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,22,-75,-76,-77,-78,-79,-80,102,22,22,-18,-20,-22,109,22,22,22,-174,22,22,22,-26,-28,-30,22,22,22,22,-135,-17,22,22,22,-21,22,-50,-23,109,-176,22,22,-25,-27,-29,-48,-132,22,22,-16,22,22,-49,-47,-175,22,22,22,22,22,-134,22,-24,-31,22,22,-133,22,22,-51,22,-52,]),'MINUS':([2,5,6,7,9,10,11,12,13,14,15,16,17,20,22,23,24,25,27,28,29,30,31,33,36,37,38,39,42,43,44,46,48,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,76,77,78,79,80,81,82,83,84,85,86,87,98,99,100,101,102,103,104,105,107,108,109,111,112,113,114,115,116,117,118,119,120,121,123,124,125,126,127,130,134,135,136,138,141,142,143,144,145,146,147,149,151,153,154,155,156,157,160,161,163,165,166,167,168,169,171,173,175,176,177,178,179,180,181,196,197,199,200,201,202,203,205,206,208,209,211,213,214,216,218,220,222,224,225,227,228,232,236,240,242,243,245,247,248,253,258,259,264,268,271,278,281,284,285,],[23,23,-5,-6,72,-8,-9,-10,-11,-12,-13,-14,-15,-102,23,23,-110,-112,-115,-116,-117,-118,-19,23,23,23,23,-124,-119,-120,-121,-127,-128,-7,23,23,23,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,-96,-97,-99,23,-75,-76,-77,-78,-79,-80,-98,72,-107,-109,23,-111,23,-18,-20,-22,23,23,23,-174,23,23,23,72,-26,72,-28,72,-30,-125,23,23,-126,-184,23,23,72,72,72,-17,23,72,23,-103,23,72,-123,-114,72,-21,23,-50,-23,72,-176,23,23,72,72,-25,-27,-29,-56,72,-48,-183,72,-131,72,-132,23,23,-16,72,72,72,-122,-113,23,23,-49,-47,-175,23,23,23,23,-55,23,-130,-129,-134,23,259,72,72,-24,-31,23,23,72,-133,259,259,259,23,23,259,-51,23,-52,]),'EXIT':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,242,243,245,247,253,268,271,281,284,285,],[24,24,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,24,24,-19,24,24,24,24,-7,24,24,24,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,24,-75,-76,-77,-78,-79,-80,24,24,-18,-20,-22,24,24,24,-174,24,24,24,-26,-28,-30,24,24,24,24,-17,24,24,24,-21,24,-50,-23,-176,24,24,-25,-27,-29,-48,-132,24,24,-16,24,24,-49,-47,-175,24,24,24,24,24,-134,24,-24,-31,24,24,-133,24,24,-51,24,-52,]),'DIE':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,242,243,245,247,253,268,271,281,284,285,],[25,25,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,25,25,-19,25,25,25,25,-7,25,25,25,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,25,-75,-76,-77,-78,-79,-80,25,25,-18,-20,-22,25,25,25,-174,25,25,25,-26,-28,-30,25,25,25,25,-17,25,25,25,-21,25,-50,-23,-176,25,25,-25,-27,-29,-48,-132,25,25,-16,25,25,-49,-47,-175,25,25,25,25,25,-134,25,-24,-31,25,25,-133,25,25,-51,25,-52,]),'ARRAY_TYPE':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,132,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,231,242,243,245,247,253,268,271,281,284,285,],[26,26,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,89,26,-19,26,26,26,26,-7,26,26,26,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,26,-75,-76,-77,-78,-79,-80,26,26,-18,-20,-22,26,26,26,-174,26,26,26,-26,-28,-30,26,26,26,26,192,-17,26,26,26,-21,26,-50,-23,-176,26,26,-25,-27,-29,-48,-132,26,26,-16,26,26,-49,-47,-175,26,26,26,26,26,-134,26,192,-24,-31,26,26,-133,26,26,-51,26,-52,]),'TRUE':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,242,243,245,247,253,268,271,281,284,285,],[29,29,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,29,29,-19,29,29,29,29,-7,29,29,29,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,29,-75,-76,-77,-78,-79,-80,29,29,-18,-20,-22,29,29,29,-174,29,29,29,-26,-28,-30,29,29,29,29,-17,29,29,29,-21,29,-50,-23,-176,29,29,-25,-27,-29,-48,-132,29,29,-16,29,29,-49,-47,-175,29,29,29,29,29,-134,29,-24,-31,29,29,-133,29,29,-51,29,-52,]),'FALSE':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,242,243,245,247,253,268,271,281,284,285,],[30,30,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,30,30,-19,30,30,30,30,-7,30,30,30,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,30,-75,-76,-77,-78,-79,-80,30,30,-18,-20,-22,30,30,30,-174,30,30,30,-26,-28,-30,30,30,30,30,-17,30,30,30,-21,30,-50,-23,-176,30,30,-25,-27,-29,-48,-132,30,30,-16,30,30,-49,-47,-175,30,30,30,30,30,-134,30,-24,-31,30,30,-133,30,30,-51,30,-52,]),'WHILE':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,110,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[32,32,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,32,-7,-18,-20,-22,32,32,158,-174,32,-26,-28,-30,32,-17,-21,32,-50,-23,-176,32,-25,-27,-29,-48,-132,32,-16,-49,-47,-175,32,-134,32,-24,-31,-133,32,-51,32,-52,]),'DO':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[33,33,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,33,-7,-18,-20,-22,33,33,-174,33,-26,-28,-30,33,-17,-21,33,-50,-23,-176,33,-25,-27,-29,-48,-132,33,-16,-49,-47,-175,33,-134,33,-24,-31,-133,33,-51,33,-52,]),'FOR':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[34,34,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,34,-7,-18,-20,-22,34,34,-174,34,-26,-28,-30,34,-17,-21,34,-50,-23,-176,34,-25,-27,-29,-48,-132,34,-16,-49,-47,-175,34,-134,34,-24,-31,-133,34,-51,34,-52,]),'FOREACH':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[35,35,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,35,-7,-18,-20,-22,35,35,-174,35,-26,-28,-30,35,-17,-21,35,-50,-23,-176,35,-25,-27,-29,-48,-132,35,-16,-49,-47,-175,35,-134,35,-24,-31,-133,35,-51,35,-52,]),'BREAK':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[36,36,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,36,-7,-18,-20,-22,36,36,-174,36,-26,-28,-30,36,-17,-21,36,-50,-23,-176,36,-25,-27,-29,-48,-132,36,-16,-49,-47,-175,36,-134,36,-24,-31,-133,36,-51,36,-52,]),'CONTINUE':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[37,37,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,37,-7,-18,-20,-22,37,37,-174,37,-26,-28,-30,37,-17,-21,37,-50,-23,-176,37,-25,-27,-29,-48,-132,37,-16,-49,-47,-175,37,-134,37,-24,-31,-133,37,-51,37,-52,]),'RETURN':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[38,38,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,38,-7,-18,-20,-22,38,38,-174,38,-26,-28,-30,38,-17,-21,38,-50,-23,-176,38,-25,-27,-29,-48,-132,38,-16,-49,-47,-175,38,-134,38,-24,-31,-133,38,-51,38,-52,]),'ID':([2,5,6,7,8,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,242,243,245,247,253,268,271,281,284,285,],[41,41,-5,-6,53,-8,-9,-10,-11,-12,-13,-14,-15,41,41,-19,41,41,41,41,133,-7,41,41,41,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,41,-75,-76,-77,-78,-79,-80,41,41,-18,-20,-22,41,41,41,-174,41,41,41,-26,-28,-30,41,41,41,41,-17,41,41,41,-21,41,-50,-23,-176,41,41,-25,-27,-29,-48,-132,41,41,-16,41,41,-49,-47,-175,41,41,41,41,41,-134,41,-24,-31,41,41,-133,41,41,-51,41,-52,]),'NUMBER_REAL':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,232,242,243,245,247,253,258,259,264,268,271,278,281,284,285,],[42,42,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,42,42,-19,42,42,42,42,-7,42,42,42,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,42,-75,-76,-77,-78,-79,-80,42,42,-18,-20,-22,42,42,42,-174,42,42,42,-26,-28,-30,42,42,42,42,-17,42,42,42,-21,42,-50,-23,-176,42,42,-25,-27,-29,-48,-132,42,42,-16,42,42,-49,-47,-175,42,42,42,42,42,-134,42,260,-24,-31,42,42,-133,260,260,260,42,42,260,-51,42,-52,]),'NUMBER_INTEGER':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,232,242,243,245,247,253,258,259,264,268,271,278,281,284,285,],[43,43,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,43,43,-19,43,43,43,43,-7,43,43,43,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,43,-75,-76,-77,-78,-79,-80,43,43,-18,-20,-22,43,43,43,-174,43,43,43,-26,-28,-30,43,43,43,43,-17,43,43,43,-21,43,-50,-23,-176,43,43,-25,-27,-29,-48,-132,43,43,-16,43,43,-49,-47,-175,43,43,43,43,43,-134,43,261,-24,-31,43,43,-133,261,261,261,43,43,261,-51,43,-52,]),'CONSTANT_ENCAPSED_STRING':([2,5,6,7,10,11,12,13,14,15,16,17,22,23,31,33,36,37,38,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,130,138,141,143,145,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,232,242,243,245,247,253,258,259,264,268,271,278,281,284,285,],[44,44,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,44,44,-19,44,44,44,44,-7,44,44,44,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,44,-75,-76,-77,-78,-79,-80,44,44,-18,-20,-22,44,44,44,-174,44,44,44,-26,-28,-30,44,44,44,44,-17,44,44,44,-21,44,-50,-23,-176,44,44,-25,-27,-29,-48,-132,44,44,-16,44,44,-49,-47,-175,44,44,44,44,44,-134,44,262,-24,-31,44,44,-133,262,262,262,44,44,262,-51,44,-52,]),'IF':([2,5,6,7,10,11,12,13,14,15,16,17,31,33,54,103,104,105,107,108,111,112,116,118,120,124,138,153,154,155,156,160,161,167,168,169,175,180,181,197,208,209,211,213,227,228,242,243,253,271,281,284,285,],[45,45,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-19,45,-7,-18,-20,-22,45,45,-174,45,-26,-28,-30,45,-17,-21,45,-50,-23,-176,45,-25,-27,-29,-48,-132,45,-16,-49,-47,-175,45,-134,45,-24,-31,-133,45,-51,45,-52,]),'DOLAR':([2,5,6,7,10,11,12,13,14,15,16,17,18,19,21,22,23,31,33,36,37,38,40,47,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,128,129,130,138,139,141,143,145,152,153,154,155,156,160,161,163,167,168,169,175,180,181,196,197,205,206,208,209,211,213,214,216,218,222,227,228,241,242,243,245,247,253,268,271,281,284,285,],[47,47,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,75,47,47,47,47,-19,47,47,47,47,122,128,-7,47,47,47,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,47,-75,-76,-77,-78,-79,-80,47,47,-18,-20,-22,47,47,47,-174,47,47,47,-26,-28,-30,47,47,47,128,-185,47,-17,75,47,47,47,47,-21,47,-50,-23,-176,47,47,-25,-27,-29,-48,-132,47,47,-16,47,47,-49,-47,-175,47,47,47,47,47,-134,47,47,-24,-31,47,47,-133,47,47,-51,47,-52,]),'VARIABLE':([2,5,6,7,10,11,12,13,14,15,16,17,18,19,21,22,23,31,33,36,37,38,40,47,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,79,80,81,82,83,84,85,100,102,103,104,105,107,108,109,111,112,113,114,116,118,120,123,124,127,128,129,130,132,138,139,141,143,145,152,153,154,155,156,160,161,163,167,168,169,174,175,180,181,186,187,188,189,190,191,192,193,194,195,196,197,205,206,208,209,211,213,214,216,218,219,222,227,228,231,234,241,242,243,245,247,250,253,268,271,272,281,284,285,],[48,48,-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,74,48,48,48,48,-19,48,48,48,48,48,-186,-7,48,48,48,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-81,-82,-83,-84,-85,140,48,-75,-76,-77,-78,-79,-80,48,48,-18,-20,-22,48,48,48,-174,48,48,48,-26,-28,-30,48,48,48,-186,-185,48,185,-17,74,48,48,48,48,-21,48,-50,-23,-176,48,48,-25,-27,-29,223,-48,-132,48,233,235,-148,-149,-150,-151,-152,-153,-154,-155,48,-16,48,48,-49,-47,-175,48,48,48,48,251,48,-134,48,185,263,48,-24,-31,48,48,273,-133,48,48,251,-51,48,-52,]),'RKEY':([6,7,10,11,12,13,14,15,16,17,20,24,25,27,28,29,30,31,39,42,43,44,46,48,54,76,77,78,86,98,99,101,103,104,105,111,112,116,118,120,121,125,126,135,136,138,142,144,147,149,153,155,156,159,160,161,167,168,169,171,175,176,178,179,180,181,197,199,200,201,202,203,208,211,212,220,224,225,226,227,228,236,242,243,253,254,281,285,],[-5,-6,-8,-9,-10,-11,-12,-13,-14,-15,-102,-110,-112,-115,-116,-117,-118,-19,-124,-119,-120,-121,-127,-128,-7,-96,-97,-99,-98,-107,-109,-111,-18,-20,-22,-174,160,-26,-28,-30,-125,-126,-184,-105,-106,-17,-100,-103,-123,-114,-21,-50,-23,211,-176,-171,-25,-27,-29,-56,-48,-183,-131,225,-132,227,-16,238,-101,-108,-122,-113,-49,-175,-170,-55,-130,-129,253,-134,-169,-104,-24,-31,-133,-168,-51,-52,]),'AMPERSAND':([8,79,80,81,82,83,84,85,102,123,132,186,188,189,190,191,192,193,194,195,205,206,219,222,231,272,],[52,143,-75,-76,-77,-78,-79,-80,152,174,187,234,-148,-149,-150,-151,-152,-153,-154,-155,152,241,250,174,187,250,]),'SEMICOLON':([9,20,24,25,27,28,29,30,36,37,38,39,42,43,44,46,48,73,74,76,77,78,86,98,99,101,113,115,117,119,121,125,126,135,136,137,140,142,144,147,149,163,164,165,171,176,178,198,200,201,202,203,209,210,215,216,217,220,224,225,236,237,238,246,248,270,],[54,-102,-110,-112,-115,-116,-117,-118,116,118,120,-124,-119,-120,-121,-127,-128,138,-40,-96,-97,-99,-98,-107,-109,-111,163,167,168,169,-125,-126,-184,-105,-106,197,-41,-100,-103,-123,-114,214,216,-54,-56,-183,-131,-44,-101,-108,-122,-113,-47,242,245,247,-53,-55,-130,-129,-104,-43,-42,268,-173,-172,]),'INTE_DOT':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[55,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,55,-107,-109,-111,55,55,55,-125,-126,-184,55,55,55,55,-103,55,-123,-114,55,55,55,55,-56,55,-183,55,-131,55,55,55,55,-122,-113,-55,-130,-129,55,55,55,]),'EQUALS':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[58,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,58,-107,-109,-111,58,58,58,-125,-126,-184,58,58,58,58,-103,58,-123,-114,58,58,58,58,-56,58,-183,58,-131,58,58,58,58,-122,-113,-55,-130,-129,58,58,58,]),'GREAT_THAN':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[59,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,59,-107,-109,-111,59,59,59,-125,-126,-184,59,59,59,59,-103,59,-123,-114,59,59,59,59,-56,59,-183,59,-131,59,59,59,59,-122,-113,-55,-130,-129,59,59,59,]),'LESS_THAN':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[60,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,60,-107,-109,-111,60,60,60,-125,-126,-184,60,60,60,60,-103,60,-123,-114,60,60,60,60,-56,60,-183,60,-131,60,60,60,60,-122,-113,-55,-130,-129,60,60,60,]),'LESS_EQUAL':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[61,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,61,-107,-109,-111,61,61,61,-125,-126,-184,61,61,61,61,-103,61,-123,-114,61,61,61,61,-56,61,-183,61,-131,61,61,61,61,-122,-113,-55,-130,-129,61,61,61,]),'GREAT_EQUAL':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[62,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,62,-107,-109,-111,62,62,62,-125,-126,-184,62,62,62,62,-103,62,-123,-114,62,62,62,62,-56,62,-183,62,-131,62,62,62,62,-122,-113,-55,-130,-129,62,62,62,]),'NOT_EQUAL':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[63,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,63,-107,-109,-111,63,63,63,-125,-126,-184,63,63,63,63,-103,63,-123,-114,63,63,63,63,-56,63,-183,63,-131,63,63,63,63,-122,-113,-55,-130,-129,63,63,63,]),'LEFT_LOGICAL':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[64,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,64,-107,-109,-111,64,64,64,-125,-126,-184,64,64,64,64,-103,64,-123,-114,64,64,64,64,-56,64,-183,64,-131,64,64,64,64,-122,-113,-55,-130,-129,64,64,64,]),'RIGHT_LOGICAL':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[65,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,65,-107,-109,-111,65,65,65,-125,-126,-184,65,65,65,65,-103,65,-123,-114,65,65,65,65,-56,65,-183,65,-131,65,65,65,65,-122,-113,-55,-130,-129,65,65,65,]),'AND':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[66,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,66,-107,-109,-111,66,66,66,-125,-126,-184,66,66,66,66,-103,66,-123,-114,66,66,66,66,-56,66,-183,66,-131,66,66,66,66,-122,-113,-55,-130,-129,66,66,66,]),'OR':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[67,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,67,-107,-109,-111,67,67,67,-125,-126,-184,67,67,67,67,-103,67,-123,-114,67,67,67,67,-56,67,-183,67,-131,67,67,67,67,-122,-113,-55,-130,-129,67,67,67,]),'PLUS':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,232,236,240,248,258,259,264,278,],[68,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,68,-107,-109,-111,68,68,68,-125,-126,-184,68,68,68,68,-103,68,-123,-114,68,68,68,68,-56,68,-183,68,-131,68,68,68,68,-122,-113,-55,-130,-129,258,68,68,68,258,258,258,258,]),'DIVIDE':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[69,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,69,-107,-109,-111,69,69,69,-125,-126,-184,69,69,69,69,-103,69,-123,-114,69,69,69,69,-56,69,-183,69,-131,69,69,69,69,-122,-113,-55,-130,-129,69,69,69,]),'PERCENT':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[70,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,70,-107,-109,-111,70,70,70,-125,-126,-184,70,70,70,70,-103,70,-123,-114,70,70,70,70,-56,70,-183,70,-131,70,70,70,70,-122,-113,-55,-130,-129,70,70,70,]),'TIMES':([9,20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,98,99,101,115,117,119,121,125,126,134,135,136,142,144,146,147,149,151,157,165,166,171,173,176,177,178,179,199,200,201,202,203,220,224,225,236,240,248,],[71,-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,71,-107,-109,-111,71,71,71,-125,-126,-184,71,71,71,71,-103,71,-123,-114,71,71,71,71,-56,71,-183,71,-131,71,71,71,71,-122,-113,-55,-130,-129,71,71,71,]),'ELSEIF':([10,11,12,13,14,15,16,17,31,54,103,104,105,111,116,118,120,138,153,155,156,160,167,168,169,175,197,208,211,242,243,281,285,],[-8,-9,-10,-11,-12,-13,-14,-15,106,-7,-18,-20,-22,-174,-26,-28,-30,-17,-21,-50,-23,-176,-25,-27,-29,-48,-16,-49,-175,-24,-31,-51,-52,]),'ELSE':([10,11,12,13,14,15,16,17,31,54,103,104,105,111,116,118,120,138,153,155,156,160,167,168,169,175,197,208,211,242,243,281,285,],[-8,-9,-10,-11,-12,-13,-14,-15,107,-7,-18,107,-22,-174,-26,-28,-30,-17,-21,-50,-23,-176,-25,-27,-29,-48,-16,-49,-175,-24,-31,-51,-52,]),'RPAREN':([20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,121,123,125,126,132,135,136,142,144,146,147,148,149,150,151,157,162,165,170,171,172,173,176,178,182,184,185,200,201,202,203,204,207,214,217,220,221,223,224,225,230,233,235,236,239,240,244,245,247,248,249,251,252,255,256,257,260,261,262,263,265,266,267,268,269,270,273,274,275,276,277,279,280,282,283,],[-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,144,145,-71,-66,-67,-68,-69,-70,-72,-73,-74,-107,-109,147,-111,149,-125,171,-126,-184,183,-105,-106,-100,-103,202,-123,203,-114,-163,-164,209,213,-54,220,-56,-58,-59,-183,-131,229,-140,-141,-101,-108,-122,-113,-162,-167,-32,-53,-55,-57,-60,-130,-129,-139,-143,-145,-104,-188,-165,-38,-36,-33,-173,271,-46,-178,-182,-142,-156,-159,-160,-161,-144,-187,-166,-37,-34,-35,-172,-45,-177,-181,-157,-158,-146,-39,284,-147,]),'DDOT':([20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,98,99,101,121,125,126,134,135,136,142,144,147,149,171,176,178,200,201,202,203,220,224,225,236,],[-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,-107,-109,-111,-125,-126,-184,196,-105,-106,-100,-103,-123,-114,-56,-183,-131,-101,-108,-122,-113,-55,-130,-129,-104,]),'ATTR_ASSOC':([20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,98,99,101,121,125,126,135,136,142,144,147,149,151,171,176,178,200,201,202,203,220,224,225,236,249,251,273,],[-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,-107,-109,-111,-125,-126,-184,-105,-106,-100,-103,-123,-114,206,-56,-183,-131,-101,-108,-122,-113,-55,-130,-129,-104,272,-46,-45,]),'COLON':([20,24,25,27,28,29,30,39,42,43,44,46,48,73,74,76,77,78,86,98,99,101,121,125,126,135,136,140,142,144,147,149,150,151,165,171,172,173,176,178,184,185,198,200,201,202,203,207,220,223,224,225,233,235,236,238,239,240,248,252,255,256,257,260,261,262,263,266,276,277,279,283,],[-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,139,-40,-96,-97,-99,-98,-107,-109,-111,-125,-126,-184,-105,-106,-41,-100,-103,-123,-114,205,-164,218,-56,222,-59,-183,-131,231,-141,139,-101,-108,-122,-113,-167,-55,-60,-130,-129,-143,-145,-104,-42,205,-165,218,222,231,-142,-156,-159,-160,-161,-144,-166,-157,-158,-146,-147,]),'AS':([20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,98,99,101,121,125,126,135,136,142,144,147,149,166,171,176,178,200,201,202,203,220,224,225,236,],[-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,-107,-109,-111,-125,-126,-184,-105,-106,-100,-103,-123,-114,219,-56,-183,-131,-101,-108,-122,-113,-55,-130,-129,-104,]),'RBRACKET':([20,24,25,27,28,29,30,39,42,43,44,46,48,76,77,78,86,98,99,101,121,125,126,127,135,136,142,144,147,149,171,176,177,178,200,201,202,203,220,224,225,236,],[-102,-110,-112,-115,-116,-117,-118,-124,-119,-120,-121,-127,-128,-96,-97,-99,-98,-107,-109,-111,-125,-126,-184,178,-105,-106,-100,-103,-123,-114,-56,-183,224,-131,-101,-108,-122,-113,-55,-130,-129,-104,]),'ADD_ASSIGN':([20,39,46,48,121,125,126,176,178,224,225,],[80,-124,-127,-128,-125,-126,-184,-183,-131,-130,-129,]),'SUB_ASSIGN':([20,39,46,48,121,125,126,176,178,224,225,],[81,-124,-127,-128,-125,-126,-184,-183,-131,-130,-129,]),'MOD_ASSIGN':([20,39,46,48,121,125,126,176,178,224,225,],[82,-124,-127,-128,-125,-126,-184,-183,-131,-130,-129,]),'PLUS_ASSIGN':([20,39,46,48,121,125,126,176,178,224,225,],[83,-124,-127,-128,-125,-126,-184,-183,-131,-130,-129,]),'DIVIDE_ASSIGN':([20,39,46,48,121,125,126,176,178,224,225,],[84,-124,-127,-128,-125,-126,-184,-183,-131,-130,-129,]),'ASSIGN':([20,39,46,48,121,125,126,176,178,185,224,225,235,263,],[85,-124,-127,-128,-125,-126,-184,-183,-131,232,-130,-129,264,278,]),'INT_TYPE':([22,132,231,],[90,188,188,]),'DOUBLE_TYPE':([22,132,231,],[91,195,195,]),'FLOAT_TYPE':([22,132,231,],[92,191,191,]),'REAL_TYPE':([22,132,231,],[93,194,194,]),'STRING_TYPE':([22,132,231,],[94,190,190,]),'BOOLEAN_TYPE':([22,132,231,],[95,189,189,]),'BOOL_TYPE':([22,132,231,],[96,193,193,]),'UNSET':([22,],[97,]),'LKEY':([33,47,75,107,108,122,124,131,154,183,209,213,229,271,284,],[112,130,141,112,112,130,112,181,112,-138,-47,112,-137,112,112,]),'LBRACKET':([46,48,126,178,224,225,],[127,-128,127,-131,-130,-129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'main_INNER':([2,5,],[3,50,]),'inner_statement':([2,5,181,228,],[5,5,228,228,]),'function_declaration_statement':([2,5,181,228,],[6,6,6,6,]),'statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[7,7,111,111,111,161,111,111,161,7,111,7,111,111,]),'expr':([2,5,22,23,33,36,37,38,55,56,57,79,100,102,107,108,109,112,113,114,123,124,127,130,141,143,145,154,161,163,181,196,205,206,213,214,216,218,222,228,245,247,268,271,284,],[9,9,87,98,9,115,117,119,134,135,136,142,146,151,9,9,157,9,165,166,173,9,177,179,199,200,201,9,9,165,9,236,151,240,9,165,165,248,173,9,165,165,165,9,9,]),'if_statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'while_statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'do_statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'for_statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'foreach_statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'break_statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'continue_statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'return_statement':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'variable':([2,5,19,21,22,23,33,36,37,38,55,56,57,79,100,102,107,108,109,112,113,114,123,124,127,130,141,143,145,152,154,161,163,181,196,205,206,213,214,216,218,222,228,241,245,247,268,271,284,],[20,20,76,86,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,207,20,20,20,20,20,20,20,20,20,20,20,20,20,266,20,20,20,20,20,]),'function_call':([2,5,22,23,33,36,37,38,55,56,57,79,100,102,107,108,109,112,113,114,123,124,127,130,141,143,145,154,161,163,181,196,205,206,213,214,216,218,222,228,245,247,268,271,284,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'scalar':([2,5,22,23,33,36,37,38,55,56,57,79,100,102,107,108,109,112,113,114,123,124,127,130,141,143,145,154,161,163,181,196,205,206,213,214,216,218,222,228,245,247,268,271,284,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'statement_if':([2,5,33,107,108,112,124,154,161,181,213,228,271,284,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'reference_variable':([2,5,19,21,22,23,33,36,37,38,40,55,56,57,79,100,102,107,108,109,112,113,114,123,124,127,130,141,143,145,152,154,161,163,181,196,205,206,213,214,216,218,222,228,241,245,247,268,271,284,],[39,39,39,39,39,39,39,39,39,39,121,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'simple_indirect_reference_DOLAR':([2,5,19,21,22,23,33,36,37,38,47,55,56,57,79,100,102,107,108,109,112,113,114,123,124,127,128,130,141,143,145,152,154,161,163,181,196,205,206,213,214,216,218,222,228,241,245,247,268,271,284,],[40,40,40,40,40,40,40,40,40,40,129,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,129,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'compound_variable':([2,5,19,21,22,23,33,36,37,38,40,55,56,57,79,100,102,107,108,109,112,113,114,123,124,127,130,141,143,145,152,154,161,163,181,196,205,206,213,214,216,218,222,228,241,245,247,268,271,284,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'fds_id':([8,],[51,]),'comparission_operator':([9,87,98,115,117,119,134,135,136,142,146,151,157,165,166,173,177,179,199,200,201,236,240,248,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'arithmetic_operator':([9,87,98,115,117,119,134,135,136,142,146,151,157,165,166,173,177,179,199,200,201,236,240,248,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'global_var':([18,139,],[73,198,]),'assign_operator':([20,],[79,]),'type_cast_operator':([22,],[88,]),'exit_expr':([24,25,],[99,101,]),'if_statement_complement':([31,],[103,]),'statement_elseif':([31,],[104,]),'statement_else':([31,104,],[105,153,]),'expr_parentheses':([32,45,106,158,],[108,124,154,210,]),'statement_BLOCK_OPT':([33,107,108,124,154,213,271,284,],[110,155,156,175,208,243,281,285,]),'reference_variable_SELECTOR':([46,126,],[125,176,]),'selector':([46,126,],[126,126,]),'fds_parameter':([51,],[131,]),'statement_COLON_GLOBAL':([73,198,],[137,237,]),'array_pair_list':([102,],[148,]),'array_pair':([102,205,],[150,239,]),'statement_MUL':([112,161,],[159,212,]),'for_parameters':([113,],[162,]),'for_expr_OPT':([113,163,214,216,245,247,268,],[164,215,244,246,267,269,280,]),'function_call_parameter_list':([123,],[170,]),'function_call_parameter':([123,222,],[172,252,]),'fds_statements':([131,],[180,]),'parameter_list':([132,],[182,]),'parameter':([132,231,],[184,255,]),'parameter_type':([132,231,],[186,186,]),'array_pair_list_ARR_PAIR':([150,239,],[204,265,]),'for_expr_COLON_EXPR':([165,248,],[217,270,]),'function_call_list_COLON_FUNCTION':([172,252,],[221,274,]),'inner_statement_MUL':([181,228,],[226,254,]),'parameter_list_COLON_PARAMETER':([184,255,],[230,275,]),'ampersand_variable':([219,272,],[249,282,]),'static_scalar':([232,258,259,264,278,],[256,276,277,279,283,]),'common_scalar':([232,258,259,264,278,],[257,257,257,257,257,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> BEGIN_PROGRAM main_INNER END_PROGRAM','main',3,'p_main','ExpressionLanguageParser.py',15),
  ('main -> BEGIN_PROGRAM END_PROGRAM','main',2,'p_main','ExpressionLanguageParser.py',16),
  ('main_INNER -> inner_statement main_INNER','main_INNER',2,'p_main_INNER','ExpressionLanguageParser.py',25),
  ('main_INNER -> inner_statement','main_INNER',1,'p_main_INNER','ExpressionLanguageParser.py',26),
  ('inner_statement -> function_declaration_statement','inner_statement',1,'p_inner_statement','ExpressionLanguageParser.py',35),
  ('inner_statement -> statement','inner_statement',1,'p_inner_statement','ExpressionLanguageParser.py',36),
  ('statement -> expr SEMICOLON','statement',2,'p_statement','ExpressionLanguageParser.py',45),
  ('statement -> if_statement','statement',1,'p_statement','ExpressionLanguageParser.py',46),
  ('statement -> while_statement','statement',1,'p_statement','ExpressionLanguageParser.py',47),
  ('statement -> do_statement','statement',1,'p_statement','ExpressionLanguageParser.py',48),
  ('statement -> for_statement','statement',1,'p_statement','ExpressionLanguageParser.py',49),
  ('statement -> foreach_statement','statement',1,'p_statement','ExpressionLanguageParser.py',50),
  ('statement -> break_statement','statement',1,'p_statement','ExpressionLanguageParser.py',51),
  ('statement -> continue_statement','statement',1,'p_statement','ExpressionLanguageParser.py',52),
  ('statement -> return_statement','statement',1,'p_statement','ExpressionLanguageParser.py',53),
  ('statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON','statement',4,'p_statement','ExpressionLanguageParser.py',54),
  ('statement -> GLOBAL global_var SEMICOLON','statement',3,'p_statement','ExpressionLanguageParser.py',55),
  ('if_statement -> statement_if if_statement_complement','if_statement',2,'p_if_statement','ExpressionLanguageParser.py',62),
  ('if_statement -> statement_if','if_statement',1,'p_if_statement','ExpressionLanguageParser.py',63),
  ('if_statement_complement -> statement_elseif','if_statement_complement',1,'p_if_statement_complement','ExpressionLanguageParser.py',68),
  ('if_statement_complement -> statement_elseif statement_else','if_statement_complement',2,'p_if_statement_complement','ExpressionLanguageParser.py',69),
  ('if_statement_complement -> statement_else','if_statement_complement',1,'p_if_statement_complement','ExpressionLanguageParser.py',70),
  ('while_statement -> WHILE expr_parentheses statement_BLOCK_OPT','while_statement',3,'p_while_statement','ExpressionLanguageParser.py',75),
  ('do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON','do_statement',5,'p_do_statement','ExpressionLanguageParser.py',80),
  ('break_statement -> BREAK expr SEMICOLON','break_statement',3,'p_break_statement','ExpressionLanguageParser.py',85),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','ExpressionLanguageParser.py',86),
  ('continue_statement -> CONTINUE expr SEMICOLON','continue_statement',3,'p_continue_statement','ExpressionLanguageParser.py',91),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','ExpressionLanguageParser.py',92),
  ('return_statement -> RETURN expr SEMICOLON','return_statement',3,'p_return_statement','ExpressionLanguageParser.py',97),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','ExpressionLanguageParser.py',98),
  ('for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT','for_statement',5,'p_for_statement','ExpressionLanguageParser.py',103),
  ('for_parameters -> SEMICOLON SEMICOLON','for_parameters',2,'p_for_parameters','ExpressionLanguageParser.py',108),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON','for_parameters',3,'p_for_parameters','ExpressionLanguageParser.py',109),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON','for_parameters',4,'p_for_parameters','ExpressionLanguageParser.py',110),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','ExpressionLanguageParser.py',111),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON','for_parameters',3,'p_for_parameters','ExpressionLanguageParser.py',112),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','ExpressionLanguageParser.py',113),
  ('for_parameters -> SEMICOLON SEMICOLON for_expr_OPT','for_parameters',3,'p_for_parameters','ExpressionLanguageParser.py',114),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',5,'p_for_parameters','ExpressionLanguageParser.py',115),
  ('global_var -> VARIABLE','global_var',1,'p_global_var','ExpressionLanguageParser.py',120),
  ('global_var -> DOLAR VARIABLE','global_var',2,'p_global_var','ExpressionLanguageParser.py',121),
  ('global_var -> DOLAR LKEY expr RKEY','global_var',4,'p_global_var','ExpressionLanguageParser.py',122),
  ('statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL','statement_COLON_GLOBAL',3,'p_statement_COLON_GLOBAL','ExpressionLanguageParser.py',127),
  ('statement_COLON_GLOBAL -> COLON global_var','statement_COLON_GLOBAL',2,'p_statement_COLON_GLOBAL','ExpressionLanguageParser.py',128),
  ('ampersand_variable -> AMPERSAND VARIABLE','ampersand_variable',2,'p_ampersand_variable','ExpressionLanguageParser.py',133),
  ('ampersand_variable -> VARIABLE','ampersand_variable',1,'p_ampersand_variable','ExpressionLanguageParser.py',134),
  ('expr_parentheses -> LPAREN expr RPAREN','expr_parentheses',3,'p_expr_parentheses','ExpressionLanguageParser.py',139),
  ('statement_if -> IF expr_parentheses statement_BLOCK_OPT','statement_if',3,'p_statement_if','ExpressionLanguageParser.py',144),
  ('statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT','statement_elseif',3,'p_statement_elseif','ExpressionLanguageParser.py',149),
  ('statement_else -> ELSE statement_BLOCK_OPT','statement_else',2,'p_statement_else','ExpressionLanguageParser.py',154),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT','foreach_statement',7,'p_foreach_statement','ExpressionLanguageParser.py',159),
  ('foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT','foreach_statement',9,'p_foreach_statement','ExpressionLanguageParser.py',160),
  ('for_expr_OPT -> expr for_expr_COLON_EXPR','for_expr_OPT',2,'p_for_expr_OPT','ExpressionLanguageParser.py',165),
  ('for_expr_OPT -> expr','for_expr_OPT',1,'p_for_expr_OPT','ExpressionLanguageParser.py',166),
  ('function_call -> ID LPAREN function_call_parameter_list RPAREN','function_call',4,'p_function_call','ExpressionLanguageParser.py',172),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','ExpressionLanguageParser.py',173),
  ('function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION','function_call_parameter_list',2,'p_function_call_parameter_list','ExpressionLanguageParser.py',178),
  ('function_call_parameter_list -> function_call_parameter','function_call_parameter_list',1,'p_function_call_parameter_list','ExpressionLanguageParser.py',179),
  ('function_call_parameter -> expr','function_call_parameter',1,'p_function_call_parameter','ExpressionLanguageParser.py',185),
  ('function_call_parameter -> AMPERSAND VARIABLE','function_call_parameter',2,'p_function_call_parameter','ExpressionLanguageParser.py',186),
  ('assignment_list_element -> variable','assignment_list_element',1,'p_assignment_list_element','ExpressionLanguageParser.py',191),
  ('assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN','assignment_list_element',5,'p_assignment_list_element','ExpressionLanguageParser.py',192),
  ('unary_operator -> EXC_DOT','unary_operator',1,'p_unary_operator','ExpressionLanguageParser.py',198),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','ExpressionLanguageParser.py',199),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','ExpressionLanguageParser.py',200),
  ('type_cast_operator -> INT_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',205),
  ('type_cast_operator -> DOUBLE_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',206),
  ('type_cast_operator -> FLOAT_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',207),
  ('type_cast_operator -> REAL_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',208),
  ('type_cast_operator -> STRING_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',209),
  ('type_cast_operator -> ARRAY_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',210),
  ('type_cast_operator -> BOOLEAN_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',211),
  ('type_cast_operator -> BOOL_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',212),
  ('type_cast_operator -> UNSET','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',213),
  ('assign_operator -> ADD_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',218),
  ('assign_operator -> SUB_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',219),
  ('assign_operator -> MOD_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',220),
  ('assign_operator -> PLUS_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',221),
  ('assign_operator -> DIVIDE_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',222),
  ('assign_operator -> ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',223),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',228),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',229),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',230),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',231),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',232),
  ('comparission_operator -> EQUALS','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',237),
  ('comparission_operator -> GREAT_THAN','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',238),
  ('comparission_operator -> LESS_THAN','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',239),
  ('comparission_operator -> LESS_EQUAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',240),
  ('comparission_operator -> GREAT_EQUAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',241),
  ('comparission_operator -> NOT_EQUAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',242),
  ('comparission_operator -> LEFT_LOGICAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',243),
  ('comparission_operator -> RIGHT_LOGICAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',244),
  ('comparission_operator -> AND','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',245),
  ('comparission_operator -> OR','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',246),
  ('expr -> INCREMENT variable','expr',2,'p_expr','ExpressionLanguageParser.py',251),
  ('expr -> variable INCREMENT','expr',2,'p_expr','ExpressionLanguageParser.py',252),
  ('expr -> DECREMENT variable','expr',2,'p_expr','ExpressionLanguageParser.py',253),
  ('expr -> variable DECREMENT','expr',2,'p_expr','ExpressionLanguageParser.py',254),
  ('expr -> variable assign_operator expr','expr',3,'p_expr','ExpressionLanguageParser.py',255),
  ('expr -> variable assign_operator AMPERSAND expr','expr',4,'p_expr','ExpressionLanguageParser.py',256),
  ('expr -> variable','expr',1,'p_expr','ExpressionLanguageParser.py',257),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','ExpressionLanguageParser.py',258),
  ('expr -> expr INTE_DOT expr DDOT expr','expr',5,'p_expr','ExpressionLanguageParser.py',259),
  ('expr -> expr comparission_operator expr','expr',3,'p_expr','ExpressionLanguageParser.py',260),
  ('expr -> expr arithmetic_operator expr','expr',3,'p_expr','ExpressionLanguageParser.py',261),
  ('expr -> MINUS expr','expr',2,'p_expr','ExpressionLanguageParser.py',262),
  ('expr -> LPAREN type_cast_operator RPAREN expr','expr',4,'p_expr','ExpressionLanguageParser.py',263),
  ('expr -> EXIT exit_expr','expr',2,'p_expr','ExpressionLanguageParser.py',264),
  ('expr -> EXIT','expr',1,'p_expr','ExpressionLanguageParser.py',265),
  ('expr -> DIE exit_expr','expr',2,'p_expr','ExpressionLanguageParser.py',266),
  ('expr -> DIE','expr',1,'p_expr','ExpressionLanguageParser.py',267),
  ('expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN','expr',4,'p_expr','ExpressionLanguageParser.py',268),
  ('expr -> ARRAY_TYPE LPAREN RPAREN','expr',3,'p_expr','ExpressionLanguageParser.py',269),
  ('expr -> function_call','expr',1,'p_expr','ExpressionLanguageParser.py',270),
  ('expr -> scalar','expr',1,'p_expr','ExpressionLanguageParser.py',271),
  ('expr -> TRUE','expr',1,'p_expr','ExpressionLanguageParser.py',272),
  ('expr -> FALSE','expr',1,'p_expr','ExpressionLanguageParser.py',273),
  ('scalar -> NUMBER_REAL','scalar',1,'p_scalar','ExpressionLanguageParser.py',282),
  ('scalar -> NUMBER_INTEGER','scalar',1,'p_scalar','ExpressionLanguageParser.py',283),
  ('scalar -> CONSTANT_ENCAPSED_STRING','scalar',1,'p_scalar','ExpressionLanguageParser.py',284),
  ('exit_expr -> LPAREN expr RPAREN','exit_expr',3,'p_exit_expr','ExpressionLanguageParser.py',289),
  ('exit_expr -> LPAREN RPAREN','exit_expr',2,'p_exit_expr','ExpressionLanguageParser.py',290),
  ('variable -> reference_variable','variable',1,'p_variable','ExpressionLanguageParser.py',296),
  ('variable -> simple_indirect_reference_DOLAR reference_variable','variable',2,'p_variable','ExpressionLanguageParser.py',297),
  ('reference_variable -> compound_variable reference_variable_SELECTOR','reference_variable',2,'p_reference_variable','ExpressionLanguageParser.py',302),
  ('reference_variable -> compound_variable','reference_variable',1,'p_reference_variable','ExpressionLanguageParser.py',303),
  ('compound_variable -> VARIABLE','compound_variable',1,'p_compound_variable','ExpressionLanguageParser.py',308),
  ('compound_variable -> DOLAR LKEY expr RKEY','compound_variable',4,'p_compound_variable','ExpressionLanguageParser.py',309),
  ('selector -> LBRACKET expr RBRACKET','selector',3,'p_selector','ExpressionLanguageParser.py',314),
  ('selector -> LBRACKET RBRACKET','selector',2,'p_selector','ExpressionLanguageParser.py',315),
  ('function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements','function_declaration_statement',4,'p_function_declaration_statement','ExpressionLanguageParser.py',320),
  ('fds_statements -> LKEY inner_statement_MUL RKEY','fds_statements',3,'p_fds_statements','ExpressionLanguageParser.py',326),
  ('fds_statements -> LKEY RKEY','fds_statements',2,'p_fds_statements','ExpressionLanguageParser.py',327),
  ('fds_id -> AMPERSAND ID','fds_id',2,'p_fds_id','ExpressionLanguageParser.py',332),
  ('fds_id -> ID','fds_id',1,'p_fds_id','ExpressionLanguageParser.py',333),
  ('fds_parameter -> LPAREN parameter_list RPAREN','fds_parameter',3,'p_fds_parameter','ExpressionLanguageParser.py',342),
  ('fds_parameter -> LPAREN RPAREN','fds_parameter',2,'p_fds_parameter','ExpressionLanguageParser.py',343),
  ('parameter_list -> parameter parameter_list_COLON_PARAMETER','parameter_list',2,'p_parameter_list','ExpressionLanguageParser.py',348),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ExpressionLanguageParser.py',349),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','ExpressionLanguageParser.py',354),
  ('parameter -> VARIABLE ASSIGN static_scalar','parameter',3,'p_parameter','ExpressionLanguageParser.py',355),
  ('parameter -> parameter_type VARIABLE','parameter',2,'p_parameter','ExpressionLanguageParser.py',356),
  ('parameter -> parameter_type AMPERSAND VARIABLE','parameter',3,'p_parameter','ExpressionLanguageParser.py',357),
  ('parameter -> AMPERSAND VARIABLE','parameter',2,'p_parameter','ExpressionLanguageParser.py',358),
  ('parameter -> AMPERSAND VARIABLE ASSIGN static_scalar','parameter',4,'p_parameter','ExpressionLanguageParser.py',359),
  ('parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar','parameter',5,'p_parameter','ExpressionLanguageParser.py',360),
  ('parameter_type -> INT_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',365),
  ('parameter_type -> BOOLEAN_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',366),
  ('parameter_type -> STRING_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',367),
  ('parameter_type -> FLOAT_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',368),
  ('parameter_type -> ARRAY_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',369),
  ('parameter_type -> BOOL_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',370),
  ('parameter_type -> REAL_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',371),
  ('parameter_type -> DOUBLE_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',372),
  ('static_scalar -> common_scalar','static_scalar',1,'p_static_scalar','ExpressionLanguageParser.py',378),
  ('static_scalar -> PLUS static_scalar','static_scalar',2,'p_static_scalar','ExpressionLanguageParser.py',379),
  ('static_scalar -> MINUS static_scalar','static_scalar',2,'p_static_scalar','ExpressionLanguageParser.py',380),
  ('common_scalar -> NUMBER_REAL','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',385),
  ('common_scalar -> NUMBER_INTEGER','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',386),
  ('common_scalar -> CONSTANT_ENCAPSED_STRING','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',387),
  ('array_pair_list -> array_pair array_pair_list_ARR_PAIR','array_pair_list',2,'p_array_pair_list','ExpressionLanguageParser.py',392),
  ('array_pair_list -> array_pair','array_pair_list',1,'p_array_pair_list','ExpressionLanguageParser.py',393),
  ('array_pair -> expr','array_pair',1,'p_array_pair','ExpressionLanguageParser.py',398),
  ('array_pair -> expr ATTR_ASSOC expr','array_pair',3,'p_array_pair','ExpressionLanguageParser.py',399),
  ('array_pair -> expr ATTR_ASSOC AMPERSAND variable','array_pair',4,'p_array_pair','ExpressionLanguageParser.py',400),
  ('array_pair -> AMPERSAND variable','array_pair',2,'p_array_pair','ExpressionLanguageParser.py',401),
  ('inner_statement_MUL -> inner_statement inner_statement_MUL','inner_statement_MUL',2,'p_inner_statement_MUL','ExpressionLanguageParser.py',409),
  ('inner_statement_MUL -> inner_statement','inner_statement_MUL',1,'p_inner_statement_MUL','ExpressionLanguageParser.py',410),
  ('statement_MUL -> statement statement_MUL','statement_MUL',2,'p_statement_MUL','ExpressionLanguageParser.py',415),
  ('statement_MUL -> statement','statement_MUL',1,'p_statement_MUL','ExpressionLanguageParser.py',416),
  ('for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR','for_expr_COLON_EXPR',3,'p_for_expr_COLON_EXPR','ExpressionLanguageParser.py',421),
  ('for_expr_COLON_EXPR -> COLON expr','for_expr_COLON_EXPR',2,'p_for_expr_COLON_EXPR','ExpressionLanguageParser.py',422),
  ('statement_BLOCK_OPT -> statement','statement_BLOCK_OPT',1,'p_statement_BLOCK_OPT','ExpressionLanguageParser.py',427),
  ('statement_BLOCK_OPT -> LKEY statement_MUL RKEY','statement_BLOCK_OPT',3,'p_statement_BLOCK_OPT','ExpressionLanguageParser.py',428),
  ('statement_BLOCK_OPT -> LKEY RKEY','statement_BLOCK_OPT',2,'p_statement_BLOCK_OPT','ExpressionLanguageParser.py',429),
  ('function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION','function_call_list_COLON_FUNCTION',3,'p_function_call_list_COLON_FUNCTION','ExpressionLanguageParser.py',434),
  ('function_call_list_COLON_FUNCTION -> COLON function_call_parameter','function_call_list_COLON_FUNCTION',2,'p_function_call_list_COLON_FUNCTION','ExpressionLanguageParser.py',435),
  ('assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT','assignment_list_element_COLON_ASSIGNMENT',3,'p_assignment_list_element_COLON_ASSIGNMENT','ExpressionLanguageParser.py',440),
  ('assignment_list_element_COLON_ASSIGNMENT -> <empty>','assignment_list_element_COLON_ASSIGNMENT',0,'p_assignment_list_element_COLON_ASSIGNMENT','ExpressionLanguageParser.py',441),
  ('parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER','parameter_list_COLON_PARAMETER',3,'p_parameter_list_COLON_PARAMETER','ExpressionLanguageParser.py',446),
  ('parameter_list_COLON_PARAMETER -> COLON parameter','parameter_list_COLON_PARAMETER',2,'p_parameter_list_COLON_PARAMETER','ExpressionLanguageParser.py',447),
  ('reference_variable_SELECTOR -> selector reference_variable_SELECTOR','reference_variable_SELECTOR',2,'p_reference_variable_SELECTOR','ExpressionLanguageParser.py',452),
  ('reference_variable_SELECTOR -> selector','reference_variable_SELECTOR',1,'p_reference_variable_SELECTOR','ExpressionLanguageParser.py',453),
  ('simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR','simple_indirect_reference_DOLAR',2,'p_simple_indirect_reference_DOLAR','ExpressionLanguageParser.py',458),
  ('simple_indirect_reference_DOLAR -> DOLAR','simple_indirect_reference_DOLAR',1,'p_simple_indirect_reference_DOLAR','ExpressionLanguageParser.py',459),
  ('array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR','array_pair_list_ARR_PAIR',3,'p_array_pair_list_ARR_PAIR','ExpressionLanguageParser.py',464),
  ('array_pair_list_ARR_PAIR -> COLON array_pair','array_pair_list_ARR_PAIR',2,'p_array_pair_list_ARR_PAIR','ExpressionLanguageParser.py',465),
]

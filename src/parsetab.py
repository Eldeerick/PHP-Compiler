
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEADD_ASSIGN AMPERSAND AND APOSTROFE ARRAY_TYPE ARROBA AS ASPAS ASSIGN ATTR_ASSOC BEGIN_PROGRAM BOOLEAN_TYPE BOOL_TYPE BREAK CASE CLONE COLON COMMENT_MULTI COMMENT_SINGLE CONCATENATE CONSTANT_ENCAPSED_STRING CONTINUE CRASE DDOT DECLARE DECREMENT DIE DIVIDE DIVIDE_ASSIGN DO DOLAR DOUBLE_TYPE ELSE ELSEIF ENDDECLARE END_PROGRAM EQUALS EXC_DOT EXIT FALSE FLOAT_TYPE FOR FOREACH FUNCTION GLOBAL GREAT_EQUAL GREAT_THAN ID IDENTATION IF INCREMENT INTE_DOT INT_TYPE LBRACKET LEFT_LOGICAL LESS_EQUAL LESS_THAN LIST LKEY LPAREN MINUS MOD_ASSIGN NOT_EQUAL NUMBER_INTEGER NUMBER_REAL OR PERCENT PLUS PLUS_ASSIGN RBRACKET REAL_TYPE RETURN RIGHT_LOGICAL RKEY RPAREN SEMICOLON STRING STRING_TYPE SUB_ASSIGN TIMES TRUE UNSET VAR VARIABLE WHILE\n  main : BEGIN_PROGRAM main_INNER END_PROGRAM \n  | BEGIN_PROGRAM END_PROGRAM\n  \n  inner_statement : function_declaration_statement\n    | statement\n  \n  statement : expr SEMICOLON\n    | if_statement\n    | while_statement\n    | do_statement\n    | for_statement\n    | break_statement\n    | continue_statement\n    | return_statement\n    | GLOBAL global_var statement_COLON_GLOBAL SEMICOLON\n    | GLOBAL global_var SEMICOLON\n  \n  if_statement : statement_if if_statement_complement\n    | statement_if\n  \n  if_statement_complement : statement_elseif\n    | statement_elseif statement_else\n    | statement_else\n  \n  while_statement : WHILE expr_parentheses statement_BLOCK_OPT\n  \n  do_statement : DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON\n  \n  break_statement : BREAK expr SEMICOLON\n    | BREAK SEMICOLON\n  \n  continue_statement : CONTINUE expr SEMICOLON\n    | CONTINUE SEMICOLON\n  \n  return_statement : RETURN expr SEMICOLON \n    | RETURN SEMICOLON\n  \n  for_statement : FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT\n  \n  for_parameters : SEMICOLON SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON \n  | for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT\n  | SEMICOLON for_expr_OPT SEMICOLON\n  | SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  | SEMICOLON SEMICOLON for_expr_OPT\n  | for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT\n  \n  global_var : VARIABLE\n    | DOLAR VARIABLE\n    | DOLAR LKEY expr RKEY \n  \n  statement_COLON_GLOBAL : COLON global_var statement_COLON_GLOBAL\n    | COLON global_var\n  \n  ampersand_variable : AMPERSAND VARIABLE\n    | VARIABLE\n  \n  expr_parentheses : LPAREN expr RPAREN\n  \n  statement_if : IF expr_parentheses statement_BLOCK_OPT\n  \n  statement_elseif : ELSEIF expr_parentheses statement_BLOCK_OPT\n  \n  statement_else : ELSE statement_BLOCK_OPT\n  \n  statement_foreach : FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT\n  | FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT\n  \n  for_expr_OPT : expr for_expr_COLON_EXPR\n   | expr\n  \n  function_call : ID LPAREN function_call_parameter_list RPAREN\n    | base_variable\n  \n  function_call_parameter_list : function_call_parameter function_call_list_COLON_FUNCTION\n  | \n  \n  function_call_parameter : variable\n    | AMPERSAND VARIABLE\n  \n  assignment_list_element : variable\n    | LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT  RPAREN\n  \n  unary_operator : EXC_DOT\n    | PLUS\n    | MINUS\n  \n    type_cast_operator : INT_TYPE\n      | DOUBLE_TYPE\n      | FLOAT_TYPE\n      | REAL_TYPE\n      | STRING_TYPE\n      | ARRAY_TYPE\n      | BOOLEAN_TYPE\n      | BOOL_TYPE\n      | UNSET\n  \n  arithmetic_expr : arithmetic_expr PLUS arithmetic_expr               \n    | arithmetic_expr MINUS arithmetic_expr               \n    | arithmetic_expr TIMES arithmetic_expr               \n    | arithmetic_expr DIVIDE arithmetic_expr              \n    | LPAREN arithmetic_expr RPAREN                   \n    | NUMBER_INTEGER \n    | NUMBER_REAL                                    \n  \n  assign_operator : ADD_ASSIGN\n    | SUB_ASSIGN\n    | MOD_ASSIGN\n    | PLUS_ASSIGN\n    | DIVIDE_ASSIGN\n    | ASSIGN\n  \n  arithmetic_operator : PLUS\n    | DIVIDE\n    | PERCENT\n    | TIMES\n    | MINUS\n  \n  comparission_operator : EQUALS\n    | GREAT_THAN\n    | LESS_THAN\n    | LESS_EQUAL\n    | GREAT_EQUAL\n    | NOT_EQUAL\n    | LEFT_LOGICAL\n    | RIGHT_LOGICAL\n   \n  expr : INCREMENT variable\n    | variable INCREMENT\n    | DECREMENT variable\n    | variable DECREMENT\n    | variable LBRACKET expr RBRACKET\n    | LPAREN expr RPAREN\n    | unary_operator expr\n    | expr INTE_DOT expr DDOT expr\n    | expr comparission_operator expr\n    | variable assign_operator expr\n    | variable assign_operator AMPERSAND expr\n    | expr arithmetic_operator expr\n    | LPAREN type_cast_operator RPAREN expr\n    | EXIT expr_EXIT\n    | DIE expr_EXIT\n    | ARRAY_TYPE LPAREN array_pair_list RPAREN\n    | ARRAY_TYPE LPAREN RPAREN\n    | variable\n    | function_call\n    | NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n    | TRUE\n    | FALSE\n  \n  encaps : encaps_var\n    | VARIABLE\n    | LPAREN\n    | RPAREN\n    | LKEY\n    | RKEY\n  \n  encaps_var : VARIABLE encaps_var_OPT\n    | DOLAR LBRACKET expr RBRACKET\n    | DOLAR  LKEY ID LBRACKET expr RBRACKET RKEY\n    | LKEY variable RKEY\n  \n  encaps_var_OPT : LBRACKET encaps_var_offset RBRACKET\n    | \n  \n  encaps_var_offset : STRING \n    | VARIABLE\n  \n  expr_EXIT : exit_expr\n    | \n  \n  exit_expr : LPAREN expr RPAREN\n    | LPAREN RPAREN\n  \n  variable : base_variable\n  \n  base_variable : reference_variable\n    | simple_indirect_reference_DOLAR reference_variable\n  \n  reference_variable : compound_variable reference_variable_SELECTOR\n  \n  compound_variable : VARIABLE \n    | DOLAR LKEY expr RKEY \n  \n  selector : LBRACKET selector_EXPR RBRACKET \n  \n  function_declaration_statement : FUNCTION ID LPAREN RPAREN LKEY RKEY\n    | FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY\n    | FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY\n    | FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY\n    | FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY\n    | FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY\n    | FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY\n    | FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY\n  \n  parameter_list : parameter parameter_list_COLON_PARAMETER \n    | parameter\n   \n  parameter : VARIABLE\n    | VARIABLE ASSIGN static_scalar\n    | parameter_type VARIABLE\n    | parameter_type AMPERSAND VARIABLE\n    | AMPERSAND VARIABLE\n    | AMPERSAND VARIABLE ASSIGN static_scalar\n    | parameter_type AMPERSAND VARIABLE ASSIGN static_scalar\n  \n  parameter_type : INT_TYPE\n    | BOOLEAN_TYPE\n    | STRING_TYPE\n    | FLOAT_TYPE\n    | ARRAY_TYPE \n    | BOOL_TYPE\n    | REAL_TYPE\n    | DOUBLE_TYPE\n  \n  static_scalar : common_scalar\n    | PLUS static_scalar\n    | MINUS static_scalar\n  \n  common_scalar : NUMBER_REAL\n    | NUMBER_INTEGER\n    | CONSTANT_ENCAPSED_STRING\n  \n  array_pair_list : array_pair array_pair_list_ARR_PAIR \n    | array_pair\n   \n  array_pair : expr\n    | expr array_pair_ATTR_EXPR_OPT\n    | array_pair_EXPR_ATTR_OPT AMPERSAND variable\n    | AMPERSAND variable\n  \n  main_INNER : inner_statement main_INNER\n    | inner_statement\n  \n  inner_statement_MUL : inner_statement inner_statement_MUL\n    | inner_statement\n  \n  statement_MUL : statement statement_MUL\n    | statement\n  \n  for_expr_COLON_EXPR : COLON expr for_expr_COLON_EXPR\n    | COLON expr\n  \n  statement_BLOCK_OPT : statement \n    | LKEY statement_MUL RKEY \n    | LKEY RKEY\n  \n  function_call_list_COLON_FUNCTION : COLON function_call_parameter function_call_list_COLON_FUNCTION\n    | \n  \n  expr_without_variable_COLON_ASSIGNMENT : COLON assignment_list_element expr_without_variable_COLON_ASSIGNMENT\n    | \n  \n  assignment_list_element_COLON_ASSIGNMENT : COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT\n    | \n  \n  parameter_list_COLON_PARAMETER : COLON parameter parameter_list_COLON_PARAMETER\n    | COLON parameter\n  \n  reference_variable_SELECTOR : selector reference_variable_SELECTOR\n    | \n  \n  simple_indirect_reference_DOLAR : DOLAR simple_indirect_reference_DOLAR\n    | \n  \n  selector_EXPR : expr\n    |\n  \n  array_pair_list_ARR_PAIR : COLON array_pair array_pair_list_ARR_PAIR\n    | COLON array_pair\n  \n  array_pair_ATTR_EXPR_OPT : ATTR_ASSOC expr \n    |\n  \n  array_pair_EXPR_ATTR_OPT : expr ATTR_ASSOC\n  '
    
_lr_action_items = {'BEGIN_PROGRAM':([0,],[2,]),'$end':([1,4,50,],[0,-2,-1,]),'END_PROGRAM':([2,3,5,6,7,12,13,14,15,16,17,18,33,51,66,105,106,107,113,117,119,121,143,158,160,161,165,171,172,173,174,200,213,216,243,244,250,272,274,281,285,287,288,290,],[4,50,-185,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,-184,-5,-15,-17,-19,-192,-23,-25,-27,-14,-18,-47,-20,-194,-22,-24,-26,-45,-13,-46,-193,-21,-28,-147,-153,-152,-148,-154,-150,-149,-151,]),'FUNCTION':([2,5,6,7,12,13,14,15,16,17,18,33,66,105,106,107,113,117,119,121,143,158,160,161,165,171,172,173,174,200,213,216,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[8,8,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,-5,-15,-17,-19,-192,-23,-25,-27,-14,-18,-47,-20,-194,-22,-24,-26,-45,-13,-46,-193,8,-21,-28,-147,8,8,8,-153,-152,-148,8,-154,-150,-149,-151,]),'GLOBAL':([2,5,6,7,12,13,14,15,16,17,18,33,35,66,105,106,107,109,110,113,114,117,119,121,122,143,158,159,160,161,165,166,171,172,173,174,200,213,214,216,218,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[19,19,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,19,-5,-15,-17,-19,19,19,-192,19,-23,-25,-27,19,-14,-18,19,-47,-20,-194,19,-22,-24,-26,-45,-13,-46,-44,-193,19,19,-21,-28,-147,19,19,19,-153,-152,-148,19,-154,-150,-149,-151,]),'INCREMENT':([2,5,6,7,10,12,13,14,15,16,17,18,21,23,33,35,37,38,39,40,41,42,43,45,47,49,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,123,125,126,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,175,199,200,208,210,213,214,216,218,219,221,223,224,225,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[20,20,-3,-4,20,-6,-7,-8,-9,-10,-11,-12,88,20,-16,20,20,20,20,-140,-60,-61,-62,-141,-204,-144,-5,20,20,20,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,20,20,-79,-80,-81,-82,-83,-84,20,20,-15,-17,-19,20,20,20,-192,20,20,-23,-25,-27,20,-142,-143,-204,20,20,20,-14,20,20,-18,20,-47,-20,-194,20,20,-22,-24,-26,-45,-203,20,-13,20,20,-46,-44,-193,20,20,20,20,-146,-145,20,-21,-28,20,20,-147,20,20,20,20,-153,-152,-148,20,-154,-150,-149,-151,]),'DECREMENT':([2,5,6,7,10,12,13,14,15,16,17,18,21,23,33,35,37,38,39,40,41,42,43,45,47,49,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,123,125,126,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,175,199,200,208,210,213,214,216,218,219,221,223,224,225,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[22,22,-3,-4,22,-6,-7,-8,-9,-10,-11,-12,89,22,-16,22,22,22,22,-140,-60,-61,-62,-141,-204,-144,-5,22,22,22,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,22,22,-79,-80,-81,-82,-83,-84,22,22,-15,-17,-19,22,22,22,-192,22,22,-23,-25,-27,22,-142,-143,-204,22,22,22,-14,22,22,-18,22,-47,-20,-194,22,22,-22,-24,-26,-45,-203,22,-13,22,22,-46,-44,-193,22,22,22,22,-146,-145,22,-21,-28,22,22,-147,22,22,22,22,-153,-152,-148,22,-154,-150,-149,-151,]),'LPAREN':([2,5,6,7,9,10,12,13,14,15,16,17,18,23,24,25,26,33,34,35,36,37,38,39,41,42,43,44,52,57,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,108,109,110,111,113,114,115,117,119,121,122,127,130,132,138,143,146,149,158,159,160,161,163,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[10,10,-3,-4,54,10,-6,-7,-8,-9,-10,-11,-12,10,102,102,104,-16,111,10,115,10,10,10,-60,-61,-62,111,131,104,-5,10,10,10,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,10,10,-79,-80,-81,-82,-83,-84,10,10,-15,-17,-19,111,10,10,10,-192,10,10,-23,-25,-27,10,10,10,193,10,-14,10,10,-18,10,-47,-20,111,-194,10,10,-22,-24,-26,-45,10,-13,10,10,-46,-44,-193,10,10,10,10,10,-21,-28,10,10,-147,10,10,10,10,-153,-152,-148,10,-154,-150,-149,-151,]),'EXIT':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[24,24,-3,-4,24,-6,-7,-8,-9,-10,-11,-12,24,-16,24,24,24,24,-60,-61,-62,-5,24,24,24,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,24,24,-79,-80,-81,-82,-83,-84,24,24,-15,-17,-19,24,24,24,-192,24,24,-23,-25,-27,24,24,24,24,-14,24,24,-18,24,-47,-20,-194,24,24,-22,-24,-26,-45,24,-13,24,24,-46,-44,-193,24,24,24,24,24,-21,-28,24,24,-147,24,24,24,24,-153,-152,-148,24,-154,-150,-149,-151,]),'DIE':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[25,25,-3,-4,25,-6,-7,-8,-9,-10,-11,-12,25,-16,25,25,25,25,-60,-61,-62,-5,25,25,25,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,25,25,-79,-80,-81,-82,-83,-84,25,25,-15,-17,-19,25,25,25,-192,25,25,-23,-25,-27,25,25,25,25,-14,25,25,-18,25,-47,-20,-194,25,25,-22,-24,-26,-45,25,-13,25,25,-46,-44,-193,25,25,25,25,25,-21,-28,25,25,-147,25,25,25,25,-153,-152,-148,25,-154,-150,-149,-151,]),'ARRAY_TYPE':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,131,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,193,199,200,208,210,213,214,216,218,219,221,223,226,229,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[26,26,-3,-4,57,-6,-7,-8,-9,-10,-11,-12,26,-16,26,26,26,26,-60,-61,-62,-5,26,26,26,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,26,26,-79,-80,-81,-82,-83,-84,26,26,-15,-17,-19,26,26,26,-192,26,26,-23,-25,-27,26,26,26,189,26,-14,26,26,-18,26,-47,-20,-194,26,26,-22,-24,-26,-45,189,26,-13,26,26,-46,-44,-193,26,26,26,26,26,189,-21,-28,26,26,-147,26,26,26,26,-153,-152,-148,26,-154,-150,-149,-151,]),'NUMBER_REAL':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,230,243,244,246,248,250,252,253,257,258,263,264,269,272,274,279,281,283,285,287,288,290,],[28,28,-3,-4,28,-6,-7,-8,-9,-10,-11,-12,28,-16,28,28,28,28,-60,-61,-62,-5,28,28,28,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,28,28,-79,-80,-81,-82,-83,-84,28,28,-15,-17,-19,28,28,28,-192,28,28,-23,-25,-27,28,28,28,28,-14,28,28,-18,28,-47,-20,-194,28,28,-22,-24,-26,-45,28,-13,28,28,-46,-44,-193,28,28,28,28,28,259,-21,-28,28,28,-147,28,28,259,259,259,28,28,-153,-152,259,-148,28,-154,-150,-149,-151,]),'NUMBER_INTEGER':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,230,243,244,246,248,250,252,253,257,258,263,264,269,272,274,279,281,283,285,287,288,290,],[29,29,-3,-4,29,-6,-7,-8,-9,-10,-11,-12,29,-16,29,29,29,29,-60,-61,-62,-5,29,29,29,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,29,29,-79,-80,-81,-82,-83,-84,29,29,-15,-17,-19,29,29,29,-192,29,29,-23,-25,-27,29,29,29,29,-14,29,29,-18,29,-47,-20,-194,29,29,-22,-24,-26,-45,29,-13,29,29,-46,-44,-193,29,29,29,29,29,260,-21,-28,29,29,-147,29,29,260,260,260,29,29,-153,-152,260,-148,29,-154,-150,-149,-151,]),'CONSTANT_ENCAPSED_STRING':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,230,243,244,246,248,250,252,253,257,258,263,264,269,272,274,279,281,283,285,287,288,290,],[30,30,-3,-4,30,-6,-7,-8,-9,-10,-11,-12,30,-16,30,30,30,30,-60,-61,-62,-5,30,30,30,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,30,30,-79,-80,-81,-82,-83,-84,30,30,-15,-17,-19,30,30,30,-192,30,30,-23,-25,-27,30,30,30,30,-14,30,30,-18,30,-47,-20,-194,30,30,-22,-24,-26,-45,30,-13,30,30,-46,-44,-193,30,30,30,30,30,261,-21,-28,30,30,-147,30,30,261,261,261,30,30,-153,-152,261,-148,30,-154,-150,-149,-151,]),'TRUE':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[31,31,-3,-4,31,-6,-7,-8,-9,-10,-11,-12,31,-16,31,31,31,31,-60,-61,-62,-5,31,31,31,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,31,31,-79,-80,-81,-82,-83,-84,31,31,-15,-17,-19,31,31,31,-192,31,31,-23,-25,-27,31,31,31,31,-14,31,31,-18,31,-47,-20,-194,31,31,-22,-24,-26,-45,31,-13,31,31,-46,-44,-193,31,31,31,31,31,-21,-28,31,31,-147,31,31,31,31,-153,-152,-148,31,-154,-150,-149,-151,]),'FALSE':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[32,32,-3,-4,32,-6,-7,-8,-9,-10,-11,-12,32,-16,32,32,32,32,-60,-61,-62,-5,32,32,32,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,32,32,-79,-80,-81,-82,-83,-84,32,32,-15,-17,-19,32,32,32,-192,32,32,-23,-25,-27,32,32,32,32,-14,32,32,-18,32,-47,-20,-194,32,32,-22,-24,-26,-45,32,-13,32,32,-46,-44,-193,32,32,32,32,32,-21,-28,32,32,-147,32,32,32,32,-153,-152,-148,32,-154,-150,-149,-151,]),'WHILE':([2,5,6,7,12,13,14,15,16,17,18,33,35,66,105,106,107,109,110,112,113,114,117,119,121,122,143,158,159,160,161,165,166,171,172,173,174,200,213,214,216,218,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[34,34,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,34,-5,-15,-17,-19,34,34,163,-192,34,-23,-25,-27,34,-14,-18,34,-47,-20,-194,34,-22,-24,-26,-45,-13,-46,-44,-193,34,34,-21,-28,-147,34,34,34,-153,-152,-148,34,-154,-150,-149,-151,]),'DO':([2,5,6,7,12,13,14,15,16,17,18,33,35,66,105,106,107,109,110,113,114,117,119,121,122,143,158,159,160,161,165,166,171,172,173,174,200,213,214,216,218,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[35,35,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,35,-5,-15,-17,-19,35,35,-192,35,-23,-25,-27,35,-14,-18,35,-47,-20,-194,35,-22,-24,-26,-45,-13,-46,-44,-193,35,35,-21,-28,-147,35,35,35,-153,-152,-148,35,-154,-150,-149,-151,]),'FOR':([2,5,6,7,12,13,14,15,16,17,18,33,35,66,105,106,107,109,110,113,114,117,119,121,122,143,158,159,160,161,165,166,171,172,173,174,200,213,214,216,218,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[36,36,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,36,-5,-15,-17,-19,36,36,-192,36,-23,-25,-27,36,-14,-18,36,-47,-20,-194,36,-22,-24,-26,-45,-13,-46,-44,-193,36,36,-21,-28,-147,36,36,36,-153,-152,-148,36,-154,-150,-149,-151,]),'BREAK':([2,5,6,7,12,13,14,15,16,17,18,33,35,66,105,106,107,109,110,113,114,117,119,121,122,143,158,159,160,161,165,166,171,172,173,174,200,213,214,216,218,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[37,37,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,37,-5,-15,-17,-19,37,37,-192,37,-23,-25,-27,37,-14,-18,37,-47,-20,-194,37,-22,-24,-26,-45,-13,-46,-44,-193,37,37,-21,-28,-147,37,37,37,-153,-152,-148,37,-154,-150,-149,-151,]),'CONTINUE':([2,5,6,7,12,13,14,15,16,17,18,33,35,66,105,106,107,109,110,113,114,117,119,121,122,143,158,159,160,161,165,166,171,172,173,174,200,213,214,216,218,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[38,38,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,38,-5,-15,-17,-19,38,38,-192,38,-23,-25,-27,38,-14,-18,38,-47,-20,-194,38,-22,-24,-26,-45,-13,-46,-44,-193,38,38,-21,-28,-147,38,38,38,-153,-152,-148,38,-154,-150,-149,-151,]),'RETURN':([2,5,6,7,12,13,14,15,16,17,18,33,35,66,105,106,107,109,110,113,114,117,119,121,122,143,158,159,160,161,165,166,171,172,173,174,200,213,214,216,218,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[39,39,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,39,-5,-15,-17,-19,39,39,-192,39,-23,-25,-27,39,-14,-18,39,-47,-20,-194,39,-22,-24,-26,-45,-13,-46,-44,-193,39,39,-21,-28,-147,39,39,39,-153,-152,-148,39,-154,-150,-149,-151,]),'EXC_DOT':([2,5,6,7,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[41,41,-3,-4,41,-6,-7,-8,-9,-10,-11,-12,41,-16,41,41,41,41,-60,-61,-62,-5,41,41,41,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,41,41,-79,-80,-81,-82,-83,-84,41,41,-15,-17,-19,41,41,41,-192,41,41,-23,-25,-27,41,41,41,41,-14,41,41,-18,41,-47,-20,-194,41,41,-22,-24,-26,-45,41,-13,41,41,-46,-44,-193,41,41,41,41,41,-21,-28,41,41,-147,41,41,41,41,-153,-152,-148,41,-154,-150,-149,-151,]),'PLUS':([2,5,6,7,10,11,12,13,14,15,16,17,18,21,23,24,25,27,28,29,30,31,32,33,35,37,38,39,40,41,42,43,45,47,49,55,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,126,127,130,137,138,139,140,141,143,146,147,148,149,150,151,153,155,158,159,160,161,162,165,166,168,170,171,172,173,174,175,177,178,194,198,199,200,202,203,204,205,206,208,210,213,214,216,218,219,221,223,224,225,226,230,237,241,243,244,246,248,249,250,252,253,257,258,263,264,269,272,274,279,281,283,285,287,288,290,],[42,42,-3,-4,42,78,-6,-7,-8,-9,-10,-11,-12,-115,42,-137,-137,-116,-117,-118,-119,-120,-121,-16,42,42,42,42,-53,-60,-61,-62,-141,-204,-144,78,-5,42,42,42,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,-98,-140,-99,-101,42,42,-79,-80,-81,-82,-83,-84,-100,78,-111,-136,42,-112,42,-15,-17,-19,42,42,42,-192,42,42,78,-23,78,-25,78,-27,42,-142,-143,-204,42,42,-103,42,78,78,78,-14,42,78,78,42,78,-139,-114,78,-18,42,-47,-20,78,-194,42,42,78,-22,-24,-26,-45,-203,78,78,-52,78,42,-13,78,-102,78,-138,-113,42,42,-46,-44,-193,42,42,42,42,-146,-145,42,257,78,78,-21,-28,42,42,78,-147,42,42,257,257,257,42,42,-153,-152,257,-148,42,-154,-150,-149,-151,]),'MINUS':([2,5,6,7,10,11,12,13,14,15,16,17,18,21,23,24,25,27,28,29,30,31,32,33,35,37,38,39,40,41,42,43,45,47,49,55,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,125,126,127,130,137,138,139,140,141,143,146,147,148,149,150,151,153,155,158,159,160,161,162,165,166,168,170,171,172,173,174,175,177,178,194,198,199,200,202,203,204,205,206,208,210,213,214,216,218,219,221,223,224,225,226,230,237,241,243,244,246,248,249,250,252,253,257,258,263,264,269,272,274,279,281,283,285,287,288,290,],[43,43,-3,-4,43,82,-6,-7,-8,-9,-10,-11,-12,-115,43,-137,-137,-116,-117,-118,-119,-120,-121,-16,43,43,43,43,-53,-60,-61,-62,-141,-204,-144,82,-5,43,43,43,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,-98,-140,-99,-101,43,43,-79,-80,-81,-82,-83,-84,-100,82,-111,-136,43,-112,43,-15,-17,-19,43,43,43,-192,43,43,82,-23,82,-25,82,-27,43,-142,-143,-204,43,43,-103,43,82,82,82,-14,43,82,82,43,82,-139,-114,82,-18,43,-47,-20,82,-194,43,43,82,-22,-24,-26,-45,-203,82,82,-52,82,43,-13,82,-102,82,-138,-113,43,43,-46,-44,-193,43,43,43,43,-146,-145,43,258,82,82,-21,-28,43,43,82,-147,43,43,258,258,258,43,43,-153,-152,258,-148,43,-154,-150,-149,-151,]),'ID':([2,5,6,7,8,10,12,13,14,15,16,17,18,23,33,35,37,38,39,41,42,43,53,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,130,138,143,146,149,158,159,160,161,165,166,168,171,172,173,174,199,200,208,210,213,214,216,218,219,221,223,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[9,9,-3,-4,52,9,-6,-7,-8,-9,-10,-11,-12,9,-16,9,9,9,9,-60,-61,-62,132,-5,9,9,9,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,9,9,-79,-80,-81,-82,-83,-84,9,9,-15,-17,-19,9,9,9,-192,9,9,-23,-25,-27,9,9,9,9,-14,9,9,-18,9,-47,-20,-194,9,9,-22,-24,-26,-45,9,-13,9,9,-46,-44,-193,9,9,9,9,9,-21,-28,9,9,-147,9,9,9,9,-153,-152,-148,9,-154,-150,-149,-151,]),'IF':([2,5,6,7,12,13,14,15,16,17,18,33,35,66,105,106,107,109,110,113,114,117,119,121,122,143,158,159,160,161,165,166,171,172,173,174,200,213,214,216,218,226,243,244,250,252,253,264,272,274,281,283,285,287,288,290,],[44,44,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,44,-5,-15,-17,-19,44,44,-192,44,-23,-25,-27,44,-14,-18,44,-47,-20,-194,44,-22,-24,-26,-45,-13,-46,-44,-193,44,44,-21,-28,-147,44,44,44,-153,-152,-148,44,-154,-150,-149,-151,]),'DOLAR':([2,5,6,7,10,12,13,14,15,16,17,18,19,20,22,23,33,35,37,38,39,41,42,43,46,48,54,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,128,129,130,138,143,144,146,149,157,158,159,160,161,165,166,168,171,172,173,174,196,199,200,208,210,211,213,214,216,218,219,221,223,226,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[48,48,-3,-4,48,-6,-7,-8,-9,-10,-11,-12,85,48,48,48,-16,48,48,48,48,-60,-61,-62,124,128,48,-5,48,48,48,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,48,48,-79,-80,-81,-82,-83,-84,48,48,-15,-17,-19,48,48,48,-192,48,48,-23,-25,-27,48,48,128,-205,48,48,-14,85,48,48,48,-18,48,-47,-20,-194,48,48,-22,-24,-26,-45,48,48,-13,48,48,48,-46,-44,-193,48,48,48,48,48,-21,-28,48,48,-147,48,48,48,48,-153,-152,-148,48,-154,-150,-149,-151,]),'VARIABLE':([2,5,6,7,10,12,13,14,15,16,17,18,19,20,22,23,33,35,37,38,39,41,42,43,46,48,54,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,90,91,92,93,94,95,96,97,102,104,105,106,107,109,110,111,113,114,115,117,119,121,122,127,128,129,130,131,136,138,143,144,146,149,157,158,159,160,161,165,166,168,171,172,173,174,183,184,185,186,187,188,189,190,191,192,193,196,199,200,208,210,211,213,214,216,218,219,221,223,226,229,232,243,244,246,248,250,252,253,264,269,272,274,281,283,285,287,288,290,],[49,49,-3,-4,49,-6,-7,-8,-9,-10,-11,-12,84,49,49,49,-16,49,49,49,49,-60,-61,-62,49,-206,49,-5,49,49,49,-90,-91,-92,-93,-94,-95,-96,-97,-85,-86,-87,-88,-89,145,49,49,-79,-80,-81,-82,-83,-84,49,49,-15,-17,-19,49,49,49,-192,49,49,-23,-25,-27,49,49,-206,-205,49,182,197,49,-14,84,49,49,49,-18,49,-47,-20,-194,49,49,-22,-24,-26,-45,231,233,-164,-165,-166,-167,-168,-169,-170,-171,182,49,49,-13,49,49,49,-46,-44,-193,49,49,49,49,49,182,262,-21,-28,49,49,-147,49,49,49,49,-153,-152,-148,49,-154,-150,-149,-151,]),'RKEY':([6,7,12,13,14,15,16,17,18,21,24,25,27,28,29,30,31,32,33,40,45,47,49,66,86,87,88,89,98,99,100,101,103,105,106,107,113,114,117,119,121,123,125,126,137,140,141,143,148,151,153,158,160,161,164,165,166,171,172,173,174,175,178,194,198,200,202,203,204,205,206,213,216,217,224,225,226,237,243,244,250,251,252,253,264,272,273,274,275,281,282,283,285,287,288,289,290,],[-3,-4,-6,-7,-8,-9,-10,-11,-12,-115,-137,-137,-116,-117,-118,-119,-120,-121,-16,-53,-141,-204,-144,-5,-98,-140,-99,-101,-100,-104,-111,-136,-112,-15,-17,-19,-192,165,-23,-25,-27,-142,-143,-204,-103,-106,-109,-14,-107,-139,-114,-18,-47,-20,216,-194,-189,-22,-24,-26,-45,-203,225,-52,-110,-13,239,-102,-108,-138,-113,-46,-193,-188,-146,-145,250,-105,-21,-28,-147,272,-187,274,281,-153,-186,-152,285,-148,287,288,-154,-150,-149,290,-151,]),'AMPERSAND':([8,54,91,92,93,94,95,96,97,104,131,156,183,185,186,187,188,189,190,191,192,193,196,208,210,229,],[53,136,149,-79,-80,-81,-82,-83,-84,157,184,211,232,-164,-165,-166,-167,-168,-169,-170,-171,184,136,157,-213,184,]),'INT_TYPE':([10,131,193,229,],[58,185,185,185,]),'DOUBLE_TYPE':([10,131,193,229,],[59,192,192,192,]),'FLOAT_TYPE':([10,131,193,229,],[60,188,188,188,]),'REAL_TYPE':([10,131,193,229,],[61,191,191,191,]),'STRING_TYPE':([10,131,193,229,],[62,187,187,187,]),'BOOLEAN_TYPE':([10,131,193,229,],[63,186,186,186,]),'BOOL_TYPE':([10,131,193,229,],[64,190,190,190,]),'UNSET':([10,],[65,]),'SEMICOLON':([11,21,24,25,27,28,29,30,31,32,37,38,39,40,45,47,49,83,84,86,87,88,89,98,99,100,101,103,115,116,118,120,123,125,126,137,140,141,142,145,148,151,153,168,169,170,175,194,198,201,203,204,205,206,214,215,220,221,222,224,225,237,238,239,247,249,271,],[66,-115,-137,-137,-116,-117,-118,-119,-120,-121,117,119,121,-53,-141,-204,-144,143,-37,-98,-140,-99,-101,-100,-104,-111,-136,-112,168,171,172,173,-142,-143,-204,-103,-106,-109,200,-38,-107,-139,-114,219,221,-51,-203,-52,-110,-41,-102,-108,-138,-113,-44,243,246,248,-50,-146,-145,-105,-40,-39,269,-191,-190,]),'INTE_DOT':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[67,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,67,-98,-140,-99,-101,-100,67,-111,-136,-112,67,67,67,-142,-143,-204,-103,67,67,67,67,67,67,-139,-114,67,67,67,-203,67,67,-52,67,67,-102,67,-138,-113,-146,-145,67,67,67,]),'EQUALS':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[70,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,70,-98,-140,-99,-101,-100,70,-111,-136,-112,70,70,70,-142,-143,-204,-103,70,70,70,70,70,70,-139,-114,70,70,70,-203,70,70,-52,70,70,-102,70,-138,-113,-146,-145,70,70,70,]),'GREAT_THAN':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[71,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,71,-98,-140,-99,-101,-100,71,-111,-136,-112,71,71,71,-142,-143,-204,-103,71,71,71,71,71,71,-139,-114,71,71,71,-203,71,71,-52,71,71,-102,71,-138,-113,-146,-145,71,71,71,]),'LESS_THAN':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[72,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,72,-98,-140,-99,-101,-100,72,-111,-136,-112,72,72,72,-142,-143,-204,-103,72,72,72,72,72,72,-139,-114,72,72,72,-203,72,72,-52,72,72,-102,72,-138,-113,-146,-145,72,72,72,]),'LESS_EQUAL':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[73,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,73,-98,-140,-99,-101,-100,73,-111,-136,-112,73,73,73,-142,-143,-204,-103,73,73,73,73,73,73,-139,-114,73,73,73,-203,73,73,-52,73,73,-102,73,-138,-113,-146,-145,73,73,73,]),'GREAT_EQUAL':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[74,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,74,-98,-140,-99,-101,-100,74,-111,-136,-112,74,74,74,-142,-143,-204,-103,74,74,74,74,74,74,-139,-114,74,74,74,-203,74,74,-52,74,74,-102,74,-138,-113,-146,-145,74,74,74,]),'NOT_EQUAL':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[75,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,75,-98,-140,-99,-101,-100,75,-111,-136,-112,75,75,75,-142,-143,-204,-103,75,75,75,75,75,75,-139,-114,75,75,75,-203,75,75,-52,75,75,-102,75,-138,-113,-146,-145,75,75,75,]),'LEFT_LOGICAL':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[76,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,76,-98,-140,-99,-101,-100,76,-111,-136,-112,76,76,76,-142,-143,-204,-103,76,76,76,76,76,76,-139,-114,76,76,76,-203,76,76,-52,76,76,-102,76,-138,-113,-146,-145,76,76,76,]),'RIGHT_LOGICAL':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[77,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,77,-98,-140,-99,-101,-100,77,-111,-136,-112,77,77,77,-142,-143,-204,-103,77,77,77,77,77,77,-139,-114,77,77,77,-203,77,77,-52,77,77,-102,77,-138,-113,-146,-145,77,77,77,]),'DIVIDE':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[79,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,79,-98,-140,-99,-101,-100,79,-111,-136,-112,79,79,79,-142,-143,-204,-103,79,79,79,79,79,79,-139,-114,79,79,79,-203,79,79,-52,79,79,-102,79,-138,-113,-146,-145,79,79,79,]),'PERCENT':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[80,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,80,-98,-140,-99,-101,-100,80,-111,-136,-112,80,80,80,-142,-143,-204,-103,80,80,80,80,80,80,-139,-114,80,80,80,-203,80,80,-52,80,80,-102,80,-138,-113,-146,-145,80,80,80,]),'TIMES':([11,21,24,25,27,28,29,30,31,32,40,45,47,49,55,86,87,88,89,98,99,100,101,103,116,118,120,123,125,126,137,139,140,141,147,148,150,151,153,155,162,170,175,177,178,194,198,202,203,204,205,206,224,225,237,241,249,],[81,-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,81,-98,-140,-99,-101,-100,81,-111,-136,-112,81,81,81,-142,-143,-204,-103,81,81,81,81,81,81,-139,-114,81,81,81,-203,81,81,-52,81,81,-102,81,-138,-113,-146,-145,81,81,81,]),'ELSEIF':([12,13,14,15,16,17,18,33,66,105,106,107,113,117,119,121,143,158,160,161,165,171,172,173,174,200,213,216,243,244,],[-6,-7,-8,-9,-10,-11,-12,108,-5,-15,-17,-19,-192,-23,-25,-27,-14,-18,-47,-20,-194,-22,-24,-26,-45,-13,-46,-193,-21,-28,]),'ELSE':([12,13,14,15,16,17,18,33,66,105,106,107,113,117,119,121,143,158,160,161,165,171,172,173,174,200,213,216,243,244,],[-6,-7,-8,-9,-10,-11,-12,109,-5,-15,109,-19,-192,-23,-25,-27,-14,-18,-47,-20,-194,-22,-24,-26,-45,-13,-46,-193,-21,-28,]),'LBRACKET':([21,40,45,47,49,123,125,126,175,224,225,],[90,-140,-141,127,-144,-142,-143,127,-203,-146,-145,]),'RPAREN':([21,24,25,27,28,29,30,31,32,40,45,47,49,54,55,56,57,58,59,60,61,62,63,64,65,86,87,88,89,98,99,100,101,102,103,104,123,125,126,131,133,134,135,137,140,141,148,150,151,152,153,154,155,162,167,170,175,180,181,182,193,194,195,197,198,203,204,205,206,207,209,212,219,222,224,225,228,231,233,235,236,237,240,241,242,245,246,248,249,254,255,256,259,260,261,262,266,267,268,269,270,271,276,277,278,280,284,286,],[-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,-55,137,138,-68,-63,-64,-65,-66,-67,-69,-70,-71,-98,-140,-99,-101,-100,-104,-111,-136,151,-112,153,-142,-143,-204,179,194,-196,-56,-103,-106,-109,-107,205,-139,206,-114,-179,-180,214,218,-51,-203,227,-156,-157,234,-52,-54,-57,-110,-102,-108,-138,-113,-178,-181,-183,-29,-50,-146,-145,-155,-159,-161,265,-196,-105,-210,-211,-182,-35,-33,-30,-191,-202,-158,-172,-175,-176,-177,-160,-195,-209,-34,-31,-32,-190,-201,-173,-174,-162,-36,-163,]),'DDOT':([21,24,25,27,28,29,30,31,32,40,45,47,49,86,87,88,89,98,99,100,101,103,123,125,126,137,139,140,141,148,151,153,175,194,198,203,204,205,206,224,225,237,],[-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,-98,-140,-99,-101,-100,-104,-111,-136,-112,-142,-143,-204,-103,199,-106,-109,-107,-139,-114,-203,-52,-110,-102,-108,-138,-113,-146,-145,-105,]),'RBRACKET':([21,24,25,27,28,29,30,31,32,40,45,47,49,86,87,88,89,98,99,100,101,103,123,125,126,127,137,140,141,147,148,151,153,175,176,177,194,198,203,204,205,206,224,225,237,],[-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,-98,-140,-99,-101,-100,-104,-111,-136,-112,-142,-143,-204,-208,-103,-106,-109,203,-107,-139,-114,-203,224,-207,-52,-110,-102,-108,-138,-113,-146,-145,-105,]),'ATTR_ASSOC':([21,24,25,27,28,29,30,31,32,40,45,47,49,86,87,88,89,98,99,100,101,103,123,125,126,137,140,141,148,151,153,155,175,194,198,203,204,205,206,224,225,237,],[-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,-98,-140,-99,-101,-100,-104,-111,-136,-112,-142,-143,-204,-103,-106,-109,-107,-139,-114,210,-203,-52,-110,-102,-108,-138,-113,-146,-145,-105,]),'COLON':([21,24,25,27,28,29,30,31,32,40,45,47,49,83,84,86,87,88,89,98,99,100,101,103,123,125,126,134,135,137,140,141,145,148,151,153,154,155,170,175,181,182,194,197,198,201,203,204,205,206,209,212,224,225,231,233,236,237,239,240,241,242,249,254,255,256,259,260,261,262,277,278,280,286,],[-115,-137,-137,-116,-117,-118,-119,-120,-121,-53,-141,-204,-144,144,-37,-98,-140,-99,-101,-100,-104,-111,-136,-112,-142,-143,-204,196,-56,-103,-106,-109,-38,-107,-139,-114,208,-180,223,-203,229,-157,-52,-57,-110,144,-102,-108,-138,-113,-181,-183,-146,-145,-159,-161,196,-105,-39,208,-211,-182,223,229,-158,-172,-175,-176,-177,-160,-173,-174,-162,-163,]),'ADD_ASSIGN':([21,40,45,47,49,123,125,126,175,224,225,],[92,-140,-141,-204,-144,-142,-143,-204,-203,-146,-145,]),'SUB_ASSIGN':([21,40,45,47,49,123,125,126,175,224,225,],[93,-140,-141,-204,-144,-142,-143,-204,-203,-146,-145,]),'MOD_ASSIGN':([21,40,45,47,49,123,125,126,175,224,225,],[94,-140,-141,-204,-144,-142,-143,-204,-203,-146,-145,]),'PLUS_ASSIGN':([21,40,45,47,49,123,125,126,175,224,225,],[95,-140,-141,-204,-144,-142,-143,-204,-203,-146,-145,]),'DIVIDE_ASSIGN':([21,40,45,47,49,123,125,126,175,224,225,],[96,-140,-141,-204,-144,-142,-143,-204,-203,-146,-145,]),'ASSIGN':([21,40,45,47,49,123,125,126,175,182,224,225,233,262,],[97,-140,-141,-204,-144,-142,-143,-204,-203,230,-146,-145,263,279,]),'LKEY':([35,48,85,109,110,122,124,159,179,214,218,227,234,265,],[114,130,146,114,114,114,130,114,226,-44,114,253,264,283,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'main_INNER':([2,5,],[3,51,]),'inner_statement':([2,5,226,252,253,264,283,],[5,5,252,252,252,252,252,]),'function_declaration_statement':([2,5,226,252,253,264,283,],[6,6,6,6,6,6,6,]),'statement':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[7,7,113,113,113,166,113,113,166,113,7,7,7,7,7,]),'expr':([2,5,10,23,35,37,38,39,67,68,69,90,91,102,104,109,110,111,114,115,122,127,130,138,146,149,159,166,168,199,208,210,218,219,221,223,226,246,248,252,253,264,269,283,],[11,11,55,99,11,116,118,120,139,140,141,147,148,150,155,11,11,162,11,170,11,177,178,198,202,204,11,11,170,237,155,241,11,170,170,249,11,170,170,11,11,11,170,11,]),'if_statement':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'while_statement':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'do_statement':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'for_statement':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'break_statement':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'continue_statement':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'return_statement':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'variable':([2,5,10,20,22,23,35,37,38,39,54,67,68,69,90,91,102,104,109,110,111,114,115,122,127,130,138,146,149,157,159,166,168,196,199,208,210,211,218,219,221,223,226,246,248,252,253,264,269,283,],[21,21,21,86,98,21,21,21,21,21,135,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,212,21,21,21,135,21,21,21,242,21,21,21,21,21,21,21,21,21,21,21,21,]),'unary_operator':([2,5,10,23,35,37,38,39,67,68,69,90,91,102,104,109,110,111,114,115,122,127,130,138,146,149,159,166,168,199,208,210,218,219,221,223,226,246,248,252,253,264,269,283,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'function_call':([2,5,10,23,35,37,38,39,67,68,69,90,91,102,104,109,110,111,114,115,122,127,130,138,146,149,159,166,168,199,208,210,218,219,221,223,226,246,248,252,253,264,269,283,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'statement_if':([2,5,35,109,110,114,122,159,166,218,226,252,253,264,283,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'base_variable':([2,5,10,20,22,23,35,37,38,39,54,67,68,69,90,91,102,104,109,110,111,114,115,122,127,130,138,146,149,157,159,166,168,196,199,208,210,211,218,219,221,223,226,246,248,252,253,264,269,283,],[40,40,40,87,87,40,40,40,40,40,87,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,87,40,40,40,87,40,40,40,87,40,40,40,40,40,40,40,40,40,40,40,40,]),'reference_variable':([2,5,10,20,22,23,35,37,38,39,46,54,67,68,69,90,91,102,104,109,110,111,114,115,122,127,130,138,146,149,157,159,166,168,196,199,208,210,211,218,219,221,223,226,246,248,252,253,264,269,283,],[45,45,45,45,45,45,45,45,45,45,123,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'simple_indirect_reference_DOLAR':([2,5,10,20,22,23,35,37,38,39,48,54,67,68,69,90,91,102,104,109,110,111,114,115,122,127,128,130,138,146,149,157,159,166,168,196,199,208,210,211,218,219,221,223,226,246,248,252,253,264,269,283,],[46,46,46,46,46,46,46,46,46,46,129,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,129,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'compound_variable':([2,5,10,20,22,23,35,37,38,39,46,54,67,68,69,90,91,102,104,109,110,111,114,115,122,127,130,138,146,149,157,159,166,168,196,199,208,210,211,218,219,221,223,226,246,248,252,253,264,269,283,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'type_cast_operator':([10,],[56,]),'comparission_operator':([11,55,99,116,118,120,139,140,141,147,148,150,155,162,170,177,178,198,202,204,237,241,249,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'arithmetic_operator':([11,55,99,116,118,120,139,140,141,147,148,150,155,162,170,177,178,198,202,204,237,241,249,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'global_var':([19,144,],[83,201,]),'assign_operator':([21,],[91,]),'expr_EXIT':([24,25,],[100,103,]),'exit_expr':([24,25,],[101,101,]),'if_statement_complement':([33,],[105,]),'statement_elseif':([33,],[106,]),'statement_else':([33,106,],[107,158,]),'expr_parentheses':([34,44,108,163,],[110,122,159,215,]),'statement_BLOCK_OPT':([35,109,110,122,159,218,],[112,160,161,174,213,244,]),'reference_variable_SELECTOR':([47,126,],[125,175,]),'selector':([47,126,],[126,126,]),'function_call_parameter_list':([54,],[133,]),'function_call_parameter':([54,196,],[134,236,]),'statement_COLON_GLOBAL':([83,201,],[142,238,]),'array_pair_list':([104,],[152,]),'array_pair':([104,208,],[154,240,]),'array_pair_EXPR_ATTR_OPT':([104,208,],[156,156,]),'statement_MUL':([114,166,],[164,217,]),'for_parameters':([115,],[167,]),'for_expr_OPT':([115,168,219,221,246,248,269,],[169,220,245,247,268,270,284,]),'selector_EXPR':([127,],[176,]),'parameter_list':([131,193,],[180,235,]),'parameter':([131,193,229,],[181,181,254,]),'parameter_type':([131,193,229,],[183,183,183,]),'function_call_list_COLON_FUNCTION':([134,236,],[195,266,]),'array_pair_list_ARR_PAIR':([154,240,],[207,267,]),'array_pair_ATTR_EXPR_OPT':([155,],[209,]),'for_expr_COLON_EXPR':([170,249,],[222,271,]),'parameter_list_COLON_PARAMETER':([181,254,],[228,276,]),'inner_statement_MUL':([226,252,253,264,283,],[251,273,275,282,289,]),'static_scalar':([230,257,258,263,279,],[255,277,278,280,286,]),'common_scalar':([230,257,258,263,279,],[256,256,256,256,256,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> BEGIN_PROGRAM main_INNER END_PROGRAM','main',3,'p_main','ExpressionLanguageParser.py',14),
  ('main -> BEGIN_PROGRAM END_PROGRAM','main',2,'p_main','ExpressionLanguageParser.py',15),
  ('inner_statement -> function_declaration_statement','inner_statement',1,'p_inner_statement','ExpressionLanguageParser.py',23),
  ('inner_statement -> statement','inner_statement',1,'p_inner_statement','ExpressionLanguageParser.py',24),
  ('statement -> expr SEMICOLON','statement',2,'p_statement','ExpressionLanguageParser.py',31),
  ('statement -> if_statement','statement',1,'p_statement','ExpressionLanguageParser.py',32),
  ('statement -> while_statement','statement',1,'p_statement','ExpressionLanguageParser.py',33),
  ('statement -> do_statement','statement',1,'p_statement','ExpressionLanguageParser.py',34),
  ('statement -> for_statement','statement',1,'p_statement','ExpressionLanguageParser.py',35),
  ('statement -> break_statement','statement',1,'p_statement','ExpressionLanguageParser.py',36),
  ('statement -> continue_statement','statement',1,'p_statement','ExpressionLanguageParser.py',37),
  ('statement -> return_statement','statement',1,'p_statement','ExpressionLanguageParser.py',38),
  ('statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON','statement',4,'p_statement','ExpressionLanguageParser.py',39),
  ('statement -> GLOBAL global_var SEMICOLON','statement',3,'p_statement','ExpressionLanguageParser.py',40),
  ('if_statement -> statement_if if_statement_complement','if_statement',2,'p_if_statement','ExpressionLanguageParser.py',47),
  ('if_statement -> statement_if','if_statement',1,'p_if_statement','ExpressionLanguageParser.py',48),
  ('if_statement_complement -> statement_elseif','if_statement_complement',1,'p_if_statement_complement','ExpressionLanguageParser.py',53),
  ('if_statement_complement -> statement_elseif statement_else','if_statement_complement',2,'p_if_statement_complement','ExpressionLanguageParser.py',54),
  ('if_statement_complement -> statement_else','if_statement_complement',1,'p_if_statement_complement','ExpressionLanguageParser.py',55),
  ('while_statement -> WHILE expr_parentheses statement_BLOCK_OPT','while_statement',3,'p_while_statement','ExpressionLanguageParser.py',60),
  ('do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON','do_statement',5,'p_do_statement','ExpressionLanguageParser.py',65),
  ('break_statement -> BREAK expr SEMICOLON','break_statement',3,'p_break_statement','ExpressionLanguageParser.py',70),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','ExpressionLanguageParser.py',71),
  ('continue_statement -> CONTINUE expr SEMICOLON','continue_statement',3,'p_continue_statement','ExpressionLanguageParser.py',76),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','ExpressionLanguageParser.py',77),
  ('return_statement -> RETURN expr SEMICOLON','return_statement',3,'p_return_statement','ExpressionLanguageParser.py',82),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','ExpressionLanguageParser.py',83),
  ('for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT','for_statement',5,'p_for_statement','ExpressionLanguageParser.py',88),
  ('for_parameters -> SEMICOLON SEMICOLON','for_parameters',2,'p_for_parameters','ExpressionLanguageParser.py',93),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON','for_parameters',3,'p_for_parameters','ExpressionLanguageParser.py',94),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON','for_parameters',4,'p_for_parameters','ExpressionLanguageParser.py',95),
  ('for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','ExpressionLanguageParser.py',96),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON','for_parameters',3,'p_for_parameters','ExpressionLanguageParser.py',97),
  ('for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',4,'p_for_parameters','ExpressionLanguageParser.py',98),
  ('for_parameters -> SEMICOLON SEMICOLON for_expr_OPT','for_parameters',3,'p_for_parameters','ExpressionLanguageParser.py',99),
  ('for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT','for_parameters',5,'p_for_parameters','ExpressionLanguageParser.py',100),
  ('global_var -> VARIABLE','global_var',1,'p_global_var','ExpressionLanguageParser.py',105),
  ('global_var -> DOLAR VARIABLE','global_var',2,'p_global_var','ExpressionLanguageParser.py',106),
  ('global_var -> DOLAR LKEY expr RKEY','global_var',4,'p_global_var','ExpressionLanguageParser.py',107),
  ('statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL','statement_COLON_GLOBAL',3,'p_statement_COLON_GLOBAL','ExpressionLanguageParser.py',112),
  ('statement_COLON_GLOBAL -> COLON global_var','statement_COLON_GLOBAL',2,'p_statement_COLON_GLOBAL','ExpressionLanguageParser.py',113),
  ('ampersand_variable -> AMPERSAND VARIABLE','ampersand_variable',2,'p_ampersand_variable','ExpressionLanguageParser.py',118),
  ('ampersand_variable -> VARIABLE','ampersand_variable',1,'p_ampersand_variable','ExpressionLanguageParser.py',119),
  ('expr_parentheses -> LPAREN expr RPAREN','expr_parentheses',3,'p_expr_parentheses','ExpressionLanguageParser.py',124),
  ('statement_if -> IF expr_parentheses statement_BLOCK_OPT','statement_if',3,'p_statement_if','ExpressionLanguageParser.py',129),
  ('statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT','statement_elseif',3,'p_statement_elseif','ExpressionLanguageParser.py',134),
  ('statement_else -> ELSE statement_BLOCK_OPT','statement_else',2,'p_statement_else','ExpressionLanguageParser.py',139),
  ('statement_foreach -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT','statement_foreach',7,'p_statement_foreach','ExpressionLanguageParser.py',144),
  ('statement_foreach -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT','statement_foreach',9,'p_statement_foreach','ExpressionLanguageParser.py',145),
  ('for_expr_OPT -> expr for_expr_COLON_EXPR','for_expr_OPT',2,'p_for_expr_OPT','ExpressionLanguageParser.py',150),
  ('for_expr_OPT -> expr','for_expr_OPT',1,'p_for_expr_OPT','ExpressionLanguageParser.py',151),
  ('function_call -> ID LPAREN function_call_parameter_list RPAREN','function_call',4,'p_function_call','ExpressionLanguageParser.py',156),
  ('function_call -> base_variable','function_call',1,'p_function_call','ExpressionLanguageParser.py',157),
  ('function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION','function_call_parameter_list',2,'p_function_call_parameter_list','ExpressionLanguageParser.py',162),
  ('function_call_parameter_list -> <empty>','function_call_parameter_list',0,'p_function_call_parameter_list','ExpressionLanguageParser.py',163),
  ('function_call_parameter -> variable','function_call_parameter',1,'p_function_call_parameter','ExpressionLanguageParser.py',168),
  ('function_call_parameter -> AMPERSAND VARIABLE','function_call_parameter',2,'p_function_call_parameter','ExpressionLanguageParser.py',169),
  ('assignment_list_element -> variable','assignment_list_element',1,'p_assignment_list_element','ExpressionLanguageParser.py',174),
  ('assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN','assignment_list_element',5,'p_assignment_list_element','ExpressionLanguageParser.py',175),
  ('unary_operator -> EXC_DOT','unary_operator',1,'p_unary_operator','ExpressionLanguageParser.py',181),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','ExpressionLanguageParser.py',182),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','ExpressionLanguageParser.py',183),
  ('type_cast_operator -> INT_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',188),
  ('type_cast_operator -> DOUBLE_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',189),
  ('type_cast_operator -> FLOAT_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',190),
  ('type_cast_operator -> REAL_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',191),
  ('type_cast_operator -> STRING_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',192),
  ('type_cast_operator -> ARRAY_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',193),
  ('type_cast_operator -> BOOLEAN_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',194),
  ('type_cast_operator -> BOOL_TYPE','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',195),
  ('type_cast_operator -> UNSET','type_cast_operator',1,'p_type_cast_operator','ExpressionLanguageParser.py',196),
  ('arithmetic_expr -> arithmetic_expr PLUS arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','ExpressionLanguageParser.py',202),
  ('arithmetic_expr -> arithmetic_expr MINUS arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','ExpressionLanguageParser.py',203),
  ('arithmetic_expr -> arithmetic_expr TIMES arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','ExpressionLanguageParser.py',204),
  ('arithmetic_expr -> arithmetic_expr DIVIDE arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','ExpressionLanguageParser.py',205),
  ('arithmetic_expr -> LPAREN arithmetic_expr RPAREN','arithmetic_expr',3,'p_arithmetic_expr','ExpressionLanguageParser.py',206),
  ('arithmetic_expr -> NUMBER_INTEGER','arithmetic_expr',1,'p_arithmetic_expr','ExpressionLanguageParser.py',207),
  ('arithmetic_expr -> NUMBER_REAL','arithmetic_expr',1,'p_arithmetic_expr','ExpressionLanguageParser.py',208),
  ('assign_operator -> ADD_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',213),
  ('assign_operator -> SUB_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',214),
  ('assign_operator -> MOD_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',215),
  ('assign_operator -> PLUS_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',216),
  ('assign_operator -> DIVIDE_ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',217),
  ('assign_operator -> ASSIGN','assign_operator',1,'p_assign_operator','ExpressionLanguageParser.py',218),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',223),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',224),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',225),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',226),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','ExpressionLanguageParser.py',227),
  ('comparission_operator -> EQUALS','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',232),
  ('comparission_operator -> GREAT_THAN','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',233),
  ('comparission_operator -> LESS_THAN','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',234),
  ('comparission_operator -> LESS_EQUAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',235),
  ('comparission_operator -> GREAT_EQUAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',236),
  ('comparission_operator -> NOT_EQUAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',237),
  ('comparission_operator -> LEFT_LOGICAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',238),
  ('comparission_operator -> RIGHT_LOGICAL','comparission_operator',1,'p_comparission_operator','ExpressionLanguageParser.py',239),
  ('expr -> INCREMENT variable','expr',2,'p_expr','ExpressionLanguageParser.py',244),
  ('expr -> variable INCREMENT','expr',2,'p_expr','ExpressionLanguageParser.py',245),
  ('expr -> DECREMENT variable','expr',2,'p_expr','ExpressionLanguageParser.py',246),
  ('expr -> variable DECREMENT','expr',2,'p_expr','ExpressionLanguageParser.py',247),
  ('expr -> variable LBRACKET expr RBRACKET','expr',4,'p_expr','ExpressionLanguageParser.py',248),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','ExpressionLanguageParser.py',249),
  ('expr -> unary_operator expr','expr',2,'p_expr','ExpressionLanguageParser.py',250),
  ('expr -> expr INTE_DOT expr DDOT expr','expr',5,'p_expr','ExpressionLanguageParser.py',251),
  ('expr -> expr comparission_operator expr','expr',3,'p_expr','ExpressionLanguageParser.py',252),
  ('expr -> variable assign_operator expr','expr',3,'p_expr','ExpressionLanguageParser.py',253),
  ('expr -> variable assign_operator AMPERSAND expr','expr',4,'p_expr','ExpressionLanguageParser.py',254),
  ('expr -> expr arithmetic_operator expr','expr',3,'p_expr','ExpressionLanguageParser.py',255),
  ('expr -> LPAREN type_cast_operator RPAREN expr','expr',4,'p_expr','ExpressionLanguageParser.py',256),
  ('expr -> EXIT expr_EXIT','expr',2,'p_expr','ExpressionLanguageParser.py',257),
  ('expr -> DIE expr_EXIT','expr',2,'p_expr','ExpressionLanguageParser.py',258),
  ('expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN','expr',4,'p_expr','ExpressionLanguageParser.py',259),
  ('expr -> ARRAY_TYPE LPAREN RPAREN','expr',3,'p_expr','ExpressionLanguageParser.py',260),
  ('expr -> variable','expr',1,'p_expr','ExpressionLanguageParser.py',261),
  ('expr -> function_call','expr',1,'p_expr','ExpressionLanguageParser.py',262),
  ('expr -> NUMBER_REAL','expr',1,'p_expr','ExpressionLanguageParser.py',263),
  ('expr -> NUMBER_INTEGER','expr',1,'p_expr','ExpressionLanguageParser.py',264),
  ('expr -> CONSTANT_ENCAPSED_STRING','expr',1,'p_expr','ExpressionLanguageParser.py',265),
  ('expr -> TRUE','expr',1,'p_expr','ExpressionLanguageParser.py',266),
  ('expr -> FALSE','expr',1,'p_expr','ExpressionLanguageParser.py',267),
  ('encaps -> encaps_var','encaps',1,'p_encaps','ExpressionLanguageParser.py',274),
  ('encaps -> VARIABLE','encaps',1,'p_encaps','ExpressionLanguageParser.py',275),
  ('encaps -> LPAREN','encaps',1,'p_encaps','ExpressionLanguageParser.py',276),
  ('encaps -> RPAREN','encaps',1,'p_encaps','ExpressionLanguageParser.py',277),
  ('encaps -> LKEY','encaps',1,'p_encaps','ExpressionLanguageParser.py',278),
  ('encaps -> RKEY','encaps',1,'p_encaps','ExpressionLanguageParser.py',279),
  ('encaps_var -> VARIABLE encaps_var_OPT','encaps_var',2,'p_encaps_var','ExpressionLanguageParser.py',284),
  ('encaps_var -> DOLAR LBRACKET expr RBRACKET','encaps_var',4,'p_encaps_var','ExpressionLanguageParser.py',285),
  ('encaps_var -> DOLAR LKEY ID LBRACKET expr RBRACKET RKEY','encaps_var',7,'p_encaps_var','ExpressionLanguageParser.py',286),
  ('encaps_var -> LKEY variable RKEY','encaps_var',3,'p_encaps_var','ExpressionLanguageParser.py',287),
  ('encaps_var_OPT -> LBRACKET encaps_var_offset RBRACKET','encaps_var_OPT',3,'p_encaps_var_OPT','ExpressionLanguageParser.py',292),
  ('encaps_var_OPT -> <empty>','encaps_var_OPT',0,'p_encaps_var_OPT','ExpressionLanguageParser.py',293),
  ('encaps_var_offset -> STRING','encaps_var_offset',1,'p_encaps_var_offset','ExpressionLanguageParser.py',298),
  ('encaps_var_offset -> VARIABLE','encaps_var_offset',1,'p_encaps_var_offset','ExpressionLanguageParser.py',299),
  ('expr_EXIT -> exit_expr','expr_EXIT',1,'p_expr_EXIT','ExpressionLanguageParser.py',304),
  ('expr_EXIT -> <empty>','expr_EXIT',0,'p_expr_EXIT','ExpressionLanguageParser.py',305),
  ('exit_expr -> LPAREN expr RPAREN','exit_expr',3,'p_exit_expr','ExpressionLanguageParser.py',310),
  ('exit_expr -> LPAREN RPAREN','exit_expr',2,'p_exit_expr','ExpressionLanguageParser.py',311),
  ('variable -> base_variable','variable',1,'p_variable','ExpressionLanguageParser.py',317),
  ('base_variable -> reference_variable','base_variable',1,'p_base_variable','ExpressionLanguageParser.py',322),
  ('base_variable -> simple_indirect_reference_DOLAR reference_variable','base_variable',2,'p_base_variable','ExpressionLanguageParser.py',323),
  ('reference_variable -> compound_variable reference_variable_SELECTOR','reference_variable',2,'p_reference_variable','ExpressionLanguageParser.py',328),
  ('compound_variable -> VARIABLE','compound_variable',1,'p_compound_variable','ExpressionLanguageParser.py',333),
  ('compound_variable -> DOLAR LKEY expr RKEY','compound_variable',4,'p_compound_variable','ExpressionLanguageParser.py',334),
  ('selector -> LBRACKET selector_EXPR RBRACKET','selector',3,'p_selector','ExpressionLanguageParser.py',339),
  ('function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY RKEY','function_declaration_statement',6,'p_function_declaration_statement','ExpressionLanguageParser.py',344),
  ('function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY RKEY','function_declaration_statement',7,'p_function_declaration_statement','ExpressionLanguageParser.py',345),
  ('function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY RKEY','function_declaration_statement',8,'p_function_declaration_statement','ExpressionLanguageParser.py',346),
  ('function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN RPAREN LKEY inner_statement_MUL RKEY','function_declaration_statement',8,'p_function_declaration_statement','ExpressionLanguageParser.py',347),
  ('function_declaration_statement -> FUNCTION AMPERSAND ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY','function_declaration_statement',9,'p_function_declaration_statement','ExpressionLanguageParser.py',348),
  ('function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY RKEY','function_declaration_statement',7,'p_function_declaration_statement','ExpressionLanguageParser.py',349),
  ('function_declaration_statement -> FUNCTION ID LPAREN RPAREN LKEY inner_statement_MUL RKEY','function_declaration_statement',7,'p_function_declaration_statement','ExpressionLanguageParser.py',350),
  ('function_declaration_statement -> FUNCTION ID LPAREN parameter_list RPAREN LKEY inner_statement_MUL RKEY','function_declaration_statement',8,'p_function_declaration_statement','ExpressionLanguageParser.py',351),
  ('parameter_list -> parameter parameter_list_COLON_PARAMETER','parameter_list',2,'p_parameter_list','ExpressionLanguageParser.py',356),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ExpressionLanguageParser.py',357),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','ExpressionLanguageParser.py',362),
  ('parameter -> VARIABLE ASSIGN static_scalar','parameter',3,'p_parameter','ExpressionLanguageParser.py',363),
  ('parameter -> parameter_type VARIABLE','parameter',2,'p_parameter','ExpressionLanguageParser.py',364),
  ('parameter -> parameter_type AMPERSAND VARIABLE','parameter',3,'p_parameter','ExpressionLanguageParser.py',365),
  ('parameter -> AMPERSAND VARIABLE','parameter',2,'p_parameter','ExpressionLanguageParser.py',366),
  ('parameter -> AMPERSAND VARIABLE ASSIGN static_scalar','parameter',4,'p_parameter','ExpressionLanguageParser.py',367),
  ('parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar','parameter',5,'p_parameter','ExpressionLanguageParser.py',368),
  ('parameter_type -> INT_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',373),
  ('parameter_type -> BOOLEAN_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',374),
  ('parameter_type -> STRING_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',375),
  ('parameter_type -> FLOAT_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',376),
  ('parameter_type -> ARRAY_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',377),
  ('parameter_type -> BOOL_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',378),
  ('parameter_type -> REAL_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',379),
  ('parameter_type -> DOUBLE_TYPE','parameter_type',1,'p_parameter_type','ExpressionLanguageParser.py',380),
  ('static_scalar -> common_scalar','static_scalar',1,'p_static_scalar','ExpressionLanguageParser.py',386),
  ('static_scalar -> PLUS static_scalar','static_scalar',2,'p_static_scalar','ExpressionLanguageParser.py',387),
  ('static_scalar -> MINUS static_scalar','static_scalar',2,'p_static_scalar','ExpressionLanguageParser.py',388),
  ('common_scalar -> NUMBER_REAL','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',393),
  ('common_scalar -> NUMBER_INTEGER','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',394),
  ('common_scalar -> CONSTANT_ENCAPSED_STRING','common_scalar',1,'p_common_scalar','ExpressionLanguageParser.py',395),
  ('array_pair_list -> array_pair array_pair_list_ARR_PAIR','array_pair_list',2,'p_array_pair_list','ExpressionLanguageParser.py',400),
  ('array_pair_list -> array_pair','array_pair_list',1,'p_array_pair_list','ExpressionLanguageParser.py',401),
  ('array_pair -> expr','array_pair',1,'p_array_pair','ExpressionLanguageParser.py',406),
  ('array_pair -> expr array_pair_ATTR_EXPR_OPT','array_pair',2,'p_array_pair','ExpressionLanguageParser.py',407),
  ('array_pair -> array_pair_EXPR_ATTR_OPT AMPERSAND variable','array_pair',3,'p_array_pair','ExpressionLanguageParser.py',408),
  ('array_pair -> AMPERSAND variable','array_pair',2,'p_array_pair','ExpressionLanguageParser.py',409),
  ('main_INNER -> inner_statement main_INNER','main_INNER',2,'p_main_INNER','ExpressionLanguageParser.py',417),
  ('main_INNER -> inner_statement','main_INNER',1,'p_main_INNER','ExpressionLanguageParser.py',418),
  ('inner_statement_MUL -> inner_statement inner_statement_MUL','inner_statement_MUL',2,'p_inner_statement_MUL','ExpressionLanguageParser.py',425),
  ('inner_statement_MUL -> inner_statement','inner_statement_MUL',1,'p_inner_statement_MUL','ExpressionLanguageParser.py',426),
  ('statement_MUL -> statement statement_MUL','statement_MUL',2,'p_statement_MUL','ExpressionLanguageParser.py',431),
  ('statement_MUL -> statement','statement_MUL',1,'p_statement_MUL','ExpressionLanguageParser.py',432),
  ('for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR','for_expr_COLON_EXPR',3,'p_for_expr_COLON_EXPR','ExpressionLanguageParser.py',437),
  ('for_expr_COLON_EXPR -> COLON expr','for_expr_COLON_EXPR',2,'p_for_expr_COLON_EXPR','ExpressionLanguageParser.py',438),
  ('statement_BLOCK_OPT -> statement','statement_BLOCK_OPT',1,'p_statement_BLOCK_OPT','ExpressionLanguageParser.py',443),
  ('statement_BLOCK_OPT -> LKEY statement_MUL RKEY','statement_BLOCK_OPT',3,'p_statement_BLOCK_OPT','ExpressionLanguageParser.py',444),
  ('statement_BLOCK_OPT -> LKEY RKEY','statement_BLOCK_OPT',2,'p_statement_BLOCK_OPT','ExpressionLanguageParser.py',445),
  ('function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION','function_call_list_COLON_FUNCTION',3,'p_function_call_list_COLON_FUNCTION','ExpressionLanguageParser.py',450),
  ('function_call_list_COLON_FUNCTION -> <empty>','function_call_list_COLON_FUNCTION',0,'p_function_call_list_COLON_FUNCTION','ExpressionLanguageParser.py',451),
  ('expr_without_variable_COLON_ASSIGNMENT -> COLON assignment_list_element expr_without_variable_COLON_ASSIGNMENT','expr_without_variable_COLON_ASSIGNMENT',3,'p_expr_without_variable_COLON_ASSIGNMENT','ExpressionLanguageParser.py',456),
  ('expr_without_variable_COLON_ASSIGNMENT -> <empty>','expr_without_variable_COLON_ASSIGNMENT',0,'p_expr_without_variable_COLON_ASSIGNMENT','ExpressionLanguageParser.py',457),
  ('assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT','assignment_list_element_COLON_ASSIGNMENT',3,'p_assignment_list_element_COLON_ASSIGNMENT','ExpressionLanguageParser.py',462),
  ('assignment_list_element_COLON_ASSIGNMENT -> <empty>','assignment_list_element_COLON_ASSIGNMENT',0,'p_assignment_list_element_COLON_ASSIGNMENT','ExpressionLanguageParser.py',463),
  ('parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER','parameter_list_COLON_PARAMETER',3,'p_parameter_list_COLON_PARAMETER','ExpressionLanguageParser.py',468),
  ('parameter_list_COLON_PARAMETER -> COLON parameter','parameter_list_COLON_PARAMETER',2,'p_parameter_list_COLON_PARAMETER','ExpressionLanguageParser.py',469),
  ('reference_variable_SELECTOR -> selector reference_variable_SELECTOR','reference_variable_SELECTOR',2,'p_reference_variable_SELECTOR','ExpressionLanguageParser.py',474),
  ('reference_variable_SELECTOR -> <empty>','reference_variable_SELECTOR',0,'p_reference_variable_SELECTOR','ExpressionLanguageParser.py',475),
  ('simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR','simple_indirect_reference_DOLAR',2,'p_simple_indirect_reference_DOLAR','ExpressionLanguageParser.py',480),
  ('simple_indirect_reference_DOLAR -> <empty>','simple_indirect_reference_DOLAR',0,'p_simple_indirect_reference_DOLAR','ExpressionLanguageParser.py',481),
  ('selector_EXPR -> expr','selector_EXPR',1,'p_selector_EXPR','ExpressionLanguageParser.py',486),
  ('selector_EXPR -> <empty>','selector_EXPR',0,'p_selector_EXPR','ExpressionLanguageParser.py',487),
  ('array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR','array_pair_list_ARR_PAIR',3,'p_array_pair_list_ARR_PAIR','ExpressionLanguageParser.py',492),
  ('array_pair_list_ARR_PAIR -> COLON array_pair','array_pair_list_ARR_PAIR',2,'p_array_pair_list_ARR_PAIR','ExpressionLanguageParser.py',493),
  ('array_pair_ATTR_EXPR_OPT -> ATTR_ASSOC expr','array_pair_ATTR_EXPR_OPT',2,'p_array_pair_ATTR_EXPR_OPT','ExpressionLanguageParser.py',498),
  ('array_pair_ATTR_EXPR_OPT -> <empty>','array_pair_ATTR_EXPR_OPT',0,'p_array_pair_ATTR_EXPR_OPT','ExpressionLanguageParser.py',499),
  ('array_pair_EXPR_ATTR_OPT -> expr ATTR_ASSOC','array_pair_EXPR_ATTR_OPT',2,'p_array_pair_EXPR_ATTR_OPT','ExpressionLanguageParser.py',504),
]

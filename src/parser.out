Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    DOUBLE_TYPE
    ENDDECLARE
    IDENTATION
    LEFT_LOGICAL
    LIST
    REAL_TYPE
    RIGHT_LOGICAL
    STRING
    UNSET
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     main_INNER -> inner_statement main_INNER
Rule 4     main_INNER -> inner_statement
Rule 5     inner_statement -> function_declaration_statement
Rule 6     inner_statement -> statement
Rule 7     inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 8     inner_statement_MUL -> inner_statement
Rule 9     expr -> expr PLUS expr
Rule 10    expr -> expr MINUS expr
Rule 11    expr -> MINUS expr
Rule 12    expr -> expr DIVIDE expr
Rule 13    expr -> expr PERCENT expr
Rule 14    expr -> expr TIMES expr
Rule 15    expr -> expr EQUALS expr
Rule 16    expr -> expr NOT_EQUAL expr
Rule 17    expr -> expr GREAT_THAN expr
Rule 18    expr -> expr GREAT_EQUAL expr
Rule 19    expr -> expr LESS_THAN expr
Rule 20    expr -> expr LESS_EQUAL expr
Rule 21    expr -> expr AND expr
Rule 22    expr -> expr OR expr
Rule 23    expr -> EXC_DOT expr
Rule 24    expr -> PRE_INCREMENT variable
Rule 25    expr -> variable POS_INCREMENT
Rule 26    expr -> PRE_DECREMENT variable
Rule 27    expr -> variable POS_DECREMENT
Rule 28    expr -> variable
Rule 29    expr -> LPAREN expr RPAREN
Rule 30    expr -> ARRAY_TYPE array_declaration
Rule 31    expr -> function_call
Rule 32    expr -> expr INTE_DOT expr DDOT expr
Rule 33    expr -> variable ADD_ASSIGN expr
Rule 34    expr -> variable SUB_ASSIGN expr
Rule 35    expr -> variable MOD_ASSIGN expr
Rule 36    expr -> variable PLUS_ASSIGN expr
Rule 37    expr -> variable DIVIDE_ASSIGN expr
Rule 38    expr -> variable ASSIGN expr
Rule 39    expr -> LPAREN INT_TYPE RPAREN expr
Rule 40    expr -> LPAREN FLOAT_TYPE RPAREN expr
Rule 41    expr -> LPAREN STRING_TYPE RPAREN expr
Rule 42    expr -> LPAREN ARRAY_TYPE RPAREN expr
Rule 43    expr -> LPAREN BOOL_TYPE RPAREN expr
Rule 44    expr -> NUMBER_INTEGER
Rule 45    expr -> NUMBER_REAL
Rule 46    expr -> CONSTANT_ENCAPSED_STRING
Rule 47    expr -> TRUE
Rule 48    expr -> FALSE
Rule 49    exit_statement -> EXIT exit_expr
Rule 50    exit_statement -> EXIT
Rule 51    die_statement -> DIE exit_expr
Rule 52    die_statement -> DIE
Rule 53    exit_expr -> LPAREN expr RPAREN
Rule 54    exit_expr -> LPAREN RPAREN
Rule 55    array_declaration -> LPAREN array_pair_list RPAREN
Rule 56    array_declaration -> LPAREN RPAREN
Rule 57    statement -> expr SEMICOLON
Rule 58    statement -> if_statement
Rule 59    statement -> while_statement
Rule 60    statement -> do_statement
Rule 61    statement -> for_statement
Rule 62    statement -> foreach_statement
Rule 63    statement -> break_statement
Rule 64    statement -> continue_statement
Rule 65    statement -> return_statement
Rule 66    statement -> exit_statement SEMICOLON
Rule 67    statement -> die_statement SEMICOLON
Rule 68    statement -> global_statement SEMICOLON
Rule 69    S -> IF
Rule 70    if_statement -> statement_if
Rule 71    if_statement -> statement_if statement_else
Rule 72    if_statement -> statement_if statement_elseif
Rule 73    if_statement -> statement_if statement_elseif statement_else
Rule 74    statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if
Rule 75    statement_if -> IF expr_parentheses statement_BLOCK_OPT
Rule 76    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif
Rule 77    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT
Rule 78    statement_else -> ELSE statement_BLOCK_OPT
Rule 79    global_statement -> GLOBAL global_var statement_COLON_GLOBAL
Rule 80    global_statement -> GLOBAL global_var
Rule 81    while_statement -> WHILE expr_parentheses statement_BLOCK_OPT
Rule 82    do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
Rule 83    break_statement -> BREAK expr SEMICOLON
Rule 84    break_statement -> BREAK SEMICOLON
Rule 85    continue_statement -> CONTINUE expr SEMICOLON
Rule 86    continue_statement -> CONTINUE SEMICOLON
Rule 87    return_statement -> RETURN expr SEMICOLON
Rule 88    return_statement -> RETURN SEMICOLON
Rule 89    for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
Rule 90    for_parameters -> SEMICOLON SEMICOLON
Rule 91    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 92    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 93    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 94    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 95    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 96    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 97    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 98    global_var -> VARIABLE
Rule 99    global_var -> DOLAR VARIABLE
Rule 100   global_var -> DOLAR LKEY expr RKEY
Rule 101   statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 102   statement_COLON_GLOBAL -> COLON global_var
Rule 103   ampersand_variable -> AMPERSAND VARIABLE
Rule 104   ampersand_variable -> VARIABLE
Rule 105   expr_parentheses -> LPAREN expr RPAREN
Rule 106   foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 107   foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 108   for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 109   for_expr_OPT -> expr
Rule 110   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 111   for_expr_COLON_EXPR -> COLON expr
Rule 112   function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 113   function_call -> ID LPAREN RPAREN
Rule 114   function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 115   function_call_parameter_list -> function_call_parameter
Rule 116   fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 117   fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter
Rule 118   function_call_parameter -> expr
Rule 119   function_call_parameter -> AMPERSAND VARIABLE
Rule 120   unary_operator -> EXC_DOT
Rule 121   unary_operator -> PLUS
Rule 122   unary_operator -> MINUS
Rule 123   variable -> VARIABLE reference_variable_SELECTOR
Rule 124   variable -> VARIABLE
Rule 125   selector -> LBRACKET expr RBRACKET
Rule 126   selector -> LBRACKET RBRACKET
Rule 127   function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements
Rule 128   fds_statements -> LKEY inner_statement_MUL RKEY
Rule 129   fds_statements -> LKEY RKEY
Rule 130   fds_id -> AMPERSAND ID
Rule 131   fds_id -> ID
Rule 132   fds_parameter -> LPAREN parameter_list RPAREN
Rule 133   fds_parameter -> LPAREN RPAREN
Rule 134   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 135   parameter_list -> parameter
Rule 136   parameter -> VARIABLE
Rule 137   parameter -> parameter_prefix VARIABLE
Rule 138   parameter -> VARIABLE ASSIGN static_scalar
Rule 139   parameter -> parameter_prefix VARIABLE ASSIGN static_scalar
Rule 140   parameter_prefix -> parameter_type AMPERSAND
Rule 141   parameter_prefix -> AMPERSAND
Rule 142   parameter_prefix -> parameter_type
Rule 143   parameter_type -> INT_TYPE
Rule 144   parameter_type -> BOOLEAN_TYPE
Rule 145   parameter_type -> STRING_TYPE
Rule 146   parameter_type -> FLOAT_TYPE
Rule 147   parameter_type -> ARRAY_TYPE
Rule 148   parameter_type -> BOOL_TYPE
Rule 149   static_scalar -> common_scalar
Rule 150   static_scalar -> PLUS static_scalar
Rule 151   static_scalar -> MINUS static_scalar
Rule 152   common_scalar -> NUMBER_REAL
Rule 153   common_scalar -> NUMBER_INTEGER
Rule 154   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 155   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 156   array_pair_list -> array_pair
Rule 157   array_pair -> expr
Rule 158   array_pair -> AMPERSAND variable
Rule 159   array_pair -> expr ATTR_ASSOC expr
Rule 160   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 161   statement_MUL -> statement statement_MUL
Rule 162   statement_MUL -> statement
Rule 163   statement_BLOCK_OPT -> statement
Rule 164   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 165   statement_BLOCK_OPT -> LKEY RKEY
Rule 166   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 167   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 168   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 169   reference_variable_SELECTOR -> selector
Rule 170   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 171   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 33
AMPERSAND            : 103 119 130 140 141 158 160
AND                  : 21
APOSTROFE            : 
ARRAY_TYPE           : 30 42 147
ARROBA               : 
AS                   : 106 107
ASPAS                : 
ASSIGN               : 38 138 139
ATTR_ASSOC           : 107 159 160
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 144
BOOL_TYPE            : 43 148
BREAK                : 83 84
CASE                 : 
CLONE                : 
COLON                : 101 102 110 111 116 117 166 167 170 171
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 46 154
CONTINUE             : 85 86
CRASE                : 
DDOT                 : 32
DECLARE              : 
DIE                  : 51 52
DIVIDE               : 12
DIVIDE_ASSIGN        : 37
DO                   : 82
DOLAR                : 99 100
DOUBLE_TYPE          : 
ELSE                 : 78
ELSEIF               : 76 77
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 15
EXC_DOT              : 23 120
EXIT                 : 49 50
FALSE                : 48
FLOAT_TYPE           : 40 146
FOR                  : 89
FOREACH              : 106 107
FUNCTION             : 127
GLOBAL               : 79 80
GREAT_EQUAL          : 18
GREAT_THAN           : 17
ID                   : 112 113 130 131
IDENTATION           : 
IF                   : 69 74 75
INTE_DOT             : 32
INT_TYPE             : 39 143
LBRACKET             : 125 126
LEFT_LOGICAL         : 
LESS_EQUAL           : 20
LESS_THAN            : 19
LIST                 : 
LKEY                 : 100 128 129 164 165
LPAREN               : 29 39 40 41 42 43 53 54 55 56 89 105 106 107 112 113 132 133
MINUS                : 10 11 122 151
MOD_ASSIGN           : 35
NOT_EQUAL            : 16
NUMBER_INTEGER       : 44 153
NUMBER_REAL          : 45 152
OR                   : 22
PERCENT              : 13
PLUS                 : 9 121 150
PLUS_ASSIGN          : 36
POS_DECREMENT        : 27
POS_INCREMENT        : 25
PRE_DECREMENT        : 26
PRE_INCREMENT        : 24
RBRACKET             : 125 126
REAL_TYPE            : 
RETURN               : 87 88
RIGHT_LOGICAL        : 
RKEY                 : 100 128 129 164 165
RPAREN               : 29 39 40 41 42 43 53 54 55 56 89 105 106 107 112 113 132 133
SEMICOLON            : 57 66 67 68 82 83 84 85 86 87 88 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97
STRING               : 
STRING_TYPE          : 41 145
SUB_ASSIGN           : 34
TIMES                : 14
TRUE                 : 47
UNSET                : 
VAR                  : 
VARIABLE             : 98 99 103 104 119 123 124 136 137 138 139
WHILE                : 81 82
error                : 

Nonterminals, with rules where they appear

S                    : 
ampersand_variable   : 106 107 107
array_declaration    : 30
array_pair           : 155 156 170 171
array_pair_list      : 55
array_pair_list_ARR_PAIR : 155 170
break_statement      : 63
common_scalar        : 149
continue_statement   : 64
die_statement        : 67
do_statement         : 60
exit_expr            : 49 51
exit_statement       : 66
expr                 : 9 9 10 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 29 32 32 32 33 34 35 36 37 38 39 40 41 42 43 53 57 83 85 87 100 105 106 107 108 109 110 111 118 125 157 159 159 160
expr_parentheses     : 74 75 76 77 81 82
fc_parameter_list_COLON_PARAMETER : 114 116
fds_id               : 127
fds_parameter        : 127
fds_statements       : 127
for_expr_COLON_EXPR  : 108 110
for_expr_OPT         : 91 92 92 93 93 94 95 95 96 97 97 97
for_parameters       : 89
for_statement        : 61
foreach_statement    : 62
function_call        : 31
function_call_parameter : 114 115 116 117
function_call_parameter_list : 112
function_declaration_statement : 5
global_statement     : 68
global_var           : 79 80 101 102
if_statement         : 58
inner_statement      : 3 4 7 8
inner_statement_MUL  : 7 128
main                 : 0
main_INNER           : 1 3
parameter            : 134 135 166 167
parameter_list       : 132
parameter_list_COLON_PARAMETER : 134 166
parameter_prefix     : 137 139
parameter_type       : 140 142
reference_variable_SELECTOR : 123 168
return_statement     : 65
selector             : 168 169
statement            : 6 161 162 163
statement_BLOCK_OPT  : 74 75 76 77 78 81 82 89 106 107
statement_COLON_GLOBAL : 79 101
statement_MUL        : 161 164
statement_else       : 71 73
statement_elseif     : 72 73 76
statement_if         : 70 71 72 73 74
static_scalar        : 138 139 150 151
unary_operator       : 
variable             : 24 25 26 27 28 33 34 35 36 37 38 158 160
while_statement      : 59

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (127) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 48


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (3) main_INNER -> inner_statement . main_INNER
    (4) main_INNER -> inner_statement .
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (127) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    END_PROGRAM     reduce using rule 4 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 49
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 6

    (5) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXC_DOT         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    PRE_INCREMENT   reduce using rule 5 (inner_statement -> function_declaration_statement .)
    PRE_DECREMENT   reduce using rule 5 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 5 (inner_statement -> function_declaration_statement .)


state 7

    (6) inner_statement -> statement .

    FUNCTION        reduce using rule 6 (inner_statement -> statement .)
    MINUS           reduce using rule 6 (inner_statement -> statement .)
    EXC_DOT         reduce using rule 6 (inner_statement -> statement .)
    PRE_INCREMENT   reduce using rule 6 (inner_statement -> statement .)
    PRE_DECREMENT   reduce using rule 6 (inner_statement -> statement .)
    LPAREN          reduce using rule 6 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 6 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 6 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 6 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (inner_statement -> statement .)
    TRUE            reduce using rule 6 (inner_statement -> statement .)
    FALSE           reduce using rule 6 (inner_statement -> statement .)
    WHILE           reduce using rule 6 (inner_statement -> statement .)
    DO              reduce using rule 6 (inner_statement -> statement .)
    FOR             reduce using rule 6 (inner_statement -> statement .)
    FOREACH         reduce using rule 6 (inner_statement -> statement .)
    BREAK           reduce using rule 6 (inner_statement -> statement .)
    CONTINUE        reduce using rule 6 (inner_statement -> statement .)
    RETURN          reduce using rule 6 (inner_statement -> statement .)
    EXIT            reduce using rule 6 (inner_statement -> statement .)
    DIE             reduce using rule 6 (inner_statement -> statement .)
    GLOBAL          reduce using rule 6 (inner_statement -> statement .)
    VARIABLE        reduce using rule 6 (inner_statement -> statement .)
    ID              reduce using rule 6 (inner_statement -> statement .)
    IF              reduce using rule 6 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 6 (inner_statement -> statement .)
    RKEY            reduce using rule 6 (inner_statement -> statement .)


state 8

    (127) function_declaration_statement -> FUNCTION . fds_id fds_parameter fds_statements
    (130) fds_id -> . AMPERSAND ID
    (131) fds_id -> . ID

    AMPERSAND       shift and go to state 51
    ID              shift and go to state 52

    fds_id                         shift and go to state 50

state 9

    (57) statement -> expr . SEMICOLON
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 10

    (58) statement -> if_statement .

    FUNCTION        reduce using rule 58 (statement -> if_statement .)
    MINUS           reduce using rule 58 (statement -> if_statement .)
    EXC_DOT         reduce using rule 58 (statement -> if_statement .)
    PRE_INCREMENT   reduce using rule 58 (statement -> if_statement .)
    PRE_DECREMENT   reduce using rule 58 (statement -> if_statement .)
    LPAREN          reduce using rule 58 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 58 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 58 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 58 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 58 (statement -> if_statement .)
    TRUE            reduce using rule 58 (statement -> if_statement .)
    FALSE           reduce using rule 58 (statement -> if_statement .)
    WHILE           reduce using rule 58 (statement -> if_statement .)
    DO              reduce using rule 58 (statement -> if_statement .)
    FOR             reduce using rule 58 (statement -> if_statement .)
    FOREACH         reduce using rule 58 (statement -> if_statement .)
    BREAK           reduce using rule 58 (statement -> if_statement .)
    CONTINUE        reduce using rule 58 (statement -> if_statement .)
    RETURN          reduce using rule 58 (statement -> if_statement .)
    EXIT            reduce using rule 58 (statement -> if_statement .)
    DIE             reduce using rule 58 (statement -> if_statement .)
    GLOBAL          reduce using rule 58 (statement -> if_statement .)
    VARIABLE        reduce using rule 58 (statement -> if_statement .)
    ID              reduce using rule 58 (statement -> if_statement .)
    IF              reduce using rule 58 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 58 (statement -> if_statement .)
    RKEY            reduce using rule 58 (statement -> if_statement .)
    ELSE            reduce using rule 58 (statement -> if_statement .)
    ELSEIF          reduce using rule 58 (statement -> if_statement .)


state 11

    (59) statement -> while_statement .

    FUNCTION        reduce using rule 59 (statement -> while_statement .)
    MINUS           reduce using rule 59 (statement -> while_statement .)
    EXC_DOT         reduce using rule 59 (statement -> while_statement .)
    PRE_INCREMENT   reduce using rule 59 (statement -> while_statement .)
    PRE_DECREMENT   reduce using rule 59 (statement -> while_statement .)
    LPAREN          reduce using rule 59 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 59 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 59 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 59 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (statement -> while_statement .)
    TRUE            reduce using rule 59 (statement -> while_statement .)
    FALSE           reduce using rule 59 (statement -> while_statement .)
    WHILE           reduce using rule 59 (statement -> while_statement .)
    DO              reduce using rule 59 (statement -> while_statement .)
    FOR             reduce using rule 59 (statement -> while_statement .)
    FOREACH         reduce using rule 59 (statement -> while_statement .)
    BREAK           reduce using rule 59 (statement -> while_statement .)
    CONTINUE        reduce using rule 59 (statement -> while_statement .)
    RETURN          reduce using rule 59 (statement -> while_statement .)
    EXIT            reduce using rule 59 (statement -> while_statement .)
    DIE             reduce using rule 59 (statement -> while_statement .)
    GLOBAL          reduce using rule 59 (statement -> while_statement .)
    VARIABLE        reduce using rule 59 (statement -> while_statement .)
    ID              reduce using rule 59 (statement -> while_statement .)
    IF              reduce using rule 59 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 59 (statement -> while_statement .)
    RKEY            reduce using rule 59 (statement -> while_statement .)
    ELSE            reduce using rule 59 (statement -> while_statement .)
    ELSEIF          reduce using rule 59 (statement -> while_statement .)


state 12

    (60) statement -> do_statement .

    FUNCTION        reduce using rule 60 (statement -> do_statement .)
    MINUS           reduce using rule 60 (statement -> do_statement .)
    EXC_DOT         reduce using rule 60 (statement -> do_statement .)
    PRE_INCREMENT   reduce using rule 60 (statement -> do_statement .)
    PRE_DECREMENT   reduce using rule 60 (statement -> do_statement .)
    LPAREN          reduce using rule 60 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 60 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 60 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 60 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (statement -> do_statement .)
    TRUE            reduce using rule 60 (statement -> do_statement .)
    FALSE           reduce using rule 60 (statement -> do_statement .)
    WHILE           reduce using rule 60 (statement -> do_statement .)
    DO              reduce using rule 60 (statement -> do_statement .)
    FOR             reduce using rule 60 (statement -> do_statement .)
    FOREACH         reduce using rule 60 (statement -> do_statement .)
    BREAK           reduce using rule 60 (statement -> do_statement .)
    CONTINUE        reduce using rule 60 (statement -> do_statement .)
    RETURN          reduce using rule 60 (statement -> do_statement .)
    EXIT            reduce using rule 60 (statement -> do_statement .)
    DIE             reduce using rule 60 (statement -> do_statement .)
    GLOBAL          reduce using rule 60 (statement -> do_statement .)
    VARIABLE        reduce using rule 60 (statement -> do_statement .)
    ID              reduce using rule 60 (statement -> do_statement .)
    IF              reduce using rule 60 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 60 (statement -> do_statement .)
    RKEY            reduce using rule 60 (statement -> do_statement .)
    ELSE            reduce using rule 60 (statement -> do_statement .)
    ELSEIF          reduce using rule 60 (statement -> do_statement .)


state 13

    (61) statement -> for_statement .

    FUNCTION        reduce using rule 61 (statement -> for_statement .)
    MINUS           reduce using rule 61 (statement -> for_statement .)
    EXC_DOT         reduce using rule 61 (statement -> for_statement .)
    PRE_INCREMENT   reduce using rule 61 (statement -> for_statement .)
    PRE_DECREMENT   reduce using rule 61 (statement -> for_statement .)
    LPAREN          reduce using rule 61 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 61 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 61 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 61 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (statement -> for_statement .)
    TRUE            reduce using rule 61 (statement -> for_statement .)
    FALSE           reduce using rule 61 (statement -> for_statement .)
    WHILE           reduce using rule 61 (statement -> for_statement .)
    DO              reduce using rule 61 (statement -> for_statement .)
    FOR             reduce using rule 61 (statement -> for_statement .)
    FOREACH         reduce using rule 61 (statement -> for_statement .)
    BREAK           reduce using rule 61 (statement -> for_statement .)
    CONTINUE        reduce using rule 61 (statement -> for_statement .)
    RETURN          reduce using rule 61 (statement -> for_statement .)
    EXIT            reduce using rule 61 (statement -> for_statement .)
    DIE             reduce using rule 61 (statement -> for_statement .)
    GLOBAL          reduce using rule 61 (statement -> for_statement .)
    VARIABLE        reduce using rule 61 (statement -> for_statement .)
    ID              reduce using rule 61 (statement -> for_statement .)
    IF              reduce using rule 61 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 61 (statement -> for_statement .)
    RKEY            reduce using rule 61 (statement -> for_statement .)
    ELSE            reduce using rule 61 (statement -> for_statement .)
    ELSEIF          reduce using rule 61 (statement -> for_statement .)


state 14

    (62) statement -> foreach_statement .

    FUNCTION        reduce using rule 62 (statement -> foreach_statement .)
    MINUS           reduce using rule 62 (statement -> foreach_statement .)
    EXC_DOT         reduce using rule 62 (statement -> foreach_statement .)
    PRE_INCREMENT   reduce using rule 62 (statement -> foreach_statement .)
    PRE_DECREMENT   reduce using rule 62 (statement -> foreach_statement .)
    LPAREN          reduce using rule 62 (statement -> foreach_statement .)
    ARRAY_TYPE      reduce using rule 62 (statement -> foreach_statement .)
    NUMBER_INTEGER  reduce using rule 62 (statement -> foreach_statement .)
    NUMBER_REAL     reduce using rule 62 (statement -> foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (statement -> foreach_statement .)
    TRUE            reduce using rule 62 (statement -> foreach_statement .)
    FALSE           reduce using rule 62 (statement -> foreach_statement .)
    WHILE           reduce using rule 62 (statement -> foreach_statement .)
    DO              reduce using rule 62 (statement -> foreach_statement .)
    FOR             reduce using rule 62 (statement -> foreach_statement .)
    FOREACH         reduce using rule 62 (statement -> foreach_statement .)
    BREAK           reduce using rule 62 (statement -> foreach_statement .)
    CONTINUE        reduce using rule 62 (statement -> foreach_statement .)
    RETURN          reduce using rule 62 (statement -> foreach_statement .)
    EXIT            reduce using rule 62 (statement -> foreach_statement .)
    DIE             reduce using rule 62 (statement -> foreach_statement .)
    GLOBAL          reduce using rule 62 (statement -> foreach_statement .)
    VARIABLE        reduce using rule 62 (statement -> foreach_statement .)
    ID              reduce using rule 62 (statement -> foreach_statement .)
    IF              reduce using rule 62 (statement -> foreach_statement .)
    END_PROGRAM     reduce using rule 62 (statement -> foreach_statement .)
    RKEY            reduce using rule 62 (statement -> foreach_statement .)
    ELSE            reduce using rule 62 (statement -> foreach_statement .)
    ELSEIF          reduce using rule 62 (statement -> foreach_statement .)


state 15

    (63) statement -> break_statement .

    FUNCTION        reduce using rule 63 (statement -> break_statement .)
    MINUS           reduce using rule 63 (statement -> break_statement .)
    EXC_DOT         reduce using rule 63 (statement -> break_statement .)
    PRE_INCREMENT   reduce using rule 63 (statement -> break_statement .)
    PRE_DECREMENT   reduce using rule 63 (statement -> break_statement .)
    LPAREN          reduce using rule 63 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 63 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 63 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 63 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (statement -> break_statement .)
    TRUE            reduce using rule 63 (statement -> break_statement .)
    FALSE           reduce using rule 63 (statement -> break_statement .)
    WHILE           reduce using rule 63 (statement -> break_statement .)
    DO              reduce using rule 63 (statement -> break_statement .)
    FOR             reduce using rule 63 (statement -> break_statement .)
    FOREACH         reduce using rule 63 (statement -> break_statement .)
    BREAK           reduce using rule 63 (statement -> break_statement .)
    CONTINUE        reduce using rule 63 (statement -> break_statement .)
    RETURN          reduce using rule 63 (statement -> break_statement .)
    EXIT            reduce using rule 63 (statement -> break_statement .)
    DIE             reduce using rule 63 (statement -> break_statement .)
    GLOBAL          reduce using rule 63 (statement -> break_statement .)
    VARIABLE        reduce using rule 63 (statement -> break_statement .)
    ID              reduce using rule 63 (statement -> break_statement .)
    IF              reduce using rule 63 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 63 (statement -> break_statement .)
    RKEY            reduce using rule 63 (statement -> break_statement .)
    ELSE            reduce using rule 63 (statement -> break_statement .)
    ELSEIF          reduce using rule 63 (statement -> break_statement .)


state 16

    (64) statement -> continue_statement .

    FUNCTION        reduce using rule 64 (statement -> continue_statement .)
    MINUS           reduce using rule 64 (statement -> continue_statement .)
    EXC_DOT         reduce using rule 64 (statement -> continue_statement .)
    PRE_INCREMENT   reduce using rule 64 (statement -> continue_statement .)
    PRE_DECREMENT   reduce using rule 64 (statement -> continue_statement .)
    LPAREN          reduce using rule 64 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 64 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 64 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 64 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (statement -> continue_statement .)
    TRUE            reduce using rule 64 (statement -> continue_statement .)
    FALSE           reduce using rule 64 (statement -> continue_statement .)
    WHILE           reduce using rule 64 (statement -> continue_statement .)
    DO              reduce using rule 64 (statement -> continue_statement .)
    FOR             reduce using rule 64 (statement -> continue_statement .)
    FOREACH         reduce using rule 64 (statement -> continue_statement .)
    BREAK           reduce using rule 64 (statement -> continue_statement .)
    CONTINUE        reduce using rule 64 (statement -> continue_statement .)
    RETURN          reduce using rule 64 (statement -> continue_statement .)
    EXIT            reduce using rule 64 (statement -> continue_statement .)
    DIE             reduce using rule 64 (statement -> continue_statement .)
    GLOBAL          reduce using rule 64 (statement -> continue_statement .)
    VARIABLE        reduce using rule 64 (statement -> continue_statement .)
    ID              reduce using rule 64 (statement -> continue_statement .)
    IF              reduce using rule 64 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 64 (statement -> continue_statement .)
    RKEY            reduce using rule 64 (statement -> continue_statement .)
    ELSE            reduce using rule 64 (statement -> continue_statement .)
    ELSEIF          reduce using rule 64 (statement -> continue_statement .)


state 17

    (65) statement -> return_statement .

    FUNCTION        reduce using rule 65 (statement -> return_statement .)
    MINUS           reduce using rule 65 (statement -> return_statement .)
    EXC_DOT         reduce using rule 65 (statement -> return_statement .)
    PRE_INCREMENT   reduce using rule 65 (statement -> return_statement .)
    PRE_DECREMENT   reduce using rule 65 (statement -> return_statement .)
    LPAREN          reduce using rule 65 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 65 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 65 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 65 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (statement -> return_statement .)
    TRUE            reduce using rule 65 (statement -> return_statement .)
    FALSE           reduce using rule 65 (statement -> return_statement .)
    WHILE           reduce using rule 65 (statement -> return_statement .)
    DO              reduce using rule 65 (statement -> return_statement .)
    FOR             reduce using rule 65 (statement -> return_statement .)
    FOREACH         reduce using rule 65 (statement -> return_statement .)
    BREAK           reduce using rule 65 (statement -> return_statement .)
    CONTINUE        reduce using rule 65 (statement -> return_statement .)
    RETURN          reduce using rule 65 (statement -> return_statement .)
    EXIT            reduce using rule 65 (statement -> return_statement .)
    DIE             reduce using rule 65 (statement -> return_statement .)
    GLOBAL          reduce using rule 65 (statement -> return_statement .)
    VARIABLE        reduce using rule 65 (statement -> return_statement .)
    ID              reduce using rule 65 (statement -> return_statement .)
    IF              reduce using rule 65 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 65 (statement -> return_statement .)
    RKEY            reduce using rule 65 (statement -> return_statement .)
    ELSE            reduce using rule 65 (statement -> return_statement .)
    ELSEIF          reduce using rule 65 (statement -> return_statement .)


state 18

    (66) statement -> exit_statement . SEMICOLON

    SEMICOLON       shift and go to state 68


state 19

    (67) statement -> die_statement . SEMICOLON

    SEMICOLON       shift and go to state 69


state 20

    (68) statement -> global_statement . SEMICOLON

    SEMICOLON       shift and go to state 70


state 21

    (11) expr -> MINUS . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 71
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 22

    (23) expr -> EXC_DOT . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 72
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 23

    (24) expr -> PRE_INCREMENT . variable
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 73

state 24

    (25) expr -> variable . POS_INCREMENT
    (27) expr -> variable . POS_DECREMENT
    (28) expr -> variable .
    (33) expr -> variable . ADD_ASSIGN expr
    (34) expr -> variable . SUB_ASSIGN expr
    (35) expr -> variable . MOD_ASSIGN expr
    (36) expr -> variable . PLUS_ASSIGN expr
    (37) expr -> variable . DIVIDE_ASSIGN expr
    (38) expr -> variable . ASSIGN expr

    POS_INCREMENT   shift and go to state 74
    POS_DECREMENT   shift and go to state 75
    SEMICOLON       reduce using rule 28 (expr -> variable .)
    PLUS            reduce using rule 28 (expr -> variable .)
    MINUS           reduce using rule 28 (expr -> variable .)
    DIVIDE          reduce using rule 28 (expr -> variable .)
    PERCENT         reduce using rule 28 (expr -> variable .)
    TIMES           reduce using rule 28 (expr -> variable .)
    EQUALS          reduce using rule 28 (expr -> variable .)
    NOT_EQUAL       reduce using rule 28 (expr -> variable .)
    GREAT_THAN      reduce using rule 28 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 28 (expr -> variable .)
    LESS_THAN       reduce using rule 28 (expr -> variable .)
    LESS_EQUAL      reduce using rule 28 (expr -> variable .)
    AND             reduce using rule 28 (expr -> variable .)
    OR              reduce using rule 28 (expr -> variable .)
    INTE_DOT        reduce using rule 28 (expr -> variable .)
    RPAREN          reduce using rule 28 (expr -> variable .)
    DDOT            reduce using rule 28 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 28 (expr -> variable .)
    COLON           reduce using rule 28 (expr -> variable .)
    AS              reduce using rule 28 (expr -> variable .)
    RBRACKET        reduce using rule 28 (expr -> variable .)
    RKEY            reduce using rule 28 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 76
    SUB_ASSIGN      shift and go to state 77
    MOD_ASSIGN      shift and go to state 78
    PLUS_ASSIGN     shift and go to state 79
    DIVIDE_ASSIGN   shift and go to state 80
    ASSIGN          shift and go to state 81


state 25

    (26) expr -> PRE_DECREMENT . variable
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 82

state 26

    (29) expr -> LPAREN . expr RPAREN
    (39) expr -> LPAREN . INT_TYPE RPAREN expr
    (40) expr -> LPAREN . FLOAT_TYPE RPAREN expr
    (41) expr -> LPAREN . STRING_TYPE RPAREN expr
    (42) expr -> LPAREN . ARRAY_TYPE RPAREN expr
    (43) expr -> LPAREN . BOOL_TYPE RPAREN expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    INT_TYPE        shift and go to state 84
    FLOAT_TYPE      shift and go to state 85
    STRING_TYPE     shift and go to state 86
    ARRAY_TYPE      shift and go to state 87
    BOOL_TYPE       shift and go to state 88
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 83
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 27

    (30) expr -> ARRAY_TYPE . array_declaration
    (55) array_declaration -> . LPAREN array_pair_list RPAREN
    (56) array_declaration -> . LPAREN RPAREN

    LPAREN          shift and go to state 90

    array_declaration              shift and go to state 89

state 28

    (31) expr -> function_call .

    SEMICOLON       reduce using rule 31 (expr -> function_call .)
    PLUS            reduce using rule 31 (expr -> function_call .)
    MINUS           reduce using rule 31 (expr -> function_call .)
    DIVIDE          reduce using rule 31 (expr -> function_call .)
    PERCENT         reduce using rule 31 (expr -> function_call .)
    TIMES           reduce using rule 31 (expr -> function_call .)
    EQUALS          reduce using rule 31 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 31 (expr -> function_call .)
    GREAT_THAN      reduce using rule 31 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 31 (expr -> function_call .)
    LESS_THAN       reduce using rule 31 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 31 (expr -> function_call .)
    AND             reduce using rule 31 (expr -> function_call .)
    OR              reduce using rule 31 (expr -> function_call .)
    INTE_DOT        reduce using rule 31 (expr -> function_call .)
    RPAREN          reduce using rule 31 (expr -> function_call .)
    DDOT            reduce using rule 31 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 31 (expr -> function_call .)
    COLON           reduce using rule 31 (expr -> function_call .)
    AS              reduce using rule 31 (expr -> function_call .)
    RBRACKET        reduce using rule 31 (expr -> function_call .)
    RKEY            reduce using rule 31 (expr -> function_call .)


state 29

    (44) expr -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 44 (expr -> NUMBER_INTEGER .)
    PLUS            reduce using rule 44 (expr -> NUMBER_INTEGER .)
    MINUS           reduce using rule 44 (expr -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 44 (expr -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 44 (expr -> NUMBER_INTEGER .)
    TIMES           reduce using rule 44 (expr -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 44 (expr -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 44 (expr -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 44 (expr -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 44 (expr -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 44 (expr -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 44 (expr -> NUMBER_INTEGER .)
    AND             reduce using rule 44 (expr -> NUMBER_INTEGER .)
    OR              reduce using rule 44 (expr -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 44 (expr -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 44 (expr -> NUMBER_INTEGER .)
    DDOT            reduce using rule 44 (expr -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 44 (expr -> NUMBER_INTEGER .)
    COLON           reduce using rule 44 (expr -> NUMBER_INTEGER .)
    AS              reduce using rule 44 (expr -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 44 (expr -> NUMBER_INTEGER .)
    RKEY            reduce using rule 44 (expr -> NUMBER_INTEGER .)


state 30

    (45) expr -> NUMBER_REAL .

    SEMICOLON       reduce using rule 45 (expr -> NUMBER_REAL .)
    PLUS            reduce using rule 45 (expr -> NUMBER_REAL .)
    MINUS           reduce using rule 45 (expr -> NUMBER_REAL .)
    DIVIDE          reduce using rule 45 (expr -> NUMBER_REAL .)
    PERCENT         reduce using rule 45 (expr -> NUMBER_REAL .)
    TIMES           reduce using rule 45 (expr -> NUMBER_REAL .)
    EQUALS          reduce using rule 45 (expr -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 45 (expr -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 45 (expr -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 45 (expr -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 45 (expr -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 45 (expr -> NUMBER_REAL .)
    AND             reduce using rule 45 (expr -> NUMBER_REAL .)
    OR              reduce using rule 45 (expr -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 45 (expr -> NUMBER_REAL .)
    RPAREN          reduce using rule 45 (expr -> NUMBER_REAL .)
    DDOT            reduce using rule 45 (expr -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 45 (expr -> NUMBER_REAL .)
    COLON           reduce using rule 45 (expr -> NUMBER_REAL .)
    AS              reduce using rule 45 (expr -> NUMBER_REAL .)
    RBRACKET        reduce using rule 45 (expr -> NUMBER_REAL .)
    RKEY            reduce using rule 45 (expr -> NUMBER_REAL .)


state 31

    (46) expr -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 46 (expr -> CONSTANT_ENCAPSED_STRING .)


state 32

    (47) expr -> TRUE .

    SEMICOLON       reduce using rule 47 (expr -> TRUE .)
    PLUS            reduce using rule 47 (expr -> TRUE .)
    MINUS           reduce using rule 47 (expr -> TRUE .)
    DIVIDE          reduce using rule 47 (expr -> TRUE .)
    PERCENT         reduce using rule 47 (expr -> TRUE .)
    TIMES           reduce using rule 47 (expr -> TRUE .)
    EQUALS          reduce using rule 47 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 47 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 47 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 47 (expr -> TRUE .)
    LESS_THAN       reduce using rule 47 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 47 (expr -> TRUE .)
    AND             reduce using rule 47 (expr -> TRUE .)
    OR              reduce using rule 47 (expr -> TRUE .)
    INTE_DOT        reduce using rule 47 (expr -> TRUE .)
    RPAREN          reduce using rule 47 (expr -> TRUE .)
    DDOT            reduce using rule 47 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 47 (expr -> TRUE .)
    COLON           reduce using rule 47 (expr -> TRUE .)
    AS              reduce using rule 47 (expr -> TRUE .)
    RBRACKET        reduce using rule 47 (expr -> TRUE .)
    RKEY            reduce using rule 47 (expr -> TRUE .)


state 33

    (48) expr -> FALSE .

    SEMICOLON       reduce using rule 48 (expr -> FALSE .)
    PLUS            reduce using rule 48 (expr -> FALSE .)
    MINUS           reduce using rule 48 (expr -> FALSE .)
    DIVIDE          reduce using rule 48 (expr -> FALSE .)
    PERCENT         reduce using rule 48 (expr -> FALSE .)
    TIMES           reduce using rule 48 (expr -> FALSE .)
    EQUALS          reduce using rule 48 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 48 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 48 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 48 (expr -> FALSE .)
    LESS_THAN       reduce using rule 48 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 48 (expr -> FALSE .)
    AND             reduce using rule 48 (expr -> FALSE .)
    OR              reduce using rule 48 (expr -> FALSE .)
    INTE_DOT        reduce using rule 48 (expr -> FALSE .)
    RPAREN          reduce using rule 48 (expr -> FALSE .)
    DDOT            reduce using rule 48 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 48 (expr -> FALSE .)
    COLON           reduce using rule 48 (expr -> FALSE .)
    AS              reduce using rule 48 (expr -> FALSE .)
    RBRACKET        reduce using rule 48 (expr -> FALSE .)
    RKEY            reduce using rule 48 (expr -> FALSE .)


state 34

    (70) if_statement -> statement_if .
    (71) if_statement -> statement_if . statement_else
    (72) if_statement -> statement_if . statement_elseif
    (73) if_statement -> statement_if . statement_elseif statement_else
    (78) statement_else -> . ELSE statement_BLOCK_OPT
    (76) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif
    (77) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    FUNCTION        reduce using rule 70 (if_statement -> statement_if .)
    MINUS           reduce using rule 70 (if_statement -> statement_if .)
    EXC_DOT         reduce using rule 70 (if_statement -> statement_if .)
    PRE_INCREMENT   reduce using rule 70 (if_statement -> statement_if .)
    PRE_DECREMENT   reduce using rule 70 (if_statement -> statement_if .)
    LPAREN          reduce using rule 70 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 70 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 70 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 70 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 70 (if_statement -> statement_if .)
    TRUE            reduce using rule 70 (if_statement -> statement_if .)
    FALSE           reduce using rule 70 (if_statement -> statement_if .)
    WHILE           reduce using rule 70 (if_statement -> statement_if .)
    DO              reduce using rule 70 (if_statement -> statement_if .)
    FOR             reduce using rule 70 (if_statement -> statement_if .)
    FOREACH         reduce using rule 70 (if_statement -> statement_if .)
    BREAK           reduce using rule 70 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 70 (if_statement -> statement_if .)
    RETURN          reduce using rule 70 (if_statement -> statement_if .)
    EXIT            reduce using rule 70 (if_statement -> statement_if .)
    DIE             reduce using rule 70 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 70 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 70 (if_statement -> statement_if .)
    ID              reduce using rule 70 (if_statement -> statement_if .)
    IF              reduce using rule 70 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 70 (if_statement -> statement_if .)
    RKEY            reduce using rule 70 (if_statement -> statement_if .)
    ELSE            shift and go to state 93
    ELSEIF          shift and go to state 94

  ! ELSE            [ reduce using rule 70 (if_statement -> statement_if .) ]
  ! ELSEIF          [ reduce using rule 70 (if_statement -> statement_if .) ]

    statement_else                 shift and go to state 91
    statement_elseif               shift and go to state 92

state 35

    (81) while_statement -> WHILE . expr_parentheses statement_BLOCK_OPT
    (105) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 96

    expr_parentheses               shift and go to state 95

state 36

    (82) do_statement -> DO . statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (163) statement_BLOCK_OPT -> . statement
    (164) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (165) statement_BLOCK_OPT -> . LKEY RKEY
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 99
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 97
    statement                      shift and go to state 98
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 37

    (89) for_statement -> FOR . LPAREN for_parameters RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 100


state 38

    (106) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 101


state 39

    (83) break_statement -> BREAK . expr SEMICOLON
    (84) break_statement -> BREAK . SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 103
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 102
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 40

    (85) continue_statement -> CONTINUE . expr SEMICOLON
    (86) continue_statement -> CONTINUE . SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 105
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 104
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 41

    (87) return_statement -> RETURN . expr SEMICOLON
    (88) return_statement -> RETURN . SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 107
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 106
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 42

    (49) exit_statement -> EXIT . exit_expr
    (50) exit_statement -> EXIT .
    (53) exit_expr -> . LPAREN expr RPAREN
    (54) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 50 (exit_statement -> EXIT .)
    LPAREN          shift and go to state 109

    exit_expr                      shift and go to state 108

state 43

    (51) die_statement -> DIE . exit_expr
    (52) die_statement -> DIE .
    (53) exit_expr -> . LPAREN expr RPAREN
    (54) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 52 (die_statement -> DIE .)
    LPAREN          shift and go to state 109

    exit_expr                      shift and go to state 110

state 44

    (79) global_statement -> GLOBAL . global_var statement_COLON_GLOBAL
    (80) global_statement -> GLOBAL . global_var
    (98) global_var -> . VARIABLE
    (99) global_var -> . DOLAR VARIABLE
    (100) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 112
    DOLAR           shift and go to state 113

    global_var                     shift and go to state 111

state 45

    (123) variable -> VARIABLE . reference_variable_SELECTOR
    (124) variable -> VARIABLE .
    (168) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (169) reference_variable_SELECTOR -> . selector
    (125) selector -> . LBRACKET expr RBRACKET
    (126) selector -> . LBRACKET RBRACKET

    POS_INCREMENT   reduce using rule 124 (variable -> VARIABLE .)
    POS_DECREMENT   reduce using rule 124 (variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 124 (variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 124 (variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 124 (variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 124 (variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 124 (variable -> VARIABLE .)
    ASSIGN          reduce using rule 124 (variable -> VARIABLE .)
    SEMICOLON       reduce using rule 124 (variable -> VARIABLE .)
    PLUS            reduce using rule 124 (variable -> VARIABLE .)
    MINUS           reduce using rule 124 (variable -> VARIABLE .)
    DIVIDE          reduce using rule 124 (variable -> VARIABLE .)
    PERCENT         reduce using rule 124 (variable -> VARIABLE .)
    TIMES           reduce using rule 124 (variable -> VARIABLE .)
    EQUALS          reduce using rule 124 (variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 124 (variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 124 (variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 124 (variable -> VARIABLE .)
    LESS_THAN       reduce using rule 124 (variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 124 (variable -> VARIABLE .)
    AND             reduce using rule 124 (variable -> VARIABLE .)
    OR              reduce using rule 124 (variable -> VARIABLE .)
    INTE_DOT        reduce using rule 124 (variable -> VARIABLE .)
    RPAREN          reduce using rule 124 (variable -> VARIABLE .)
    DDOT            reduce using rule 124 (variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 124 (variable -> VARIABLE .)
    COLON           reduce using rule 124 (variable -> VARIABLE .)
    AS              reduce using rule 124 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 124 (variable -> VARIABLE .)
    RKEY            reduce using rule 124 (variable -> VARIABLE .)
    LBRACKET        shift and go to state 116

    reference_variable_SELECTOR    shift and go to state 114
    selector                       shift and go to state 115

state 46

    (112) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (113) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 117


state 47

    (74) statement_if -> IF . expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> IF . expr_parentheses statement_BLOCK_OPT
    (105) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 96

    expr_parentheses               shift and go to state 118

state 48

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 49

    (3) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 3 (main_INNER -> inner_statement main_INNER .)


state 50

    (127) function_declaration_statement -> FUNCTION fds_id . fds_parameter fds_statements
    (132) fds_parameter -> . LPAREN parameter_list RPAREN
    (133) fds_parameter -> . LPAREN RPAREN

    LPAREN          shift and go to state 120

    fds_parameter                  shift and go to state 119

state 51

    (130) fds_id -> AMPERSAND . ID

    ID              shift and go to state 121


state 52

    (131) fds_id -> ID .

    LPAREN          reduce using rule 131 (fds_id -> ID .)


state 53

    (57) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 57 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 57 (statement -> expr SEMICOLON .)
    EXC_DOT         reduce using rule 57 (statement -> expr SEMICOLON .)
    PRE_INCREMENT   reduce using rule 57 (statement -> expr SEMICOLON .)
    PRE_DECREMENT   reduce using rule 57 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 57 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 57 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 57 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 57 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 57 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 57 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 57 (statement -> expr SEMICOLON .)
    DO              reduce using rule 57 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 57 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 57 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 57 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 57 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 57 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 57 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 57 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 57 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 57 (statement -> expr SEMICOLON .)
    ID              reduce using rule 57 (statement -> expr SEMICOLON .)
    IF              reduce using rule 57 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 57 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 57 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 57 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 57 (statement -> expr SEMICOLON .)


state 54

    (9) expr -> expr PLUS . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 122
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 55

    (10) expr -> expr MINUS . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 123
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 56

    (12) expr -> expr DIVIDE . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 124
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 57

    (13) expr -> expr PERCENT . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 125
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 58

    (14) expr -> expr TIMES . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 126
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 59

    (15) expr -> expr EQUALS . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 127
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 60

    (16) expr -> expr NOT_EQUAL . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 128
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 61

    (17) expr -> expr GREAT_THAN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 129
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 62

    (18) expr -> expr GREAT_EQUAL . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 130
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 63

    (19) expr -> expr LESS_THAN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 131
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 64

    (20) expr -> expr LESS_EQUAL . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 132
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 65

    (21) expr -> expr AND . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 133
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 66

    (22) expr -> expr OR . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 134
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 67

    (32) expr -> expr INTE_DOT . expr DDOT expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 135
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 68

    (66) statement -> exit_statement SEMICOLON .

    FUNCTION        reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    MINUS           reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    EXC_DOT         reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    PRE_INCREMENT   reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    PRE_DECREMENT   reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    LPAREN          reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    TRUE            reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    FALSE           reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    WHILE           reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    DO              reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    FOR             reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    FOREACH         reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    BREAK           reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    CONTINUE        reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    RETURN          reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    EXIT            reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    DIE             reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    GLOBAL          reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    VARIABLE        reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    ID              reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    IF              reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    RKEY            reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    ELSE            reduce using rule 66 (statement -> exit_statement SEMICOLON .)
    ELSEIF          reduce using rule 66 (statement -> exit_statement SEMICOLON .)


state 69

    (67) statement -> die_statement SEMICOLON .

    FUNCTION        reduce using rule 67 (statement -> die_statement SEMICOLON .)
    MINUS           reduce using rule 67 (statement -> die_statement SEMICOLON .)
    EXC_DOT         reduce using rule 67 (statement -> die_statement SEMICOLON .)
    PRE_INCREMENT   reduce using rule 67 (statement -> die_statement SEMICOLON .)
    PRE_DECREMENT   reduce using rule 67 (statement -> die_statement SEMICOLON .)
    LPAREN          reduce using rule 67 (statement -> die_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 67 (statement -> die_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 67 (statement -> die_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 67 (statement -> die_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 67 (statement -> die_statement SEMICOLON .)
    TRUE            reduce using rule 67 (statement -> die_statement SEMICOLON .)
    FALSE           reduce using rule 67 (statement -> die_statement SEMICOLON .)
    WHILE           reduce using rule 67 (statement -> die_statement SEMICOLON .)
    DO              reduce using rule 67 (statement -> die_statement SEMICOLON .)
    FOR             reduce using rule 67 (statement -> die_statement SEMICOLON .)
    FOREACH         reduce using rule 67 (statement -> die_statement SEMICOLON .)
    BREAK           reduce using rule 67 (statement -> die_statement SEMICOLON .)
    CONTINUE        reduce using rule 67 (statement -> die_statement SEMICOLON .)
    RETURN          reduce using rule 67 (statement -> die_statement SEMICOLON .)
    EXIT            reduce using rule 67 (statement -> die_statement SEMICOLON .)
    DIE             reduce using rule 67 (statement -> die_statement SEMICOLON .)
    GLOBAL          reduce using rule 67 (statement -> die_statement SEMICOLON .)
    VARIABLE        reduce using rule 67 (statement -> die_statement SEMICOLON .)
    ID              reduce using rule 67 (statement -> die_statement SEMICOLON .)
    IF              reduce using rule 67 (statement -> die_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 67 (statement -> die_statement SEMICOLON .)
    RKEY            reduce using rule 67 (statement -> die_statement SEMICOLON .)
    ELSE            reduce using rule 67 (statement -> die_statement SEMICOLON .)
    ELSEIF          reduce using rule 67 (statement -> die_statement SEMICOLON .)


state 70

    (68) statement -> global_statement SEMICOLON .

    FUNCTION        reduce using rule 68 (statement -> global_statement SEMICOLON .)
    MINUS           reduce using rule 68 (statement -> global_statement SEMICOLON .)
    EXC_DOT         reduce using rule 68 (statement -> global_statement SEMICOLON .)
    PRE_INCREMENT   reduce using rule 68 (statement -> global_statement SEMICOLON .)
    PRE_DECREMENT   reduce using rule 68 (statement -> global_statement SEMICOLON .)
    LPAREN          reduce using rule 68 (statement -> global_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 68 (statement -> global_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 68 (statement -> global_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 68 (statement -> global_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 68 (statement -> global_statement SEMICOLON .)
    TRUE            reduce using rule 68 (statement -> global_statement SEMICOLON .)
    FALSE           reduce using rule 68 (statement -> global_statement SEMICOLON .)
    WHILE           reduce using rule 68 (statement -> global_statement SEMICOLON .)
    DO              reduce using rule 68 (statement -> global_statement SEMICOLON .)
    FOR             reduce using rule 68 (statement -> global_statement SEMICOLON .)
    FOREACH         reduce using rule 68 (statement -> global_statement SEMICOLON .)
    BREAK           reduce using rule 68 (statement -> global_statement SEMICOLON .)
    CONTINUE        reduce using rule 68 (statement -> global_statement SEMICOLON .)
    RETURN          reduce using rule 68 (statement -> global_statement SEMICOLON .)
    EXIT            reduce using rule 68 (statement -> global_statement SEMICOLON .)
    DIE             reduce using rule 68 (statement -> global_statement SEMICOLON .)
    GLOBAL          reduce using rule 68 (statement -> global_statement SEMICOLON .)
    VARIABLE        reduce using rule 68 (statement -> global_statement SEMICOLON .)
    ID              reduce using rule 68 (statement -> global_statement SEMICOLON .)
    IF              reduce using rule 68 (statement -> global_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 68 (statement -> global_statement SEMICOLON .)
    RKEY            reduce using rule 68 (statement -> global_statement SEMICOLON .)
    ELSE            reduce using rule 68 (statement -> global_statement SEMICOLON .)
    ELSEIF          reduce using rule 68 (statement -> global_statement SEMICOLON .)


state 71

    (11) expr -> MINUS expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 11 (expr -> MINUS expr .)
    PLUS            reduce using rule 11 (expr -> MINUS expr .)
    MINUS           reduce using rule 11 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 11 (expr -> MINUS expr .)
    PERCENT         reduce using rule 11 (expr -> MINUS expr .)
    TIMES           reduce using rule 11 (expr -> MINUS expr .)
    EQUALS          reduce using rule 11 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 11 (expr -> MINUS expr .)
    GREAT_THAN      reduce using rule 11 (expr -> MINUS expr .)
    GREAT_EQUAL     reduce using rule 11 (expr -> MINUS expr .)
    LESS_THAN       reduce using rule 11 (expr -> MINUS expr .)
    LESS_EQUAL      reduce using rule 11 (expr -> MINUS expr .)
    AND             reduce using rule 11 (expr -> MINUS expr .)
    OR              reduce using rule 11 (expr -> MINUS expr .)
    INTE_DOT        reduce using rule 11 (expr -> MINUS expr .)
    RPAREN          reduce using rule 11 (expr -> MINUS expr .)
    DDOT            reduce using rule 11 (expr -> MINUS expr .)
    ATTR_ASSOC      reduce using rule 11 (expr -> MINUS expr .)
    COLON           reduce using rule 11 (expr -> MINUS expr .)
    AS              reduce using rule 11 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 11 (expr -> MINUS expr .)
    RKEY            reduce using rule 11 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 72

    (23) expr -> EXC_DOT expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 23 (expr -> EXC_DOT expr .)
    PLUS            reduce using rule 23 (expr -> EXC_DOT expr .)
    MINUS           reduce using rule 23 (expr -> EXC_DOT expr .)
    DIVIDE          reduce using rule 23 (expr -> EXC_DOT expr .)
    PERCENT         reduce using rule 23 (expr -> EXC_DOT expr .)
    TIMES           reduce using rule 23 (expr -> EXC_DOT expr .)
    EQUALS          reduce using rule 23 (expr -> EXC_DOT expr .)
    NOT_EQUAL       reduce using rule 23 (expr -> EXC_DOT expr .)
    GREAT_THAN      reduce using rule 23 (expr -> EXC_DOT expr .)
    GREAT_EQUAL     reduce using rule 23 (expr -> EXC_DOT expr .)
    LESS_THAN       reduce using rule 23 (expr -> EXC_DOT expr .)
    LESS_EQUAL      reduce using rule 23 (expr -> EXC_DOT expr .)
    AND             reduce using rule 23 (expr -> EXC_DOT expr .)
    OR              reduce using rule 23 (expr -> EXC_DOT expr .)
    INTE_DOT        reduce using rule 23 (expr -> EXC_DOT expr .)
    RPAREN          reduce using rule 23 (expr -> EXC_DOT expr .)
    DDOT            reduce using rule 23 (expr -> EXC_DOT expr .)
    ATTR_ASSOC      reduce using rule 23 (expr -> EXC_DOT expr .)
    COLON           reduce using rule 23 (expr -> EXC_DOT expr .)
    AS              reduce using rule 23 (expr -> EXC_DOT expr .)
    RBRACKET        reduce using rule 23 (expr -> EXC_DOT expr .)
    RKEY            reduce using rule 23 (expr -> EXC_DOT expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 73

    (24) expr -> PRE_INCREMENT variable .

    SEMICOLON       reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    PLUS            reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    MINUS           reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    DIVIDE          reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    PERCENT         reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    TIMES           reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    EQUALS          reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    NOT_EQUAL       reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    GREAT_THAN      reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    LESS_THAN       reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    LESS_EQUAL      reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    AND             reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    OR              reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    INTE_DOT        reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    RPAREN          reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    DDOT            reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    COLON           reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    AS              reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    RBRACKET        reduce using rule 24 (expr -> PRE_INCREMENT variable .)
    RKEY            reduce using rule 24 (expr -> PRE_INCREMENT variable .)


state 74

    (25) expr -> variable POS_INCREMENT .

    SEMICOLON       reduce using rule 25 (expr -> variable POS_INCREMENT .)
    PLUS            reduce using rule 25 (expr -> variable POS_INCREMENT .)
    MINUS           reduce using rule 25 (expr -> variable POS_INCREMENT .)
    DIVIDE          reduce using rule 25 (expr -> variable POS_INCREMENT .)
    PERCENT         reduce using rule 25 (expr -> variable POS_INCREMENT .)
    TIMES           reduce using rule 25 (expr -> variable POS_INCREMENT .)
    EQUALS          reduce using rule 25 (expr -> variable POS_INCREMENT .)
    NOT_EQUAL       reduce using rule 25 (expr -> variable POS_INCREMENT .)
    GREAT_THAN      reduce using rule 25 (expr -> variable POS_INCREMENT .)
    GREAT_EQUAL     reduce using rule 25 (expr -> variable POS_INCREMENT .)
    LESS_THAN       reduce using rule 25 (expr -> variable POS_INCREMENT .)
    LESS_EQUAL      reduce using rule 25 (expr -> variable POS_INCREMENT .)
    AND             reduce using rule 25 (expr -> variable POS_INCREMENT .)
    OR              reduce using rule 25 (expr -> variable POS_INCREMENT .)
    INTE_DOT        reduce using rule 25 (expr -> variable POS_INCREMENT .)
    RPAREN          reduce using rule 25 (expr -> variable POS_INCREMENT .)
    DDOT            reduce using rule 25 (expr -> variable POS_INCREMENT .)
    ATTR_ASSOC      reduce using rule 25 (expr -> variable POS_INCREMENT .)
    COLON           reduce using rule 25 (expr -> variable POS_INCREMENT .)
    AS              reduce using rule 25 (expr -> variable POS_INCREMENT .)
    RBRACKET        reduce using rule 25 (expr -> variable POS_INCREMENT .)
    RKEY            reduce using rule 25 (expr -> variable POS_INCREMENT .)


state 75

    (27) expr -> variable POS_DECREMENT .

    SEMICOLON       reduce using rule 27 (expr -> variable POS_DECREMENT .)
    PLUS            reduce using rule 27 (expr -> variable POS_DECREMENT .)
    MINUS           reduce using rule 27 (expr -> variable POS_DECREMENT .)
    DIVIDE          reduce using rule 27 (expr -> variable POS_DECREMENT .)
    PERCENT         reduce using rule 27 (expr -> variable POS_DECREMENT .)
    TIMES           reduce using rule 27 (expr -> variable POS_DECREMENT .)
    EQUALS          reduce using rule 27 (expr -> variable POS_DECREMENT .)
    NOT_EQUAL       reduce using rule 27 (expr -> variable POS_DECREMENT .)
    GREAT_THAN      reduce using rule 27 (expr -> variable POS_DECREMENT .)
    GREAT_EQUAL     reduce using rule 27 (expr -> variable POS_DECREMENT .)
    LESS_THAN       reduce using rule 27 (expr -> variable POS_DECREMENT .)
    LESS_EQUAL      reduce using rule 27 (expr -> variable POS_DECREMENT .)
    AND             reduce using rule 27 (expr -> variable POS_DECREMENT .)
    OR              reduce using rule 27 (expr -> variable POS_DECREMENT .)
    INTE_DOT        reduce using rule 27 (expr -> variable POS_DECREMENT .)
    RPAREN          reduce using rule 27 (expr -> variable POS_DECREMENT .)
    DDOT            reduce using rule 27 (expr -> variable POS_DECREMENT .)
    ATTR_ASSOC      reduce using rule 27 (expr -> variable POS_DECREMENT .)
    COLON           reduce using rule 27 (expr -> variable POS_DECREMENT .)
    AS              reduce using rule 27 (expr -> variable POS_DECREMENT .)
    RBRACKET        reduce using rule 27 (expr -> variable POS_DECREMENT .)
    RKEY            reduce using rule 27 (expr -> variable POS_DECREMENT .)


state 76

    (33) expr -> variable ADD_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 136
    function_call                  shift and go to state 28

state 77

    (34) expr -> variable SUB_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 137
    function_call                  shift and go to state 28

state 78

    (35) expr -> variable MOD_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 138
    function_call                  shift and go to state 28

state 79

    (36) expr -> variable PLUS_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 139
    function_call                  shift and go to state 28

state 80

    (37) expr -> variable DIVIDE_ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 140
    function_call                  shift and go to state 28

state 81

    (38) expr -> variable ASSIGN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 24
    expr                           shift and go to state 141
    function_call                  shift and go to state 28

state 82

    (26) expr -> PRE_DECREMENT variable .

    SEMICOLON       reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    PLUS            reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    MINUS           reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    DIVIDE          reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    PERCENT         reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    TIMES           reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    EQUALS          reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    NOT_EQUAL       reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    GREAT_THAN      reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    LESS_THAN       reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    LESS_EQUAL      reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    AND             reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    OR              reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    INTE_DOT        reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    RPAREN          reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    DDOT            reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    COLON           reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    AS              reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    RBRACKET        reduce using rule 26 (expr -> PRE_DECREMENT variable .)
    RKEY            reduce using rule 26 (expr -> PRE_DECREMENT variable .)


state 83

    (29) expr -> LPAREN expr . RPAREN
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 142
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 84

    (39) expr -> LPAREN INT_TYPE . RPAREN expr

    RPAREN          shift and go to state 143


state 85

    (40) expr -> LPAREN FLOAT_TYPE . RPAREN expr

    RPAREN          shift and go to state 144


state 86

    (41) expr -> LPAREN STRING_TYPE . RPAREN expr

    RPAREN          shift and go to state 145


state 87

    (42) expr -> LPAREN ARRAY_TYPE . RPAREN expr
    (30) expr -> ARRAY_TYPE . array_declaration
    (55) array_declaration -> . LPAREN array_pair_list RPAREN
    (56) array_declaration -> . LPAREN RPAREN

    RPAREN          shift and go to state 146
    LPAREN          shift and go to state 90

    array_declaration              shift and go to state 89

state 88

    (43) expr -> LPAREN BOOL_TYPE . RPAREN expr

    RPAREN          shift and go to state 147


state 89

    (30) expr -> ARRAY_TYPE array_declaration .

    SEMICOLON       reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    PLUS            reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    MINUS           reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    DIVIDE          reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    PERCENT         reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    TIMES           reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    EQUALS          reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    NOT_EQUAL       reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    GREAT_THAN      reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    GREAT_EQUAL     reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    LESS_THAN       reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    LESS_EQUAL      reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    AND             reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    OR              reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    INTE_DOT        reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    RPAREN          reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    DDOT            reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    ATTR_ASSOC      reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    COLON           reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    AS              reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    RBRACKET        reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)
    RKEY            reduce using rule 30 (expr -> ARRAY_TYPE array_declaration .)


state 90

    (55) array_declaration -> LPAREN . array_pair_list RPAREN
    (56) array_declaration -> LPAREN . RPAREN
    (155) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (156) array_pair_list -> . array_pair
    (157) array_pair -> . expr
    (158) array_pair -> . AMPERSAND variable
    (159) array_pair -> . expr ATTR_ASSOC expr
    (160) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 149
    AMPERSAND       shift and go to state 152
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    array_pair_list                shift and go to state 148
    array_pair                     shift and go to state 150
    expr                           shift and go to state 151
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 91

    (71) if_statement -> statement_if statement_else .

    FUNCTION        reduce using rule 71 (if_statement -> statement_if statement_else .)
    MINUS           reduce using rule 71 (if_statement -> statement_if statement_else .)
    EXC_DOT         reduce using rule 71 (if_statement -> statement_if statement_else .)
    PRE_INCREMENT   reduce using rule 71 (if_statement -> statement_if statement_else .)
    PRE_DECREMENT   reduce using rule 71 (if_statement -> statement_if statement_else .)
    LPAREN          reduce using rule 71 (if_statement -> statement_if statement_else .)
    ARRAY_TYPE      reduce using rule 71 (if_statement -> statement_if statement_else .)
    NUMBER_INTEGER  reduce using rule 71 (if_statement -> statement_if statement_else .)
    NUMBER_REAL     reduce using rule 71 (if_statement -> statement_if statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (if_statement -> statement_if statement_else .)
    TRUE            reduce using rule 71 (if_statement -> statement_if statement_else .)
    FALSE           reduce using rule 71 (if_statement -> statement_if statement_else .)
    WHILE           reduce using rule 71 (if_statement -> statement_if statement_else .)
    DO              reduce using rule 71 (if_statement -> statement_if statement_else .)
    FOR             reduce using rule 71 (if_statement -> statement_if statement_else .)
    FOREACH         reduce using rule 71 (if_statement -> statement_if statement_else .)
    BREAK           reduce using rule 71 (if_statement -> statement_if statement_else .)
    CONTINUE        reduce using rule 71 (if_statement -> statement_if statement_else .)
    RETURN          reduce using rule 71 (if_statement -> statement_if statement_else .)
    EXIT            reduce using rule 71 (if_statement -> statement_if statement_else .)
    DIE             reduce using rule 71 (if_statement -> statement_if statement_else .)
    GLOBAL          reduce using rule 71 (if_statement -> statement_if statement_else .)
    VARIABLE        reduce using rule 71 (if_statement -> statement_if statement_else .)
    ID              reduce using rule 71 (if_statement -> statement_if statement_else .)
    IF              reduce using rule 71 (if_statement -> statement_if statement_else .)
    END_PROGRAM     reduce using rule 71 (if_statement -> statement_if statement_else .)
    RKEY            reduce using rule 71 (if_statement -> statement_if statement_else .)
    ELSE            reduce using rule 71 (if_statement -> statement_if statement_else .)
    ELSEIF          reduce using rule 71 (if_statement -> statement_if statement_else .)


state 92

    (72) if_statement -> statement_if statement_elseif .
    (73) if_statement -> statement_if statement_elseif . statement_else
    (78) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    MINUS           reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    EXC_DOT         reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    PRE_INCREMENT   reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    PRE_DECREMENT   reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    LPAREN          reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    ARRAY_TYPE      reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    NUMBER_INTEGER  reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    NUMBER_REAL     reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    TRUE            reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    FALSE           reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    WHILE           reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    DO              reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    FOR             reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    FOREACH         reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    BREAK           reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    CONTINUE        reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    RETURN          reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    EXIT            reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    DIE             reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    GLOBAL          reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    VARIABLE        reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    ID              reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    IF              reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    END_PROGRAM     reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    RKEY            reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    ELSEIF          reduce using rule 72 (if_statement -> statement_if statement_elseif .)
    ELSE            shift and go to state 93

  ! ELSE            [ reduce using rule 72 (if_statement -> statement_if statement_elseif .) ]

    statement_else                 shift and go to state 153

state 93

    (78) statement_else -> ELSE . statement_BLOCK_OPT
    (163) statement_BLOCK_OPT -> . statement
    (164) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (165) statement_BLOCK_OPT -> . LKEY RKEY
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 99
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 154
    statement                      shift and go to state 98
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 94

    (76) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT statement_elseif
    (77) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT
    (105) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 96

    expr_parentheses               shift and go to state 155

state 95

    (81) while_statement -> WHILE expr_parentheses . statement_BLOCK_OPT
    (163) statement_BLOCK_OPT -> . statement
    (164) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (165) statement_BLOCK_OPT -> . LKEY RKEY
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 99
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 156
    statement                      shift and go to state 98
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 96

    (105) expr_parentheses -> LPAREN . expr RPAREN
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 157
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 97

    (82) do_statement -> DO statement_BLOCK_OPT . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 158


state 98

    (163) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    EXC_DOT         reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    PRE_INCREMENT   reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    PRE_DECREMENT   reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 163 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 163 (statement_BLOCK_OPT -> statement .)


state 99

    (164) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (165) statement_BLOCK_OPT -> LKEY . RKEY
    (161) statement_MUL -> . statement statement_MUL
    (162) statement_MUL -> . statement
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    RKEY            shift and go to state 160
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_MUL                  shift and go to state 159
    statement                      shift and go to state 161
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 100

    (89) for_statement -> FOR LPAREN . for_parameters RPAREN statement_BLOCK_OPT
    (90) for_parameters -> . SEMICOLON SEMICOLON
    (91) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (92) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (93) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (94) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (95) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (96) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (97) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (108) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (109) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 163
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_parameters                 shift and go to state 162
    for_expr_OPT                   shift and go to state 164
    expr                           shift and go to state 165
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 101

    (106) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 166
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 102

    (83) break_statement -> BREAK expr . SEMICOLON
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 167
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 103

    (84) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    EXC_DOT         reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    PRE_INCREMENT   reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    PRE_DECREMENT   reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 84 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 84 (break_statement -> BREAK SEMICOLON .)


state 104

    (85) continue_statement -> CONTINUE expr . SEMICOLON
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 168
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 105

    (86) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    EXC_DOT         reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    PRE_INCREMENT   reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    PRE_DECREMENT   reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 86 (continue_statement -> CONTINUE SEMICOLON .)


state 106

    (87) return_statement -> RETURN expr . SEMICOLON
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       shift and go to state 169
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 107

    (88) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    EXC_DOT         reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    PRE_INCREMENT   reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    PRE_DECREMENT   reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 88 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 88 (return_statement -> RETURN SEMICOLON .)


state 108

    (49) exit_statement -> EXIT exit_expr .

    SEMICOLON       reduce using rule 49 (exit_statement -> EXIT exit_expr .)


state 109

    (53) exit_expr -> LPAREN . expr RPAREN
    (54) exit_expr -> LPAREN . RPAREN
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 171
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 170
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 110

    (51) die_statement -> DIE exit_expr .

    SEMICOLON       reduce using rule 51 (die_statement -> DIE exit_expr .)


state 111

    (79) global_statement -> GLOBAL global_var . statement_COLON_GLOBAL
    (80) global_statement -> GLOBAL global_var .
    (101) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (102) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 80 (global_statement -> GLOBAL global_var .)
    COLON           shift and go to state 173

    statement_COLON_GLOBAL         shift and go to state 172

state 112

    (98) global_var -> VARIABLE .

    COLON           reduce using rule 98 (global_var -> VARIABLE .)
    SEMICOLON       reduce using rule 98 (global_var -> VARIABLE .)


state 113

    (99) global_var -> DOLAR . VARIABLE
    (100) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 174
    LKEY            shift and go to state 175


state 114

    (123) variable -> VARIABLE reference_variable_SELECTOR .

    POS_INCREMENT   reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    POS_DECREMENT   reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    PLUS            reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    MINUS           reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    PERCENT         reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    TIMES           reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    EQUALS          reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    AND             reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    OR              reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    RPAREN          reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    DDOT            reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    COLON           reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    AS              reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)
    RKEY            reduce using rule 123 (variable -> VARIABLE reference_variable_SELECTOR .)


state 115

    (168) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (169) reference_variable_SELECTOR -> selector .
    (168) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (169) reference_variable_SELECTOR -> . selector
    (125) selector -> . LBRACKET expr RBRACKET
    (126) selector -> . LBRACKET RBRACKET

    POS_INCREMENT   reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    POS_DECREMENT   reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    ADD_ASSIGN      reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    SUB_ASSIGN      reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    MOD_ASSIGN      reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    PLUS_ASSIGN     reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    DIVIDE_ASSIGN   reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    ASSIGN          reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    SEMICOLON       reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    PLUS            reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    MINUS           reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    DIVIDE          reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    PERCENT         reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    TIMES           reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    EQUALS          reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    NOT_EQUAL       reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    GREAT_THAN      reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    GREAT_EQUAL     reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    LESS_THAN       reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    LESS_EQUAL      reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    AND             reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    OR              reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    INTE_DOT        reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    RPAREN          reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    DDOT            reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    ATTR_ASSOC      reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    COLON           reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    AS              reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    RBRACKET        reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    RKEY            reduce using rule 169 (reference_variable_SELECTOR -> selector .)
    LBRACKET        shift and go to state 116

    selector                       shift and go to state 115
    reference_variable_SELECTOR    shift and go to state 176

state 116

    (125) selector -> LBRACKET . expr RBRACKET
    (126) selector -> LBRACKET . RBRACKET
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    RBRACKET        shift and go to state 178
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 177
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 117

    (112) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (113) function_call -> ID LPAREN . RPAREN
    (114) function_call_parameter_list -> . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (115) function_call_parameter_list -> . function_call_parameter
    (118) function_call_parameter -> . expr
    (119) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 180
    AMPERSAND       shift and go to state 183
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    function_call_parameter_list   shift and go to state 179
    function_call_parameter        shift and go to state 181
    expr                           shift and go to state 182
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 118

    (74) statement_if -> IF expr_parentheses . statement_BLOCK_OPT statement_if
    (75) statement_if -> IF expr_parentheses . statement_BLOCK_OPT
    (163) statement_BLOCK_OPT -> . statement
    (164) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (165) statement_BLOCK_OPT -> . LKEY RKEY
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 99
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 184
    statement_if                   shift and go to state 34
    statement                      shift and go to state 98
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 119

    (127) function_declaration_statement -> FUNCTION fds_id fds_parameter . fds_statements
    (128) fds_statements -> . LKEY inner_statement_MUL RKEY
    (129) fds_statements -> . LKEY RKEY

    LKEY            shift and go to state 186

    fds_statements                 shift and go to state 185

state 120

    (132) fds_parameter -> LPAREN . parameter_list RPAREN
    (133) fds_parameter -> LPAREN . RPAREN
    (134) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (135) parameter_list -> . parameter
    (136) parameter -> . VARIABLE
    (137) parameter -> . parameter_prefix VARIABLE
    (138) parameter -> . VARIABLE ASSIGN static_scalar
    (139) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (140) parameter_prefix -> . parameter_type AMPERSAND
    (141) parameter_prefix -> . AMPERSAND
    (142) parameter_prefix -> . parameter_type
    (143) parameter_type -> . INT_TYPE
    (144) parameter_type -> . BOOLEAN_TYPE
    (145) parameter_type -> . STRING_TYPE
    (146) parameter_type -> . FLOAT_TYPE
    (147) parameter_type -> . ARRAY_TYPE
    (148) parameter_type -> . BOOL_TYPE

    RPAREN          shift and go to state 188
    VARIABLE        shift and go to state 190
    AMPERSAND       shift and go to state 193
    INT_TYPE        shift and go to state 194
    BOOLEAN_TYPE    shift and go to state 195
    STRING_TYPE     shift and go to state 196
    FLOAT_TYPE      shift and go to state 197
    ARRAY_TYPE      shift and go to state 198
    BOOL_TYPE       shift and go to state 199

    parameter_list                 shift and go to state 187
    parameter                      shift and go to state 189
    parameter_prefix               shift and go to state 191
    parameter_type                 shift and go to state 192

state 121

    (130) fds_id -> AMPERSAND ID .

    LPAREN          reduce using rule 130 (fds_id -> AMPERSAND ID .)


state 122

    (9) expr -> expr PLUS expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 9 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 9 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 9 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 9 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 9 (expr -> expr PLUS expr .)
    GREAT_THAN      reduce using rule 9 (expr -> expr PLUS expr .)
    GREAT_EQUAL     reduce using rule 9 (expr -> expr PLUS expr .)
    LESS_THAN       reduce using rule 9 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 9 (expr -> expr PLUS expr .)
    AND             reduce using rule 9 (expr -> expr PLUS expr .)
    OR              reduce using rule 9 (expr -> expr PLUS expr .)
    INTE_DOT        reduce using rule 9 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 9 (expr -> expr PLUS expr .)
    DDOT            reduce using rule 9 (expr -> expr PLUS expr .)
    ATTR_ASSOC      reduce using rule 9 (expr -> expr PLUS expr .)
    COLON           reduce using rule 9 (expr -> expr PLUS expr .)
    AS              reduce using rule 9 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 9 (expr -> expr PLUS expr .)
    RKEY            reduce using rule 9 (expr -> expr PLUS expr .)
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! DIVIDE          [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! PERCENT         [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 9 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 123

    (10) expr -> expr MINUS expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 10 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 10 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 10 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 10 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 10 (expr -> expr MINUS expr .)
    GREAT_THAN      reduce using rule 10 (expr -> expr MINUS expr .)
    GREAT_EQUAL     reduce using rule 10 (expr -> expr MINUS expr .)
    LESS_THAN       reduce using rule 10 (expr -> expr MINUS expr .)
    LESS_EQUAL      reduce using rule 10 (expr -> expr MINUS expr .)
    AND             reduce using rule 10 (expr -> expr MINUS expr .)
    OR              reduce using rule 10 (expr -> expr MINUS expr .)
    INTE_DOT        reduce using rule 10 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 10 (expr -> expr MINUS expr .)
    DDOT            reduce using rule 10 (expr -> expr MINUS expr .)
    ATTR_ASSOC      reduce using rule 10 (expr -> expr MINUS expr .)
    COLON           reduce using rule 10 (expr -> expr MINUS expr .)
    AS              reduce using rule 10 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 10 (expr -> expr MINUS expr .)
    RKEY            reduce using rule 10 (expr -> expr MINUS expr .)
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! DIVIDE          [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! PERCENT         [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 10 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 124

    (12) expr -> expr DIVIDE expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 12 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 12 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 12 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 12 (expr -> expr DIVIDE expr .)
    PERCENT         reduce using rule 12 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 12 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 12 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 12 (expr -> expr DIVIDE expr .)
    GREAT_THAN      reduce using rule 12 (expr -> expr DIVIDE expr .)
    GREAT_EQUAL     reduce using rule 12 (expr -> expr DIVIDE expr .)
    LESS_THAN       reduce using rule 12 (expr -> expr DIVIDE expr .)
    LESS_EQUAL      reduce using rule 12 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 12 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 12 (expr -> expr DIVIDE expr .)
    INTE_DOT        reduce using rule 12 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 12 (expr -> expr DIVIDE expr .)
    DDOT            reduce using rule 12 (expr -> expr DIVIDE expr .)
    ATTR_ASSOC      reduce using rule 12 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 12 (expr -> expr DIVIDE expr .)
    AS              reduce using rule 12 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 12 (expr -> expr DIVIDE expr .)
    RKEY            reduce using rule 12 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 125

    (13) expr -> expr PERCENT expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 13 (expr -> expr PERCENT expr .)
    PLUS            reduce using rule 13 (expr -> expr PERCENT expr .)
    MINUS           reduce using rule 13 (expr -> expr PERCENT expr .)
    DIVIDE          reduce using rule 13 (expr -> expr PERCENT expr .)
    PERCENT         reduce using rule 13 (expr -> expr PERCENT expr .)
    TIMES           reduce using rule 13 (expr -> expr PERCENT expr .)
    EQUALS          reduce using rule 13 (expr -> expr PERCENT expr .)
    NOT_EQUAL       reduce using rule 13 (expr -> expr PERCENT expr .)
    GREAT_THAN      reduce using rule 13 (expr -> expr PERCENT expr .)
    GREAT_EQUAL     reduce using rule 13 (expr -> expr PERCENT expr .)
    LESS_THAN       reduce using rule 13 (expr -> expr PERCENT expr .)
    LESS_EQUAL      reduce using rule 13 (expr -> expr PERCENT expr .)
    AND             reduce using rule 13 (expr -> expr PERCENT expr .)
    OR              reduce using rule 13 (expr -> expr PERCENT expr .)
    INTE_DOT        reduce using rule 13 (expr -> expr PERCENT expr .)
    RPAREN          reduce using rule 13 (expr -> expr PERCENT expr .)
    DDOT            reduce using rule 13 (expr -> expr PERCENT expr .)
    ATTR_ASSOC      reduce using rule 13 (expr -> expr PERCENT expr .)
    COLON           reduce using rule 13 (expr -> expr PERCENT expr .)
    AS              reduce using rule 13 (expr -> expr PERCENT expr .)
    RBRACKET        reduce using rule 13 (expr -> expr PERCENT expr .)
    RKEY            reduce using rule 13 (expr -> expr PERCENT expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 126

    (14) expr -> expr TIMES expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 14 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 14 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 14 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 14 (expr -> expr TIMES expr .)
    PERCENT         reduce using rule 14 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 14 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 14 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 14 (expr -> expr TIMES expr .)
    GREAT_THAN      reduce using rule 14 (expr -> expr TIMES expr .)
    GREAT_EQUAL     reduce using rule 14 (expr -> expr TIMES expr .)
    LESS_THAN       reduce using rule 14 (expr -> expr TIMES expr .)
    LESS_EQUAL      reduce using rule 14 (expr -> expr TIMES expr .)
    AND             reduce using rule 14 (expr -> expr TIMES expr .)
    OR              reduce using rule 14 (expr -> expr TIMES expr .)
    INTE_DOT        reduce using rule 14 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 14 (expr -> expr TIMES expr .)
    DDOT            reduce using rule 14 (expr -> expr TIMES expr .)
    ATTR_ASSOC      reduce using rule 14 (expr -> expr TIMES expr .)
    COLON           reduce using rule 14 (expr -> expr TIMES expr .)
    AS              reduce using rule 14 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 14 (expr -> expr TIMES expr .)
    RKEY            reduce using rule 14 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! DIVIDE          [ shift and go to state 56 ]
  ! PERCENT         [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 58 ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 127

    (15) expr -> expr EQUALS expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 15 (expr -> expr EQUALS expr .)
    EQUALS          reduce using rule 15 (expr -> expr EQUALS expr .)
    NOT_EQUAL       reduce using rule 15 (expr -> expr EQUALS expr .)
    GREAT_THAN      reduce using rule 15 (expr -> expr EQUALS expr .)
    GREAT_EQUAL     reduce using rule 15 (expr -> expr EQUALS expr .)
    LESS_THAN       reduce using rule 15 (expr -> expr EQUALS expr .)
    LESS_EQUAL      reduce using rule 15 (expr -> expr EQUALS expr .)
    AND             reduce using rule 15 (expr -> expr EQUALS expr .)
    OR              reduce using rule 15 (expr -> expr EQUALS expr .)
    INTE_DOT        reduce using rule 15 (expr -> expr EQUALS expr .)
    RPAREN          reduce using rule 15 (expr -> expr EQUALS expr .)
    DDOT            reduce using rule 15 (expr -> expr EQUALS expr .)
    ATTR_ASSOC      reduce using rule 15 (expr -> expr EQUALS expr .)
    COLON           reduce using rule 15 (expr -> expr EQUALS expr .)
    AS              reduce using rule 15 (expr -> expr EQUALS expr .)
    RBRACKET        reduce using rule 15 (expr -> expr EQUALS expr .)
    RKEY            reduce using rule 15 (expr -> expr EQUALS expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! PERCENT         [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! TIMES           [ reduce using rule 15 (expr -> expr EQUALS expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 128

    (16) expr -> expr NOT_EQUAL expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    EQUALS          reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    GREAT_THAN      reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    GREAT_EQUAL     reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    LESS_THAN       reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    LESS_EQUAL      reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    INTE_DOT        reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    DDOT            reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    AS              reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    RBRACKET        reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    RKEY            reduce using rule 16 (expr -> expr NOT_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> expr NOT_EQUAL expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 129

    (17) expr -> expr GREAT_THAN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    EQUALS          reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    NOT_EQUAL       reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    GREAT_THAN      reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    GREAT_EQUAL     reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    LESS_THAN       reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    LESS_EQUAL      reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    AND             reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    OR              reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    INTE_DOT        reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    RPAREN          reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    DDOT            reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    ATTR_ASSOC      reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    COLON           reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    AS              reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    RBRACKET        reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    RKEY            reduce using rule 17 (expr -> expr GREAT_THAN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! PERCENT         [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> expr GREAT_THAN expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 130

    (18) expr -> expr GREAT_EQUAL expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    EQUALS          reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    GREAT_THAN      reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    GREAT_EQUAL     reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    LESS_THAN       reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    LESS_EQUAL      reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    AND             reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    OR              reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    INTE_DOT        reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    RPAREN          reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    DDOT            reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    COLON           reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    AS              reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    RBRACKET        reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    RKEY            reduce using rule 18 (expr -> expr GREAT_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> expr GREAT_EQUAL expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 131

    (19) expr -> expr LESS_THAN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 19 (expr -> expr LESS_THAN expr .)
    EQUALS          reduce using rule 19 (expr -> expr LESS_THAN expr .)
    NOT_EQUAL       reduce using rule 19 (expr -> expr LESS_THAN expr .)
    GREAT_THAN      reduce using rule 19 (expr -> expr LESS_THAN expr .)
    GREAT_EQUAL     reduce using rule 19 (expr -> expr LESS_THAN expr .)
    LESS_THAN       reduce using rule 19 (expr -> expr LESS_THAN expr .)
    LESS_EQUAL      reduce using rule 19 (expr -> expr LESS_THAN expr .)
    AND             reduce using rule 19 (expr -> expr LESS_THAN expr .)
    OR              reduce using rule 19 (expr -> expr LESS_THAN expr .)
    INTE_DOT        reduce using rule 19 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 19 (expr -> expr LESS_THAN expr .)
    DDOT            reduce using rule 19 (expr -> expr LESS_THAN expr .)
    ATTR_ASSOC      reduce using rule 19 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 19 (expr -> expr LESS_THAN expr .)
    AS              reduce using rule 19 (expr -> expr LESS_THAN expr .)
    RBRACKET        reduce using rule 19 (expr -> expr LESS_THAN expr .)
    RKEY            reduce using rule 19 (expr -> expr LESS_THAN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! PERCENT         [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr LESS_THAN expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 132

    (20) expr -> expr LESS_EQUAL expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    EQUALS          reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    NOT_EQUAL       reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    GREAT_THAN      reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    GREAT_EQUAL     reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    LESS_THAN       reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    LESS_EQUAL      reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    AND             reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    OR              reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    INTE_DOT        reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    DDOT            reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    ATTR_ASSOC      reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    COLON           reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    AS              reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    RBRACKET        reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    RKEY            reduce using rule 20 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58

  ! PLUS            [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! PERCENT         [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 20 (expr -> expr LESS_EQUAL expr .) ]
  ! EQUALS          [ shift and go to state 59 ]
  ! NOT_EQUAL       [ shift and go to state 60 ]
  ! GREAT_THAN      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! LESS_THAN       [ shift and go to state 63 ]
  ! LESS_EQUAL      [ shift and go to state 64 ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 133

    (21) expr -> expr AND expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 21 (expr -> expr AND expr .)
    AND             reduce using rule 21 (expr -> expr AND expr .)
    OR              reduce using rule 21 (expr -> expr AND expr .)
    INTE_DOT        reduce using rule 21 (expr -> expr AND expr .)
    RPAREN          reduce using rule 21 (expr -> expr AND expr .)
    DDOT            reduce using rule 21 (expr -> expr AND expr .)
    ATTR_ASSOC      reduce using rule 21 (expr -> expr AND expr .)
    COLON           reduce using rule 21 (expr -> expr AND expr .)
    AS              reduce using rule 21 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 21 (expr -> expr AND expr .)
    RKEY            reduce using rule 21 (expr -> expr AND expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64

  ! PLUS            [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! PERCENT         [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! EQUALS          [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! GREAT_THAN      [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 134

    (22) expr -> expr OR expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 22 (expr -> expr OR expr .)
    AND             reduce using rule 22 (expr -> expr OR expr .)
    OR              reduce using rule 22 (expr -> expr OR expr .)
    INTE_DOT        reduce using rule 22 (expr -> expr OR expr .)
    RPAREN          reduce using rule 22 (expr -> expr OR expr .)
    DDOT            reduce using rule 22 (expr -> expr OR expr .)
    ATTR_ASSOC      reduce using rule 22 (expr -> expr OR expr .)
    COLON           reduce using rule 22 (expr -> expr OR expr .)
    AS              reduce using rule 22 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 22 (expr -> expr OR expr .)
    RKEY            reduce using rule 22 (expr -> expr OR expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64

  ! PLUS            [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! PERCENT         [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! EQUALS          [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! GREAT_THAN      [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 135

    (32) expr -> expr INTE_DOT expr . DDOT expr
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    DDOT            shift and go to state 200
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 136

    (33) expr -> variable ADD_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 33 (expr -> variable ADD_ASSIGN expr .)
    RPAREN          reduce using rule 33 (expr -> variable ADD_ASSIGN expr .)
    DDOT            reduce using rule 33 (expr -> variable ADD_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 33 (expr -> variable ADD_ASSIGN expr .)
    COLON           reduce using rule 33 (expr -> variable ADD_ASSIGN expr .)
    AS              reduce using rule 33 (expr -> variable ADD_ASSIGN expr .)
    RBRACKET        reduce using rule 33 (expr -> variable ADD_ASSIGN expr .)
    RKEY            reduce using rule 33 (expr -> variable ADD_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! AND             [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! OR              [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 33 (expr -> variable ADD_ASSIGN expr .) ]


state 137

    (34) expr -> variable SUB_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 34 (expr -> variable SUB_ASSIGN expr .)
    RPAREN          reduce using rule 34 (expr -> variable SUB_ASSIGN expr .)
    DDOT            reduce using rule 34 (expr -> variable SUB_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 34 (expr -> variable SUB_ASSIGN expr .)
    COLON           reduce using rule 34 (expr -> variable SUB_ASSIGN expr .)
    AS              reduce using rule 34 (expr -> variable SUB_ASSIGN expr .)
    RBRACKET        reduce using rule 34 (expr -> variable SUB_ASSIGN expr .)
    RKEY            reduce using rule 34 (expr -> variable SUB_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! AND             [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! OR              [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 34 (expr -> variable SUB_ASSIGN expr .) ]


state 138

    (35) expr -> variable MOD_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 35 (expr -> variable MOD_ASSIGN expr .)
    RPAREN          reduce using rule 35 (expr -> variable MOD_ASSIGN expr .)
    DDOT            reduce using rule 35 (expr -> variable MOD_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 35 (expr -> variable MOD_ASSIGN expr .)
    COLON           reduce using rule 35 (expr -> variable MOD_ASSIGN expr .)
    AS              reduce using rule 35 (expr -> variable MOD_ASSIGN expr .)
    RBRACKET        reduce using rule 35 (expr -> variable MOD_ASSIGN expr .)
    RKEY            reduce using rule 35 (expr -> variable MOD_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! AND             [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! OR              [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 35 (expr -> variable MOD_ASSIGN expr .) ]


state 139

    (36) expr -> variable PLUS_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .)
    RPAREN          reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .)
    DDOT            reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .)
    COLON           reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .)
    AS              reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .)
    RBRACKET        reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .)
    RKEY            reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! AND             [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! OR              [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 36 (expr -> variable PLUS_ASSIGN expr .) ]


state 140

    (37) expr -> variable DIVIDE_ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .)
    RPAREN          reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .)
    DDOT            reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .)
    COLON           reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .)
    AS              reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .)
    RBRACKET        reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .)
    RKEY            reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! AND             [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! OR              [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 37 (expr -> variable DIVIDE_ASSIGN expr .) ]


state 141

    (38) expr -> variable ASSIGN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 38 (expr -> variable ASSIGN expr .)
    RPAREN          reduce using rule 38 (expr -> variable ASSIGN expr .)
    DDOT            reduce using rule 38 (expr -> variable ASSIGN expr .)
    ATTR_ASSOC      reduce using rule 38 (expr -> variable ASSIGN expr .)
    COLON           reduce using rule 38 (expr -> variable ASSIGN expr .)
    AS              reduce using rule 38 (expr -> variable ASSIGN expr .)
    RBRACKET        reduce using rule 38 (expr -> variable ASSIGN expr .)
    RKEY            reduce using rule 38 (expr -> variable ASSIGN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! PERCENT         [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! EQUALS          [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! GREAT_THAN      [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! AND             [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! OR              [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]
  ! INTE_DOT        [ reduce using rule 38 (expr -> variable ASSIGN expr .) ]


state 142

    (29) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 29 (expr -> LPAREN expr RPAREN .)


state 143

    (39) expr -> LPAREN INT_TYPE RPAREN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 201
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 144

    (40) expr -> LPAREN FLOAT_TYPE RPAREN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 202
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 145

    (41) expr -> LPAREN STRING_TYPE RPAREN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 203
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 146

    (42) expr -> LPAREN ARRAY_TYPE RPAREN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 204
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 147

    (43) expr -> LPAREN BOOL_TYPE RPAREN . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 205
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 148

    (55) array_declaration -> LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 206


state 149

    (56) array_declaration -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    PLUS            reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    MINUS           reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    PERCENT         reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    TIMES           reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    EQUALS          reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    AND             reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    OR              reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    INTE_DOT        reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    RPAREN          reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    DDOT            reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    COLON           reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    AS              reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 56 (array_declaration -> LPAREN RPAREN .)
    RKEY            reduce using rule 56 (array_declaration -> LPAREN RPAREN .)


state 150

    (155) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (156) array_pair_list -> array_pair .
    (170) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (171) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 156 (array_pair_list -> array_pair .)
    COLON           shift and go to state 208

    array_pair_list_ARR_PAIR       shift and go to state 207

state 151

    (157) array_pair -> expr .
    (159) array_pair -> expr . ATTR_ASSOC expr
    (160) array_pair -> expr . ATTR_ASSOC AMPERSAND variable
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 157 (array_pair -> expr .)
    RPAREN          reduce using rule 157 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 209
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 152

    (158) array_pair -> AMPERSAND . variable
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 210

state 153

    (73) if_statement -> statement_if statement_elseif statement_else .

    FUNCTION        reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    MINUS           reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    EXC_DOT         reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    PRE_INCREMENT   reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    PRE_DECREMENT   reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    LPAREN          reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    TRUE            reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    FALSE           reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    WHILE           reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    DO              reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    FOR             reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    FOREACH         reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    BREAK           reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    CONTINUE        reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    RETURN          reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    EXIT            reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    DIE             reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    GLOBAL          reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    VARIABLE        reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    ID              reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    IF              reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    RKEY            reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    ELSE            reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)
    ELSEIF          reduce using rule 73 (if_statement -> statement_if statement_elseif statement_else .)


state 154

    (78) statement_else -> ELSE statement_BLOCK_OPT .

    FUNCTION        reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    PRE_INCREMENT   reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    PRE_DECREMENT   reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSE            reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 78 (statement_else -> ELSE statement_BLOCK_OPT .)


state 155

    (76) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT statement_elseif
    (77) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT
    (163) statement_BLOCK_OPT -> . statement
    (164) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (165) statement_BLOCK_OPT -> . LKEY RKEY
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 99
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 211
    statement                      shift and go to state 98
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 156

    (81) while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    PRE_INCREMENT   reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    PRE_DECREMENT   reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 81 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)


state 157

    (105) expr_parentheses -> LPAREN expr . RPAREN
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 212
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 158

    (82) do_statement -> DO statement_BLOCK_OPT WHILE . expr_parentheses SEMICOLON
    (105) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 96

    expr_parentheses               shift and go to state 213

state 159

    (164) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 214


state 160

    (165) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    MINUS           reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXC_DOT         reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    PRE_INCREMENT   reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    PRE_DECREMENT   reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOREACH         reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 165 (statement_BLOCK_OPT -> LKEY RKEY .)


state 161

    (161) statement_MUL -> statement . statement_MUL
    (162) statement_MUL -> statement .
    (161) statement_MUL -> . statement statement_MUL
    (162) statement_MUL -> . statement
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    RKEY            reduce using rule 162 (statement_MUL -> statement .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement                      shift and go to state 161
    statement_MUL                  shift and go to state 215
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 162

    (89) for_statement -> FOR LPAREN for_parameters . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 216


state 163

    (90) for_parameters -> SEMICOLON . SEMICOLON
    (94) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (95) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (96) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (108) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (109) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 217
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 218
    expr                           shift and go to state 165
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 164

    (91) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (92) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (93) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (97) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 219


state 165

    (108) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (109) for_expr_OPT -> expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr
    (110) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (111) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 109 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 109 (for_expr_OPT -> expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67
    COLON           shift and go to state 221

    for_expr_COLON_EXPR            shift and go to state 220

state 166

    (106) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    AS              shift and go to state 222
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 167

    (83) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    MINUS           reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    EXC_DOT         reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    PRE_INCREMENT   reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    PRE_DECREMENT   reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    FOREACH         reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 83 (break_statement -> BREAK expr SEMICOLON .)


state 168

    (85) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    MINUS           reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXC_DOT         reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    PRE_INCREMENT   reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    PRE_DECREMENT   reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOREACH         reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 85 (continue_statement -> CONTINUE expr SEMICOLON .)


state 169

    (87) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    EXC_DOT         reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    PRE_INCREMENT   reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    PRE_DECREMENT   reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 87 (return_statement -> RETURN expr SEMICOLON .)


state 170

    (53) exit_expr -> LPAREN expr . RPAREN
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    RPAREN          shift and go to state 223
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 171

    (54) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 54 (exit_expr -> LPAREN RPAREN .)


state 172

    (79) global_statement -> GLOBAL global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 79 (global_statement -> GLOBAL global_var statement_COLON_GLOBAL .)


state 173

    (101) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (102) statement_COLON_GLOBAL -> COLON . global_var
    (98) global_var -> . VARIABLE
    (99) global_var -> . DOLAR VARIABLE
    (100) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 112
    DOLAR           shift and go to state 113

    global_var                     shift and go to state 224

state 174

    (99) global_var -> DOLAR VARIABLE .

    COLON           reduce using rule 99 (global_var -> DOLAR VARIABLE .)
    SEMICOLON       reduce using rule 99 (global_var -> DOLAR VARIABLE .)


state 175

    (100) global_var -> DOLAR LKEY . expr RKEY
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 225
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 176

    (168) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    POS_INCREMENT   reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    POS_DECREMENT   reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AND             reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    OR              reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 168 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 177

    (125) selector -> LBRACKET expr . RBRACKET
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    RBRACKET        shift and go to state 226
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 178

    (126) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    POS_INCREMENT   reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    POS_DECREMENT   reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    PLUS_ASSIGN     reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    AND             reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    OR              reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    AS              reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 126 (selector -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 126 (selector -> LBRACKET RBRACKET .)


state 179

    (112) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 227


state 180

    (113) function_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    INTE_DOT        reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    AS              reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 113 (function_call -> ID LPAREN RPAREN .)
    RKEY            reduce using rule 113 (function_call -> ID LPAREN RPAREN .)


state 181

    (114) function_call_parameter_list -> function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (115) function_call_parameter_list -> function_call_parameter .
    (116) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (117) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 115 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 229

    fc_parameter_list_COLON_PARAMETER shift and go to state 228

state 182

    (118) function_call_parameter -> expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 118 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 118 (function_call_parameter -> expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 183

    (119) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 230


state 184

    (74) statement_if -> IF expr_parentheses statement_BLOCK_OPT . statement_if
    (75) statement_if -> IF expr_parentheses statement_BLOCK_OPT .
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    PRE_INCREMENT   reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    PRE_DECREMENT   reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    IF              shift and go to state 47

  ! IF              [ reduce using rule 75 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .) ]

    statement_if                   shift and go to state 231

state 185

    (127) function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .

    FUNCTION        reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    MINUS           reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXC_DOT         reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    PRE_INCREMENT   reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    PRE_DECREMENT   reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    LPAREN          reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ARRAY_TYPE      reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_INTEGER  reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_REAL     reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONSTANT_ENCAPSED_STRING reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    TRUE            reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FALSE           reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    WHILE           reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DO              reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOR             reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOREACH         reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    BREAK           reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONTINUE        reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RETURN          reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXIT            reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DIE             reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    GLOBAL          reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    VARIABLE        reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ID              reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    IF              reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    END_PROGRAM     reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RKEY            reduce using rule 127 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)


state 186

    (128) fds_statements -> LKEY . inner_statement_MUL RKEY
    (129) fds_statements -> LKEY . RKEY
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (127) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    RKEY            shift and go to state 233
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    inner_statement_MUL            shift and go to state 232
    inner_statement                shift and go to state 234
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 187

    (132) fds_parameter -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 235


state 188

    (133) fds_parameter -> LPAREN RPAREN .

    LKEY            reduce using rule 133 (fds_parameter -> LPAREN RPAREN .)


state 189

    (134) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (135) parameter_list -> parameter .
    (166) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (167) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 135 (parameter_list -> parameter .)
    COLON           shift and go to state 237

    parameter_list_COLON_PARAMETER shift and go to state 236

state 190

    (136) parameter -> VARIABLE .
    (138) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 136 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 136 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 238


state 191

    (137) parameter -> parameter_prefix . VARIABLE
    (139) parameter -> parameter_prefix . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 239


state 192

    (140) parameter_prefix -> parameter_type . AMPERSAND
    (142) parameter_prefix -> parameter_type .

    AMPERSAND       shift and go to state 240
    VARIABLE        reduce using rule 142 (parameter_prefix -> parameter_type .)


state 193

    (141) parameter_prefix -> AMPERSAND .

    VARIABLE        reduce using rule 141 (parameter_prefix -> AMPERSAND .)


state 194

    (143) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 143 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 143 (parameter_type -> INT_TYPE .)


state 195

    (144) parameter_type -> BOOLEAN_TYPE .

    AMPERSAND       reduce using rule 144 (parameter_type -> BOOLEAN_TYPE .)
    VARIABLE        reduce using rule 144 (parameter_type -> BOOLEAN_TYPE .)


state 196

    (145) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 145 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 145 (parameter_type -> STRING_TYPE .)


state 197

    (146) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 146 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 146 (parameter_type -> FLOAT_TYPE .)


state 198

    (147) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 147 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 147 (parameter_type -> ARRAY_TYPE .)


state 199

    (148) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 148 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 148 (parameter_type -> BOOL_TYPE .)


state 200

    (32) expr -> expr INTE_DOT expr DDOT . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 241
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 201

    (39) expr -> LPAREN INT_TYPE RPAREN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .)
    RPAREN          reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .)
    DDOT            reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .)
    ATTR_ASSOC      reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .)
    COLON           reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .)
    AS              reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .)
    RBRACKET        reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .)
    RKEY            reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! AND             [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! OR              [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]
  ! INTE_DOT        [ reduce using rule 39 (expr -> LPAREN INT_TYPE RPAREN expr .) ]


state 202

    (40) expr -> LPAREN FLOAT_TYPE RPAREN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .)
    RPAREN          reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .)
    DDOT            reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .)
    ATTR_ASSOC      reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .)
    COLON           reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .)
    AS              reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .)
    RBRACKET        reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .)
    RKEY            reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! AND             [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! OR              [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]
  ! INTE_DOT        [ reduce using rule 40 (expr -> LPAREN FLOAT_TYPE RPAREN expr .) ]


state 203

    (41) expr -> LPAREN STRING_TYPE RPAREN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .)
    RPAREN          reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .)
    DDOT            reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .)
    ATTR_ASSOC      reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .)
    COLON           reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .)
    AS              reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .)
    RBRACKET        reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .)
    RKEY            reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! TIMES           [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! AND             [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! OR              [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]
  ! INTE_DOT        [ reduce using rule 41 (expr -> LPAREN STRING_TYPE RPAREN expr .) ]


state 204

    (42) expr -> LPAREN ARRAY_TYPE RPAREN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .)
    RPAREN          reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .)
    DDOT            reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .)
    ATTR_ASSOC      reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .)
    COLON           reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .)
    AS              reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .)
    RBRACKET        reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .)
    RKEY            reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! AND             [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! OR              [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]
  ! INTE_DOT        [ reduce using rule 42 (expr -> LPAREN ARRAY_TYPE RPAREN expr .) ]


state 205

    (43) expr -> LPAREN BOOL_TYPE RPAREN expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for INTE_DOT resolved as shift
    SEMICOLON       reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .)
    RPAREN          reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .)
    DDOT            reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .)
    ATTR_ASSOC      reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .)
    COLON           reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .)
    AS              reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .)
    RBRACKET        reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .)
    RKEY            reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67

  ! PLUS            [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! TIMES           [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! AND             [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! OR              [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]
  ! INTE_DOT        [ reduce using rule 43 (expr -> LPAREN BOOL_TYPE RPAREN expr .) ]


state 206

    (55) array_declaration -> LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 55 (array_declaration -> LPAREN array_pair_list RPAREN .)


state 207

    (155) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 155 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 208

    (170) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (171) array_pair_list_ARR_PAIR -> COLON . array_pair
    (157) array_pair -> . expr
    (158) array_pair -> . AMPERSAND variable
    (159) array_pair -> . expr ATTR_ASSOC expr
    (160) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    AMPERSAND       shift and go to state 152
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    array_pair                     shift and go to state 242
    expr                           shift and go to state 151
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 209

    (159) array_pair -> expr ATTR_ASSOC . expr
    (160) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    AMPERSAND       shift and go to state 244
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 243
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 210

    (158) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 158 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 158 (array_pair -> AMPERSAND variable .)


state 211

    (76) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT . statement_elseif
    (77) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .
    (76) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif
    (77) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
    FUNCTION        reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    PRE_INCREMENT   reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    PRE_DECREMENT   reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          shift and go to state 94

  ! ELSEIF          [ reduce using rule 77 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .) ]

    statement_elseif               shift and go to state 245

state 212

    (105) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    EXC_DOT         reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    PRE_INCREMENT   reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    PRE_DECREMENT   reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 105 (expr_parentheses -> LPAREN expr RPAREN .)


state 213

    (82) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 246


state 214

    (164) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXC_DOT         reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PRE_INCREMENT   reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    PRE_DECREMENT   reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 164 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 215

    (161) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 161 (statement_MUL -> statement statement_MUL .)


state 216

    (89) for_statement -> FOR LPAREN for_parameters RPAREN . statement_BLOCK_OPT
    (163) statement_BLOCK_OPT -> . statement
    (164) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (165) statement_BLOCK_OPT -> . LKEY RKEY
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 99
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    statement_BLOCK_OPT            shift and go to state 247
    statement                      shift and go to state 98
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 217

    (90) for_parameters -> SEMICOLON SEMICOLON .
    (96) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (108) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (109) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 90 (for_parameters -> SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 248
    expr                           shift and go to state 165
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 218

    (94) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (95) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 249


state 219

    (91) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (92) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (93) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (97) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (108) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (109) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    SEMICOLON       shift and go to state 251
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 250
    expr                           shift and go to state 165
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 220

    (108) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 108 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 108 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 221

    (110) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (111) for_expr_COLON_EXPR -> COLON . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    expr                           shift and go to state 252
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 222

    (106) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (103) ampersand_variable -> . AMPERSAND VARIABLE
    (104) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 254
    VARIABLE        shift and go to state 255

    ampersand_variable             shift and go to state 253

state 223

    (53) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 53 (exit_expr -> LPAREN expr RPAREN .)


state 224

    (101) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (102) statement_COLON_GLOBAL -> COLON global_var .
    (101) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (102) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 102 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 173

    statement_COLON_GLOBAL         shift and go to state 256

state 225

    (100) global_var -> DOLAR LKEY expr . RKEY
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    RKEY            shift and go to state 257
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 226

    (125) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    POS_INCREMENT   reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    POS_DECREMENT   reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    PLUS_ASSIGN     reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    AS              reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 125 (selector -> LBRACKET expr RBRACKET .)


state 227

    (112) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 112 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 228

    (114) function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 114 (function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 229

    (116) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (117) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter
    (118) function_call_parameter -> . expr
    (119) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    AMPERSAND       shift and go to state 183
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    function_call_parameter        shift and go to state 258
    expr                           shift and go to state 182
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 230

    (119) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 119 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 119 (function_call_parameter -> AMPERSAND VARIABLE .)


state 231

    (74) statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .

    ELSE            reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    ELSEIF          reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    FUNCTION        reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    MINUS           reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    EXC_DOT         reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    PRE_INCREMENT   reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    PRE_DECREMENT   reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    LPAREN          reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    ARRAY_TYPE      reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    NUMBER_INTEGER  reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    NUMBER_REAL     reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    TRUE            reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    FALSE           reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    WHILE           reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    DO              reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    FOR             reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    FOREACH         reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    BREAK           reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    CONTINUE        reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    RETURN          reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    EXIT            reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    DIE             reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    GLOBAL          reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    VARIABLE        reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    ID              reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    IF              reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    END_PROGRAM     reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)
    RKEY            reduce using rule 74 (statement_if -> IF expr_parentheses statement_BLOCK_OPT statement_if .)


state 232

    (128) fds_statements -> LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 259


state 233

    (129) fds_statements -> LKEY RKEY .

    FUNCTION        reduce using rule 129 (fds_statements -> LKEY RKEY .)
    MINUS           reduce using rule 129 (fds_statements -> LKEY RKEY .)
    EXC_DOT         reduce using rule 129 (fds_statements -> LKEY RKEY .)
    PRE_INCREMENT   reduce using rule 129 (fds_statements -> LKEY RKEY .)
    PRE_DECREMENT   reduce using rule 129 (fds_statements -> LKEY RKEY .)
    LPAREN          reduce using rule 129 (fds_statements -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 129 (fds_statements -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 129 (fds_statements -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 129 (fds_statements -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 129 (fds_statements -> LKEY RKEY .)
    TRUE            reduce using rule 129 (fds_statements -> LKEY RKEY .)
    FALSE           reduce using rule 129 (fds_statements -> LKEY RKEY .)
    WHILE           reduce using rule 129 (fds_statements -> LKEY RKEY .)
    DO              reduce using rule 129 (fds_statements -> LKEY RKEY .)
    FOR             reduce using rule 129 (fds_statements -> LKEY RKEY .)
    FOREACH         reduce using rule 129 (fds_statements -> LKEY RKEY .)
    BREAK           reduce using rule 129 (fds_statements -> LKEY RKEY .)
    CONTINUE        reduce using rule 129 (fds_statements -> LKEY RKEY .)
    RETURN          reduce using rule 129 (fds_statements -> LKEY RKEY .)
    EXIT            reduce using rule 129 (fds_statements -> LKEY RKEY .)
    DIE             reduce using rule 129 (fds_statements -> LKEY RKEY .)
    GLOBAL          reduce using rule 129 (fds_statements -> LKEY RKEY .)
    VARIABLE        reduce using rule 129 (fds_statements -> LKEY RKEY .)
    ID              reduce using rule 129 (fds_statements -> LKEY RKEY .)
    IF              reduce using rule 129 (fds_statements -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 129 (fds_statements -> LKEY RKEY .)
    RKEY            reduce using rule 129 (fds_statements -> LKEY RKEY .)


state 234

    (7) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (8) inner_statement_MUL -> inner_statement .
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (127) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    RKEY            reduce using rule 8 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    inner_statement                shift and go to state 234
    inner_statement_MUL            shift and go to state 260
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 235

    (132) fds_parameter -> LPAREN parameter_list RPAREN .

    LKEY            reduce using rule 132 (fds_parameter -> LPAREN parameter_list RPAREN .)


state 236

    (134) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 134 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 237

    (166) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (167) parameter_list_COLON_PARAMETER -> COLON . parameter
    (136) parameter -> . VARIABLE
    (137) parameter -> . parameter_prefix VARIABLE
    (138) parameter -> . VARIABLE ASSIGN static_scalar
    (139) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (140) parameter_prefix -> . parameter_type AMPERSAND
    (141) parameter_prefix -> . AMPERSAND
    (142) parameter_prefix -> . parameter_type
    (143) parameter_type -> . INT_TYPE
    (144) parameter_type -> . BOOLEAN_TYPE
    (145) parameter_type -> . STRING_TYPE
    (146) parameter_type -> . FLOAT_TYPE
    (147) parameter_type -> . ARRAY_TYPE
    (148) parameter_type -> . BOOL_TYPE

    VARIABLE        shift and go to state 190
    AMPERSAND       shift and go to state 193
    INT_TYPE        shift and go to state 194
    BOOLEAN_TYPE    shift and go to state 195
    STRING_TYPE     shift and go to state 196
    FLOAT_TYPE      shift and go to state 197
    ARRAY_TYPE      shift and go to state 198
    BOOL_TYPE       shift and go to state 199

    parameter                      shift and go to state 261
    parameter_prefix               shift and go to state 191
    parameter_type                 shift and go to state 192

state 238

    (138) parameter -> VARIABLE ASSIGN . static_scalar
    (149) static_scalar -> . common_scalar
    (150) static_scalar -> . PLUS static_scalar
    (151) static_scalar -> . MINUS static_scalar
    (152) common_scalar -> . NUMBER_REAL
    (153) common_scalar -> . NUMBER_INTEGER
    (154) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 264
    MINUS           shift and go to state 265
    NUMBER_REAL     shift and go to state 266
    NUMBER_INTEGER  shift and go to state 267
    CONSTANT_ENCAPSED_STRING shift and go to state 268

    static_scalar                  shift and go to state 262
    common_scalar                  shift and go to state 263

state 239

    (137) parameter -> parameter_prefix VARIABLE .
    (139) parameter -> parameter_prefix VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 137 (parameter -> parameter_prefix VARIABLE .)
    RPAREN          reduce using rule 137 (parameter -> parameter_prefix VARIABLE .)
    ASSIGN          shift and go to state 269


state 240

    (140) parameter_prefix -> parameter_type AMPERSAND .

    VARIABLE        reduce using rule 140 (parameter_prefix -> parameter_type AMPERSAND .)


state 241

    (32) expr -> expr INTE_DOT expr DDOT expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    SEMICOLON       reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    AS              reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66

  ! PLUS            [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! AND             [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! OR              [ reduce using rule 32 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! INTE_DOT        [ shift and go to state 67 ]


state 242

    (170) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (171) array_pair_list_ARR_PAIR -> COLON array_pair .
    (170) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (171) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 171 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 208

    array_pair_list_ARR_PAIR       shift and go to state 270

state 243

    (159) array_pair -> expr ATTR_ASSOC expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr

    COLON           reduce using rule 159 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 159 (array_pair -> expr ATTR_ASSOC expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67


state 244

    (160) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 271

state 245

    (76) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .

    FUNCTION        reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    MINUS           reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    EXC_DOT         reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    PRE_INCREMENT   reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    PRE_DECREMENT   reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    LPAREN          reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    ARRAY_TYPE      reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    NUMBER_INTEGER  reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    NUMBER_REAL     reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    TRUE            reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    FALSE           reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    WHILE           reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    DO              reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    FOR             reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    FOREACH         reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    BREAK           reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    CONTINUE        reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    RETURN          reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    EXIT            reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    DIE             reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    GLOBAL          reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    VARIABLE        reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    ID              reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    IF              reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    END_PROGRAM     reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    RKEY            reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    ELSE            reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)
    ELSEIF          reduce using rule 76 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT statement_elseif .)


state 246

    (82) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    MINUS           reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXC_DOT         reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    PRE_INCREMENT   reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    PRE_DECREMENT   reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOREACH         reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 82 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)


state 247

    (89) for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    PRE_INCREMENT   reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    PRE_DECREMENT   reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 89 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)


state 248

    (96) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 96 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 249

    (94) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (95) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (108) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (109) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 94 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 272
    expr                           shift and go to state 165
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 250

    (92) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (97) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 273


state 251

    (91) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (93) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (108) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (109) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 91 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 274
    expr                           shift and go to state 165
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 252

    (110) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (111) for_expr_COLON_EXPR -> COLON expr .
    (9) expr -> expr . PLUS expr
    (10) expr -> expr . MINUS expr
    (12) expr -> expr . DIVIDE expr
    (13) expr -> expr . PERCENT expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . EQUALS expr
    (16) expr -> expr . NOT_EQUAL expr
    (17) expr -> expr . GREAT_THAN expr
    (18) expr -> expr . GREAT_EQUAL expr
    (19) expr -> expr . LESS_THAN expr
    (20) expr -> expr . LESS_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (32) expr -> expr . INTE_DOT expr DDOT expr
    (110) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (111) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 111 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 111 (for_expr_COLON_EXPR -> COLON expr .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    DIVIDE          shift and go to state 56
    PERCENT         shift and go to state 57
    TIMES           shift and go to state 58
    EQUALS          shift and go to state 59
    NOT_EQUAL       shift and go to state 60
    GREAT_THAN      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    LESS_THAN       shift and go to state 63
    LESS_EQUAL      shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    INTE_DOT        shift and go to state 67
    COLON           shift and go to state 221

    for_expr_COLON_EXPR            shift and go to state 275

state 253

    (106) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 276
    ATTR_ASSOC      shift and go to state 277


state 254

    (103) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 278


state 255

    (104) ampersand_variable -> VARIABLE .

    RPAREN          reduce using rule 104 (ampersand_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 104 (ampersand_variable -> VARIABLE .)


state 256

    (101) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 101 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 257

    (100) global_var -> DOLAR LKEY expr RKEY .

    COLON           reduce using rule 100 (global_var -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 100 (global_var -> DOLAR LKEY expr RKEY .)


state 258

    (116) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (117) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .
    (116) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (117) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 117 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .)
    COLON           shift and go to state 229

    fc_parameter_list_COLON_PARAMETER shift and go to state 279

state 259

    (128) fds_statements -> LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXC_DOT         reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    PRE_INCREMENT   reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    PRE_DECREMENT   reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 128 (fds_statements -> LKEY inner_statement_MUL RKEY .)


state 260

    (7) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 7 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 261

    (166) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (167) parameter_list_COLON_PARAMETER -> COLON parameter .
    (166) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (167) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 167 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 237

    parameter_list_COLON_PARAMETER shift and go to state 280

state 262

    (138) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 138 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 138 (parameter -> VARIABLE ASSIGN static_scalar .)


state 263

    (149) static_scalar -> common_scalar .

    COLON           reduce using rule 149 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 149 (static_scalar -> common_scalar .)


state 264

    (150) static_scalar -> PLUS . static_scalar
    (149) static_scalar -> . common_scalar
    (150) static_scalar -> . PLUS static_scalar
    (151) static_scalar -> . MINUS static_scalar
    (152) common_scalar -> . NUMBER_REAL
    (153) common_scalar -> . NUMBER_INTEGER
    (154) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 264
    MINUS           shift and go to state 265
    NUMBER_REAL     shift and go to state 266
    NUMBER_INTEGER  shift and go to state 267
    CONSTANT_ENCAPSED_STRING shift and go to state 268

    static_scalar                  shift and go to state 281
    common_scalar                  shift and go to state 263

state 265

    (151) static_scalar -> MINUS . static_scalar
    (149) static_scalar -> . common_scalar
    (150) static_scalar -> . PLUS static_scalar
    (151) static_scalar -> . MINUS static_scalar
    (152) common_scalar -> . NUMBER_REAL
    (153) common_scalar -> . NUMBER_INTEGER
    (154) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 264
    MINUS           shift and go to state 265
    NUMBER_REAL     shift and go to state 266
    NUMBER_INTEGER  shift and go to state 267
    CONSTANT_ENCAPSED_STRING shift and go to state 268

    static_scalar                  shift and go to state 282
    common_scalar                  shift and go to state 263

state 266

    (152) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 152 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 152 (common_scalar -> NUMBER_REAL .)


state 267

    (153) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 153 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 153 (common_scalar -> NUMBER_INTEGER .)


state 268

    (154) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 154 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 154 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 269

    (139) parameter -> parameter_prefix VARIABLE ASSIGN . static_scalar
    (149) static_scalar -> . common_scalar
    (150) static_scalar -> . PLUS static_scalar
    (151) static_scalar -> . MINUS static_scalar
    (152) common_scalar -> . NUMBER_REAL
    (153) common_scalar -> . NUMBER_INTEGER
    (154) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 264
    MINUS           shift and go to state 265
    NUMBER_REAL     shift and go to state 266
    NUMBER_INTEGER  shift and go to state 267
    CONSTANT_ENCAPSED_STRING shift and go to state 268

    static_scalar                  shift and go to state 283
    common_scalar                  shift and go to state 263

state 270

    (170) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 170 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 271

    (160) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 160 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 160 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 272

    (95) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 95 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 273

    (92) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (97) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (108) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (109) for_expr_OPT -> . expr
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN

    RPAREN          reduce using rule 92 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46

    for_expr_OPT                   shift and go to state 284
    expr                           shift and go to state 165
    variable                       shift and go to state 24
    function_call                  shift and go to state 28

state 274

    (93) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 93 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 275

    (110) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 110 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 110 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 276

    (106) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN . statement_BLOCK_OPT
    (163) statement_BLOCK_OPT -> . statement
    (164) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (165) statement_BLOCK_OPT -> . LKEY RKEY
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 99
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 285
    statement                      shift and go to state 98
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 277

    (107) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC . ampersand_variable RPAREN statement_BLOCK_OPT
    (103) ampersand_variable -> . AMPERSAND VARIABLE
    (104) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 254
    VARIABLE        shift and go to state 255

    ampersand_variable             shift and go to state 286

state 278

    (103) ampersand_variable -> AMPERSAND VARIABLE .

    RPAREN          reduce using rule 103 (ampersand_variable -> AMPERSAND VARIABLE .)
    ATTR_ASSOC      reduce using rule 103 (ampersand_variable -> AMPERSAND VARIABLE .)


state 279

    (116) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 116 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 280

    (166) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 166 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 281

    (150) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 150 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 150 (static_scalar -> PLUS static_scalar .)


state 282

    (151) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 151 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 151 (static_scalar -> MINUS static_scalar .)


state 283

    (139) parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 139 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 139 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)


state 284

    (97) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 97 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 285

    (106) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    PRE_INCREMENT   reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    PRE_DECREMENT   reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 106 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)


state 286

    (107) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 287


state 287

    (107) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN . statement_BLOCK_OPT
    (163) statement_BLOCK_OPT -> . statement
    (164) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (165) statement_BLOCK_OPT -> . LKEY RKEY
    (57) statement -> . expr SEMICOLON
    (58) statement -> . if_statement
    (59) statement -> . while_statement
    (60) statement -> . do_statement
    (61) statement -> . for_statement
    (62) statement -> . foreach_statement
    (63) statement -> . break_statement
    (64) statement -> . continue_statement
    (65) statement -> . return_statement
    (66) statement -> . exit_statement SEMICOLON
    (67) statement -> . die_statement SEMICOLON
    (68) statement -> . global_statement SEMICOLON
    (9) expr -> . expr PLUS expr
    (10) expr -> . expr MINUS expr
    (11) expr -> . MINUS expr
    (12) expr -> . expr DIVIDE expr
    (13) expr -> . expr PERCENT expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr EQUALS expr
    (16) expr -> . expr NOT_EQUAL expr
    (17) expr -> . expr GREAT_THAN expr
    (18) expr -> . expr GREAT_EQUAL expr
    (19) expr -> . expr LESS_THAN expr
    (20) expr -> . expr LESS_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . EXC_DOT expr
    (24) expr -> . PRE_INCREMENT variable
    (25) expr -> . variable POS_INCREMENT
    (26) expr -> . PRE_DECREMENT variable
    (27) expr -> . variable POS_DECREMENT
    (28) expr -> . variable
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . ARRAY_TYPE array_declaration
    (31) expr -> . function_call
    (32) expr -> . expr INTE_DOT expr DDOT expr
    (33) expr -> . variable ADD_ASSIGN expr
    (34) expr -> . variable SUB_ASSIGN expr
    (35) expr -> . variable MOD_ASSIGN expr
    (36) expr -> . variable PLUS_ASSIGN expr
    (37) expr -> . variable DIVIDE_ASSIGN expr
    (38) expr -> . variable ASSIGN expr
    (39) expr -> . LPAREN INT_TYPE RPAREN expr
    (40) expr -> . LPAREN FLOAT_TYPE RPAREN expr
    (41) expr -> . LPAREN STRING_TYPE RPAREN expr
    (42) expr -> . LPAREN ARRAY_TYPE RPAREN expr
    (43) expr -> . LPAREN BOOL_TYPE RPAREN expr
    (44) expr -> . NUMBER_INTEGER
    (45) expr -> . NUMBER_REAL
    (46) expr -> . CONSTANT_ENCAPSED_STRING
    (47) expr -> . TRUE
    (48) expr -> . FALSE
    (70) if_statement -> . statement_if
    (71) if_statement -> . statement_if statement_else
    (72) if_statement -> . statement_if statement_elseif
    (73) if_statement -> . statement_if statement_elseif statement_else
    (81) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (82) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (89) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (106) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (107) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (83) break_statement -> . BREAK expr SEMICOLON
    (84) break_statement -> . BREAK SEMICOLON
    (85) continue_statement -> . CONTINUE expr SEMICOLON
    (86) continue_statement -> . CONTINUE SEMICOLON
    (87) return_statement -> . RETURN expr SEMICOLON
    (88) return_statement -> . RETURN SEMICOLON
    (49) exit_statement -> . EXIT exit_expr
    (50) exit_statement -> . EXIT
    (51) die_statement -> . DIE exit_expr
    (52) die_statement -> . DIE
    (79) global_statement -> . GLOBAL global_var statement_COLON_GLOBAL
    (80) global_statement -> . GLOBAL global_var
    (123) variable -> . VARIABLE reference_variable_SELECTOR
    (124) variable -> . VARIABLE
    (112) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (113) function_call -> . ID LPAREN RPAREN
    (74) statement_if -> . IF expr_parentheses statement_BLOCK_OPT statement_if
    (75) statement_if -> . IF expr_parentheses statement_BLOCK_OPT

    LKEY            shift and go to state 99
    MINUS           shift and go to state 21
    EXC_DOT         shift and go to state 22
    PRE_INCREMENT   shift and go to state 23
    PRE_DECREMENT   shift and go to state 25
    LPAREN          shift and go to state 26
    ARRAY_TYPE      shift and go to state 27
    NUMBER_INTEGER  shift and go to state 29
    NUMBER_REAL     shift and go to state 30
    CONSTANT_ENCAPSED_STRING shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    WHILE           shift and go to state 35
    DO              shift and go to state 36
    FOR             shift and go to state 37
    FOREACH         shift and go to state 38
    BREAK           shift and go to state 39
    CONTINUE        shift and go to state 40
    RETURN          shift and go to state 41
    EXIT            shift and go to state 42
    DIE             shift and go to state 43
    GLOBAL          shift and go to state 44
    VARIABLE        shift and go to state 45
    ID              shift and go to state 46
    IF              shift and go to state 47

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 288
    statement                      shift and go to state 98
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    global_statement               shift and go to state 20
    variable                       shift and go to state 24
    function_call                  shift and go to state 28
    statement_if                   shift and go to state 34

state 288

    (107) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXC_DOT         reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    PRE_INCREMENT   reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    PRE_DECREMENT   reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 107 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 34 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 34 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 184 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 201 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 201 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 201 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 201 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 201 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 201 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 201 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 201 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for AND in state 201 resolved as shift
WARNING: shift/reduce conflict for OR in state 201 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 201 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 202 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 202 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 202 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 202 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 202 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 202 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 202 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 202 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 202 resolved as shift
WARNING: shift/reduce conflict for AND in state 202 resolved as shift
WARNING: shift/reduce conflict for OR in state 202 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 202 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 203 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 203 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 203 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 203 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 203 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 203 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 203 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 203 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 203 resolved as shift
WARNING: shift/reduce conflict for AND in state 203 resolved as shift
WARNING: shift/reduce conflict for OR in state 203 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 203 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 204 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 204 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 204 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 204 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 204 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 204 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 204 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 204 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 204 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 204 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 204 resolved as shift
WARNING: shift/reduce conflict for AND in state 204 resolved as shift
WARNING: shift/reduce conflict for OR in state 204 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 204 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 205 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 205 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 205 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 205 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 205 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 205 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 205 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 205 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 205 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 205 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 205 resolved as shift
WARNING: shift/reduce conflict for AND in state 205 resolved as shift
WARNING: shift/reduce conflict for OR in state 205 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 205 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 211 resolved as shift

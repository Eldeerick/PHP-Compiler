Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    STRING
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     main_INNER -> inner_statement main_INNER
Rule 4     main_INNER -> inner_statement
Rule 5     inner_statement -> function_declaration_statement
Rule 6     inner_statement -> statement
Rule 7     statement -> expr SEMICOLON
Rule 8     statement -> if_statement
Rule 9     statement -> while_statement
Rule 10    statement -> do_statement
Rule 11    statement -> for_statement
Rule 12    statement -> foreach_statement
Rule 13    statement -> break_statement
Rule 14    statement -> continue_statement
Rule 15    statement -> return_statement
Rule 16    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 17    statement -> GLOBAL global_var SEMICOLON
Rule 18    if_statement -> statement_if if_statement_complement
Rule 19    if_statement -> statement_if
Rule 20    if_statement_complement -> statement_elseif
Rule 21    if_statement_complement -> statement_elseif statement_else
Rule 22    if_statement_complement -> statement_else
Rule 23    while_statement -> WHILE expr_parentheses statement_BLOCK_OPT
Rule 24    do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
Rule 25    break_statement -> BREAK expr SEMICOLON
Rule 26    break_statement -> BREAK SEMICOLON
Rule 27    continue_statement -> CONTINUE expr SEMICOLON
Rule 28    continue_statement -> CONTINUE SEMICOLON
Rule 29    return_statement -> RETURN expr SEMICOLON
Rule 30    return_statement -> RETURN SEMICOLON
Rule 31    for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
Rule 32    for_parameters -> SEMICOLON SEMICOLON
Rule 33    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 34    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 35    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 36    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 37    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 38    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 39    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 40    global_var -> VARIABLE
Rule 41    global_var -> DOLAR VARIABLE
Rule 42    global_var -> DOLAR LKEY expr RKEY
Rule 43    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 44    statement_COLON_GLOBAL -> COLON global_var
Rule 45    ampersand_variable -> AMPERSAND VARIABLE
Rule 46    ampersand_variable -> VARIABLE
Rule 47    expr_parentheses -> LPAREN expr RPAREN
Rule 48    statement_if -> IF expr_parentheses statement_BLOCK_OPT
Rule 49    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT
Rule 50    statement_else -> ELSE statement_BLOCK_OPT
Rule 51    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 52    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 53    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 54    for_expr_OPT -> expr
Rule 55    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 56    function_call -> ID LPAREN RPAREN
Rule 57    function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION
Rule 58    function_call_parameter_list -> function_call_parameter
Rule 59    function_call_parameter -> expr
Rule 60    function_call_parameter -> AMPERSAND VARIABLE
Rule 61    assignment_list_element -> variable
Rule 62    assignment_list_element -> LIST LPAREN assignment_list_element assignment_list_element_COLON_ASSIGNMENT RPAREN
Rule 63    unary_operator -> EXC_DOT
Rule 64    unary_operator -> PLUS
Rule 65    unary_operator -> MINUS
Rule 66    type_cast_operator -> INT_TYPE
Rule 67    type_cast_operator -> DOUBLE_TYPE
Rule 68    type_cast_operator -> FLOAT_TYPE
Rule 69    type_cast_operator -> REAL_TYPE
Rule 70    type_cast_operator -> STRING_TYPE
Rule 71    type_cast_operator -> ARRAY_TYPE
Rule 72    type_cast_operator -> BOOLEAN_TYPE
Rule 73    type_cast_operator -> BOOL_TYPE
Rule 74    type_cast_operator -> UNSET
Rule 75    assign_operator -> ADD_ASSIGN
Rule 76    assign_operator -> SUB_ASSIGN
Rule 77    assign_operator -> MOD_ASSIGN
Rule 78    assign_operator -> PLUS_ASSIGN
Rule 79    assign_operator -> DIVIDE_ASSIGN
Rule 80    assign_operator -> ASSIGN
Rule 81    arithmetic_operator -> PLUS
Rule 82    arithmetic_operator -> DIVIDE
Rule 83    arithmetic_operator -> PERCENT
Rule 84    arithmetic_operator -> TIMES
Rule 85    arithmetic_operator -> MINUS
Rule 86    comparission_operator -> EQUALS
Rule 87    comparission_operator -> GREAT_THAN
Rule 88    comparission_operator -> LESS_THAN
Rule 89    comparission_operator -> LESS_EQUAL
Rule 90    comparission_operator -> GREAT_EQUAL
Rule 91    comparission_operator -> NOT_EQUAL
Rule 92    comparission_operator -> LEFT_LOGICAL
Rule 93    comparission_operator -> RIGHT_LOGICAL
Rule 94    comparission_operator -> AND
Rule 95    comparission_operator -> OR
Rule 96    expr -> INCREMENT variable
Rule 97    expr -> variable INCREMENT
Rule 98    expr -> DECREMENT variable
Rule 99    expr -> variable DECREMENT
Rule 100   expr -> variable assign_operator expr
Rule 101   expr -> variable assign_operator AMPERSAND expr
Rule 102   expr -> variable
Rule 103   expr -> LPAREN expr RPAREN
Rule 104   expr -> expr INTE_DOT expr DDOT expr
Rule 105   expr -> expr comparission_operator expr
Rule 106   expr -> expr arithmetic_operator expr
Rule 107   expr -> MINUS expr
Rule 108   expr -> LPAREN type_cast_operator RPAREN expr
Rule 109   expr -> EXIT exit_expr
Rule 110   expr -> EXIT
Rule 111   expr -> DIE exit_expr
Rule 112   expr -> DIE
Rule 113   expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN
Rule 114   expr -> ARRAY_TYPE LPAREN RPAREN
Rule 115   expr -> function_call
Rule 116   expr -> scalar
Rule 117   expr -> TRUE
Rule 118   expr -> FALSE
Rule 119   scalar -> NUMBER_REAL
Rule 120   scalar -> NUMBER_INTEGER
Rule 121   scalar -> CONSTANT_ENCAPSED_STRING
Rule 122   exit_expr -> LPAREN expr RPAREN
Rule 123   exit_expr -> LPAREN RPAREN
Rule 124   variable -> reference_variable
Rule 125   variable -> simple_indirect_reference_DOLAR reference_variable
Rule 126   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 127   reference_variable -> compound_variable
Rule 128   compound_variable -> VARIABLE
Rule 129   compound_variable -> DOLAR LKEY expr RKEY
Rule 130   selector -> LBRACKET expr RBRACKET
Rule 131   selector -> LBRACKET RBRACKET
Rule 132   function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements
Rule 133   fds_statements -> LKEY inner_statement_MUL RKEY
Rule 134   fds_statements -> LKEY RKEY
Rule 135   fds_id -> AMPERSAND ID
Rule 136   fds_id -> ID
Rule 137   fds_parameter -> LPAREN parameter_list RPAREN
Rule 138   fds_parameter -> LPAREN RPAREN
Rule 139   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 140   parameter_list -> parameter
Rule 141   parameter -> VARIABLE
Rule 142   parameter -> VARIABLE ASSIGN static_scalar
Rule 143   parameter -> parameter_type VARIABLE
Rule 144   parameter -> parameter_type AMPERSAND VARIABLE
Rule 145   parameter -> AMPERSAND VARIABLE
Rule 146   parameter -> AMPERSAND VARIABLE ASSIGN static_scalar
Rule 147   parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
Rule 148   parameter_type -> INT_TYPE
Rule 149   parameter_type -> BOOLEAN_TYPE
Rule 150   parameter_type -> STRING_TYPE
Rule 151   parameter_type -> FLOAT_TYPE
Rule 152   parameter_type -> ARRAY_TYPE
Rule 153   parameter_type -> BOOL_TYPE
Rule 154   parameter_type -> REAL_TYPE
Rule 155   parameter_type -> DOUBLE_TYPE
Rule 156   static_scalar -> common_scalar
Rule 157   static_scalar -> PLUS static_scalar
Rule 158   static_scalar -> MINUS static_scalar
Rule 159   common_scalar -> NUMBER_REAL
Rule 160   common_scalar -> NUMBER_INTEGER
Rule 161   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 162   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 163   array_pair_list -> array_pair
Rule 164   array_pair -> expr
Rule 165   array_pair -> expr ATTR_ASSOC expr
Rule 166   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 167   array_pair -> AMPERSAND variable
Rule 168   inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 169   inner_statement_MUL -> inner_statement
Rule 170   statement_MUL -> statement statement_MUL
Rule 171   statement_MUL -> statement
Rule 172   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 173   for_expr_COLON_EXPR -> COLON expr
Rule 174   statement_BLOCK_OPT -> statement
Rule 175   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 176   statement_BLOCK_OPT -> LKEY RKEY
Rule 177   function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION
Rule 178   function_call_list_COLON_FUNCTION -> COLON function_call_parameter
Rule 179   assignment_list_element_COLON_ASSIGNMENT -> COLON assignment_list_element assignment_list_element_COLON_ASSIGNMENT
Rule 180   assignment_list_element_COLON_ASSIGNMENT -> <empty>
Rule 181   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 182   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 183   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 184   reference_variable_SELECTOR -> selector
Rule 185   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 186   simple_indirect_reference_DOLAR -> DOLAR
Rule 187   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 188   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 75
AMPERSAND            : 45 60 101 135 144 145 146 147 166 167
AND                  : 94
APOSTROFE            : 
ARRAY_TYPE           : 71 113 114 152
ARROBA               : 
AS                   : 51 52
ASPAS                : 
ASSIGN               : 80 142 146 147
ATTR_ASSOC           : 52 165 166
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 72 149
BOOL_TYPE            : 73 153
BREAK                : 25 26
CASE                 : 
CLONE                : 
COLON                : 43 44 172 173 177 178 179 181 182 187 188
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 121 161
CONTINUE             : 27 28
CRASE                : 
DDOT                 : 104
DECLARE              : 
DECREMENT            : 98 99
DIE                  : 111 112
DIVIDE               : 82
DIVIDE_ASSIGN        : 79
DO                   : 24
DOLAR                : 41 42 129 185 186
DOUBLE_TYPE          : 67 155
ELSE                 : 50
ELSEIF               : 49
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 86
EXC_DOT              : 63
EXIT                 : 109 110
FALSE                : 118
FLOAT_TYPE           : 68 151
FOR                  : 31
FOREACH              : 51 52
FUNCTION             : 132
GLOBAL               : 16 17
GREAT_EQUAL          : 90
GREAT_THAN           : 87
ID                   : 55 56 135 136
IDENTATION           : 
IF                   : 48
INCREMENT            : 96 97
INTE_DOT             : 104
INT_TYPE             : 66 148
LBRACKET             : 130 131
LEFT_LOGICAL         : 92
LESS_EQUAL           : 89
LESS_THAN            : 88
LIST                 : 62
LKEY                 : 42 129 133 134 175 176
LPAREN               : 31 47 51 52 55 56 62 103 108 113 114 122 123 137 138
MINUS                : 65 85 107 158
MOD_ASSIGN           : 77
NOT_EQUAL            : 91
NUMBER_INTEGER       : 120 160
NUMBER_REAL          : 119 159
OR                   : 95
PERCENT              : 83
PLUS                 : 64 81 157
PLUS_ASSIGN          : 78
RBRACKET             : 130 131
REAL_TYPE            : 69 154
RETURN               : 29 30
RIGHT_LOGICAL        : 93
RKEY                 : 42 129 133 134 175 176
RPAREN               : 31 47 51 52 55 56 62 103 108 113 114 122 123 137 138
SEMICOLON            : 7 16 17 24 25 26 27 28 29 30 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39
STRING               : 
STRING_TYPE          : 70 150
SUB_ASSIGN           : 76
TIMES                : 84
TRUE                 : 117
UNSET                : 74
VAR                  : 
VARIABLE             : 40 41 45 46 60 128 141 142 143 144 145 146 147
WHILE                : 23 24
error                : 

Nonterminals, with rules where they appear

ampersand_variable   : 51 52 52
arithmetic_operator  : 106
array_pair           : 162 163 187 188
array_pair_list      : 113
array_pair_list_ARR_PAIR : 162 187
assign_operator      : 100 101
assignment_list_element : 62 179
assignment_list_element_COLON_ASSIGNMENT : 62 179
break_statement      : 13
common_scalar        : 156
comparission_operator : 105
compound_variable    : 126 127
continue_statement   : 14
do_statement         : 10
exit_expr            : 109 111
expr                 : 7 25 27 29 42 47 51 52 53 54 59 100 101 103 104 104 104 105 105 106 106 107 108 122 129 130 164 165 165 166 172 173
expr_parentheses     : 23 24 48 49
fds_id               : 132
fds_parameter        : 132
fds_statements       : 132
for_expr_COLON_EXPR  : 53 172
for_expr_OPT         : 33 34 34 35 35 36 37 37 38 39 39 39
for_parameters       : 31
for_statement        : 11
foreach_statement    : 12
function_call        : 115
function_call_list_COLON_FUNCTION : 57 177
function_call_parameter : 57 58 177 178
function_call_parameter_list : 55
function_declaration_statement : 5
global_var           : 16 17 43 44
if_statement         : 8
if_statement_complement : 18
inner_statement      : 3 4 168 169
inner_statement_MUL  : 133 168
main                 : 0
main_INNER           : 1 3
parameter            : 139 140 181 182
parameter_list       : 137
parameter_list_COLON_PARAMETER : 139 181
parameter_type       : 143 144 147
reference_variable   : 124 125
reference_variable_SELECTOR : 126 183
return_statement     : 15
scalar               : 116
selector             : 183 184
simple_indirect_reference_DOLAR : 125 185
statement            : 6 170 171 174
statement_BLOCK_OPT  : 23 24 31 48 49 50 51 52
statement_COLON_GLOBAL : 16 43
statement_MUL        : 170 175
statement_else       : 21 22
statement_elseif     : 20 21
statement_if         : 18 19
static_scalar        : 142 146 147 157 158
type_cast_operator   : 108
unary_operator       : 
variable             : 61 96 97 98 99 100 101 102 166 167
while_statement      : 9

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (132) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 49


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (3) main_INNER -> inner_statement . main_INNER
    (4) main_INNER -> inner_statement .
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (132) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     reduce using rule 4 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 50
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 6

    (5) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 5 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 5 (inner_statement -> function_declaration_statement .)


state 7

    (6) inner_statement -> statement .

    FUNCTION        reduce using rule 6 (inner_statement -> statement .)
    GLOBAL          reduce using rule 6 (inner_statement -> statement .)
    INCREMENT       reduce using rule 6 (inner_statement -> statement .)
    DECREMENT       reduce using rule 6 (inner_statement -> statement .)
    LPAREN          reduce using rule 6 (inner_statement -> statement .)
    MINUS           reduce using rule 6 (inner_statement -> statement .)
    EXIT            reduce using rule 6 (inner_statement -> statement .)
    DIE             reduce using rule 6 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 6 (inner_statement -> statement .)
    TRUE            reduce using rule 6 (inner_statement -> statement .)
    FALSE           reduce using rule 6 (inner_statement -> statement .)
    WHILE           reduce using rule 6 (inner_statement -> statement .)
    DO              reduce using rule 6 (inner_statement -> statement .)
    FOR             reduce using rule 6 (inner_statement -> statement .)
    FOREACH         reduce using rule 6 (inner_statement -> statement .)
    BREAK           reduce using rule 6 (inner_statement -> statement .)
    CONTINUE        reduce using rule 6 (inner_statement -> statement .)
    RETURN          reduce using rule 6 (inner_statement -> statement .)
    ID              reduce using rule 6 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 6 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 6 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (inner_statement -> statement .)
    IF              reduce using rule 6 (inner_statement -> statement .)
    DOLAR           reduce using rule 6 (inner_statement -> statement .)
    VARIABLE        reduce using rule 6 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 6 (inner_statement -> statement .)
    RKEY            reduce using rule 6 (inner_statement -> statement .)


state 8

    (132) function_declaration_statement -> FUNCTION . fds_id fds_parameter fds_statements
    (135) fds_id -> . AMPERSAND ID
    (136) fds_id -> . ID

    AMPERSAND       shift and go to state 52
    ID              shift and go to state 53

    fds_id                         shift and go to state 51

state 9

    (7) statement -> expr . SEMICOLON
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 54
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 10

    (8) statement -> if_statement .

    FUNCTION        reduce using rule 8 (statement -> if_statement .)
    GLOBAL          reduce using rule 8 (statement -> if_statement .)
    INCREMENT       reduce using rule 8 (statement -> if_statement .)
    DECREMENT       reduce using rule 8 (statement -> if_statement .)
    LPAREN          reduce using rule 8 (statement -> if_statement .)
    MINUS           reduce using rule 8 (statement -> if_statement .)
    EXIT            reduce using rule 8 (statement -> if_statement .)
    DIE             reduce using rule 8 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 8 (statement -> if_statement .)
    TRUE            reduce using rule 8 (statement -> if_statement .)
    FALSE           reduce using rule 8 (statement -> if_statement .)
    WHILE           reduce using rule 8 (statement -> if_statement .)
    DO              reduce using rule 8 (statement -> if_statement .)
    FOR             reduce using rule 8 (statement -> if_statement .)
    FOREACH         reduce using rule 8 (statement -> if_statement .)
    BREAK           reduce using rule 8 (statement -> if_statement .)
    CONTINUE        reduce using rule 8 (statement -> if_statement .)
    RETURN          reduce using rule 8 (statement -> if_statement .)
    ID              reduce using rule 8 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 8 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (statement -> if_statement .)
    IF              reduce using rule 8 (statement -> if_statement .)
    DOLAR           reduce using rule 8 (statement -> if_statement .)
    VARIABLE        reduce using rule 8 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 8 (statement -> if_statement .)
    RKEY            reduce using rule 8 (statement -> if_statement .)
    ELSEIF          reduce using rule 8 (statement -> if_statement .)
    ELSE            reduce using rule 8 (statement -> if_statement .)


state 11

    (9) statement -> while_statement .

    FUNCTION        reduce using rule 9 (statement -> while_statement .)
    GLOBAL          reduce using rule 9 (statement -> while_statement .)
    INCREMENT       reduce using rule 9 (statement -> while_statement .)
    DECREMENT       reduce using rule 9 (statement -> while_statement .)
    LPAREN          reduce using rule 9 (statement -> while_statement .)
    MINUS           reduce using rule 9 (statement -> while_statement .)
    EXIT            reduce using rule 9 (statement -> while_statement .)
    DIE             reduce using rule 9 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 9 (statement -> while_statement .)
    TRUE            reduce using rule 9 (statement -> while_statement .)
    FALSE           reduce using rule 9 (statement -> while_statement .)
    WHILE           reduce using rule 9 (statement -> while_statement .)
    DO              reduce using rule 9 (statement -> while_statement .)
    FOR             reduce using rule 9 (statement -> while_statement .)
    FOREACH         reduce using rule 9 (statement -> while_statement .)
    BREAK           reduce using rule 9 (statement -> while_statement .)
    CONTINUE        reduce using rule 9 (statement -> while_statement .)
    RETURN          reduce using rule 9 (statement -> while_statement .)
    ID              reduce using rule 9 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 9 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (statement -> while_statement .)
    IF              reduce using rule 9 (statement -> while_statement .)
    DOLAR           reduce using rule 9 (statement -> while_statement .)
    VARIABLE        reduce using rule 9 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 9 (statement -> while_statement .)
    RKEY            reduce using rule 9 (statement -> while_statement .)
    ELSEIF          reduce using rule 9 (statement -> while_statement .)
    ELSE            reduce using rule 9 (statement -> while_statement .)


state 12

    (10) statement -> do_statement .

    FUNCTION        reduce using rule 10 (statement -> do_statement .)
    GLOBAL          reduce using rule 10 (statement -> do_statement .)
    INCREMENT       reduce using rule 10 (statement -> do_statement .)
    DECREMENT       reduce using rule 10 (statement -> do_statement .)
    LPAREN          reduce using rule 10 (statement -> do_statement .)
    MINUS           reduce using rule 10 (statement -> do_statement .)
    EXIT            reduce using rule 10 (statement -> do_statement .)
    DIE             reduce using rule 10 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 10 (statement -> do_statement .)
    TRUE            reduce using rule 10 (statement -> do_statement .)
    FALSE           reduce using rule 10 (statement -> do_statement .)
    WHILE           reduce using rule 10 (statement -> do_statement .)
    DO              reduce using rule 10 (statement -> do_statement .)
    FOR             reduce using rule 10 (statement -> do_statement .)
    FOREACH         reduce using rule 10 (statement -> do_statement .)
    BREAK           reduce using rule 10 (statement -> do_statement .)
    CONTINUE        reduce using rule 10 (statement -> do_statement .)
    RETURN          reduce using rule 10 (statement -> do_statement .)
    ID              reduce using rule 10 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 10 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 10 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (statement -> do_statement .)
    IF              reduce using rule 10 (statement -> do_statement .)
    DOLAR           reduce using rule 10 (statement -> do_statement .)
    VARIABLE        reduce using rule 10 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 10 (statement -> do_statement .)
    RKEY            reduce using rule 10 (statement -> do_statement .)
    ELSEIF          reduce using rule 10 (statement -> do_statement .)
    ELSE            reduce using rule 10 (statement -> do_statement .)


state 13

    (11) statement -> for_statement .

    FUNCTION        reduce using rule 11 (statement -> for_statement .)
    GLOBAL          reduce using rule 11 (statement -> for_statement .)
    INCREMENT       reduce using rule 11 (statement -> for_statement .)
    DECREMENT       reduce using rule 11 (statement -> for_statement .)
    LPAREN          reduce using rule 11 (statement -> for_statement .)
    MINUS           reduce using rule 11 (statement -> for_statement .)
    EXIT            reduce using rule 11 (statement -> for_statement .)
    DIE             reduce using rule 11 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 11 (statement -> for_statement .)
    TRUE            reduce using rule 11 (statement -> for_statement .)
    FALSE           reduce using rule 11 (statement -> for_statement .)
    WHILE           reduce using rule 11 (statement -> for_statement .)
    DO              reduce using rule 11 (statement -> for_statement .)
    FOR             reduce using rule 11 (statement -> for_statement .)
    FOREACH         reduce using rule 11 (statement -> for_statement .)
    BREAK           reduce using rule 11 (statement -> for_statement .)
    CONTINUE        reduce using rule 11 (statement -> for_statement .)
    RETURN          reduce using rule 11 (statement -> for_statement .)
    ID              reduce using rule 11 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 11 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 11 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (statement -> for_statement .)
    IF              reduce using rule 11 (statement -> for_statement .)
    DOLAR           reduce using rule 11 (statement -> for_statement .)
    VARIABLE        reduce using rule 11 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 11 (statement -> for_statement .)
    RKEY            reduce using rule 11 (statement -> for_statement .)
    ELSEIF          reduce using rule 11 (statement -> for_statement .)
    ELSE            reduce using rule 11 (statement -> for_statement .)


state 14

    (12) statement -> foreach_statement .

    FUNCTION        reduce using rule 12 (statement -> foreach_statement .)
    GLOBAL          reduce using rule 12 (statement -> foreach_statement .)
    INCREMENT       reduce using rule 12 (statement -> foreach_statement .)
    DECREMENT       reduce using rule 12 (statement -> foreach_statement .)
    LPAREN          reduce using rule 12 (statement -> foreach_statement .)
    MINUS           reduce using rule 12 (statement -> foreach_statement .)
    EXIT            reduce using rule 12 (statement -> foreach_statement .)
    DIE             reduce using rule 12 (statement -> foreach_statement .)
    ARRAY_TYPE      reduce using rule 12 (statement -> foreach_statement .)
    TRUE            reduce using rule 12 (statement -> foreach_statement .)
    FALSE           reduce using rule 12 (statement -> foreach_statement .)
    WHILE           reduce using rule 12 (statement -> foreach_statement .)
    DO              reduce using rule 12 (statement -> foreach_statement .)
    FOR             reduce using rule 12 (statement -> foreach_statement .)
    FOREACH         reduce using rule 12 (statement -> foreach_statement .)
    BREAK           reduce using rule 12 (statement -> foreach_statement .)
    CONTINUE        reduce using rule 12 (statement -> foreach_statement .)
    RETURN          reduce using rule 12 (statement -> foreach_statement .)
    ID              reduce using rule 12 (statement -> foreach_statement .)
    NUMBER_REAL     reduce using rule 12 (statement -> foreach_statement .)
    NUMBER_INTEGER  reduce using rule 12 (statement -> foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (statement -> foreach_statement .)
    IF              reduce using rule 12 (statement -> foreach_statement .)
    DOLAR           reduce using rule 12 (statement -> foreach_statement .)
    VARIABLE        reduce using rule 12 (statement -> foreach_statement .)
    END_PROGRAM     reduce using rule 12 (statement -> foreach_statement .)
    RKEY            reduce using rule 12 (statement -> foreach_statement .)
    ELSEIF          reduce using rule 12 (statement -> foreach_statement .)
    ELSE            reduce using rule 12 (statement -> foreach_statement .)


state 15

    (13) statement -> break_statement .

    FUNCTION        reduce using rule 13 (statement -> break_statement .)
    GLOBAL          reduce using rule 13 (statement -> break_statement .)
    INCREMENT       reduce using rule 13 (statement -> break_statement .)
    DECREMENT       reduce using rule 13 (statement -> break_statement .)
    LPAREN          reduce using rule 13 (statement -> break_statement .)
    MINUS           reduce using rule 13 (statement -> break_statement .)
    EXIT            reduce using rule 13 (statement -> break_statement .)
    DIE             reduce using rule 13 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 13 (statement -> break_statement .)
    TRUE            reduce using rule 13 (statement -> break_statement .)
    FALSE           reduce using rule 13 (statement -> break_statement .)
    WHILE           reduce using rule 13 (statement -> break_statement .)
    DO              reduce using rule 13 (statement -> break_statement .)
    FOR             reduce using rule 13 (statement -> break_statement .)
    FOREACH         reduce using rule 13 (statement -> break_statement .)
    BREAK           reduce using rule 13 (statement -> break_statement .)
    CONTINUE        reduce using rule 13 (statement -> break_statement .)
    RETURN          reduce using rule 13 (statement -> break_statement .)
    ID              reduce using rule 13 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 13 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 13 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 13 (statement -> break_statement .)
    IF              reduce using rule 13 (statement -> break_statement .)
    DOLAR           reduce using rule 13 (statement -> break_statement .)
    VARIABLE        reduce using rule 13 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 13 (statement -> break_statement .)
    RKEY            reduce using rule 13 (statement -> break_statement .)
    ELSEIF          reduce using rule 13 (statement -> break_statement .)
    ELSE            reduce using rule 13 (statement -> break_statement .)


state 16

    (14) statement -> continue_statement .

    FUNCTION        reduce using rule 14 (statement -> continue_statement .)
    GLOBAL          reduce using rule 14 (statement -> continue_statement .)
    INCREMENT       reduce using rule 14 (statement -> continue_statement .)
    DECREMENT       reduce using rule 14 (statement -> continue_statement .)
    LPAREN          reduce using rule 14 (statement -> continue_statement .)
    MINUS           reduce using rule 14 (statement -> continue_statement .)
    EXIT            reduce using rule 14 (statement -> continue_statement .)
    DIE             reduce using rule 14 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 14 (statement -> continue_statement .)
    TRUE            reduce using rule 14 (statement -> continue_statement .)
    FALSE           reduce using rule 14 (statement -> continue_statement .)
    WHILE           reduce using rule 14 (statement -> continue_statement .)
    DO              reduce using rule 14 (statement -> continue_statement .)
    FOR             reduce using rule 14 (statement -> continue_statement .)
    FOREACH         reduce using rule 14 (statement -> continue_statement .)
    BREAK           reduce using rule 14 (statement -> continue_statement .)
    CONTINUE        reduce using rule 14 (statement -> continue_statement .)
    RETURN          reduce using rule 14 (statement -> continue_statement .)
    ID              reduce using rule 14 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 14 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 14 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 14 (statement -> continue_statement .)
    IF              reduce using rule 14 (statement -> continue_statement .)
    DOLAR           reduce using rule 14 (statement -> continue_statement .)
    VARIABLE        reduce using rule 14 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 14 (statement -> continue_statement .)
    RKEY            reduce using rule 14 (statement -> continue_statement .)
    ELSEIF          reduce using rule 14 (statement -> continue_statement .)
    ELSE            reduce using rule 14 (statement -> continue_statement .)


state 17

    (15) statement -> return_statement .

    FUNCTION        reduce using rule 15 (statement -> return_statement .)
    GLOBAL          reduce using rule 15 (statement -> return_statement .)
    INCREMENT       reduce using rule 15 (statement -> return_statement .)
    DECREMENT       reduce using rule 15 (statement -> return_statement .)
    LPAREN          reduce using rule 15 (statement -> return_statement .)
    MINUS           reduce using rule 15 (statement -> return_statement .)
    EXIT            reduce using rule 15 (statement -> return_statement .)
    DIE             reduce using rule 15 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 15 (statement -> return_statement .)
    TRUE            reduce using rule 15 (statement -> return_statement .)
    FALSE           reduce using rule 15 (statement -> return_statement .)
    WHILE           reduce using rule 15 (statement -> return_statement .)
    DO              reduce using rule 15 (statement -> return_statement .)
    FOR             reduce using rule 15 (statement -> return_statement .)
    FOREACH         reduce using rule 15 (statement -> return_statement .)
    BREAK           reduce using rule 15 (statement -> return_statement .)
    CONTINUE        reduce using rule 15 (statement -> return_statement .)
    RETURN          reduce using rule 15 (statement -> return_statement .)
    ID              reduce using rule 15 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 15 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 15 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 15 (statement -> return_statement .)
    IF              reduce using rule 15 (statement -> return_statement .)
    DOLAR           reduce using rule 15 (statement -> return_statement .)
    VARIABLE        reduce using rule 15 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 15 (statement -> return_statement .)
    RKEY            reduce using rule 15 (statement -> return_statement .)
    ELSEIF          reduce using rule 15 (statement -> return_statement .)
    ELSE            reduce using rule 15 (statement -> return_statement .)


state 18

    (16) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> GLOBAL . global_var SEMICOLON
    (40) global_var -> . VARIABLE
    (41) global_var -> . DOLAR VARIABLE
    (42) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 74
    DOLAR           shift and go to state 75

    global_var                     shift and go to state 73

state 19

    (96) expr -> INCREMENT . variable
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    variable                       shift and go to state 76
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 20

    (97) expr -> variable . INCREMENT
    (99) expr -> variable . DECREMENT
    (100) expr -> variable . assign_operator expr
    (101) expr -> variable . assign_operator AMPERSAND expr
    (102) expr -> variable .
    (75) assign_operator -> . ADD_ASSIGN
    (76) assign_operator -> . SUB_ASSIGN
    (77) assign_operator -> . MOD_ASSIGN
    (78) assign_operator -> . PLUS_ASSIGN
    (79) assign_operator -> . DIVIDE_ASSIGN
    (80) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 77
    DECREMENT       shift and go to state 78
    SEMICOLON       reduce using rule 102 (expr -> variable .)
    INTE_DOT        reduce using rule 102 (expr -> variable .)
    EQUALS          reduce using rule 102 (expr -> variable .)
    GREAT_THAN      reduce using rule 102 (expr -> variable .)
    LESS_THAN       reduce using rule 102 (expr -> variable .)
    LESS_EQUAL      reduce using rule 102 (expr -> variable .)
    GREAT_EQUAL     reduce using rule 102 (expr -> variable .)
    NOT_EQUAL       reduce using rule 102 (expr -> variable .)
    LEFT_LOGICAL    reduce using rule 102 (expr -> variable .)
    RIGHT_LOGICAL   reduce using rule 102 (expr -> variable .)
    AND             reduce using rule 102 (expr -> variable .)
    OR              reduce using rule 102 (expr -> variable .)
    PLUS            reduce using rule 102 (expr -> variable .)
    DIVIDE          reduce using rule 102 (expr -> variable .)
    PERCENT         reduce using rule 102 (expr -> variable .)
    TIMES           reduce using rule 102 (expr -> variable .)
    MINUS           reduce using rule 102 (expr -> variable .)
    RPAREN          reduce using rule 102 (expr -> variable .)
    DDOT            reduce using rule 102 (expr -> variable .)
    ATTR_ASSOC      reduce using rule 102 (expr -> variable .)
    COLON           reduce using rule 102 (expr -> variable .)
    AS              reduce using rule 102 (expr -> variable .)
    RBRACKET        reduce using rule 102 (expr -> variable .)
    RKEY            reduce using rule 102 (expr -> variable .)
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 81
    MOD_ASSIGN      shift and go to state 82
    PLUS_ASSIGN     shift and go to state 83
    DIVIDE_ASSIGN   shift and go to state 84
    ASSIGN          shift and go to state 85

    assign_operator                shift and go to state 79

state 21

    (98) expr -> DECREMENT . variable
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    variable                       shift and go to state 86
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 22

    (103) expr -> LPAREN . expr RPAREN
    (108) expr -> LPAREN . type_cast_operator RPAREN expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (66) type_cast_operator -> . INT_TYPE
    (67) type_cast_operator -> . DOUBLE_TYPE
    (68) type_cast_operator -> . FLOAT_TYPE
    (69) type_cast_operator -> . REAL_TYPE
    (70) type_cast_operator -> . STRING_TYPE
    (71) type_cast_operator -> . ARRAY_TYPE
    (72) type_cast_operator -> . BOOLEAN_TYPE
    (73) type_cast_operator -> . BOOL_TYPE
    (74) type_cast_operator -> . UNSET
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 89
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    INT_TYPE        shift and go to state 90
    DOUBLE_TYPE     shift and go to state 91
    FLOAT_TYPE      shift and go to state 92
    REAL_TYPE       shift and go to state 93
    STRING_TYPE     shift and go to state 94
    BOOLEAN_TYPE    shift and go to state 95
    BOOL_TYPE       shift and go to state 96
    UNSET           shift and go to state 97
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 87
    type_cast_operator             shift and go to state 88
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 23

    (107) expr -> MINUS . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 98
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 24

    (109) expr -> EXIT . exit_expr
    (110) expr -> EXIT .
    (122) exit_expr -> . LPAREN expr RPAREN
    (123) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 110 (expr -> EXIT .)
    INTE_DOT        reduce using rule 110 (expr -> EXIT .)
    EQUALS          reduce using rule 110 (expr -> EXIT .)
    GREAT_THAN      reduce using rule 110 (expr -> EXIT .)
    LESS_THAN       reduce using rule 110 (expr -> EXIT .)
    LESS_EQUAL      reduce using rule 110 (expr -> EXIT .)
    GREAT_EQUAL     reduce using rule 110 (expr -> EXIT .)
    NOT_EQUAL       reduce using rule 110 (expr -> EXIT .)
    LEFT_LOGICAL    reduce using rule 110 (expr -> EXIT .)
    RIGHT_LOGICAL   reduce using rule 110 (expr -> EXIT .)
    AND             reduce using rule 110 (expr -> EXIT .)
    OR              reduce using rule 110 (expr -> EXIT .)
    PLUS            reduce using rule 110 (expr -> EXIT .)
    DIVIDE          reduce using rule 110 (expr -> EXIT .)
    PERCENT         reduce using rule 110 (expr -> EXIT .)
    TIMES           reduce using rule 110 (expr -> EXIT .)
    MINUS           reduce using rule 110 (expr -> EXIT .)
    RPAREN          reduce using rule 110 (expr -> EXIT .)
    DDOT            reduce using rule 110 (expr -> EXIT .)
    ATTR_ASSOC      reduce using rule 110 (expr -> EXIT .)
    COLON           reduce using rule 110 (expr -> EXIT .)
    AS              reduce using rule 110 (expr -> EXIT .)
    RBRACKET        reduce using rule 110 (expr -> EXIT .)
    RKEY            reduce using rule 110 (expr -> EXIT .)
    LPAREN          shift and go to state 100

    exit_expr                      shift and go to state 99

state 25

    (111) expr -> DIE . exit_expr
    (112) expr -> DIE .
    (122) exit_expr -> . LPAREN expr RPAREN
    (123) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 112 (expr -> DIE .)
    INTE_DOT        reduce using rule 112 (expr -> DIE .)
    EQUALS          reduce using rule 112 (expr -> DIE .)
    GREAT_THAN      reduce using rule 112 (expr -> DIE .)
    LESS_THAN       reduce using rule 112 (expr -> DIE .)
    LESS_EQUAL      reduce using rule 112 (expr -> DIE .)
    GREAT_EQUAL     reduce using rule 112 (expr -> DIE .)
    NOT_EQUAL       reduce using rule 112 (expr -> DIE .)
    LEFT_LOGICAL    reduce using rule 112 (expr -> DIE .)
    RIGHT_LOGICAL   reduce using rule 112 (expr -> DIE .)
    AND             reduce using rule 112 (expr -> DIE .)
    OR              reduce using rule 112 (expr -> DIE .)
    PLUS            reduce using rule 112 (expr -> DIE .)
    DIVIDE          reduce using rule 112 (expr -> DIE .)
    PERCENT         reduce using rule 112 (expr -> DIE .)
    TIMES           reduce using rule 112 (expr -> DIE .)
    MINUS           reduce using rule 112 (expr -> DIE .)
    RPAREN          reduce using rule 112 (expr -> DIE .)
    DDOT            reduce using rule 112 (expr -> DIE .)
    ATTR_ASSOC      reduce using rule 112 (expr -> DIE .)
    COLON           reduce using rule 112 (expr -> DIE .)
    AS              reduce using rule 112 (expr -> DIE .)
    RBRACKET        reduce using rule 112 (expr -> DIE .)
    RKEY            reduce using rule 112 (expr -> DIE .)
    LPAREN          shift and go to state 100

    exit_expr                      shift and go to state 101

state 26

    (113) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (114) expr -> ARRAY_TYPE . LPAREN RPAREN

    LPAREN          shift and go to state 102


state 27

    (115) expr -> function_call .

    SEMICOLON       reduce using rule 115 (expr -> function_call .)
    INTE_DOT        reduce using rule 115 (expr -> function_call .)
    EQUALS          reduce using rule 115 (expr -> function_call .)
    GREAT_THAN      reduce using rule 115 (expr -> function_call .)
    LESS_THAN       reduce using rule 115 (expr -> function_call .)
    LESS_EQUAL      reduce using rule 115 (expr -> function_call .)
    GREAT_EQUAL     reduce using rule 115 (expr -> function_call .)
    NOT_EQUAL       reduce using rule 115 (expr -> function_call .)
    LEFT_LOGICAL    reduce using rule 115 (expr -> function_call .)
    RIGHT_LOGICAL   reduce using rule 115 (expr -> function_call .)
    AND             reduce using rule 115 (expr -> function_call .)
    OR              reduce using rule 115 (expr -> function_call .)
    PLUS            reduce using rule 115 (expr -> function_call .)
    DIVIDE          reduce using rule 115 (expr -> function_call .)
    PERCENT         reduce using rule 115 (expr -> function_call .)
    TIMES           reduce using rule 115 (expr -> function_call .)
    MINUS           reduce using rule 115 (expr -> function_call .)
    RPAREN          reduce using rule 115 (expr -> function_call .)
    DDOT            reduce using rule 115 (expr -> function_call .)
    ATTR_ASSOC      reduce using rule 115 (expr -> function_call .)
    COLON           reduce using rule 115 (expr -> function_call .)
    AS              reduce using rule 115 (expr -> function_call .)
    RBRACKET        reduce using rule 115 (expr -> function_call .)
    RKEY            reduce using rule 115 (expr -> function_call .)


state 28

    (116) expr -> scalar .

    SEMICOLON       reduce using rule 116 (expr -> scalar .)
    INTE_DOT        reduce using rule 116 (expr -> scalar .)
    EQUALS          reduce using rule 116 (expr -> scalar .)
    GREAT_THAN      reduce using rule 116 (expr -> scalar .)
    LESS_THAN       reduce using rule 116 (expr -> scalar .)
    LESS_EQUAL      reduce using rule 116 (expr -> scalar .)
    GREAT_EQUAL     reduce using rule 116 (expr -> scalar .)
    NOT_EQUAL       reduce using rule 116 (expr -> scalar .)
    LEFT_LOGICAL    reduce using rule 116 (expr -> scalar .)
    RIGHT_LOGICAL   reduce using rule 116 (expr -> scalar .)
    AND             reduce using rule 116 (expr -> scalar .)
    OR              reduce using rule 116 (expr -> scalar .)
    PLUS            reduce using rule 116 (expr -> scalar .)
    DIVIDE          reduce using rule 116 (expr -> scalar .)
    PERCENT         reduce using rule 116 (expr -> scalar .)
    TIMES           reduce using rule 116 (expr -> scalar .)
    MINUS           reduce using rule 116 (expr -> scalar .)
    RPAREN          reduce using rule 116 (expr -> scalar .)
    DDOT            reduce using rule 116 (expr -> scalar .)
    ATTR_ASSOC      reduce using rule 116 (expr -> scalar .)
    COLON           reduce using rule 116 (expr -> scalar .)
    AS              reduce using rule 116 (expr -> scalar .)
    RBRACKET        reduce using rule 116 (expr -> scalar .)
    RKEY            reduce using rule 116 (expr -> scalar .)


state 29

    (117) expr -> TRUE .

    SEMICOLON       reduce using rule 117 (expr -> TRUE .)
    INTE_DOT        reduce using rule 117 (expr -> TRUE .)
    EQUALS          reduce using rule 117 (expr -> TRUE .)
    GREAT_THAN      reduce using rule 117 (expr -> TRUE .)
    LESS_THAN       reduce using rule 117 (expr -> TRUE .)
    LESS_EQUAL      reduce using rule 117 (expr -> TRUE .)
    GREAT_EQUAL     reduce using rule 117 (expr -> TRUE .)
    NOT_EQUAL       reduce using rule 117 (expr -> TRUE .)
    LEFT_LOGICAL    reduce using rule 117 (expr -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 117 (expr -> TRUE .)
    AND             reduce using rule 117 (expr -> TRUE .)
    OR              reduce using rule 117 (expr -> TRUE .)
    PLUS            reduce using rule 117 (expr -> TRUE .)
    DIVIDE          reduce using rule 117 (expr -> TRUE .)
    PERCENT         reduce using rule 117 (expr -> TRUE .)
    TIMES           reduce using rule 117 (expr -> TRUE .)
    MINUS           reduce using rule 117 (expr -> TRUE .)
    RPAREN          reduce using rule 117 (expr -> TRUE .)
    DDOT            reduce using rule 117 (expr -> TRUE .)
    ATTR_ASSOC      reduce using rule 117 (expr -> TRUE .)
    COLON           reduce using rule 117 (expr -> TRUE .)
    AS              reduce using rule 117 (expr -> TRUE .)
    RBRACKET        reduce using rule 117 (expr -> TRUE .)
    RKEY            reduce using rule 117 (expr -> TRUE .)


state 30

    (118) expr -> FALSE .

    SEMICOLON       reduce using rule 118 (expr -> FALSE .)
    INTE_DOT        reduce using rule 118 (expr -> FALSE .)
    EQUALS          reduce using rule 118 (expr -> FALSE .)
    GREAT_THAN      reduce using rule 118 (expr -> FALSE .)
    LESS_THAN       reduce using rule 118 (expr -> FALSE .)
    LESS_EQUAL      reduce using rule 118 (expr -> FALSE .)
    GREAT_EQUAL     reduce using rule 118 (expr -> FALSE .)
    NOT_EQUAL       reduce using rule 118 (expr -> FALSE .)
    LEFT_LOGICAL    reduce using rule 118 (expr -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 118 (expr -> FALSE .)
    AND             reduce using rule 118 (expr -> FALSE .)
    OR              reduce using rule 118 (expr -> FALSE .)
    PLUS            reduce using rule 118 (expr -> FALSE .)
    DIVIDE          reduce using rule 118 (expr -> FALSE .)
    PERCENT         reduce using rule 118 (expr -> FALSE .)
    TIMES           reduce using rule 118 (expr -> FALSE .)
    MINUS           reduce using rule 118 (expr -> FALSE .)
    RPAREN          reduce using rule 118 (expr -> FALSE .)
    DDOT            reduce using rule 118 (expr -> FALSE .)
    ATTR_ASSOC      reduce using rule 118 (expr -> FALSE .)
    COLON           reduce using rule 118 (expr -> FALSE .)
    AS              reduce using rule 118 (expr -> FALSE .)
    RBRACKET        reduce using rule 118 (expr -> FALSE .)
    RKEY            reduce using rule 118 (expr -> FALSE .)


state 31

    (18) if_statement -> statement_if . if_statement_complement
    (19) if_statement -> statement_if .
    (20) if_statement_complement -> . statement_elseif
    (21) if_statement_complement -> . statement_elseif statement_else
    (22) if_statement_complement -> . statement_else
    (49) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT
    (50) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 19 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 19 (if_statement -> statement_if .)
    INCREMENT       reduce using rule 19 (if_statement -> statement_if .)
    DECREMENT       reduce using rule 19 (if_statement -> statement_if .)
    LPAREN          reduce using rule 19 (if_statement -> statement_if .)
    MINUS           reduce using rule 19 (if_statement -> statement_if .)
    EXIT            reduce using rule 19 (if_statement -> statement_if .)
    DIE             reduce using rule 19 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 19 (if_statement -> statement_if .)
    TRUE            reduce using rule 19 (if_statement -> statement_if .)
    FALSE           reduce using rule 19 (if_statement -> statement_if .)
    WHILE           reduce using rule 19 (if_statement -> statement_if .)
    DO              reduce using rule 19 (if_statement -> statement_if .)
    FOR             reduce using rule 19 (if_statement -> statement_if .)
    FOREACH         reduce using rule 19 (if_statement -> statement_if .)
    BREAK           reduce using rule 19 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 19 (if_statement -> statement_if .)
    RETURN          reduce using rule 19 (if_statement -> statement_if .)
    ID              reduce using rule 19 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 19 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 19 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 19 (if_statement -> statement_if .)
    IF              reduce using rule 19 (if_statement -> statement_if .)
    DOLAR           reduce using rule 19 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 19 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 19 (if_statement -> statement_if .)
    RKEY            reduce using rule 19 (if_statement -> statement_if .)
    ELSEIF          shift and go to state 106
    ELSE            shift and go to state 107

  ! ELSEIF          [ reduce using rule 19 (if_statement -> statement_if .) ]
  ! ELSE            [ reduce using rule 19 (if_statement -> statement_if .) ]

    if_statement_complement        shift and go to state 103
    statement_elseif               shift and go to state 104
    statement_else                 shift and go to state 105

state 32

    (23) while_statement -> WHILE . expr_parentheses statement_BLOCK_OPT
    (47) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 109

    expr_parentheses               shift and go to state 108

state 33

    (24) do_statement -> DO . statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (174) statement_BLOCK_OPT -> . statement
    (175) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (176) statement_BLOCK_OPT -> . LKEY RKEY
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 112
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    statement_BLOCK_OPT            shift and go to state 110
    statement                      shift and go to state 111
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 34

    (31) for_statement -> FOR . LPAREN for_parameters RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 113


state 35

    (51) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 114


state 36

    (25) break_statement -> BREAK . expr SEMICOLON
    (26) break_statement -> BREAK . SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 116
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 115
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 37

    (27) continue_statement -> CONTINUE . expr SEMICOLON
    (28) continue_statement -> CONTINUE . SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 118
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 117
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 38

    (29) return_statement -> RETURN . expr SEMICOLON
    (30) return_statement -> RETURN . SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 120
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 119
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 39

    (124) variable -> reference_variable .

    INCREMENT       reduce using rule 124 (variable -> reference_variable .)
    DECREMENT       reduce using rule 124 (variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 124 (variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 124 (variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 124 (variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 124 (variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 124 (variable -> reference_variable .)
    ASSIGN          reduce using rule 124 (variable -> reference_variable .)
    SEMICOLON       reduce using rule 124 (variable -> reference_variable .)
    INTE_DOT        reduce using rule 124 (variable -> reference_variable .)
    EQUALS          reduce using rule 124 (variable -> reference_variable .)
    GREAT_THAN      reduce using rule 124 (variable -> reference_variable .)
    LESS_THAN       reduce using rule 124 (variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 124 (variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 124 (variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 124 (variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 124 (variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 124 (variable -> reference_variable .)
    AND             reduce using rule 124 (variable -> reference_variable .)
    OR              reduce using rule 124 (variable -> reference_variable .)
    PLUS            reduce using rule 124 (variable -> reference_variable .)
    DIVIDE          reduce using rule 124 (variable -> reference_variable .)
    PERCENT         reduce using rule 124 (variable -> reference_variable .)
    TIMES           reduce using rule 124 (variable -> reference_variable .)
    MINUS           reduce using rule 124 (variable -> reference_variable .)
    RPAREN          reduce using rule 124 (variable -> reference_variable .)
    DDOT            reduce using rule 124 (variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 124 (variable -> reference_variable .)
    COLON           reduce using rule 124 (variable -> reference_variable .)
    AS              reduce using rule 124 (variable -> reference_variable .)
    RBRACKET        reduce using rule 124 (variable -> reference_variable .)
    RKEY            reduce using rule 124 (variable -> reference_variable .)


state 40

    (125) variable -> simple_indirect_reference_DOLAR . reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 48
    DOLAR           shift and go to state 122

    reference_variable             shift and go to state 121
    compound_variable              shift and go to state 46

state 41

    (55) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (56) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 123


state 42

    (119) scalar -> NUMBER_REAL .

    SEMICOLON       reduce using rule 119 (scalar -> NUMBER_REAL .)
    INTE_DOT        reduce using rule 119 (scalar -> NUMBER_REAL .)
    EQUALS          reduce using rule 119 (scalar -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 119 (scalar -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 119 (scalar -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 119 (scalar -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 119 (scalar -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 119 (scalar -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 119 (scalar -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 119 (scalar -> NUMBER_REAL .)
    AND             reduce using rule 119 (scalar -> NUMBER_REAL .)
    OR              reduce using rule 119 (scalar -> NUMBER_REAL .)
    PLUS            reduce using rule 119 (scalar -> NUMBER_REAL .)
    DIVIDE          reduce using rule 119 (scalar -> NUMBER_REAL .)
    PERCENT         reduce using rule 119 (scalar -> NUMBER_REAL .)
    TIMES           reduce using rule 119 (scalar -> NUMBER_REAL .)
    MINUS           reduce using rule 119 (scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 119 (scalar -> NUMBER_REAL .)
    DDOT            reduce using rule 119 (scalar -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 119 (scalar -> NUMBER_REAL .)
    COLON           reduce using rule 119 (scalar -> NUMBER_REAL .)
    AS              reduce using rule 119 (scalar -> NUMBER_REAL .)
    RBRACKET        reduce using rule 119 (scalar -> NUMBER_REAL .)
    RKEY            reduce using rule 119 (scalar -> NUMBER_REAL .)


state 43

    (120) scalar -> NUMBER_INTEGER .

    SEMICOLON       reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    INTE_DOT        reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    AND             reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    OR              reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    PLUS            reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    TIMES           reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    MINUS           reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    DDOT            reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    COLON           reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    AS              reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 120 (scalar -> NUMBER_INTEGER .)
    RKEY            reduce using rule 120 (scalar -> NUMBER_INTEGER .)


state 44

    (121) scalar -> CONSTANT_ENCAPSED_STRING .

    SEMICOLON       reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    INTE_DOT        reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 121 (scalar -> CONSTANT_ENCAPSED_STRING .)


state 45

    (48) statement_if -> IF . expr_parentheses statement_BLOCK_OPT
    (47) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 109

    expr_parentheses               shift and go to state 124

state 46

    (126) reference_variable -> compound_variable . reference_variable_SELECTOR
    (127) reference_variable -> compound_variable .
    (183) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (184) reference_variable_SELECTOR -> . selector
    (130) selector -> . LBRACKET expr RBRACKET
    (131) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 127 (reference_variable -> compound_variable .)
    DECREMENT       reduce using rule 127 (reference_variable -> compound_variable .)
    ADD_ASSIGN      reduce using rule 127 (reference_variable -> compound_variable .)
    SUB_ASSIGN      reduce using rule 127 (reference_variable -> compound_variable .)
    MOD_ASSIGN      reduce using rule 127 (reference_variable -> compound_variable .)
    PLUS_ASSIGN     reduce using rule 127 (reference_variable -> compound_variable .)
    DIVIDE_ASSIGN   reduce using rule 127 (reference_variable -> compound_variable .)
    ASSIGN          reduce using rule 127 (reference_variable -> compound_variable .)
    SEMICOLON       reduce using rule 127 (reference_variable -> compound_variable .)
    INTE_DOT        reduce using rule 127 (reference_variable -> compound_variable .)
    EQUALS          reduce using rule 127 (reference_variable -> compound_variable .)
    GREAT_THAN      reduce using rule 127 (reference_variable -> compound_variable .)
    LESS_THAN       reduce using rule 127 (reference_variable -> compound_variable .)
    LESS_EQUAL      reduce using rule 127 (reference_variable -> compound_variable .)
    GREAT_EQUAL     reduce using rule 127 (reference_variable -> compound_variable .)
    NOT_EQUAL       reduce using rule 127 (reference_variable -> compound_variable .)
    LEFT_LOGICAL    reduce using rule 127 (reference_variable -> compound_variable .)
    RIGHT_LOGICAL   reduce using rule 127 (reference_variable -> compound_variable .)
    AND             reduce using rule 127 (reference_variable -> compound_variable .)
    OR              reduce using rule 127 (reference_variable -> compound_variable .)
    PLUS            reduce using rule 127 (reference_variable -> compound_variable .)
    DIVIDE          reduce using rule 127 (reference_variable -> compound_variable .)
    PERCENT         reduce using rule 127 (reference_variable -> compound_variable .)
    TIMES           reduce using rule 127 (reference_variable -> compound_variable .)
    MINUS           reduce using rule 127 (reference_variable -> compound_variable .)
    RPAREN          reduce using rule 127 (reference_variable -> compound_variable .)
    DDOT            reduce using rule 127 (reference_variable -> compound_variable .)
    ATTR_ASSOC      reduce using rule 127 (reference_variable -> compound_variable .)
    COLON           reduce using rule 127 (reference_variable -> compound_variable .)
    AS              reduce using rule 127 (reference_variable -> compound_variable .)
    RBRACKET        reduce using rule 127 (reference_variable -> compound_variable .)
    RKEY            reduce using rule 127 (reference_variable -> compound_variable .)
    LBRACKET        shift and go to state 127

    reference_variable_SELECTOR    shift and go to state 125
    selector                       shift and go to state 126

state 47

    (185) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> DOLAR .
    (129) compound_variable -> DOLAR . LKEY expr RKEY
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR .)
    LKEY            shift and go to state 130
    DOLAR           shift and go to state 128

  ! DOLAR           [ reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 129

state 48

    (128) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 128 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 128 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 128 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 128 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 128 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 128 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 128 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 128 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 128 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 128 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 128 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 128 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 128 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 128 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 128 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 128 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 128 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 128 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 128 (compound_variable -> VARIABLE .)
    AND             reduce using rule 128 (compound_variable -> VARIABLE .)
    OR              reduce using rule 128 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 128 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 128 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 128 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 128 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 128 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 128 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 128 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 128 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 128 (compound_variable -> VARIABLE .)
    AS              reduce using rule 128 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 128 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 128 (compound_variable -> VARIABLE .)


state 49

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 50

    (3) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 3 (main_INNER -> inner_statement main_INNER .)


state 51

    (132) function_declaration_statement -> FUNCTION fds_id . fds_parameter fds_statements
    (137) fds_parameter -> . LPAREN parameter_list RPAREN
    (138) fds_parameter -> . LPAREN RPAREN

    LPAREN          shift and go to state 132

    fds_parameter                  shift and go to state 131

state 52

    (135) fds_id -> AMPERSAND . ID

    ID              shift and go to state 133


state 53

    (136) fds_id -> ID .

    LPAREN          reduce using rule 136 (fds_id -> ID .)


state 54

    (7) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 7 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 7 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 7 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 7 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 7 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 7 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 7 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 7 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 7 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 7 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 7 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> expr SEMICOLON .)
    DO              reduce using rule 7 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 7 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 7 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 7 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> expr SEMICOLON .)
    ID              reduce using rule 7 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 7 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (statement -> expr SEMICOLON .)
    IF              reduce using rule 7 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 7 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 7 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 7 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 7 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 7 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> expr SEMICOLON .)


state 55

    (104) expr -> expr INTE_DOT . expr DDOT expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 134
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 56

    (105) expr -> expr comparission_operator . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 135
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 57

    (106) expr -> expr arithmetic_operator . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 136
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 58

    (86) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 86 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 86 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 86 (comparission_operator -> EQUALS .)
    MINUS           reduce using rule 86 (comparission_operator -> EQUALS .)
    EXIT            reduce using rule 86 (comparission_operator -> EQUALS .)
    DIE             reduce using rule 86 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 86 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 86 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 86 (comparission_operator -> EQUALS .)
    ID              reduce using rule 86 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 86 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 86 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 86 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 86 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 86 (comparission_operator -> EQUALS .)


state 59

    (87) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    MINUS           reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    EXIT            reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    DIE             reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 87 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 87 (comparission_operator -> GREAT_THAN .)


state 60

    (88) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 88 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 88 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 88 (comparission_operator -> LESS_THAN .)
    MINUS           reduce using rule 88 (comparission_operator -> LESS_THAN .)
    EXIT            reduce using rule 88 (comparission_operator -> LESS_THAN .)
    DIE             reduce using rule 88 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 88 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 88 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 88 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 88 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 88 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 88 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 88 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 88 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 88 (comparission_operator -> LESS_THAN .)


state 61

    (89) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    MINUS           reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    EXIT            reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    DIE             reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 89 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 89 (comparission_operator -> LESS_EQUAL .)


state 62

    (90) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    MINUS           reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    EXIT            reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    DIE             reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 90 (comparission_operator -> GREAT_EQUAL .)


state 63

    (91) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    MINUS           reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    EXIT            reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    DIE             reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 91 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 91 (comparission_operator -> NOT_EQUAL .)


state 64

    (92) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    MINUS           reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    EXIT            reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    DIE             reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 92 (comparission_operator -> LEFT_LOGICAL .)


state 65

    (93) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    MINUS           reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    EXIT            reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    DIE             reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 93 (comparission_operator -> RIGHT_LOGICAL .)


state 66

    (94) comparission_operator -> AND .

    INCREMENT       reduce using rule 94 (comparission_operator -> AND .)
    DECREMENT       reduce using rule 94 (comparission_operator -> AND .)
    LPAREN          reduce using rule 94 (comparission_operator -> AND .)
    MINUS           reduce using rule 94 (comparission_operator -> AND .)
    EXIT            reduce using rule 94 (comparission_operator -> AND .)
    DIE             reduce using rule 94 (comparission_operator -> AND .)
    ARRAY_TYPE      reduce using rule 94 (comparission_operator -> AND .)
    TRUE            reduce using rule 94 (comparission_operator -> AND .)
    FALSE           reduce using rule 94 (comparission_operator -> AND .)
    ID              reduce using rule 94 (comparission_operator -> AND .)
    NUMBER_REAL     reduce using rule 94 (comparission_operator -> AND .)
    NUMBER_INTEGER  reduce using rule 94 (comparission_operator -> AND .)
    CONSTANT_ENCAPSED_STRING reduce using rule 94 (comparission_operator -> AND .)
    DOLAR           reduce using rule 94 (comparission_operator -> AND .)
    VARIABLE        reduce using rule 94 (comparission_operator -> AND .)


state 67

    (95) comparission_operator -> OR .

    INCREMENT       reduce using rule 95 (comparission_operator -> OR .)
    DECREMENT       reduce using rule 95 (comparission_operator -> OR .)
    LPAREN          reduce using rule 95 (comparission_operator -> OR .)
    MINUS           reduce using rule 95 (comparission_operator -> OR .)
    EXIT            reduce using rule 95 (comparission_operator -> OR .)
    DIE             reduce using rule 95 (comparission_operator -> OR .)
    ARRAY_TYPE      reduce using rule 95 (comparission_operator -> OR .)
    TRUE            reduce using rule 95 (comparission_operator -> OR .)
    FALSE           reduce using rule 95 (comparission_operator -> OR .)
    ID              reduce using rule 95 (comparission_operator -> OR .)
    NUMBER_REAL     reduce using rule 95 (comparission_operator -> OR .)
    NUMBER_INTEGER  reduce using rule 95 (comparission_operator -> OR .)
    CONSTANT_ENCAPSED_STRING reduce using rule 95 (comparission_operator -> OR .)
    DOLAR           reduce using rule 95 (comparission_operator -> OR .)
    VARIABLE        reduce using rule 95 (comparission_operator -> OR .)


state 68

    (81) arithmetic_operator -> PLUS .

    INCREMENT       reduce using rule 81 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 81 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 81 (arithmetic_operator -> PLUS .)
    MINUS           reduce using rule 81 (arithmetic_operator -> PLUS .)
    EXIT            reduce using rule 81 (arithmetic_operator -> PLUS .)
    DIE             reduce using rule 81 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 81 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 81 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 81 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 81 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 81 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 81 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 81 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 81 (arithmetic_operator -> PLUS .)


state 69

    (82) arithmetic_operator -> DIVIDE .

    INCREMENT       reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    MINUS           reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    EXIT            reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    DIE             reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 82 (arithmetic_operator -> DIVIDE .)


state 70

    (83) arithmetic_operator -> PERCENT .

    INCREMENT       reduce using rule 83 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 83 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 83 (arithmetic_operator -> PERCENT .)
    MINUS           reduce using rule 83 (arithmetic_operator -> PERCENT .)
    EXIT            reduce using rule 83 (arithmetic_operator -> PERCENT .)
    DIE             reduce using rule 83 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 83 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 83 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 83 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 83 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 83 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 83 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 83 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 83 (arithmetic_operator -> PERCENT .)


state 71

    (84) arithmetic_operator -> TIMES .

    INCREMENT       reduce using rule 84 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 84 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 84 (arithmetic_operator -> TIMES .)
    MINUS           reduce using rule 84 (arithmetic_operator -> TIMES .)
    EXIT            reduce using rule 84 (arithmetic_operator -> TIMES .)
    DIE             reduce using rule 84 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 84 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 84 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 84 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 84 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 84 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 84 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 84 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 84 (arithmetic_operator -> TIMES .)


state 72

    (85) arithmetic_operator -> MINUS .

    INCREMENT       reduce using rule 85 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 85 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 85 (arithmetic_operator -> MINUS .)
    MINUS           reduce using rule 85 (arithmetic_operator -> MINUS .)
    EXIT            reduce using rule 85 (arithmetic_operator -> MINUS .)
    DIE             reduce using rule 85 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 85 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 85 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 85 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 85 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 85 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 85 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 85 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 85 (arithmetic_operator -> MINUS .)


state 73

    (16) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (17) statement -> GLOBAL global_var . SEMICOLON
    (43) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (44) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       shift and go to state 138
    COLON           shift and go to state 139

    statement_COLON_GLOBAL         shift and go to state 137

state 74

    (40) global_var -> VARIABLE .

    SEMICOLON       reduce using rule 40 (global_var -> VARIABLE .)
    COLON           reduce using rule 40 (global_var -> VARIABLE .)


state 75

    (41) global_var -> DOLAR . VARIABLE
    (42) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 140
    LKEY            shift and go to state 141


state 76

    (96) expr -> INCREMENT variable .

    SEMICOLON       reduce using rule 96 (expr -> INCREMENT variable .)
    INTE_DOT        reduce using rule 96 (expr -> INCREMENT variable .)
    EQUALS          reduce using rule 96 (expr -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 96 (expr -> INCREMENT variable .)
    LESS_THAN       reduce using rule 96 (expr -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 96 (expr -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 96 (expr -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 96 (expr -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 96 (expr -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 96 (expr -> INCREMENT variable .)
    AND             reduce using rule 96 (expr -> INCREMENT variable .)
    OR              reduce using rule 96 (expr -> INCREMENT variable .)
    PLUS            reduce using rule 96 (expr -> INCREMENT variable .)
    DIVIDE          reduce using rule 96 (expr -> INCREMENT variable .)
    PERCENT         reduce using rule 96 (expr -> INCREMENT variable .)
    TIMES           reduce using rule 96 (expr -> INCREMENT variable .)
    MINUS           reduce using rule 96 (expr -> INCREMENT variable .)
    RPAREN          reduce using rule 96 (expr -> INCREMENT variable .)
    DDOT            reduce using rule 96 (expr -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 96 (expr -> INCREMENT variable .)
    COLON           reduce using rule 96 (expr -> INCREMENT variable .)
    AS              reduce using rule 96 (expr -> INCREMENT variable .)
    RBRACKET        reduce using rule 96 (expr -> INCREMENT variable .)
    RKEY            reduce using rule 96 (expr -> INCREMENT variable .)


state 77

    (97) expr -> variable INCREMENT .

    SEMICOLON       reduce using rule 97 (expr -> variable INCREMENT .)
    INTE_DOT        reduce using rule 97 (expr -> variable INCREMENT .)
    EQUALS          reduce using rule 97 (expr -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 97 (expr -> variable INCREMENT .)
    LESS_THAN       reduce using rule 97 (expr -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 97 (expr -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 97 (expr -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 97 (expr -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 97 (expr -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 97 (expr -> variable INCREMENT .)
    AND             reduce using rule 97 (expr -> variable INCREMENT .)
    OR              reduce using rule 97 (expr -> variable INCREMENT .)
    PLUS            reduce using rule 97 (expr -> variable INCREMENT .)
    DIVIDE          reduce using rule 97 (expr -> variable INCREMENT .)
    PERCENT         reduce using rule 97 (expr -> variable INCREMENT .)
    TIMES           reduce using rule 97 (expr -> variable INCREMENT .)
    MINUS           reduce using rule 97 (expr -> variable INCREMENT .)
    RPAREN          reduce using rule 97 (expr -> variable INCREMENT .)
    DDOT            reduce using rule 97 (expr -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 97 (expr -> variable INCREMENT .)
    COLON           reduce using rule 97 (expr -> variable INCREMENT .)
    AS              reduce using rule 97 (expr -> variable INCREMENT .)
    RBRACKET        reduce using rule 97 (expr -> variable INCREMENT .)
    RKEY            reduce using rule 97 (expr -> variable INCREMENT .)


state 78

    (99) expr -> variable DECREMENT .

    SEMICOLON       reduce using rule 99 (expr -> variable DECREMENT .)
    INTE_DOT        reduce using rule 99 (expr -> variable DECREMENT .)
    EQUALS          reduce using rule 99 (expr -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 99 (expr -> variable DECREMENT .)
    LESS_THAN       reduce using rule 99 (expr -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 99 (expr -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 99 (expr -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 99 (expr -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 99 (expr -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 99 (expr -> variable DECREMENT .)
    AND             reduce using rule 99 (expr -> variable DECREMENT .)
    OR              reduce using rule 99 (expr -> variable DECREMENT .)
    PLUS            reduce using rule 99 (expr -> variable DECREMENT .)
    DIVIDE          reduce using rule 99 (expr -> variable DECREMENT .)
    PERCENT         reduce using rule 99 (expr -> variable DECREMENT .)
    TIMES           reduce using rule 99 (expr -> variable DECREMENT .)
    MINUS           reduce using rule 99 (expr -> variable DECREMENT .)
    RPAREN          reduce using rule 99 (expr -> variable DECREMENT .)
    DDOT            reduce using rule 99 (expr -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 99 (expr -> variable DECREMENT .)
    COLON           reduce using rule 99 (expr -> variable DECREMENT .)
    AS              reduce using rule 99 (expr -> variable DECREMENT .)
    RBRACKET        reduce using rule 99 (expr -> variable DECREMENT .)
    RKEY            reduce using rule 99 (expr -> variable DECREMENT .)


state 79

    (100) expr -> variable assign_operator . expr
    (101) expr -> variable assign_operator . AMPERSAND expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 143
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    variable                       shift and go to state 20
    expr                           shift and go to state 142
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 80

    (75) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    EXIT            reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    DIE             reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 75 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 75 (assign_operator -> ADD_ASSIGN .)


state 81

    (76) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    EXIT            reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    DIE             reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 76 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 76 (assign_operator -> SUB_ASSIGN .)


state 82

    (77) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    EXIT            reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    DIE             reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 77 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 77 (assign_operator -> MOD_ASSIGN .)


state 83

    (78) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    EXIT            reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    DIE             reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 78 (assign_operator -> PLUS_ASSIGN .)


state 84

    (79) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    EXIT            reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    DIE             reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 79 (assign_operator -> DIVIDE_ASSIGN .)


state 85

    (80) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 80 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 80 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 80 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 80 (assign_operator -> ASSIGN .)
    MINUS           reduce using rule 80 (assign_operator -> ASSIGN .)
    EXIT            reduce using rule 80 (assign_operator -> ASSIGN .)
    DIE             reduce using rule 80 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 80 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 80 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 80 (assign_operator -> ASSIGN .)
    ID              reduce using rule 80 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 80 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 80 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 80 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 80 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 80 (assign_operator -> ASSIGN .)


state 86

    (98) expr -> DECREMENT variable .

    SEMICOLON       reduce using rule 98 (expr -> DECREMENT variable .)
    INTE_DOT        reduce using rule 98 (expr -> DECREMENT variable .)
    EQUALS          reduce using rule 98 (expr -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 98 (expr -> DECREMENT variable .)
    LESS_THAN       reduce using rule 98 (expr -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 98 (expr -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 98 (expr -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 98 (expr -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 98 (expr -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 98 (expr -> DECREMENT variable .)
    AND             reduce using rule 98 (expr -> DECREMENT variable .)
    OR              reduce using rule 98 (expr -> DECREMENT variable .)
    PLUS            reduce using rule 98 (expr -> DECREMENT variable .)
    DIVIDE          reduce using rule 98 (expr -> DECREMENT variable .)
    PERCENT         reduce using rule 98 (expr -> DECREMENT variable .)
    TIMES           reduce using rule 98 (expr -> DECREMENT variable .)
    MINUS           reduce using rule 98 (expr -> DECREMENT variable .)
    RPAREN          reduce using rule 98 (expr -> DECREMENT variable .)
    DDOT            reduce using rule 98 (expr -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 98 (expr -> DECREMENT variable .)
    COLON           reduce using rule 98 (expr -> DECREMENT variable .)
    AS              reduce using rule 98 (expr -> DECREMENT variable .)
    RBRACKET        reduce using rule 98 (expr -> DECREMENT variable .)
    RKEY            reduce using rule 98 (expr -> DECREMENT variable .)


state 87

    (103) expr -> LPAREN expr . RPAREN
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 144
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 88

    (108) expr -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 145


state 89

    (113) expr -> ARRAY_TYPE . LPAREN array_pair_list RPAREN
    (114) expr -> ARRAY_TYPE . LPAREN RPAREN
    (71) type_cast_operator -> ARRAY_TYPE .

    LPAREN          shift and go to state 102
    RPAREN          reduce using rule 71 (type_cast_operator -> ARRAY_TYPE .)


state 90

    (66) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 66 (type_cast_operator -> INT_TYPE .)


state 91

    (67) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 67 (type_cast_operator -> DOUBLE_TYPE .)


state 92

    (68) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 68 (type_cast_operator -> FLOAT_TYPE .)


state 93

    (69) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 69 (type_cast_operator -> REAL_TYPE .)


state 94

    (70) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 70 (type_cast_operator -> STRING_TYPE .)


state 95

    (72) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 72 (type_cast_operator -> BOOLEAN_TYPE .)


state 96

    (73) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 73 (type_cast_operator -> BOOL_TYPE .)


state 97

    (74) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 74 (type_cast_operator -> UNSET .)


state 98

    (107) expr -> MINUS expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 107 (expr -> MINUS expr .)
    INTE_DOT        reduce using rule 107 (expr -> MINUS expr .)
    EQUALS          reduce using rule 107 (expr -> MINUS expr .)
    GREAT_THAN      reduce using rule 107 (expr -> MINUS expr .)
    LESS_THAN       reduce using rule 107 (expr -> MINUS expr .)
    LESS_EQUAL      reduce using rule 107 (expr -> MINUS expr .)
    GREAT_EQUAL     reduce using rule 107 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 107 (expr -> MINUS expr .)
    LEFT_LOGICAL    reduce using rule 107 (expr -> MINUS expr .)
    RIGHT_LOGICAL   reduce using rule 107 (expr -> MINUS expr .)
    AND             reduce using rule 107 (expr -> MINUS expr .)
    OR              reduce using rule 107 (expr -> MINUS expr .)
    PLUS            reduce using rule 107 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 107 (expr -> MINUS expr .)
    PERCENT         reduce using rule 107 (expr -> MINUS expr .)
    TIMES           reduce using rule 107 (expr -> MINUS expr .)
    MINUS           reduce using rule 107 (expr -> MINUS expr .)
    RPAREN          reduce using rule 107 (expr -> MINUS expr .)
    DDOT            reduce using rule 107 (expr -> MINUS expr .)
    ATTR_ASSOC      reduce using rule 107 (expr -> MINUS expr .)
    COLON           reduce using rule 107 (expr -> MINUS expr .)
    AS              reduce using rule 107 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 107 (expr -> MINUS expr .)
    RKEY            reduce using rule 107 (expr -> MINUS expr .)

  ! INTE_DOT        [ shift and go to state 55 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! GREAT_THAN      [ shift and go to state 59 ]
  ! LESS_THAN       [ shift and go to state 60 ]
  ! LESS_EQUAL      [ shift and go to state 61 ]
  ! GREAT_EQUAL     [ shift and go to state 62 ]
  ! NOT_EQUAL       [ shift and go to state 63 ]
  ! LEFT_LOGICAL    [ shift and go to state 64 ]
  ! RIGHT_LOGICAL   [ shift and go to state 65 ]
  ! AND             [ shift and go to state 66 ]
  ! OR              [ shift and go to state 67 ]
  ! PLUS            [ shift and go to state 68 ]
  ! DIVIDE          [ shift and go to state 69 ]
  ! PERCENT         [ shift and go to state 70 ]
  ! TIMES           [ shift and go to state 71 ]
  ! MINUS           [ shift and go to state 72 ]

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 99

    (109) expr -> EXIT exit_expr .

    SEMICOLON       reduce using rule 109 (expr -> EXIT exit_expr .)
    INTE_DOT        reduce using rule 109 (expr -> EXIT exit_expr .)
    EQUALS          reduce using rule 109 (expr -> EXIT exit_expr .)
    GREAT_THAN      reduce using rule 109 (expr -> EXIT exit_expr .)
    LESS_THAN       reduce using rule 109 (expr -> EXIT exit_expr .)
    LESS_EQUAL      reduce using rule 109 (expr -> EXIT exit_expr .)
    GREAT_EQUAL     reduce using rule 109 (expr -> EXIT exit_expr .)
    NOT_EQUAL       reduce using rule 109 (expr -> EXIT exit_expr .)
    LEFT_LOGICAL    reduce using rule 109 (expr -> EXIT exit_expr .)
    RIGHT_LOGICAL   reduce using rule 109 (expr -> EXIT exit_expr .)
    AND             reduce using rule 109 (expr -> EXIT exit_expr .)
    OR              reduce using rule 109 (expr -> EXIT exit_expr .)
    PLUS            reduce using rule 109 (expr -> EXIT exit_expr .)
    DIVIDE          reduce using rule 109 (expr -> EXIT exit_expr .)
    PERCENT         reduce using rule 109 (expr -> EXIT exit_expr .)
    TIMES           reduce using rule 109 (expr -> EXIT exit_expr .)
    MINUS           reduce using rule 109 (expr -> EXIT exit_expr .)
    RPAREN          reduce using rule 109 (expr -> EXIT exit_expr .)
    DDOT            reduce using rule 109 (expr -> EXIT exit_expr .)
    ATTR_ASSOC      reduce using rule 109 (expr -> EXIT exit_expr .)
    COLON           reduce using rule 109 (expr -> EXIT exit_expr .)
    AS              reduce using rule 109 (expr -> EXIT exit_expr .)
    RBRACKET        reduce using rule 109 (expr -> EXIT exit_expr .)
    RKEY            reduce using rule 109 (expr -> EXIT exit_expr .)


state 100

    (122) exit_expr -> LPAREN . expr RPAREN
    (123) exit_expr -> LPAREN . RPAREN
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 147
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 146
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 101

    (111) expr -> DIE exit_expr .

    SEMICOLON       reduce using rule 111 (expr -> DIE exit_expr .)
    INTE_DOT        reduce using rule 111 (expr -> DIE exit_expr .)
    EQUALS          reduce using rule 111 (expr -> DIE exit_expr .)
    GREAT_THAN      reduce using rule 111 (expr -> DIE exit_expr .)
    LESS_THAN       reduce using rule 111 (expr -> DIE exit_expr .)
    LESS_EQUAL      reduce using rule 111 (expr -> DIE exit_expr .)
    GREAT_EQUAL     reduce using rule 111 (expr -> DIE exit_expr .)
    NOT_EQUAL       reduce using rule 111 (expr -> DIE exit_expr .)
    LEFT_LOGICAL    reduce using rule 111 (expr -> DIE exit_expr .)
    RIGHT_LOGICAL   reduce using rule 111 (expr -> DIE exit_expr .)
    AND             reduce using rule 111 (expr -> DIE exit_expr .)
    OR              reduce using rule 111 (expr -> DIE exit_expr .)
    PLUS            reduce using rule 111 (expr -> DIE exit_expr .)
    DIVIDE          reduce using rule 111 (expr -> DIE exit_expr .)
    PERCENT         reduce using rule 111 (expr -> DIE exit_expr .)
    TIMES           reduce using rule 111 (expr -> DIE exit_expr .)
    MINUS           reduce using rule 111 (expr -> DIE exit_expr .)
    RPAREN          reduce using rule 111 (expr -> DIE exit_expr .)
    DDOT            reduce using rule 111 (expr -> DIE exit_expr .)
    ATTR_ASSOC      reduce using rule 111 (expr -> DIE exit_expr .)
    COLON           reduce using rule 111 (expr -> DIE exit_expr .)
    AS              reduce using rule 111 (expr -> DIE exit_expr .)
    RBRACKET        reduce using rule 111 (expr -> DIE exit_expr .)
    RKEY            reduce using rule 111 (expr -> DIE exit_expr .)


state 102

    (113) expr -> ARRAY_TYPE LPAREN . array_pair_list RPAREN
    (114) expr -> ARRAY_TYPE LPAREN . RPAREN
    (162) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (163) array_pair_list -> . array_pair
    (164) array_pair -> . expr
    (165) array_pair -> . expr ATTR_ASSOC expr
    (166) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (167) array_pair -> . AMPERSAND variable
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 149
    AMPERSAND       shift and go to state 152
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    array_pair_list                shift and go to state 148
    array_pair                     shift and go to state 150
    expr                           shift and go to state 151
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 103

    (18) if_statement -> statement_if if_statement_complement .

    FUNCTION        reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    GLOBAL          reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    INCREMENT       reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    DECREMENT       reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    LPAREN          reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    MINUS           reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    EXIT            reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    DIE             reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    ARRAY_TYPE      reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    TRUE            reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    FALSE           reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    WHILE           reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    DO              reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    FOR             reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    FOREACH         reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    BREAK           reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    CONTINUE        reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    RETURN          reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    ID              reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    NUMBER_REAL     reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    NUMBER_INTEGER  reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    IF              reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    DOLAR           reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    VARIABLE        reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    END_PROGRAM     reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    RKEY            reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    ELSEIF          reduce using rule 18 (if_statement -> statement_if if_statement_complement .)
    ELSE            reduce using rule 18 (if_statement -> statement_if if_statement_complement .)


state 104

    (20) if_statement_complement -> statement_elseif .
    (21) if_statement_complement -> statement_elseif . statement_else
    (50) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 20 (if_statement_complement -> statement_elseif .)
    GLOBAL          reduce using rule 20 (if_statement_complement -> statement_elseif .)
    INCREMENT       reduce using rule 20 (if_statement_complement -> statement_elseif .)
    DECREMENT       reduce using rule 20 (if_statement_complement -> statement_elseif .)
    LPAREN          reduce using rule 20 (if_statement_complement -> statement_elseif .)
    MINUS           reduce using rule 20 (if_statement_complement -> statement_elseif .)
    EXIT            reduce using rule 20 (if_statement_complement -> statement_elseif .)
    DIE             reduce using rule 20 (if_statement_complement -> statement_elseif .)
    ARRAY_TYPE      reduce using rule 20 (if_statement_complement -> statement_elseif .)
    TRUE            reduce using rule 20 (if_statement_complement -> statement_elseif .)
    FALSE           reduce using rule 20 (if_statement_complement -> statement_elseif .)
    WHILE           reduce using rule 20 (if_statement_complement -> statement_elseif .)
    DO              reduce using rule 20 (if_statement_complement -> statement_elseif .)
    FOR             reduce using rule 20 (if_statement_complement -> statement_elseif .)
    FOREACH         reduce using rule 20 (if_statement_complement -> statement_elseif .)
    BREAK           reduce using rule 20 (if_statement_complement -> statement_elseif .)
    CONTINUE        reduce using rule 20 (if_statement_complement -> statement_elseif .)
    RETURN          reduce using rule 20 (if_statement_complement -> statement_elseif .)
    ID              reduce using rule 20 (if_statement_complement -> statement_elseif .)
    NUMBER_REAL     reduce using rule 20 (if_statement_complement -> statement_elseif .)
    NUMBER_INTEGER  reduce using rule 20 (if_statement_complement -> statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 20 (if_statement_complement -> statement_elseif .)
    IF              reduce using rule 20 (if_statement_complement -> statement_elseif .)
    DOLAR           reduce using rule 20 (if_statement_complement -> statement_elseif .)
    VARIABLE        reduce using rule 20 (if_statement_complement -> statement_elseif .)
    END_PROGRAM     reduce using rule 20 (if_statement_complement -> statement_elseif .)
    RKEY            reduce using rule 20 (if_statement_complement -> statement_elseif .)
    ELSEIF          reduce using rule 20 (if_statement_complement -> statement_elseif .)
    ELSE            shift and go to state 107

  ! ELSE            [ reduce using rule 20 (if_statement_complement -> statement_elseif .) ]

    statement_else                 shift and go to state 153

state 105

    (22) if_statement_complement -> statement_else .

    FUNCTION        reduce using rule 22 (if_statement_complement -> statement_else .)
    GLOBAL          reduce using rule 22 (if_statement_complement -> statement_else .)
    INCREMENT       reduce using rule 22 (if_statement_complement -> statement_else .)
    DECREMENT       reduce using rule 22 (if_statement_complement -> statement_else .)
    LPAREN          reduce using rule 22 (if_statement_complement -> statement_else .)
    MINUS           reduce using rule 22 (if_statement_complement -> statement_else .)
    EXIT            reduce using rule 22 (if_statement_complement -> statement_else .)
    DIE             reduce using rule 22 (if_statement_complement -> statement_else .)
    ARRAY_TYPE      reduce using rule 22 (if_statement_complement -> statement_else .)
    TRUE            reduce using rule 22 (if_statement_complement -> statement_else .)
    FALSE           reduce using rule 22 (if_statement_complement -> statement_else .)
    WHILE           reduce using rule 22 (if_statement_complement -> statement_else .)
    DO              reduce using rule 22 (if_statement_complement -> statement_else .)
    FOR             reduce using rule 22 (if_statement_complement -> statement_else .)
    FOREACH         reduce using rule 22 (if_statement_complement -> statement_else .)
    BREAK           reduce using rule 22 (if_statement_complement -> statement_else .)
    CONTINUE        reduce using rule 22 (if_statement_complement -> statement_else .)
    RETURN          reduce using rule 22 (if_statement_complement -> statement_else .)
    ID              reduce using rule 22 (if_statement_complement -> statement_else .)
    NUMBER_REAL     reduce using rule 22 (if_statement_complement -> statement_else .)
    NUMBER_INTEGER  reduce using rule 22 (if_statement_complement -> statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 22 (if_statement_complement -> statement_else .)
    IF              reduce using rule 22 (if_statement_complement -> statement_else .)
    DOLAR           reduce using rule 22 (if_statement_complement -> statement_else .)
    VARIABLE        reduce using rule 22 (if_statement_complement -> statement_else .)
    END_PROGRAM     reduce using rule 22 (if_statement_complement -> statement_else .)
    RKEY            reduce using rule 22 (if_statement_complement -> statement_else .)
    ELSEIF          reduce using rule 22 (if_statement_complement -> statement_else .)
    ELSE            reduce using rule 22 (if_statement_complement -> statement_else .)


state 106

    (49) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT
    (47) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 109

    expr_parentheses               shift and go to state 154

state 107

    (50) statement_else -> ELSE . statement_BLOCK_OPT
    (174) statement_BLOCK_OPT -> . statement
    (175) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (176) statement_BLOCK_OPT -> . LKEY RKEY
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 112
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    statement_BLOCK_OPT            shift and go to state 155
    statement                      shift and go to state 111
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 108

    (23) while_statement -> WHILE expr_parentheses . statement_BLOCK_OPT
    (174) statement_BLOCK_OPT -> . statement
    (175) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (176) statement_BLOCK_OPT -> . LKEY RKEY
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 112
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    statement_BLOCK_OPT            shift and go to state 156
    statement                      shift and go to state 111
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 109

    (47) expr_parentheses -> LPAREN . expr RPAREN
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 157
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 110

    (24) do_statement -> DO statement_BLOCK_OPT . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 158


state 111

    (174) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    MINUS           reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 174 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 174 (statement_BLOCK_OPT -> statement .)


state 112

    (175) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (176) statement_BLOCK_OPT -> LKEY . RKEY
    (170) statement_MUL -> . statement statement_MUL
    (171) statement_MUL -> . statement
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 160
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    statement_MUL                  shift and go to state 159
    statement                      shift and go to state 161
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 113

    (31) for_statement -> FOR LPAREN . for_parameters RPAREN statement_BLOCK_OPT
    (32) for_parameters -> . SEMICOLON SEMICOLON
    (33) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (34) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (35) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (36) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (37) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (38) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (39) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (53) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (54) for_expr_OPT -> . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 163
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    for_parameters                 shift and go to state 162
    for_expr_OPT                   shift and go to state 164
    expr                           shift and go to state 165
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 114

    (51) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 166
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 115

    (25) break_statement -> BREAK expr . SEMICOLON
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 167
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 116

    (26) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    DOLAR           reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 26 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 26 (break_statement -> BREAK SEMICOLON .)


state 117

    (27) continue_statement -> CONTINUE expr . SEMICOLON
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 168
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 118

    (28) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    DOLAR           reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 28 (continue_statement -> CONTINUE SEMICOLON .)


state 119

    (29) return_statement -> RETURN expr . SEMICOLON
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    SEMICOLON       shift and go to state 169
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 120

    (30) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    DOLAR           reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 30 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 30 (return_statement -> RETURN SEMICOLON .)


state 121

    (125) variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    AND             reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    OR              reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    AS              reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 125 (variable -> simple_indirect_reference_DOLAR reference_variable .)


state 122

    (129) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 130


state 123

    (55) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (56) function_call -> ID LPAREN . RPAREN
    (57) function_call_parameter_list -> . function_call_parameter function_call_list_COLON_FUNCTION
    (58) function_call_parameter_list -> . function_call_parameter
    (59) function_call_parameter -> . expr
    (60) function_call_parameter -> . AMPERSAND VARIABLE
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 171
    AMPERSAND       shift and go to state 174
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    function_call_parameter_list   shift and go to state 170
    function_call_parameter        shift and go to state 172
    expr                           shift and go to state 173
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 124

    (48) statement_if -> IF expr_parentheses . statement_BLOCK_OPT
    (174) statement_BLOCK_OPT -> . statement
    (175) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (176) statement_BLOCK_OPT -> . LKEY RKEY
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 112
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    statement_BLOCK_OPT            shift and go to state 175
    statement                      shift and go to state 111
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 125

    (126) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AND             reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    OR              reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AS              reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 126 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 126

    (183) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (184) reference_variable_SELECTOR -> selector .
    (183) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (184) reference_variable_SELECTOR -> . selector
    (130) selector -> . LBRACKET expr RBRACKET
    (131) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    DECREMENT       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    ADD_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    SUB_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    MOD_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    PLUS_ASSIGN     reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    DIVIDE_ASSIGN   reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    ASSIGN          reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    SEMICOLON       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    INTE_DOT        reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    EQUALS          reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    GREAT_THAN      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    LESS_THAN       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    LESS_EQUAL      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    GREAT_EQUAL     reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    NOT_EQUAL       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    LEFT_LOGICAL    reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    RIGHT_LOGICAL   reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    AND             reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    OR              reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    PLUS            reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    DIVIDE          reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    PERCENT         reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    TIMES           reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    MINUS           reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    RPAREN          reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    DDOT            reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    ATTR_ASSOC      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    COLON           reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    AS              reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    RBRACKET        reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    RKEY            reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    LBRACKET        shift and go to state 127

    selector                       shift and go to state 126
    reference_variable_SELECTOR    shift and go to state 176

state 127

    (130) selector -> LBRACKET . expr RBRACKET
    (131) selector -> LBRACKET . RBRACKET
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RBRACKET        shift and go to state 178
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 177
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 128

    (185) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> DOLAR .
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR .)
    DOLAR           shift and go to state 128

  ! DOLAR           [ reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 129

state 129

    (185) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 185 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 185 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 130

    (129) compound_variable -> DOLAR LKEY . expr RKEY
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 179
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 131

    (132) function_declaration_statement -> FUNCTION fds_id fds_parameter . fds_statements
    (133) fds_statements -> . LKEY inner_statement_MUL RKEY
    (134) fds_statements -> . LKEY RKEY

    LKEY            shift and go to state 181

    fds_statements                 shift and go to state 180

state 132

    (137) fds_parameter -> LPAREN . parameter_list RPAREN
    (138) fds_parameter -> LPAREN . RPAREN
    (139) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (140) parameter_list -> . parameter
    (141) parameter -> . VARIABLE
    (142) parameter -> . VARIABLE ASSIGN static_scalar
    (143) parameter -> . parameter_type VARIABLE
    (144) parameter -> . parameter_type AMPERSAND VARIABLE
    (145) parameter -> . AMPERSAND VARIABLE
    (146) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (147) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (148) parameter_type -> . INT_TYPE
    (149) parameter_type -> . BOOLEAN_TYPE
    (150) parameter_type -> . STRING_TYPE
    (151) parameter_type -> . FLOAT_TYPE
    (152) parameter_type -> . ARRAY_TYPE
    (153) parameter_type -> . BOOL_TYPE
    (154) parameter_type -> . REAL_TYPE
    (155) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 183
    VARIABLE        shift and go to state 185
    AMPERSAND       shift and go to state 187
    INT_TYPE        shift and go to state 188
    BOOLEAN_TYPE    shift and go to state 189
    STRING_TYPE     shift and go to state 190
    FLOAT_TYPE      shift and go to state 191
    ARRAY_TYPE      shift and go to state 192
    BOOL_TYPE       shift and go to state 193
    REAL_TYPE       shift and go to state 194
    DOUBLE_TYPE     shift and go to state 195

    parameter_list                 shift and go to state 182
    parameter                      shift and go to state 184
    parameter_type                 shift and go to state 186

state 133

    (135) fds_id -> AMPERSAND ID .

    LPAREN          reduce using rule 135 (fds_id -> AMPERSAND ID .)


state 134

    (104) expr -> expr INTE_DOT expr . DDOT expr
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    DDOT            shift and go to state 196
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 135

    (105) expr -> expr comparission_operator expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 105 (expr -> expr comparission_operator expr .)
    RPAREN          reduce using rule 105 (expr -> expr comparission_operator expr .)
    DDOT            reduce using rule 105 (expr -> expr comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 105 (expr -> expr comparission_operator expr .)
    COLON           reduce using rule 105 (expr -> expr comparission_operator expr .)
    AS              reduce using rule 105 (expr -> expr comparission_operator expr .)
    RBRACKET        reduce using rule 105 (expr -> expr comparission_operator expr .)
    RKEY            reduce using rule 105 (expr -> expr comparission_operator expr .)
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

  ! INTE_DOT        [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! EQUALS          [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! AND             [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! OR              [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! PLUS            [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! DIVIDE          [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! PERCENT         [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! TIMES           [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]
  ! MINUS           [ reduce using rule 105 (expr -> expr comparission_operator expr .) ]

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 136

    (106) expr -> expr arithmetic_operator expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    RPAREN          reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    DDOT            reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    COLON           reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    AS              reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    RBRACKET        reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    RKEY            reduce using rule 106 (expr -> expr arithmetic_operator expr .)
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

  ! INTE_DOT        [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! EQUALS          [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! AND             [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! OR              [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! PLUS            [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! DIVIDE          [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! PERCENT         [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! TIMES           [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]
  ! MINUS           [ reduce using rule 106 (expr -> expr arithmetic_operator expr .) ]

    arithmetic_operator            shift and go to state 57
    comparission_operator          shift and go to state 56

state 137

    (16) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 197


state 138

    (17) statement -> GLOBAL global_var SEMICOLON .

    FUNCTION        reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    GLOBAL          reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    INCREMENT       reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    DECREMENT       reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    LPAREN          reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    MINUS           reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    EXIT            reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    DIE             reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    ARRAY_TYPE      reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    TRUE            reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    FALSE           reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    WHILE           reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    DO              reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    FOR             reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    FOREACH         reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    BREAK           reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    CONTINUE        reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    RETURN          reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    ID              reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_REAL     reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    IF              reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    DOLAR           reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    VARIABLE        reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    END_PROGRAM     reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    RKEY            reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    ELSEIF          reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)
    ELSE            reduce using rule 17 (statement -> GLOBAL global_var SEMICOLON .)


state 139

    (43) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (44) statement_COLON_GLOBAL -> COLON . global_var
    (40) global_var -> . VARIABLE
    (41) global_var -> . DOLAR VARIABLE
    (42) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 74
    DOLAR           shift and go to state 75

    global_var                     shift and go to state 198

state 140

    (41) global_var -> DOLAR VARIABLE .

    SEMICOLON       reduce using rule 41 (global_var -> DOLAR VARIABLE .)
    COLON           reduce using rule 41 (global_var -> DOLAR VARIABLE .)


state 141

    (42) global_var -> DOLAR LKEY . expr RKEY
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 199
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 142

    (100) expr -> variable assign_operator expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 100 (expr -> variable assign_operator expr .)
    RPAREN          reduce using rule 100 (expr -> variable assign_operator expr .)
    DDOT            reduce using rule 100 (expr -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 100 (expr -> variable assign_operator expr .)
    COLON           reduce using rule 100 (expr -> variable assign_operator expr .)
    AS              reduce using rule 100 (expr -> variable assign_operator expr .)
    RBRACKET        reduce using rule 100 (expr -> variable assign_operator expr .)
    RKEY            reduce using rule 100 (expr -> variable assign_operator expr .)
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

  ! INTE_DOT        [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! EQUALS          [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! GREAT_THAN      [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! LESS_THAN       [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! LESS_EQUAL      [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! NOT_EQUAL       [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! AND             [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! OR              [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! PLUS            [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! DIVIDE          [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! PERCENT         [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! TIMES           [ reduce using rule 100 (expr -> variable assign_operator expr .) ]
  ! MINUS           [ reduce using rule 100 (expr -> variable assign_operator expr .) ]

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 143

    (101) expr -> variable assign_operator AMPERSAND . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    variable                       shift and go to state 20
    expr                           shift and go to state 200
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 144

    (103) expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 103 (expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 103 (expr -> LPAREN expr RPAREN .)


state 145

    (108) expr -> LPAREN type_cast_operator RPAREN . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 201
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 146

    (122) exit_expr -> LPAREN expr . RPAREN
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 202
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 147

    (123) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    INTE_DOT        reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    EQUALS          reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    AND             reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    OR              reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    PLUS            reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    PERCENT         reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    TIMES           reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    RPAREN          reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    DDOT            reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    COLON           reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    AS              reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 123 (exit_expr -> LPAREN RPAREN .)
    RKEY            reduce using rule 123 (exit_expr -> LPAREN RPAREN .)


state 148

    (113) expr -> ARRAY_TYPE LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 203


state 149

    (114) expr -> ARRAY_TYPE LPAREN RPAREN .

    SEMICOLON       reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    INTE_DOT        reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    EQUALS          reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_THAN       reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    AND             reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    OR              reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    PLUS            reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    DIVIDE          reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    PERCENT         reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    TIMES           reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    MINUS           reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RPAREN          reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    DDOT            reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    COLON           reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    AS              reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RBRACKET        reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)
    RKEY            reduce using rule 114 (expr -> ARRAY_TYPE LPAREN RPAREN .)


state 150

    (162) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (163) array_pair_list -> array_pair .
    (187) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 163 (array_pair_list -> array_pair .)
    COLON           shift and go to state 205

    array_pair_list_ARR_PAIR       shift and go to state 204

state 151

    (164) array_pair -> expr .
    (165) array_pair -> expr . ATTR_ASSOC expr
    (166) array_pair -> expr . ATTR_ASSOC AMPERSAND variable
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    COLON           reduce using rule 164 (array_pair -> expr .)
    RPAREN          reduce using rule 164 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 206
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 152

    (167) array_pair -> AMPERSAND . variable
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    variable                       shift and go to state 207
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 153

    (21) if_statement_complement -> statement_elseif statement_else .

    FUNCTION        reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    GLOBAL          reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    INCREMENT       reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    DECREMENT       reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    LPAREN          reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    MINUS           reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    EXIT            reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    DIE             reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    ARRAY_TYPE      reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    TRUE            reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    FALSE           reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    WHILE           reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    DO              reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    FOR             reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    FOREACH         reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    BREAK           reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    CONTINUE        reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    RETURN          reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    ID              reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    NUMBER_REAL     reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    NUMBER_INTEGER  reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    IF              reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    DOLAR           reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    VARIABLE        reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    END_PROGRAM     reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    RKEY            reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    ELSEIF          reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)
    ELSE            reduce using rule 21 (if_statement_complement -> statement_elseif statement_else .)


state 154

    (49) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT
    (174) statement_BLOCK_OPT -> . statement
    (175) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (176) statement_BLOCK_OPT -> . LKEY RKEY
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 112
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    statement_BLOCK_OPT            shift and go to state 208
    statement                      shift and go to state 111
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 155

    (50) statement_else -> ELSE statement_BLOCK_OPT .

    FUNCTION        reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    MINUS           reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSE            reduce using rule 50 (statement_else -> ELSE statement_BLOCK_OPT .)


state 156

    (23) while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 23 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)


state 157

    (47) expr_parentheses -> LPAREN expr . RPAREN
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    RPAREN          shift and go to state 209
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 158

    (24) do_statement -> DO statement_BLOCK_OPT WHILE . expr_parentheses SEMICOLON
    (47) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 109

    expr_parentheses               shift and go to state 210

state 159

    (175) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 211


state 160

    (176) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    INCREMENT       reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    DECREMENT       reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    MINUS           reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOREACH         reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    DOLAR           reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 176 (statement_BLOCK_OPT -> LKEY RKEY .)


state 161

    (170) statement_MUL -> statement . statement_MUL
    (171) statement_MUL -> statement .
    (170) statement_MUL -> . statement statement_MUL
    (171) statement_MUL -> . statement
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 171 (statement_MUL -> statement .)
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    statement                      shift and go to state 161
    statement_MUL                  shift and go to state 212
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 162

    (31) for_statement -> FOR LPAREN for_parameters . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 213


state 163

    (32) for_parameters -> SEMICOLON . SEMICOLON
    (36) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (37) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (38) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (53) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (54) for_expr_OPT -> . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 214
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    for_expr_OPT                   shift and go to state 215
    expr                           shift and go to state 165
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 164

    (33) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (34) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (35) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (39) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 216


state 165

    (53) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (54) for_expr_OPT -> expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (172) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (173) for_expr_COLON_EXPR -> . COLON expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 54 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 54 (for_expr_OPT -> expr .)
    INTE_DOT        shift and go to state 55
    COLON           shift and go to state 218
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    for_expr_COLON_EXPR            shift and go to state 217
    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 166

    (51) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    AS              shift and go to state 219
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 167

    (25) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    MINUS           reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    FOREACH         reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    DOLAR           reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 25 (break_statement -> BREAK expr SEMICOLON .)


state 168

    (27) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    MINUS           reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOREACH         reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    DOLAR           reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 27 (continue_statement -> CONTINUE expr SEMICOLON .)


state 169

    (29) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    MINUS           reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    DOLAR           reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 29 (return_statement -> RETURN expr SEMICOLON .)


state 170

    (55) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 220


state 171

    (56) function_call -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    INTE_DOT        reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    AS              reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 56 (function_call -> ID LPAREN RPAREN .)
    RKEY            reduce using rule 56 (function_call -> ID LPAREN RPAREN .)


state 172

    (57) function_call_parameter_list -> function_call_parameter . function_call_list_COLON_FUNCTION
    (58) function_call_parameter_list -> function_call_parameter .
    (177) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (178) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter

    RPAREN          reduce using rule 58 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 222

    function_call_list_COLON_FUNCTION shift and go to state 221

state 173

    (59) function_call_parameter -> expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    COLON           reduce using rule 59 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 59 (function_call_parameter -> expr .)
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 174

    (60) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 223


state 175

    (48) statement_if -> IF expr_parentheses statement_BLOCK_OPT .

    ELSEIF          reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 48 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)


state 176

    (183) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AND             reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    OR              reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 177

    (130) selector -> LBRACKET expr . RBRACKET
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    RBRACKET        shift and go to state 224
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 178

    (131) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    PLUS_ASSIGN     reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    LEFT_LOGICAL    reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    AND             reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    OR              reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    AS              reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 131 (selector -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 131 (selector -> LBRACKET RBRACKET .)


state 179

    (129) compound_variable -> DOLAR LKEY expr . RKEY
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 225
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 180

    (132) function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .

    FUNCTION        reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    GLOBAL          reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    INCREMENT       reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DECREMENT       reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    LPAREN          reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    MINUS           reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXIT            reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DIE             reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ARRAY_TYPE      reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    TRUE            reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FALSE           reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    WHILE           reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DO              reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOR             reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOREACH         reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    BREAK           reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONTINUE        reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RETURN          reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ID              reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_REAL     reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_INTEGER  reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONSTANT_ENCAPSED_STRING reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    IF              reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DOLAR           reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    VARIABLE        reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    END_PROGRAM     reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RKEY            reduce using rule 132 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)


state 181

    (133) fds_statements -> LKEY . inner_statement_MUL RKEY
    (134) fds_statements -> LKEY . RKEY
    (168) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (169) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (132) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 227
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    inner_statement_MUL            shift and go to state 226
    inner_statement                shift and go to state 228
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 182

    (137) fds_parameter -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 229


state 183

    (138) fds_parameter -> LPAREN RPAREN .

    LKEY            reduce using rule 138 (fds_parameter -> LPAREN RPAREN .)


state 184

    (139) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (140) parameter_list -> parameter .
    (181) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (182) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 140 (parameter_list -> parameter .)
    COLON           shift and go to state 231

    parameter_list_COLON_PARAMETER shift and go to state 230

state 185

    (141) parameter -> VARIABLE .
    (142) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 141 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 141 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 232


state 186

    (143) parameter -> parameter_type . VARIABLE
    (144) parameter -> parameter_type . AMPERSAND VARIABLE
    (147) parameter -> parameter_type . AMPERSAND VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 233
    AMPERSAND       shift and go to state 234


state 187

    (145) parameter -> AMPERSAND . VARIABLE
    (146) parameter -> AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 235


state 188

    (148) parameter_type -> INT_TYPE .

    VARIABLE        reduce using rule 148 (parameter_type -> INT_TYPE .)
    AMPERSAND       reduce using rule 148 (parameter_type -> INT_TYPE .)


state 189

    (149) parameter_type -> BOOLEAN_TYPE .

    VARIABLE        reduce using rule 149 (parameter_type -> BOOLEAN_TYPE .)
    AMPERSAND       reduce using rule 149 (parameter_type -> BOOLEAN_TYPE .)


state 190

    (150) parameter_type -> STRING_TYPE .

    VARIABLE        reduce using rule 150 (parameter_type -> STRING_TYPE .)
    AMPERSAND       reduce using rule 150 (parameter_type -> STRING_TYPE .)


state 191

    (151) parameter_type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 151 (parameter_type -> FLOAT_TYPE .)
    AMPERSAND       reduce using rule 151 (parameter_type -> FLOAT_TYPE .)


state 192

    (152) parameter_type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 152 (parameter_type -> ARRAY_TYPE .)
    AMPERSAND       reduce using rule 152 (parameter_type -> ARRAY_TYPE .)


state 193

    (153) parameter_type -> BOOL_TYPE .

    VARIABLE        reduce using rule 153 (parameter_type -> BOOL_TYPE .)
    AMPERSAND       reduce using rule 153 (parameter_type -> BOOL_TYPE .)


state 194

    (154) parameter_type -> REAL_TYPE .

    VARIABLE        reduce using rule 154 (parameter_type -> REAL_TYPE .)
    AMPERSAND       reduce using rule 154 (parameter_type -> REAL_TYPE .)


state 195

    (155) parameter_type -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 155 (parameter_type -> DOUBLE_TYPE .)
    AMPERSAND       reduce using rule 155 (parameter_type -> DOUBLE_TYPE .)


state 196

    (104) expr -> expr INTE_DOT expr DDOT . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 236
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 197

    (16) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    MINUS           reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOREACH         reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 16 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 198

    (43) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (44) statement_COLON_GLOBAL -> COLON global_var .
    (43) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (44) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 44 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 139

    statement_COLON_GLOBAL         shift and go to state 237

state 199

    (42) global_var -> DOLAR LKEY expr . RKEY
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    RKEY            shift and go to state 238
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 200

    (101) expr -> variable assign_operator AMPERSAND expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .)
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

  ! INTE_DOT        [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! EQUALS          [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_THAN      [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_THAN       [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! AND             [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! OR              [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PLUS            [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! DIVIDE          [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! PERCENT         [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 101 (expr -> variable assign_operator AMPERSAND expr .) ]

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 201

    (108) expr -> LPAREN type_cast_operator RPAREN expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .)
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

  ! INTE_DOT        [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! EQUALS          [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_THAN      [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_THAN       [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! AND             [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! OR              [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PLUS            [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! DIVIDE          [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! PERCENT         [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! TIMES           [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]
  ! MINUS           [ reduce using rule 108 (expr -> LPAREN type_cast_operator RPAREN expr .) ]

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 202

    (122) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    INTE_DOT        reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 122 (exit_expr -> LPAREN expr RPAREN .)


state 203

    (113) expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .

    SEMICOLON       reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    INTE_DOT        reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 113 (expr -> ARRAY_TYPE LPAREN array_pair_list RPAREN .)


state 204

    (162) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 162 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 205

    (187) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> COLON . array_pair
    (164) array_pair -> . expr
    (165) array_pair -> . expr ATTR_ASSOC expr
    (166) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (167) array_pair -> . AMPERSAND variable
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 152
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    array_pair                     shift and go to state 239
    expr                           shift and go to state 151
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 206

    (165) array_pair -> expr ATTR_ASSOC . expr
    (166) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 241
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 240
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 207

    (167) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 167 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 167 (array_pair -> AMPERSAND variable .)


state 208

    (49) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    MINUS           reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 49 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)


state 209

    (47) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 47 (expr_parentheses -> LPAREN expr RPAREN .)


state 210

    (24) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 242


state 211

    (175) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    MINUS           reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 175 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 212

    (170) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 170 (statement_MUL -> statement statement_MUL .)


state 213

    (31) for_statement -> FOR LPAREN for_parameters RPAREN . statement_BLOCK_OPT
    (174) statement_BLOCK_OPT -> . statement
    (175) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (176) statement_BLOCK_OPT -> . LKEY RKEY
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 112
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    statement_BLOCK_OPT            shift and go to state 243
    statement                      shift and go to state 111
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 214

    (32) for_parameters -> SEMICOLON SEMICOLON .
    (38) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (53) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (54) for_expr_OPT -> . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 32 (for_parameters -> SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    for_expr_OPT                   shift and go to state 244
    expr                           shift and go to state 165
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 215

    (36) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (37) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 245


state 216

    (33) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (34) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (35) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (39) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (53) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (54) for_expr_OPT -> . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 247
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    for_expr_OPT                   shift and go to state 246
    expr                           shift and go to state 165
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 217

    (53) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 53 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 53 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 218

    (172) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (173) for_expr_COLON_EXPR -> COLON . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 248
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 219

    (51) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (45) ampersand_variable -> . AMPERSAND VARIABLE
    (46) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 250
    VARIABLE        shift and go to state 251

    ampersand_variable             shift and go to state 249

state 220

    (55) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    SEMICOLON       reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    INTE_DOT        reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 55 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 221

    (57) function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 57 (function_call_parameter_list -> function_call_parameter function_call_list_COLON_FUNCTION .)


state 222

    (177) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter function_call_list_COLON_FUNCTION
    (178) function_call_list_COLON_FUNCTION -> COLON . function_call_parameter
    (59) function_call_parameter -> . expr
    (60) function_call_parameter -> . AMPERSAND VARIABLE
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 174
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    function_call_parameter        shift and go to state 252
    expr                           shift and go to state 173
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 223

    (60) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 60 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 60 (function_call_parameter -> AMPERSAND VARIABLE .)


state 224

    (130) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    PLUS_ASSIGN     reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    AS              reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 130 (selector -> LBRACKET expr RBRACKET .)


state 225

    (129) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    AND             reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    OR              reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    AS              reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 129 (compound_variable -> DOLAR LKEY expr RKEY .)


state 226

    (133) fds_statements -> LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 253


state 227

    (134) fds_statements -> LKEY RKEY .

    FUNCTION        reduce using rule 134 (fds_statements -> LKEY RKEY .)
    GLOBAL          reduce using rule 134 (fds_statements -> LKEY RKEY .)
    INCREMENT       reduce using rule 134 (fds_statements -> LKEY RKEY .)
    DECREMENT       reduce using rule 134 (fds_statements -> LKEY RKEY .)
    LPAREN          reduce using rule 134 (fds_statements -> LKEY RKEY .)
    MINUS           reduce using rule 134 (fds_statements -> LKEY RKEY .)
    EXIT            reduce using rule 134 (fds_statements -> LKEY RKEY .)
    DIE             reduce using rule 134 (fds_statements -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 134 (fds_statements -> LKEY RKEY .)
    TRUE            reduce using rule 134 (fds_statements -> LKEY RKEY .)
    FALSE           reduce using rule 134 (fds_statements -> LKEY RKEY .)
    WHILE           reduce using rule 134 (fds_statements -> LKEY RKEY .)
    DO              reduce using rule 134 (fds_statements -> LKEY RKEY .)
    FOR             reduce using rule 134 (fds_statements -> LKEY RKEY .)
    FOREACH         reduce using rule 134 (fds_statements -> LKEY RKEY .)
    BREAK           reduce using rule 134 (fds_statements -> LKEY RKEY .)
    CONTINUE        reduce using rule 134 (fds_statements -> LKEY RKEY .)
    RETURN          reduce using rule 134 (fds_statements -> LKEY RKEY .)
    ID              reduce using rule 134 (fds_statements -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 134 (fds_statements -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 134 (fds_statements -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 134 (fds_statements -> LKEY RKEY .)
    IF              reduce using rule 134 (fds_statements -> LKEY RKEY .)
    DOLAR           reduce using rule 134 (fds_statements -> LKEY RKEY .)
    VARIABLE        reduce using rule 134 (fds_statements -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 134 (fds_statements -> LKEY RKEY .)
    RKEY            reduce using rule 134 (fds_statements -> LKEY RKEY .)


state 228

    (168) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (169) inner_statement_MUL -> inner_statement .
    (168) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (169) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (132) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 169 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    inner_statement                shift and go to state 228
    inner_statement_MUL            shift and go to state 254
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 229

    (137) fds_parameter -> LPAREN parameter_list RPAREN .

    LKEY            reduce using rule 137 (fds_parameter -> LPAREN parameter_list RPAREN .)


state 230

    (139) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 139 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 231

    (181) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (182) parameter_list_COLON_PARAMETER -> COLON . parameter
    (141) parameter -> . VARIABLE
    (142) parameter -> . VARIABLE ASSIGN static_scalar
    (143) parameter -> . parameter_type VARIABLE
    (144) parameter -> . parameter_type AMPERSAND VARIABLE
    (145) parameter -> . AMPERSAND VARIABLE
    (146) parameter -> . AMPERSAND VARIABLE ASSIGN static_scalar
    (147) parameter -> . parameter_type AMPERSAND VARIABLE ASSIGN static_scalar
    (148) parameter_type -> . INT_TYPE
    (149) parameter_type -> . BOOLEAN_TYPE
    (150) parameter_type -> . STRING_TYPE
    (151) parameter_type -> . FLOAT_TYPE
    (152) parameter_type -> . ARRAY_TYPE
    (153) parameter_type -> . BOOL_TYPE
    (154) parameter_type -> . REAL_TYPE
    (155) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 185
    AMPERSAND       shift and go to state 187
    INT_TYPE        shift and go to state 188
    BOOLEAN_TYPE    shift and go to state 189
    STRING_TYPE     shift and go to state 190
    FLOAT_TYPE      shift and go to state 191
    ARRAY_TYPE      shift and go to state 192
    BOOL_TYPE       shift and go to state 193
    REAL_TYPE       shift and go to state 194
    DOUBLE_TYPE     shift and go to state 195

    parameter                      shift and go to state 255
    parameter_type                 shift and go to state 186

state 232

    (142) parameter -> VARIABLE ASSIGN . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 256
    common_scalar                  shift and go to state 257

state 233

    (143) parameter -> parameter_type VARIABLE .

    COLON           reduce using rule 143 (parameter -> parameter_type VARIABLE .)
    RPAREN          reduce using rule 143 (parameter -> parameter_type VARIABLE .)


state 234

    (144) parameter -> parameter_type AMPERSAND . VARIABLE
    (147) parameter -> parameter_type AMPERSAND . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 263


state 235

    (145) parameter -> AMPERSAND VARIABLE .
    (146) parameter -> AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 145 (parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 145 (parameter -> AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 264


state 236

    (104) expr -> expr INTE_DOT expr DDOT expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

  ! shift/reduce conflict for INTE_DOT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for GREAT_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREAT_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LEFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RIGHT_LOGICAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    AS              reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .)
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

  ! INTE_DOT        [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! EQUALS          [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_THAN      [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_THAN       [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! GREAT_EQUAL     [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! LEFT_LOGICAL    [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! RIGHT_LOGICAL   [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! AND             [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! OR              [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PLUS            [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! DIVIDE          [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! PERCENT         [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! TIMES           [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]
  ! MINUS           [ reduce using rule 104 (expr -> expr INTE_DOT expr DDOT expr .) ]

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 237

    (43) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 43 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 238

    (42) global_var -> DOLAR LKEY expr RKEY .

    SEMICOLON       reduce using rule 42 (global_var -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 42 (global_var -> DOLAR LKEY expr RKEY .)


state 239

    (187) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> COLON array_pair .
    (187) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 188 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 205

    array_pair_list_ARR_PAIR       shift and go to state 265

state 240

    (165) array_pair -> expr ATTR_ASSOC expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    COLON           reduce using rule 165 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 165 (array_pair -> expr ATTR_ASSOC expr .)
    INTE_DOT        shift and go to state 55
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 241

    (166) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    variable                       shift and go to state 266
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 242

    (24) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    INCREMENT       reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DECREMENT       reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    MINUS           reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOREACH         reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DOLAR           reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 24 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)


state 243

    (31) for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 31 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)


state 244

    (38) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 38 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 245

    (36) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (37) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (53) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (54) for_expr_OPT -> . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 36 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    for_expr_OPT                   shift and go to state 267
    expr                           shift and go to state 165
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 246

    (34) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (39) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 268


state 247

    (33) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (35) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (53) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (54) for_expr_OPT -> . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 33 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    for_expr_OPT                   shift and go to state 269
    expr                           shift and go to state 165
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 248

    (172) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (173) for_expr_COLON_EXPR -> COLON expr .
    (104) expr -> expr . INTE_DOT expr DDOT expr
    (105) expr -> expr . comparission_operator expr
    (106) expr -> expr . arithmetic_operator expr
    (172) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (173) for_expr_COLON_EXPR -> . COLON expr
    (86) comparission_operator -> . EQUALS
    (87) comparission_operator -> . GREAT_THAN
    (88) comparission_operator -> . LESS_THAN
    (89) comparission_operator -> . LESS_EQUAL
    (90) comparission_operator -> . GREAT_EQUAL
    (91) comparission_operator -> . NOT_EQUAL
    (92) comparission_operator -> . LEFT_LOGICAL
    (93) comparission_operator -> . RIGHT_LOGICAL
    (94) comparission_operator -> . AND
    (95) comparission_operator -> . OR
    (81) arithmetic_operator -> . PLUS
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (84) arithmetic_operator -> . TIMES
    (85) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 173 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 173 (for_expr_COLON_EXPR -> COLON expr .)
    INTE_DOT        shift and go to state 55
    COLON           shift and go to state 218
    EQUALS          shift and go to state 58
    GREAT_THAN      shift and go to state 59
    LESS_THAN       shift and go to state 60
    LESS_EQUAL      shift and go to state 61
    GREAT_EQUAL     shift and go to state 62
    NOT_EQUAL       shift and go to state 63
    LEFT_LOGICAL    shift and go to state 64
    RIGHT_LOGICAL   shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67
    PLUS            shift and go to state 68
    DIVIDE          shift and go to state 69
    PERCENT         shift and go to state 70
    TIMES           shift and go to state 71
    MINUS           shift and go to state 72

    for_expr_COLON_EXPR            shift and go to state 270
    comparission_operator          shift and go to state 56
    arithmetic_operator            shift and go to state 57

state 249

    (51) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 271
    ATTR_ASSOC      shift and go to state 272


state 250

    (45) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 273


state 251

    (46) ampersand_variable -> VARIABLE .

    RPAREN          reduce using rule 46 (ampersand_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 46 (ampersand_variable -> VARIABLE .)


state 252

    (177) function_call_list_COLON_FUNCTION -> COLON function_call_parameter . function_call_list_COLON_FUNCTION
    (178) function_call_list_COLON_FUNCTION -> COLON function_call_parameter .
    (177) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter function_call_list_COLON_FUNCTION
    (178) function_call_list_COLON_FUNCTION -> . COLON function_call_parameter

    RPAREN          reduce using rule 178 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter .)
    COLON           shift and go to state 222

    function_call_list_COLON_FUNCTION shift and go to state 274

state 253

    (133) fds_statements -> LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    MINUS           reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 133 (fds_statements -> LKEY inner_statement_MUL RKEY .)


state 254

    (168) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 168 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 255

    (181) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (182) parameter_list_COLON_PARAMETER -> COLON parameter .
    (181) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (182) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 182 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 231

    parameter_list_COLON_PARAMETER shift and go to state 275

state 256

    (142) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 142 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 142 (parameter -> VARIABLE ASSIGN static_scalar .)


state 257

    (156) static_scalar -> common_scalar .

    COLON           reduce using rule 156 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 156 (static_scalar -> common_scalar .)


state 258

    (157) static_scalar -> PLUS . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 276
    common_scalar                  shift and go to state 257

state 259

    (158) static_scalar -> MINUS . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 277
    common_scalar                  shift and go to state 257

state 260

    (159) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 159 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 159 (common_scalar -> NUMBER_REAL .)


state 261

    (160) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 160 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 160 (common_scalar -> NUMBER_INTEGER .)


state 262

    (161) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 161 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 161 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 263

    (144) parameter -> parameter_type AMPERSAND VARIABLE .
    (147) parameter -> parameter_type AMPERSAND VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 144 (parameter -> parameter_type AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 144 (parameter -> parameter_type AMPERSAND VARIABLE .)
    ASSIGN          shift and go to state 278


state 264

    (146) parameter -> AMPERSAND VARIABLE ASSIGN . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 279
    common_scalar                  shift and go to state 257

state 265

    (187) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 187 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 266

    (166) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 166 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 166 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 267

    (37) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 37 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 268

    (34) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (39) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (53) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (54) for_expr_OPT -> . expr
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 34 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    for_expr_OPT                   shift and go to state 280
    expr                           shift and go to state 165
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 269

    (35) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 35 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 270

    (172) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 172 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 172 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 271

    (51) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN . statement_BLOCK_OPT
    (174) statement_BLOCK_OPT -> . statement
    (175) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (176) statement_BLOCK_OPT -> . LKEY RKEY
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 112
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 281
    statement                      shift and go to state 111
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 272

    (52) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC . ampersand_variable RPAREN statement_BLOCK_OPT
    (45) ampersand_variable -> . AMPERSAND VARIABLE
    (46) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 250
    VARIABLE        shift and go to state 251

    ampersand_variable             shift and go to state 282

state 273

    (45) ampersand_variable -> AMPERSAND VARIABLE .

    RPAREN          reduce using rule 45 (ampersand_variable -> AMPERSAND VARIABLE .)
    ATTR_ASSOC      reduce using rule 45 (ampersand_variable -> AMPERSAND VARIABLE .)


state 274

    (177) function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .

    RPAREN          reduce using rule 177 (function_call_list_COLON_FUNCTION -> COLON function_call_parameter function_call_list_COLON_FUNCTION .)


state 275

    (181) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 181 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 276

    (157) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 157 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 157 (static_scalar -> PLUS static_scalar .)


state 277

    (158) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 158 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 158 (static_scalar -> MINUS static_scalar .)


state 278

    (147) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN . static_scalar
    (156) static_scalar -> . common_scalar
    (157) static_scalar -> . PLUS static_scalar
    (158) static_scalar -> . MINUS static_scalar
    (159) common_scalar -> . NUMBER_REAL
    (160) common_scalar -> . NUMBER_INTEGER
    (161) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 258
    MINUS           shift and go to state 259
    NUMBER_REAL     shift and go to state 260
    NUMBER_INTEGER  shift and go to state 261
    CONSTANT_ENCAPSED_STRING shift and go to state 262

    static_scalar                  shift and go to state 283
    common_scalar                  shift and go to state 257

state 279

    (146) parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 146 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 146 (parameter -> AMPERSAND VARIABLE ASSIGN static_scalar .)


state 280

    (39) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 39 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 281

    (51) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 51 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)


state 282

    (52) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 284


state 283

    (147) parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 147 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 147 (parameter -> parameter_type AMPERSAND VARIABLE ASSIGN static_scalar .)


state 284

    (52) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN . statement_BLOCK_OPT
    (174) statement_BLOCK_OPT -> . statement
    (175) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (176) statement_BLOCK_OPT -> . LKEY RKEY
    (7) statement -> . expr SEMICOLON
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . do_statement
    (11) statement -> . for_statement
    (12) statement -> . foreach_statement
    (13) statement -> . break_statement
    (14) statement -> . continue_statement
    (15) statement -> . return_statement
    (16) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (17) statement -> . GLOBAL global_var SEMICOLON
    (96) expr -> . INCREMENT variable
    (97) expr -> . variable INCREMENT
    (98) expr -> . DECREMENT variable
    (99) expr -> . variable DECREMENT
    (100) expr -> . variable assign_operator expr
    (101) expr -> . variable assign_operator AMPERSAND expr
    (102) expr -> . variable
    (103) expr -> . LPAREN expr RPAREN
    (104) expr -> . expr INTE_DOT expr DDOT expr
    (105) expr -> . expr comparission_operator expr
    (106) expr -> . expr arithmetic_operator expr
    (107) expr -> . MINUS expr
    (108) expr -> . LPAREN type_cast_operator RPAREN expr
    (109) expr -> . EXIT exit_expr
    (110) expr -> . EXIT
    (111) expr -> . DIE exit_expr
    (112) expr -> . DIE
    (113) expr -> . ARRAY_TYPE LPAREN array_pair_list RPAREN
    (114) expr -> . ARRAY_TYPE LPAREN RPAREN
    (115) expr -> . function_call
    (116) expr -> . scalar
    (117) expr -> . TRUE
    (118) expr -> . FALSE
    (18) if_statement -> . statement_if if_statement_complement
    (19) if_statement -> . statement_if
    (23) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (24) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (31) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (51) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (52) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (25) break_statement -> . BREAK expr SEMICOLON
    (26) break_statement -> . BREAK SEMICOLON
    (27) continue_statement -> . CONTINUE expr SEMICOLON
    (28) continue_statement -> . CONTINUE SEMICOLON
    (29) return_statement -> . RETURN expr SEMICOLON
    (30) return_statement -> . RETURN SEMICOLON
    (124) variable -> . reference_variable
    (125) variable -> . simple_indirect_reference_DOLAR reference_variable
    (55) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (56) function_call -> . ID LPAREN RPAREN
    (119) scalar -> . NUMBER_REAL
    (120) scalar -> . NUMBER_INTEGER
    (121) scalar -> . CONSTANT_ENCAPSED_STRING
    (48) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (126) reference_variable -> . compound_variable reference_variable_SELECTOR
    (127) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (128) compound_variable -> . VARIABLE
    (129) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 112
    GLOBAL          shift and go to state 18
    INCREMENT       shift and go to state 19
    DECREMENT       shift and go to state 21
    LPAREN          shift and go to state 22
    MINUS           shift and go to state 23
    EXIT            shift and go to state 24
    DIE             shift and go to state 25
    ARRAY_TYPE      shift and go to state 26
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    WHILE           shift and go to state 32
    DO              shift and go to state 33
    FOR             shift and go to state 34
    FOREACH         shift and go to state 35
    BREAK           shift and go to state 36
    CONTINUE        shift and go to state 37
    RETURN          shift and go to state 38
    ID              shift and go to state 41
    NUMBER_REAL     shift and go to state 42
    NUMBER_INTEGER  shift and go to state 43
    CONSTANT_ENCAPSED_STRING shift and go to state 44
    IF              shift and go to state 45
    DOLAR           shift and go to state 47
    VARIABLE        shift and go to state 48

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 285
    statement                      shift and go to state 111
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    variable                       shift and go to state 20
    function_call                  shift and go to state 27
    scalar                         shift and go to state 28
    statement_if                   shift and go to state 31
    reference_variable             shift and go to state 39
    simple_indirect_reference_DOLAR shift and go to state 40
    compound_variable              shift and go to state 46

state 285

    (52) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    MINUS           reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 52 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 31 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 31 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 47 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 104 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 128 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 135 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 135 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 135 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 135 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 136 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 136 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 142 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 142 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 142 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 142 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 142 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 142 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 142 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 142 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 142 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 200 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 200 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 200 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 200 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 200 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 200 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 200 resolved as shift
WARNING: shift/reduce conflict for AND in state 200 resolved as shift
WARNING: shift/reduce conflict for OR in state 200 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 200 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 200 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 200 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 200 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 200 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 201 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 201 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 201 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 201 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 201 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 201 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 201 resolved as shift
WARNING: shift/reduce conflict for AND in state 201 resolved as shift
WARNING: shift/reduce conflict for OR in state 201 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 201 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 201 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 201 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 201 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 201 resolved as shift
WARNING: shift/reduce conflict for INTE_DOT in state 236 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 236 resolved as shift
WARNING: shift/reduce conflict for GREAT_THAN in state 236 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 236 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 236 resolved as shift
WARNING: shift/reduce conflict for GREAT_EQUAL in state 236 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 236 resolved as shift
WARNING: shift/reduce conflict for LEFT_LOGICAL in state 236 resolved as shift
WARNING: shift/reduce conflict for RIGHT_LOGICAL in state 236 resolved as shift
WARNING: shift/reduce conflict for AND in state 236 resolved as shift
WARNING: shift/reduce conflict for OR in state 236 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 236 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 236 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 236 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 236 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 236 resolved as shift

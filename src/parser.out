Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROFE
    ARROBA
    ASPAS
    CASE
    CLONE
    COMMENT_MULTI
    COMMENT_SINGLE
    CONCATENATE
    CRASE
    DECLARE
    ENDDECLARE
    IDENTATION
    LIST
    STRING
    VAR

Grammar

Rule 0     S' -> main
Rule 1     main -> BEGIN_PROGRAM main_INNER END_PROGRAM
Rule 2     main -> BEGIN_PROGRAM END_PROGRAM
Rule 3     main_INNER -> inner_statement main_INNER
Rule 4     main_INNER -> inner_statement
Rule 5     inner_statement -> function_declaration_statement
Rule 6     inner_statement -> statement
Rule 7     inner_statement_MUL -> inner_statement inner_statement_MUL
Rule 8     inner_statement_MUL -> inner_statement
Rule 9     expr -> expr1 expr2
Rule 10    expr -> expr3
Rule 11    expr -> expr1
Rule 12    expr2 -> INTE_DOT expr DDOT expr
Rule 13    expr2 -> comparission_operator expr
Rule 14    expr2 -> arithmetic_operator expr
Rule 15    expr3 -> variable assign_operator expr
Rule 16    expr3 -> variable assign_operator AMPERSAND expr
Rule 17    expr3 -> LPAREN type_cast_operator RPAREN expr
Rule 18    expr1 -> INCREMENT variable
Rule 19    expr1 -> variable INCREMENT
Rule 20    expr1 -> DECREMENT variable
Rule 21    expr1 -> variable DECREMENT
Rule 22    expr1 -> variable
Rule 23    expr1 -> LPAREN expr RPAREN
Rule 24    expr1 -> ARRAY_TYPE array_declaration
Rule 25    expr1 -> function_call
Rule 26    expr1 -> scalar
Rule 27    expr1 -> TRUE
Rule 28    expr1 -> FALSE
Rule 29    exit_statement -> EXIT exit_expr
Rule 30    exit_statement -> EXIT
Rule 31    die_statement -> DIE exit_expr
Rule 32    die_statement -> DIE
Rule 33    exit_expr -> LPAREN expr RPAREN
Rule 34    exit_expr -> LPAREN RPAREN
Rule 35    array_declaration -> LPAREN array_pair_list RPAREN
Rule 36    array_declaration -> LPAREN RPAREN
Rule 37    statement -> expr SEMICOLON
Rule 38    statement -> if_statement
Rule 39    statement -> while_statement
Rule 40    statement -> do_statement
Rule 41    statement -> for_statement
Rule 42    statement -> foreach_statement
Rule 43    statement -> break_statement
Rule 44    statement -> continue_statement
Rule 45    statement -> return_statement
Rule 46    statement -> exit_statement SEMICOLON
Rule 47    statement -> die_statement SEMICOLON
Rule 48    statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
Rule 49    statement -> GLOBAL global_var SEMICOLON
Rule 50    if_statement -> statement_if if_statement_complement
Rule 51    if_statement -> statement_if
Rule 52    if_statement_complement -> statement_elseif
Rule 53    if_statement_complement -> statement_else
Rule 54    statement_if -> IF expr_parentheses statement_BLOCK_OPT
Rule 55    statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT
Rule 56    statement_else -> ELSE statement_BLOCK_OPT
Rule 57    while_statement -> WHILE expr_parentheses statement_BLOCK_OPT
Rule 58    do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
Rule 59    break_statement -> BREAK expr SEMICOLON
Rule 60    break_statement -> BREAK SEMICOLON
Rule 61    continue_statement -> CONTINUE expr SEMICOLON
Rule 62    continue_statement -> CONTINUE SEMICOLON
Rule 63    return_statement -> RETURN expr SEMICOLON
Rule 64    return_statement -> RETURN SEMICOLON
Rule 65    for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
Rule 66    for_parameters -> SEMICOLON SEMICOLON
Rule 67    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON
Rule 68    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
Rule 69    for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
Rule 70    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON
Rule 71    for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 72    for_parameters -> SEMICOLON SEMICOLON for_expr_OPT
Rule 73    for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
Rule 74    global_var -> VARIABLE
Rule 75    global_var -> DOLAR VARIABLE
Rule 76    global_var -> DOLAR LKEY expr RKEY
Rule 77    statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL
Rule 78    statement_COLON_GLOBAL -> COLON global_var
Rule 79    ampersand_variable -> AMPERSAND VARIABLE
Rule 80    ampersand_variable -> VARIABLE
Rule 81    expr_parentheses -> LPAREN expr RPAREN
Rule 82    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
Rule 83    foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
Rule 84    for_expr_OPT -> expr for_expr_COLON_EXPR
Rule 85    for_expr_OPT -> expr
Rule 86    function_call -> ID LPAREN function_call_parameter_list RPAREN
Rule 87    function_call -> ID LPAREN RPAREN
Rule 88    function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 89    function_call_parameter_list -> function_call_parameter
Rule 90    fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
Rule 91    fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter
Rule 92    function_call_parameter -> expr
Rule 93    function_call_parameter -> AMPERSAND VARIABLE
Rule 94    unary_operator -> EXC_DOT
Rule 95    unary_operator -> PLUS
Rule 96    unary_operator -> MINUS
Rule 97    type_cast_operator -> INT_TYPE
Rule 98    type_cast_operator -> DOUBLE_TYPE
Rule 99    type_cast_operator -> FLOAT_TYPE
Rule 100   type_cast_operator -> REAL_TYPE
Rule 101   type_cast_operator -> STRING_TYPE
Rule 102   type_cast_operator -> ARRAY_TYPE
Rule 103   type_cast_operator -> BOOLEAN_TYPE
Rule 104   type_cast_operator -> BOOL_TYPE
Rule 105   type_cast_operator -> UNSET
Rule 106   assign_operator -> ADD_ASSIGN
Rule 107   assign_operator -> SUB_ASSIGN
Rule 108   assign_operator -> MOD_ASSIGN
Rule 109   assign_operator -> PLUS_ASSIGN
Rule 110   assign_operator -> DIVIDE_ASSIGN
Rule 111   assign_operator -> ASSIGN
Rule 112   arithmetic_operator -> PLUS
Rule 113   arithmetic_operator -> DIVIDE
Rule 114   arithmetic_operator -> PERCENT
Rule 115   arithmetic_operator -> TIMES
Rule 116   arithmetic_operator -> MINUS
Rule 117   comparission_operator -> EQUALS
Rule 118   comparission_operator -> GREAT_THAN
Rule 119   comparission_operator -> LESS_THAN
Rule 120   comparission_operator -> LESS_EQUAL
Rule 121   comparission_operator -> GREAT_EQUAL
Rule 122   comparission_operator -> NOT_EQUAL
Rule 123   comparission_operator -> LEFT_LOGICAL
Rule 124   comparission_operator -> RIGHT_LOGICAL
Rule 125   comparission_operator -> AND
Rule 126   comparission_operator -> OR
Rule 127   scalar -> NUMBER_REAL
Rule 128   scalar -> NUMBER_INTEGER
Rule 129   scalar -> CONSTANT_ENCAPSED_STRING
Rule 130   variable -> reference_variable
Rule 131   variable -> simple_indirect_reference_DOLAR reference_variable
Rule 132   reference_variable -> compound_variable reference_variable_SELECTOR
Rule 133   reference_variable -> compound_variable
Rule 134   compound_variable -> VARIABLE
Rule 135   compound_variable -> DOLAR LKEY expr RKEY
Rule 136   selector -> LBRACKET expr RBRACKET
Rule 137   selector -> LBRACKET RBRACKET
Rule 138   function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements
Rule 139   fds_statements -> LKEY inner_statement_MUL RKEY
Rule 140   fds_statements -> LKEY RKEY
Rule 141   fds_id -> AMPERSAND ID
Rule 142   fds_id -> ID
Rule 143   fds_parameter -> LPAREN parameter_list RPAREN
Rule 144   fds_parameter -> LPAREN RPAREN
Rule 145   parameter_list -> parameter parameter_list_COLON_PARAMETER
Rule 146   parameter_list -> parameter
Rule 147   parameter -> VARIABLE
Rule 148   parameter -> parameter_prefix VARIABLE
Rule 149   parameter -> VARIABLE ASSIGN static_scalar
Rule 150   parameter -> parameter_prefix VARIABLE ASSIGN static_scalar
Rule 151   parameter_prefix -> parameter_type AMPERSAND
Rule 152   parameter_prefix -> AMPERSAND
Rule 153   parameter_prefix -> parameter_type
Rule 154   parameter_type -> INT_TYPE
Rule 155   parameter_type -> BOOLEAN_TYPE
Rule 156   parameter_type -> STRING_TYPE
Rule 157   parameter_type -> FLOAT_TYPE
Rule 158   parameter_type -> ARRAY_TYPE
Rule 159   parameter_type -> BOOL_TYPE
Rule 160   parameter_type -> REAL_TYPE
Rule 161   parameter_type -> DOUBLE_TYPE
Rule 162   static_scalar -> common_scalar
Rule 163   static_scalar -> PLUS static_scalar
Rule 164   static_scalar -> MINUS static_scalar
Rule 165   common_scalar -> NUMBER_REAL
Rule 166   common_scalar -> NUMBER_INTEGER
Rule 167   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 168   array_pair_list -> array_pair array_pair_list_ARR_PAIR
Rule 169   array_pair_list -> array_pair
Rule 170   array_pair -> expr
Rule 171   array_pair -> AMPERSAND variable
Rule 172   array_pair -> expr ATTR_ASSOC expr
Rule 173   array_pair -> expr ATTR_ASSOC AMPERSAND variable
Rule 174   statement_MUL -> statement statement_MUL
Rule 175   statement_MUL -> statement
Rule 176   for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR
Rule 177   for_expr_COLON_EXPR -> COLON expr
Rule 178   statement_BLOCK_OPT -> statement
Rule 179   statement_BLOCK_OPT -> LKEY statement_MUL RKEY
Rule 180   statement_BLOCK_OPT -> LKEY RKEY
Rule 181   parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER
Rule 182   parameter_list_COLON_PARAMETER -> COLON parameter
Rule 183   reference_variable_SELECTOR -> selector reference_variable_SELECTOR
Rule 184   reference_variable_SELECTOR -> selector
Rule 185   simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR
Rule 186   simple_indirect_reference_DOLAR -> DOLAR
Rule 187   array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR
Rule 188   array_pair_list_ARR_PAIR -> COLON array_pair

Terminals, with rules where they appear

ADD_ASSIGN           : 106
AMPERSAND            : 16 79 93 141 151 152 171 173
AND                  : 125
APOSTROFE            : 
ARRAY_TYPE           : 24 102 158
ARROBA               : 
AS                   : 82 83
ASPAS                : 
ASSIGN               : 111 149 150
ATTR_ASSOC           : 83 172 173
BEGIN_PROGRAM        : 1 2
BOOLEAN_TYPE         : 103 155
BOOL_TYPE            : 104 159
BREAK                : 59 60
CASE                 : 
CLONE                : 
COLON                : 77 78 90 91 176 177 181 182 187 188
COMMENT_MULTI        : 
COMMENT_SINGLE       : 
CONCATENATE          : 
CONSTANT_ENCAPSED_STRING : 129 167
CONTINUE             : 61 62
CRASE                : 
DDOT                 : 12
DECLARE              : 
DECREMENT            : 20 21
DIE                  : 31 32
DIVIDE               : 113
DIVIDE_ASSIGN        : 110
DO                   : 58
DOLAR                : 75 76 135 185 186
DOUBLE_TYPE          : 98 161
ELSE                 : 56
ELSEIF               : 55
ENDDECLARE           : 
END_PROGRAM          : 1 2
EQUALS               : 117
EXC_DOT              : 94
EXIT                 : 29 30
FALSE                : 28
FLOAT_TYPE           : 99 157
FOR                  : 65
FOREACH              : 82 83
FUNCTION             : 138
GLOBAL               : 48 49
GREAT_EQUAL          : 121
GREAT_THAN           : 118
ID                   : 86 87 141 142
IDENTATION           : 
IF                   : 54
INCREMENT            : 18 19
INTE_DOT             : 12
INT_TYPE             : 97 154
LBRACKET             : 136 137
LEFT_LOGICAL         : 123
LESS_EQUAL           : 120
LESS_THAN            : 119
LIST                 : 
LKEY                 : 76 135 139 140 179 180
LPAREN               : 17 23 33 34 35 36 65 81 82 83 86 87 143 144
MINUS                : 96 116 164
MOD_ASSIGN           : 108
NOT_EQUAL            : 122
NUMBER_INTEGER       : 128 166
NUMBER_REAL          : 127 165
OR                   : 126
PERCENT              : 114
PLUS                 : 95 112 163
PLUS_ASSIGN          : 109
RBRACKET             : 136 137
REAL_TYPE            : 100 160
RETURN               : 63 64
RIGHT_LOGICAL        : 124
RKEY                 : 76 135 139 140 179 180
RPAREN               : 17 23 33 34 35 36 65 81 82 83 86 87 143 144
SEMICOLON            : 37 46 47 48 49 58 59 60 61 62 63 64 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73
STRING               : 
STRING_TYPE          : 101 156
SUB_ASSIGN           : 107
TIMES                : 115
TRUE                 : 27
UNSET                : 105
VAR                  : 
VARIABLE             : 74 75 79 80 93 134 147 148 149 150
WHILE                : 57 58
error                : 

Nonterminals, with rules where they appear

ampersand_variable   : 82 83 83
arithmetic_operator  : 14
array_declaration    : 24
array_pair           : 168 169 187 188
array_pair_list      : 35
array_pair_list_ARR_PAIR : 168 187
assign_operator      : 15 16
break_statement      : 43
common_scalar        : 162
comparission_operator : 13
compound_variable    : 132 133
continue_statement   : 44
die_statement        : 47
do_statement         : 40
exit_expr            : 29 31
exit_statement       : 46
expr                 : 12 12 13 14 15 16 17 23 33 37 59 61 63 76 81 82 83 84 85 92 135 136 170 172 172 173 176 177
expr1                : 9 11
expr2                : 9
expr3                : 10
expr_parentheses     : 54 55 57 58
fc_parameter_list_COLON_PARAMETER : 88 90
fds_id               : 138
fds_parameter        : 138
fds_statements       : 138
for_expr_COLON_EXPR  : 84 176
for_expr_OPT         : 67 68 68 69 69 70 71 71 72 73 73 73
for_parameters       : 65
for_statement        : 41
foreach_statement    : 42
function_call        : 25
function_call_parameter : 88 89 90 91
function_call_parameter_list : 86
function_declaration_statement : 5
global_var           : 48 49 77 78
if_statement         : 38
if_statement_complement : 50
inner_statement      : 3 4 7 8
inner_statement_MUL  : 7 139
main                 : 0
main_INNER           : 1 3
parameter            : 145 146 181 182
parameter_list       : 143
parameter_list_COLON_PARAMETER : 145 181
parameter_prefix     : 148 150
parameter_type       : 151 153
reference_variable   : 130 131
reference_variable_SELECTOR : 132 183
return_statement     : 45
scalar               : 26
selector             : 183 184
simple_indirect_reference_DOLAR : 131 185
statement            : 6 174 175 178
statement_BLOCK_OPT  : 54 55 56 57 58 65 82 83
statement_COLON_GLOBAL : 48 77
statement_MUL        : 174 179
statement_else       : 53
statement_elseif     : 52
statement_if         : 50 51
static_scalar        : 149 150 163 164
type_cast_operator   : 17
unary_operator       : 
variable             : 15 16 18 19 20 21 22 171 173
while_statement      : 39

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . BEGIN_PROGRAM main_INNER END_PROGRAM
    (2) main -> . BEGIN_PROGRAM END_PROGRAM

    BEGIN_PROGRAM   shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> BEGIN_PROGRAM . main_INNER END_PROGRAM
    (2) main -> BEGIN_PROGRAM . END_PROGRAM
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (138) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     shift and go to state 4
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    main_INNER                     shift and go to state 3
    inner_statement                shift and go to state 5
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 3

    (1) main -> BEGIN_PROGRAM main_INNER . END_PROGRAM

    END_PROGRAM     shift and go to state 52


state 4

    (2) main -> BEGIN_PROGRAM END_PROGRAM .

    $end            reduce using rule 2 (main -> BEGIN_PROGRAM END_PROGRAM .)


state 5

    (3) main_INNER -> inner_statement . main_INNER
    (4) main_INNER -> inner_statement .
    (3) main_INNER -> . inner_statement main_INNER
    (4) main_INNER -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (138) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    END_PROGRAM     reduce using rule 4 (main_INNER -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement                shift and go to state 5
    main_INNER                     shift and go to state 53
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 6

    (5) inner_statement -> function_declaration_statement .

    FUNCTION        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 5 (inner_statement -> function_declaration_statement .)
    INCREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DECREMENT       reduce using rule 5 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ARRAY_TYPE      reduce using rule 5 (inner_statement -> function_declaration_statement .)
    TRUE            reduce using rule 5 (inner_statement -> function_declaration_statement .)
    FALSE           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    ID              reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_REAL     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    NUMBER_INTEGER  reduce using rule 5 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (inner_statement -> function_declaration_statement .)
    DOLAR           reduce using rule 5 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (inner_statement -> function_declaration_statement .)
    END_PROGRAM     reduce using rule 5 (inner_statement -> function_declaration_statement .)
    RKEY            reduce using rule 5 (inner_statement -> function_declaration_statement .)


state 7

    (6) inner_statement -> statement .

    FUNCTION        reduce using rule 6 (inner_statement -> statement .)
    GLOBAL          reduce using rule 6 (inner_statement -> statement .)
    WHILE           reduce using rule 6 (inner_statement -> statement .)
    DO              reduce using rule 6 (inner_statement -> statement .)
    FOR             reduce using rule 6 (inner_statement -> statement .)
    FOREACH         reduce using rule 6 (inner_statement -> statement .)
    BREAK           reduce using rule 6 (inner_statement -> statement .)
    CONTINUE        reduce using rule 6 (inner_statement -> statement .)
    RETURN          reduce using rule 6 (inner_statement -> statement .)
    EXIT            reduce using rule 6 (inner_statement -> statement .)
    DIE             reduce using rule 6 (inner_statement -> statement .)
    INCREMENT       reduce using rule 6 (inner_statement -> statement .)
    DECREMENT       reduce using rule 6 (inner_statement -> statement .)
    LPAREN          reduce using rule 6 (inner_statement -> statement .)
    ARRAY_TYPE      reduce using rule 6 (inner_statement -> statement .)
    TRUE            reduce using rule 6 (inner_statement -> statement .)
    FALSE           reduce using rule 6 (inner_statement -> statement .)
    IF              reduce using rule 6 (inner_statement -> statement .)
    ID              reduce using rule 6 (inner_statement -> statement .)
    NUMBER_REAL     reduce using rule 6 (inner_statement -> statement .)
    NUMBER_INTEGER  reduce using rule 6 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (inner_statement -> statement .)
    DOLAR           reduce using rule 6 (inner_statement -> statement .)
    VARIABLE        reduce using rule 6 (inner_statement -> statement .)
    END_PROGRAM     reduce using rule 6 (inner_statement -> statement .)
    RKEY            reduce using rule 6 (inner_statement -> statement .)


state 8

    (138) function_declaration_statement -> FUNCTION . fds_id fds_parameter fds_statements
    (141) fds_id -> . AMPERSAND ID
    (142) fds_id -> . ID

    AMPERSAND       shift and go to state 55
    ID              shift and go to state 56

    fds_id                         shift and go to state 54

state 9

    (37) statement -> expr . SEMICOLON

    SEMICOLON       shift and go to state 57


state 10

    (38) statement -> if_statement .

    FUNCTION        reduce using rule 38 (statement -> if_statement .)
    GLOBAL          reduce using rule 38 (statement -> if_statement .)
    WHILE           reduce using rule 38 (statement -> if_statement .)
    DO              reduce using rule 38 (statement -> if_statement .)
    FOR             reduce using rule 38 (statement -> if_statement .)
    FOREACH         reduce using rule 38 (statement -> if_statement .)
    BREAK           reduce using rule 38 (statement -> if_statement .)
    CONTINUE        reduce using rule 38 (statement -> if_statement .)
    RETURN          reduce using rule 38 (statement -> if_statement .)
    EXIT            reduce using rule 38 (statement -> if_statement .)
    DIE             reduce using rule 38 (statement -> if_statement .)
    INCREMENT       reduce using rule 38 (statement -> if_statement .)
    DECREMENT       reduce using rule 38 (statement -> if_statement .)
    LPAREN          reduce using rule 38 (statement -> if_statement .)
    ARRAY_TYPE      reduce using rule 38 (statement -> if_statement .)
    TRUE            reduce using rule 38 (statement -> if_statement .)
    FALSE           reduce using rule 38 (statement -> if_statement .)
    IF              reduce using rule 38 (statement -> if_statement .)
    ID              reduce using rule 38 (statement -> if_statement .)
    NUMBER_REAL     reduce using rule 38 (statement -> if_statement .)
    NUMBER_INTEGER  reduce using rule 38 (statement -> if_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 38 (statement -> if_statement .)
    DOLAR           reduce using rule 38 (statement -> if_statement .)
    VARIABLE        reduce using rule 38 (statement -> if_statement .)
    END_PROGRAM     reduce using rule 38 (statement -> if_statement .)
    RKEY            reduce using rule 38 (statement -> if_statement .)
    ELSEIF          reduce using rule 38 (statement -> if_statement .)
    ELSE            reduce using rule 38 (statement -> if_statement .)


state 11

    (39) statement -> while_statement .

    FUNCTION        reduce using rule 39 (statement -> while_statement .)
    GLOBAL          reduce using rule 39 (statement -> while_statement .)
    WHILE           reduce using rule 39 (statement -> while_statement .)
    DO              reduce using rule 39 (statement -> while_statement .)
    FOR             reduce using rule 39 (statement -> while_statement .)
    FOREACH         reduce using rule 39 (statement -> while_statement .)
    BREAK           reduce using rule 39 (statement -> while_statement .)
    CONTINUE        reduce using rule 39 (statement -> while_statement .)
    RETURN          reduce using rule 39 (statement -> while_statement .)
    EXIT            reduce using rule 39 (statement -> while_statement .)
    DIE             reduce using rule 39 (statement -> while_statement .)
    INCREMENT       reduce using rule 39 (statement -> while_statement .)
    DECREMENT       reduce using rule 39 (statement -> while_statement .)
    LPAREN          reduce using rule 39 (statement -> while_statement .)
    ARRAY_TYPE      reduce using rule 39 (statement -> while_statement .)
    TRUE            reduce using rule 39 (statement -> while_statement .)
    FALSE           reduce using rule 39 (statement -> while_statement .)
    IF              reduce using rule 39 (statement -> while_statement .)
    ID              reduce using rule 39 (statement -> while_statement .)
    NUMBER_REAL     reduce using rule 39 (statement -> while_statement .)
    NUMBER_INTEGER  reduce using rule 39 (statement -> while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 39 (statement -> while_statement .)
    DOLAR           reduce using rule 39 (statement -> while_statement .)
    VARIABLE        reduce using rule 39 (statement -> while_statement .)
    END_PROGRAM     reduce using rule 39 (statement -> while_statement .)
    RKEY            reduce using rule 39 (statement -> while_statement .)
    ELSEIF          reduce using rule 39 (statement -> while_statement .)
    ELSE            reduce using rule 39 (statement -> while_statement .)


state 12

    (40) statement -> do_statement .

    FUNCTION        reduce using rule 40 (statement -> do_statement .)
    GLOBAL          reduce using rule 40 (statement -> do_statement .)
    WHILE           reduce using rule 40 (statement -> do_statement .)
    DO              reduce using rule 40 (statement -> do_statement .)
    FOR             reduce using rule 40 (statement -> do_statement .)
    FOREACH         reduce using rule 40 (statement -> do_statement .)
    BREAK           reduce using rule 40 (statement -> do_statement .)
    CONTINUE        reduce using rule 40 (statement -> do_statement .)
    RETURN          reduce using rule 40 (statement -> do_statement .)
    EXIT            reduce using rule 40 (statement -> do_statement .)
    DIE             reduce using rule 40 (statement -> do_statement .)
    INCREMENT       reduce using rule 40 (statement -> do_statement .)
    DECREMENT       reduce using rule 40 (statement -> do_statement .)
    LPAREN          reduce using rule 40 (statement -> do_statement .)
    ARRAY_TYPE      reduce using rule 40 (statement -> do_statement .)
    TRUE            reduce using rule 40 (statement -> do_statement .)
    FALSE           reduce using rule 40 (statement -> do_statement .)
    IF              reduce using rule 40 (statement -> do_statement .)
    ID              reduce using rule 40 (statement -> do_statement .)
    NUMBER_REAL     reduce using rule 40 (statement -> do_statement .)
    NUMBER_INTEGER  reduce using rule 40 (statement -> do_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 40 (statement -> do_statement .)
    DOLAR           reduce using rule 40 (statement -> do_statement .)
    VARIABLE        reduce using rule 40 (statement -> do_statement .)
    END_PROGRAM     reduce using rule 40 (statement -> do_statement .)
    RKEY            reduce using rule 40 (statement -> do_statement .)
    ELSEIF          reduce using rule 40 (statement -> do_statement .)
    ELSE            reduce using rule 40 (statement -> do_statement .)


state 13

    (41) statement -> for_statement .

    FUNCTION        reduce using rule 41 (statement -> for_statement .)
    GLOBAL          reduce using rule 41 (statement -> for_statement .)
    WHILE           reduce using rule 41 (statement -> for_statement .)
    DO              reduce using rule 41 (statement -> for_statement .)
    FOR             reduce using rule 41 (statement -> for_statement .)
    FOREACH         reduce using rule 41 (statement -> for_statement .)
    BREAK           reduce using rule 41 (statement -> for_statement .)
    CONTINUE        reduce using rule 41 (statement -> for_statement .)
    RETURN          reduce using rule 41 (statement -> for_statement .)
    EXIT            reduce using rule 41 (statement -> for_statement .)
    DIE             reduce using rule 41 (statement -> for_statement .)
    INCREMENT       reduce using rule 41 (statement -> for_statement .)
    DECREMENT       reduce using rule 41 (statement -> for_statement .)
    LPAREN          reduce using rule 41 (statement -> for_statement .)
    ARRAY_TYPE      reduce using rule 41 (statement -> for_statement .)
    TRUE            reduce using rule 41 (statement -> for_statement .)
    FALSE           reduce using rule 41 (statement -> for_statement .)
    IF              reduce using rule 41 (statement -> for_statement .)
    ID              reduce using rule 41 (statement -> for_statement .)
    NUMBER_REAL     reduce using rule 41 (statement -> for_statement .)
    NUMBER_INTEGER  reduce using rule 41 (statement -> for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 41 (statement -> for_statement .)
    DOLAR           reduce using rule 41 (statement -> for_statement .)
    VARIABLE        reduce using rule 41 (statement -> for_statement .)
    END_PROGRAM     reduce using rule 41 (statement -> for_statement .)
    RKEY            reduce using rule 41 (statement -> for_statement .)
    ELSEIF          reduce using rule 41 (statement -> for_statement .)
    ELSE            reduce using rule 41 (statement -> for_statement .)


state 14

    (42) statement -> foreach_statement .

    FUNCTION        reduce using rule 42 (statement -> foreach_statement .)
    GLOBAL          reduce using rule 42 (statement -> foreach_statement .)
    WHILE           reduce using rule 42 (statement -> foreach_statement .)
    DO              reduce using rule 42 (statement -> foreach_statement .)
    FOR             reduce using rule 42 (statement -> foreach_statement .)
    FOREACH         reduce using rule 42 (statement -> foreach_statement .)
    BREAK           reduce using rule 42 (statement -> foreach_statement .)
    CONTINUE        reduce using rule 42 (statement -> foreach_statement .)
    RETURN          reduce using rule 42 (statement -> foreach_statement .)
    EXIT            reduce using rule 42 (statement -> foreach_statement .)
    DIE             reduce using rule 42 (statement -> foreach_statement .)
    INCREMENT       reduce using rule 42 (statement -> foreach_statement .)
    DECREMENT       reduce using rule 42 (statement -> foreach_statement .)
    LPAREN          reduce using rule 42 (statement -> foreach_statement .)
    ARRAY_TYPE      reduce using rule 42 (statement -> foreach_statement .)
    TRUE            reduce using rule 42 (statement -> foreach_statement .)
    FALSE           reduce using rule 42 (statement -> foreach_statement .)
    IF              reduce using rule 42 (statement -> foreach_statement .)
    ID              reduce using rule 42 (statement -> foreach_statement .)
    NUMBER_REAL     reduce using rule 42 (statement -> foreach_statement .)
    NUMBER_INTEGER  reduce using rule 42 (statement -> foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 42 (statement -> foreach_statement .)
    DOLAR           reduce using rule 42 (statement -> foreach_statement .)
    VARIABLE        reduce using rule 42 (statement -> foreach_statement .)
    END_PROGRAM     reduce using rule 42 (statement -> foreach_statement .)
    RKEY            reduce using rule 42 (statement -> foreach_statement .)
    ELSEIF          reduce using rule 42 (statement -> foreach_statement .)
    ELSE            reduce using rule 42 (statement -> foreach_statement .)


state 15

    (43) statement -> break_statement .

    FUNCTION        reduce using rule 43 (statement -> break_statement .)
    GLOBAL          reduce using rule 43 (statement -> break_statement .)
    WHILE           reduce using rule 43 (statement -> break_statement .)
    DO              reduce using rule 43 (statement -> break_statement .)
    FOR             reduce using rule 43 (statement -> break_statement .)
    FOREACH         reduce using rule 43 (statement -> break_statement .)
    BREAK           reduce using rule 43 (statement -> break_statement .)
    CONTINUE        reduce using rule 43 (statement -> break_statement .)
    RETURN          reduce using rule 43 (statement -> break_statement .)
    EXIT            reduce using rule 43 (statement -> break_statement .)
    DIE             reduce using rule 43 (statement -> break_statement .)
    INCREMENT       reduce using rule 43 (statement -> break_statement .)
    DECREMENT       reduce using rule 43 (statement -> break_statement .)
    LPAREN          reduce using rule 43 (statement -> break_statement .)
    ARRAY_TYPE      reduce using rule 43 (statement -> break_statement .)
    TRUE            reduce using rule 43 (statement -> break_statement .)
    FALSE           reduce using rule 43 (statement -> break_statement .)
    IF              reduce using rule 43 (statement -> break_statement .)
    ID              reduce using rule 43 (statement -> break_statement .)
    NUMBER_REAL     reduce using rule 43 (statement -> break_statement .)
    NUMBER_INTEGER  reduce using rule 43 (statement -> break_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 43 (statement -> break_statement .)
    DOLAR           reduce using rule 43 (statement -> break_statement .)
    VARIABLE        reduce using rule 43 (statement -> break_statement .)
    END_PROGRAM     reduce using rule 43 (statement -> break_statement .)
    RKEY            reduce using rule 43 (statement -> break_statement .)
    ELSEIF          reduce using rule 43 (statement -> break_statement .)
    ELSE            reduce using rule 43 (statement -> break_statement .)


state 16

    (44) statement -> continue_statement .

    FUNCTION        reduce using rule 44 (statement -> continue_statement .)
    GLOBAL          reduce using rule 44 (statement -> continue_statement .)
    WHILE           reduce using rule 44 (statement -> continue_statement .)
    DO              reduce using rule 44 (statement -> continue_statement .)
    FOR             reduce using rule 44 (statement -> continue_statement .)
    FOREACH         reduce using rule 44 (statement -> continue_statement .)
    BREAK           reduce using rule 44 (statement -> continue_statement .)
    CONTINUE        reduce using rule 44 (statement -> continue_statement .)
    RETURN          reduce using rule 44 (statement -> continue_statement .)
    EXIT            reduce using rule 44 (statement -> continue_statement .)
    DIE             reduce using rule 44 (statement -> continue_statement .)
    INCREMENT       reduce using rule 44 (statement -> continue_statement .)
    DECREMENT       reduce using rule 44 (statement -> continue_statement .)
    LPAREN          reduce using rule 44 (statement -> continue_statement .)
    ARRAY_TYPE      reduce using rule 44 (statement -> continue_statement .)
    TRUE            reduce using rule 44 (statement -> continue_statement .)
    FALSE           reduce using rule 44 (statement -> continue_statement .)
    IF              reduce using rule 44 (statement -> continue_statement .)
    ID              reduce using rule 44 (statement -> continue_statement .)
    NUMBER_REAL     reduce using rule 44 (statement -> continue_statement .)
    NUMBER_INTEGER  reduce using rule 44 (statement -> continue_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (statement -> continue_statement .)
    DOLAR           reduce using rule 44 (statement -> continue_statement .)
    VARIABLE        reduce using rule 44 (statement -> continue_statement .)
    END_PROGRAM     reduce using rule 44 (statement -> continue_statement .)
    RKEY            reduce using rule 44 (statement -> continue_statement .)
    ELSEIF          reduce using rule 44 (statement -> continue_statement .)
    ELSE            reduce using rule 44 (statement -> continue_statement .)


state 17

    (45) statement -> return_statement .

    FUNCTION        reduce using rule 45 (statement -> return_statement .)
    GLOBAL          reduce using rule 45 (statement -> return_statement .)
    WHILE           reduce using rule 45 (statement -> return_statement .)
    DO              reduce using rule 45 (statement -> return_statement .)
    FOR             reduce using rule 45 (statement -> return_statement .)
    FOREACH         reduce using rule 45 (statement -> return_statement .)
    BREAK           reduce using rule 45 (statement -> return_statement .)
    CONTINUE        reduce using rule 45 (statement -> return_statement .)
    RETURN          reduce using rule 45 (statement -> return_statement .)
    EXIT            reduce using rule 45 (statement -> return_statement .)
    DIE             reduce using rule 45 (statement -> return_statement .)
    INCREMENT       reduce using rule 45 (statement -> return_statement .)
    DECREMENT       reduce using rule 45 (statement -> return_statement .)
    LPAREN          reduce using rule 45 (statement -> return_statement .)
    ARRAY_TYPE      reduce using rule 45 (statement -> return_statement .)
    TRUE            reduce using rule 45 (statement -> return_statement .)
    FALSE           reduce using rule 45 (statement -> return_statement .)
    IF              reduce using rule 45 (statement -> return_statement .)
    ID              reduce using rule 45 (statement -> return_statement .)
    NUMBER_REAL     reduce using rule 45 (statement -> return_statement .)
    NUMBER_INTEGER  reduce using rule 45 (statement -> return_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 45 (statement -> return_statement .)
    DOLAR           reduce using rule 45 (statement -> return_statement .)
    VARIABLE        reduce using rule 45 (statement -> return_statement .)
    END_PROGRAM     reduce using rule 45 (statement -> return_statement .)
    RKEY            reduce using rule 45 (statement -> return_statement .)
    ELSEIF          reduce using rule 45 (statement -> return_statement .)
    ELSE            reduce using rule 45 (statement -> return_statement .)


state 18

    (46) statement -> exit_statement . SEMICOLON

    SEMICOLON       shift and go to state 58


state 19

    (47) statement -> die_statement . SEMICOLON

    SEMICOLON       shift and go to state 59


state 20

    (48) statement -> GLOBAL . global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> GLOBAL . global_var SEMICOLON
    (74) global_var -> . VARIABLE
    (75) global_var -> . DOLAR VARIABLE
    (76) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 61
    DOLAR           shift and go to state 62

    global_var                     shift and go to state 60

state 21

    (9) expr -> expr1 . expr2
    (11) expr -> expr1 .
    (12) expr2 -> . INTE_DOT expr DDOT expr
    (13) expr2 -> . comparission_operator expr
    (14) expr2 -> . arithmetic_operator expr
    (117) comparission_operator -> . EQUALS
    (118) comparission_operator -> . GREAT_THAN
    (119) comparission_operator -> . LESS_THAN
    (120) comparission_operator -> . LESS_EQUAL
    (121) comparission_operator -> . GREAT_EQUAL
    (122) comparission_operator -> . NOT_EQUAL
    (123) comparission_operator -> . LEFT_LOGICAL
    (124) comparission_operator -> . RIGHT_LOGICAL
    (125) comparission_operator -> . AND
    (126) comparission_operator -> . OR
    (112) arithmetic_operator -> . PLUS
    (113) arithmetic_operator -> . DIVIDE
    (114) arithmetic_operator -> . PERCENT
    (115) arithmetic_operator -> . TIMES
    (116) arithmetic_operator -> . MINUS

    SEMICOLON       reduce using rule 11 (expr -> expr1 .)
    RPAREN          reduce using rule 11 (expr -> expr1 .)
    DDOT            reduce using rule 11 (expr -> expr1 .)
    COLON           reduce using rule 11 (expr -> expr1 .)
    AS              reduce using rule 11 (expr -> expr1 .)
    ATTR_ASSOC      reduce using rule 11 (expr -> expr1 .)
    RBRACKET        reduce using rule 11 (expr -> expr1 .)
    RKEY            reduce using rule 11 (expr -> expr1 .)
    INTE_DOT        shift and go to state 64
    EQUALS          shift and go to state 67
    GREAT_THAN      shift and go to state 68
    LESS_THAN       shift and go to state 69
    LESS_EQUAL      shift and go to state 70
    GREAT_EQUAL     shift and go to state 71
    NOT_EQUAL       shift and go to state 72
    LEFT_LOGICAL    shift and go to state 73
    RIGHT_LOGICAL   shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76
    PLUS            shift and go to state 77
    DIVIDE          shift and go to state 78
    PERCENT         shift and go to state 79
    TIMES           shift and go to state 80
    MINUS           shift and go to state 81

    expr2                          shift and go to state 63
    comparission_operator          shift and go to state 65
    arithmetic_operator            shift and go to state 66

state 22

    (10) expr -> expr3 .

    SEMICOLON       reduce using rule 10 (expr -> expr3 .)
    RPAREN          reduce using rule 10 (expr -> expr3 .)
    DDOT            reduce using rule 10 (expr -> expr3 .)
    COLON           reduce using rule 10 (expr -> expr3 .)
    AS              reduce using rule 10 (expr -> expr3 .)
    ATTR_ASSOC      reduce using rule 10 (expr -> expr3 .)
    RBRACKET        reduce using rule 10 (expr -> expr3 .)
    RKEY            reduce using rule 10 (expr -> expr3 .)


state 23

    (50) if_statement -> statement_if . if_statement_complement
    (51) if_statement -> statement_if .
    (52) if_statement_complement -> . statement_elseif
    (53) if_statement_complement -> . statement_else
    (55) statement_elseif -> . ELSEIF expr_parentheses statement_BLOCK_OPT
    (56) statement_else -> . ELSE statement_BLOCK_OPT

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    FUNCTION        reduce using rule 51 (if_statement -> statement_if .)
    GLOBAL          reduce using rule 51 (if_statement -> statement_if .)
    WHILE           reduce using rule 51 (if_statement -> statement_if .)
    DO              reduce using rule 51 (if_statement -> statement_if .)
    FOR             reduce using rule 51 (if_statement -> statement_if .)
    FOREACH         reduce using rule 51 (if_statement -> statement_if .)
    BREAK           reduce using rule 51 (if_statement -> statement_if .)
    CONTINUE        reduce using rule 51 (if_statement -> statement_if .)
    RETURN          reduce using rule 51 (if_statement -> statement_if .)
    EXIT            reduce using rule 51 (if_statement -> statement_if .)
    DIE             reduce using rule 51 (if_statement -> statement_if .)
    INCREMENT       reduce using rule 51 (if_statement -> statement_if .)
    DECREMENT       reduce using rule 51 (if_statement -> statement_if .)
    LPAREN          reduce using rule 51 (if_statement -> statement_if .)
    ARRAY_TYPE      reduce using rule 51 (if_statement -> statement_if .)
    TRUE            reduce using rule 51 (if_statement -> statement_if .)
    FALSE           reduce using rule 51 (if_statement -> statement_if .)
    IF              reduce using rule 51 (if_statement -> statement_if .)
    ID              reduce using rule 51 (if_statement -> statement_if .)
    NUMBER_REAL     reduce using rule 51 (if_statement -> statement_if .)
    NUMBER_INTEGER  reduce using rule 51 (if_statement -> statement_if .)
    CONSTANT_ENCAPSED_STRING reduce using rule 51 (if_statement -> statement_if .)
    DOLAR           reduce using rule 51 (if_statement -> statement_if .)
    VARIABLE        reduce using rule 51 (if_statement -> statement_if .)
    END_PROGRAM     reduce using rule 51 (if_statement -> statement_if .)
    RKEY            reduce using rule 51 (if_statement -> statement_if .)
    ELSEIF          shift and go to state 85
    ELSE            shift and go to state 86

  ! ELSEIF          [ reduce using rule 51 (if_statement -> statement_if .) ]
  ! ELSE            [ reduce using rule 51 (if_statement -> statement_if .) ]

    if_statement_complement        shift and go to state 82
    statement_elseif               shift and go to state 83
    statement_else                 shift and go to state 84

state 24

    (57) while_statement -> WHILE . expr_parentheses statement_BLOCK_OPT
    (81) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 88

    expr_parentheses               shift and go to state 87

state 25

    (58) do_statement -> DO . statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (178) statement_BLOCK_OPT -> . statement
    (179) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (180) statement_BLOCK_OPT -> . LKEY RKEY
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 91
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 89
    statement                      shift and go to state 90
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 26

    (65) for_statement -> FOR . LPAREN for_parameters RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 92


state 27

    (23) expr1 -> LPAREN . expr RPAREN
    (17) expr3 -> LPAREN . type_cast_operator RPAREN expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (97) type_cast_operator -> . INT_TYPE
    (98) type_cast_operator -> . DOUBLE_TYPE
    (99) type_cast_operator -> . FLOAT_TYPE
    (100) type_cast_operator -> . REAL_TYPE
    (101) type_cast_operator -> . STRING_TYPE
    (102) type_cast_operator -> . ARRAY_TYPE
    (103) type_cast_operator -> . BOOLEAN_TYPE
    (104) type_cast_operator -> . BOOL_TYPE
    (105) type_cast_operator -> . UNSET
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INT_TYPE        shift and go to state 95
    DOUBLE_TYPE     shift and go to state 96
    FLOAT_TYPE      shift and go to state 97
    REAL_TYPE       shift and go to state 98
    STRING_TYPE     shift and go to state 99
    ARRAY_TYPE      shift and go to state 100
    BOOLEAN_TYPE    shift and go to state 101
    BOOL_TYPE       shift and go to state 102
    UNSET           shift and go to state 103
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 93
    type_cast_operator             shift and go to state 94
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 28

    (82) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> FOREACH . LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    LPAREN          shift and go to state 104


state 29

    (59) break_statement -> BREAK . expr SEMICOLON
    (60) break_statement -> BREAK . SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 106
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 105
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 30

    (61) continue_statement -> CONTINUE . expr SEMICOLON
    (62) continue_statement -> CONTINUE . SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 108
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 107
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 31

    (63) return_statement -> RETURN . expr SEMICOLON
    (64) return_statement -> RETURN . SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 110
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 109
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 32

    (29) exit_statement -> EXIT . exit_expr
    (30) exit_statement -> EXIT .
    (33) exit_expr -> . LPAREN expr RPAREN
    (34) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 30 (exit_statement -> EXIT .)
    LPAREN          shift and go to state 112

    exit_expr                      shift and go to state 111

state 33

    (31) die_statement -> DIE . exit_expr
    (32) die_statement -> DIE .
    (33) exit_expr -> . LPAREN expr RPAREN
    (34) exit_expr -> . LPAREN RPAREN

    SEMICOLON       reduce using rule 32 (die_statement -> DIE .)
    LPAREN          shift and go to state 112

    exit_expr                      shift and go to state 113

state 34

    (18) expr1 -> INCREMENT . variable
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 114
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 35

    (19) expr1 -> variable . INCREMENT
    (21) expr1 -> variable . DECREMENT
    (22) expr1 -> variable .
    (15) expr3 -> variable . assign_operator expr
    (16) expr3 -> variable . assign_operator AMPERSAND expr
    (106) assign_operator -> . ADD_ASSIGN
    (107) assign_operator -> . SUB_ASSIGN
    (108) assign_operator -> . MOD_ASSIGN
    (109) assign_operator -> . PLUS_ASSIGN
    (110) assign_operator -> . DIVIDE_ASSIGN
    (111) assign_operator -> . ASSIGN

    INCREMENT       shift and go to state 115
    DECREMENT       shift and go to state 116
    INTE_DOT        reduce using rule 22 (expr1 -> variable .)
    EQUALS          reduce using rule 22 (expr1 -> variable .)
    GREAT_THAN      reduce using rule 22 (expr1 -> variable .)
    LESS_THAN       reduce using rule 22 (expr1 -> variable .)
    LESS_EQUAL      reduce using rule 22 (expr1 -> variable .)
    GREAT_EQUAL     reduce using rule 22 (expr1 -> variable .)
    NOT_EQUAL       reduce using rule 22 (expr1 -> variable .)
    LEFT_LOGICAL    reduce using rule 22 (expr1 -> variable .)
    RIGHT_LOGICAL   reduce using rule 22 (expr1 -> variable .)
    AND             reduce using rule 22 (expr1 -> variable .)
    OR              reduce using rule 22 (expr1 -> variable .)
    PLUS            reduce using rule 22 (expr1 -> variable .)
    DIVIDE          reduce using rule 22 (expr1 -> variable .)
    PERCENT         reduce using rule 22 (expr1 -> variable .)
    TIMES           reduce using rule 22 (expr1 -> variable .)
    MINUS           reduce using rule 22 (expr1 -> variable .)
    SEMICOLON       reduce using rule 22 (expr1 -> variable .)
    RPAREN          reduce using rule 22 (expr1 -> variable .)
    DDOT            reduce using rule 22 (expr1 -> variable .)
    COLON           reduce using rule 22 (expr1 -> variable .)
    AS              reduce using rule 22 (expr1 -> variable .)
    ATTR_ASSOC      reduce using rule 22 (expr1 -> variable .)
    RBRACKET        reduce using rule 22 (expr1 -> variable .)
    RKEY            reduce using rule 22 (expr1 -> variable .)
    ADD_ASSIGN      shift and go to state 118
    SUB_ASSIGN      shift and go to state 119
    MOD_ASSIGN      shift and go to state 120
    PLUS_ASSIGN     shift and go to state 121
    DIVIDE_ASSIGN   shift and go to state 122
    ASSIGN          shift and go to state 123

    assign_operator                shift and go to state 117

state 36

    (20) expr1 -> DECREMENT . variable
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 124
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 37

    (24) expr1 -> ARRAY_TYPE . array_declaration
    (35) array_declaration -> . LPAREN array_pair_list RPAREN
    (36) array_declaration -> . LPAREN RPAREN

    LPAREN          shift and go to state 126

    array_declaration              shift and go to state 125

state 38

    (25) expr1 -> function_call .

    INTE_DOT        reduce using rule 25 (expr1 -> function_call .)
    EQUALS          reduce using rule 25 (expr1 -> function_call .)
    GREAT_THAN      reduce using rule 25 (expr1 -> function_call .)
    LESS_THAN       reduce using rule 25 (expr1 -> function_call .)
    LESS_EQUAL      reduce using rule 25 (expr1 -> function_call .)
    GREAT_EQUAL     reduce using rule 25 (expr1 -> function_call .)
    NOT_EQUAL       reduce using rule 25 (expr1 -> function_call .)
    LEFT_LOGICAL    reduce using rule 25 (expr1 -> function_call .)
    RIGHT_LOGICAL   reduce using rule 25 (expr1 -> function_call .)
    AND             reduce using rule 25 (expr1 -> function_call .)
    OR              reduce using rule 25 (expr1 -> function_call .)
    PLUS            reduce using rule 25 (expr1 -> function_call .)
    DIVIDE          reduce using rule 25 (expr1 -> function_call .)
    PERCENT         reduce using rule 25 (expr1 -> function_call .)
    TIMES           reduce using rule 25 (expr1 -> function_call .)
    MINUS           reduce using rule 25 (expr1 -> function_call .)
    SEMICOLON       reduce using rule 25 (expr1 -> function_call .)
    RPAREN          reduce using rule 25 (expr1 -> function_call .)
    DDOT            reduce using rule 25 (expr1 -> function_call .)
    COLON           reduce using rule 25 (expr1 -> function_call .)
    AS              reduce using rule 25 (expr1 -> function_call .)
    ATTR_ASSOC      reduce using rule 25 (expr1 -> function_call .)
    RBRACKET        reduce using rule 25 (expr1 -> function_call .)
    RKEY            reduce using rule 25 (expr1 -> function_call .)


state 39

    (26) expr1 -> scalar .

    INTE_DOT        reduce using rule 26 (expr1 -> scalar .)
    EQUALS          reduce using rule 26 (expr1 -> scalar .)
    GREAT_THAN      reduce using rule 26 (expr1 -> scalar .)
    LESS_THAN       reduce using rule 26 (expr1 -> scalar .)
    LESS_EQUAL      reduce using rule 26 (expr1 -> scalar .)
    GREAT_EQUAL     reduce using rule 26 (expr1 -> scalar .)
    NOT_EQUAL       reduce using rule 26 (expr1 -> scalar .)
    LEFT_LOGICAL    reduce using rule 26 (expr1 -> scalar .)
    RIGHT_LOGICAL   reduce using rule 26 (expr1 -> scalar .)
    AND             reduce using rule 26 (expr1 -> scalar .)
    OR              reduce using rule 26 (expr1 -> scalar .)
    PLUS            reduce using rule 26 (expr1 -> scalar .)
    DIVIDE          reduce using rule 26 (expr1 -> scalar .)
    PERCENT         reduce using rule 26 (expr1 -> scalar .)
    TIMES           reduce using rule 26 (expr1 -> scalar .)
    MINUS           reduce using rule 26 (expr1 -> scalar .)
    SEMICOLON       reduce using rule 26 (expr1 -> scalar .)
    RPAREN          reduce using rule 26 (expr1 -> scalar .)
    DDOT            reduce using rule 26 (expr1 -> scalar .)
    COLON           reduce using rule 26 (expr1 -> scalar .)
    AS              reduce using rule 26 (expr1 -> scalar .)
    ATTR_ASSOC      reduce using rule 26 (expr1 -> scalar .)
    RBRACKET        reduce using rule 26 (expr1 -> scalar .)
    RKEY            reduce using rule 26 (expr1 -> scalar .)


state 40

    (27) expr1 -> TRUE .

    INTE_DOT        reduce using rule 27 (expr1 -> TRUE .)
    EQUALS          reduce using rule 27 (expr1 -> TRUE .)
    GREAT_THAN      reduce using rule 27 (expr1 -> TRUE .)
    LESS_THAN       reduce using rule 27 (expr1 -> TRUE .)
    LESS_EQUAL      reduce using rule 27 (expr1 -> TRUE .)
    GREAT_EQUAL     reduce using rule 27 (expr1 -> TRUE .)
    NOT_EQUAL       reduce using rule 27 (expr1 -> TRUE .)
    LEFT_LOGICAL    reduce using rule 27 (expr1 -> TRUE .)
    RIGHT_LOGICAL   reduce using rule 27 (expr1 -> TRUE .)
    AND             reduce using rule 27 (expr1 -> TRUE .)
    OR              reduce using rule 27 (expr1 -> TRUE .)
    PLUS            reduce using rule 27 (expr1 -> TRUE .)
    DIVIDE          reduce using rule 27 (expr1 -> TRUE .)
    PERCENT         reduce using rule 27 (expr1 -> TRUE .)
    TIMES           reduce using rule 27 (expr1 -> TRUE .)
    MINUS           reduce using rule 27 (expr1 -> TRUE .)
    SEMICOLON       reduce using rule 27 (expr1 -> TRUE .)
    RPAREN          reduce using rule 27 (expr1 -> TRUE .)
    DDOT            reduce using rule 27 (expr1 -> TRUE .)
    COLON           reduce using rule 27 (expr1 -> TRUE .)
    AS              reduce using rule 27 (expr1 -> TRUE .)
    ATTR_ASSOC      reduce using rule 27 (expr1 -> TRUE .)
    RBRACKET        reduce using rule 27 (expr1 -> TRUE .)
    RKEY            reduce using rule 27 (expr1 -> TRUE .)


state 41

    (28) expr1 -> FALSE .

    INTE_DOT        reduce using rule 28 (expr1 -> FALSE .)
    EQUALS          reduce using rule 28 (expr1 -> FALSE .)
    GREAT_THAN      reduce using rule 28 (expr1 -> FALSE .)
    LESS_THAN       reduce using rule 28 (expr1 -> FALSE .)
    LESS_EQUAL      reduce using rule 28 (expr1 -> FALSE .)
    GREAT_EQUAL     reduce using rule 28 (expr1 -> FALSE .)
    NOT_EQUAL       reduce using rule 28 (expr1 -> FALSE .)
    LEFT_LOGICAL    reduce using rule 28 (expr1 -> FALSE .)
    RIGHT_LOGICAL   reduce using rule 28 (expr1 -> FALSE .)
    AND             reduce using rule 28 (expr1 -> FALSE .)
    OR              reduce using rule 28 (expr1 -> FALSE .)
    PLUS            reduce using rule 28 (expr1 -> FALSE .)
    DIVIDE          reduce using rule 28 (expr1 -> FALSE .)
    PERCENT         reduce using rule 28 (expr1 -> FALSE .)
    TIMES           reduce using rule 28 (expr1 -> FALSE .)
    MINUS           reduce using rule 28 (expr1 -> FALSE .)
    SEMICOLON       reduce using rule 28 (expr1 -> FALSE .)
    RPAREN          reduce using rule 28 (expr1 -> FALSE .)
    DDOT            reduce using rule 28 (expr1 -> FALSE .)
    COLON           reduce using rule 28 (expr1 -> FALSE .)
    AS              reduce using rule 28 (expr1 -> FALSE .)
    ATTR_ASSOC      reduce using rule 28 (expr1 -> FALSE .)
    RBRACKET        reduce using rule 28 (expr1 -> FALSE .)
    RKEY            reduce using rule 28 (expr1 -> FALSE .)


state 42

    (54) statement_if -> IF . expr_parentheses statement_BLOCK_OPT
    (81) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 88

    expr_parentheses               shift and go to state 127

state 43

    (130) variable -> reference_variable .

    INCREMENT       reduce using rule 130 (variable -> reference_variable .)
    DECREMENT       reduce using rule 130 (variable -> reference_variable .)
    ADD_ASSIGN      reduce using rule 130 (variable -> reference_variable .)
    SUB_ASSIGN      reduce using rule 130 (variable -> reference_variable .)
    MOD_ASSIGN      reduce using rule 130 (variable -> reference_variable .)
    PLUS_ASSIGN     reduce using rule 130 (variable -> reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 130 (variable -> reference_variable .)
    ASSIGN          reduce using rule 130 (variable -> reference_variable .)
    INTE_DOT        reduce using rule 130 (variable -> reference_variable .)
    EQUALS          reduce using rule 130 (variable -> reference_variable .)
    GREAT_THAN      reduce using rule 130 (variable -> reference_variable .)
    LESS_THAN       reduce using rule 130 (variable -> reference_variable .)
    LESS_EQUAL      reduce using rule 130 (variable -> reference_variable .)
    GREAT_EQUAL     reduce using rule 130 (variable -> reference_variable .)
    NOT_EQUAL       reduce using rule 130 (variable -> reference_variable .)
    LEFT_LOGICAL    reduce using rule 130 (variable -> reference_variable .)
    RIGHT_LOGICAL   reduce using rule 130 (variable -> reference_variable .)
    AND             reduce using rule 130 (variable -> reference_variable .)
    OR              reduce using rule 130 (variable -> reference_variable .)
    PLUS            reduce using rule 130 (variable -> reference_variable .)
    DIVIDE          reduce using rule 130 (variable -> reference_variable .)
    PERCENT         reduce using rule 130 (variable -> reference_variable .)
    TIMES           reduce using rule 130 (variable -> reference_variable .)
    MINUS           reduce using rule 130 (variable -> reference_variable .)
    SEMICOLON       reduce using rule 130 (variable -> reference_variable .)
    RPAREN          reduce using rule 130 (variable -> reference_variable .)
    DDOT            reduce using rule 130 (variable -> reference_variable .)
    COLON           reduce using rule 130 (variable -> reference_variable .)
    AS              reduce using rule 130 (variable -> reference_variable .)
    ATTR_ASSOC      reduce using rule 130 (variable -> reference_variable .)
    RBRACKET        reduce using rule 130 (variable -> reference_variable .)
    RKEY            reduce using rule 130 (variable -> reference_variable .)


state 44

    (131) variable -> simple_indirect_reference_DOLAR . reference_variable
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 51
    DOLAR           shift and go to state 129

    reference_variable             shift and go to state 128
    compound_variable              shift and go to state 49

state 45

    (86) function_call -> ID . LPAREN function_call_parameter_list RPAREN
    (87) function_call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 130


state 46

    (127) scalar -> NUMBER_REAL .

    INTE_DOT        reduce using rule 127 (scalar -> NUMBER_REAL .)
    EQUALS          reduce using rule 127 (scalar -> NUMBER_REAL .)
    GREAT_THAN      reduce using rule 127 (scalar -> NUMBER_REAL .)
    LESS_THAN       reduce using rule 127 (scalar -> NUMBER_REAL .)
    LESS_EQUAL      reduce using rule 127 (scalar -> NUMBER_REAL .)
    GREAT_EQUAL     reduce using rule 127 (scalar -> NUMBER_REAL .)
    NOT_EQUAL       reduce using rule 127 (scalar -> NUMBER_REAL .)
    LEFT_LOGICAL    reduce using rule 127 (scalar -> NUMBER_REAL .)
    RIGHT_LOGICAL   reduce using rule 127 (scalar -> NUMBER_REAL .)
    AND             reduce using rule 127 (scalar -> NUMBER_REAL .)
    OR              reduce using rule 127 (scalar -> NUMBER_REAL .)
    PLUS            reduce using rule 127 (scalar -> NUMBER_REAL .)
    DIVIDE          reduce using rule 127 (scalar -> NUMBER_REAL .)
    PERCENT         reduce using rule 127 (scalar -> NUMBER_REAL .)
    TIMES           reduce using rule 127 (scalar -> NUMBER_REAL .)
    MINUS           reduce using rule 127 (scalar -> NUMBER_REAL .)
    SEMICOLON       reduce using rule 127 (scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 127 (scalar -> NUMBER_REAL .)
    DDOT            reduce using rule 127 (scalar -> NUMBER_REAL .)
    COLON           reduce using rule 127 (scalar -> NUMBER_REAL .)
    AS              reduce using rule 127 (scalar -> NUMBER_REAL .)
    ATTR_ASSOC      reduce using rule 127 (scalar -> NUMBER_REAL .)
    RBRACKET        reduce using rule 127 (scalar -> NUMBER_REAL .)
    RKEY            reduce using rule 127 (scalar -> NUMBER_REAL .)


state 47

    (128) scalar -> NUMBER_INTEGER .

    INTE_DOT        reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    EQUALS          reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    GREAT_THAN      reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    LESS_THAN       reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    LESS_EQUAL      reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    GREAT_EQUAL     reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    NOT_EQUAL       reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    LEFT_LOGICAL    reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    RIGHT_LOGICAL   reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    AND             reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    OR              reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    PLUS            reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    DIVIDE          reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    PERCENT         reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    TIMES           reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    MINUS           reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    SEMICOLON       reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    DDOT            reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    COLON           reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    AS              reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    ATTR_ASSOC      reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    RBRACKET        reduce using rule 128 (scalar -> NUMBER_INTEGER .)
    RKEY            reduce using rule 128 (scalar -> NUMBER_INTEGER .)


state 48

    (129) scalar -> CONSTANT_ENCAPSED_STRING .

    INTE_DOT        reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    EQUALS          reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_THAN      reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_THAN       reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LESS_EQUAL      reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    GREAT_EQUAL     reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    NOT_EQUAL       reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    LEFT_LOGICAL    reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RIGHT_LOGICAL   reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DIVIDE          reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    PERCENT         reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    TIMES           reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    SEMICOLON       reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    DDOT            reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    ATTR_ASSOC      reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)
    RKEY            reduce using rule 129 (scalar -> CONSTANT_ENCAPSED_STRING .)


state 49

    (132) reference_variable -> compound_variable . reference_variable_SELECTOR
    (133) reference_variable -> compound_variable .
    (183) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (184) reference_variable_SELECTOR -> . selector
    (136) selector -> . LBRACKET expr RBRACKET
    (137) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 133 (reference_variable -> compound_variable .)
    DECREMENT       reduce using rule 133 (reference_variable -> compound_variable .)
    ADD_ASSIGN      reduce using rule 133 (reference_variable -> compound_variable .)
    SUB_ASSIGN      reduce using rule 133 (reference_variable -> compound_variable .)
    MOD_ASSIGN      reduce using rule 133 (reference_variable -> compound_variable .)
    PLUS_ASSIGN     reduce using rule 133 (reference_variable -> compound_variable .)
    DIVIDE_ASSIGN   reduce using rule 133 (reference_variable -> compound_variable .)
    ASSIGN          reduce using rule 133 (reference_variable -> compound_variable .)
    INTE_DOT        reduce using rule 133 (reference_variable -> compound_variable .)
    EQUALS          reduce using rule 133 (reference_variable -> compound_variable .)
    GREAT_THAN      reduce using rule 133 (reference_variable -> compound_variable .)
    LESS_THAN       reduce using rule 133 (reference_variable -> compound_variable .)
    LESS_EQUAL      reduce using rule 133 (reference_variable -> compound_variable .)
    GREAT_EQUAL     reduce using rule 133 (reference_variable -> compound_variable .)
    NOT_EQUAL       reduce using rule 133 (reference_variable -> compound_variable .)
    LEFT_LOGICAL    reduce using rule 133 (reference_variable -> compound_variable .)
    RIGHT_LOGICAL   reduce using rule 133 (reference_variable -> compound_variable .)
    AND             reduce using rule 133 (reference_variable -> compound_variable .)
    OR              reduce using rule 133 (reference_variable -> compound_variable .)
    PLUS            reduce using rule 133 (reference_variable -> compound_variable .)
    DIVIDE          reduce using rule 133 (reference_variable -> compound_variable .)
    PERCENT         reduce using rule 133 (reference_variable -> compound_variable .)
    TIMES           reduce using rule 133 (reference_variable -> compound_variable .)
    MINUS           reduce using rule 133 (reference_variable -> compound_variable .)
    SEMICOLON       reduce using rule 133 (reference_variable -> compound_variable .)
    RPAREN          reduce using rule 133 (reference_variable -> compound_variable .)
    DDOT            reduce using rule 133 (reference_variable -> compound_variable .)
    COLON           reduce using rule 133 (reference_variable -> compound_variable .)
    AS              reduce using rule 133 (reference_variable -> compound_variable .)
    ATTR_ASSOC      reduce using rule 133 (reference_variable -> compound_variable .)
    RBRACKET        reduce using rule 133 (reference_variable -> compound_variable .)
    RKEY            reduce using rule 133 (reference_variable -> compound_variable .)
    LBRACKET        shift and go to state 133

    reference_variable_SELECTOR    shift and go to state 131
    selector                       shift and go to state 132

state 50

    (185) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> DOLAR .
    (135) compound_variable -> DOLAR . LKEY expr RKEY
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR .)
    LKEY            shift and go to state 136
    DOLAR           shift and go to state 134

  ! DOLAR           [ reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 135

state 51

    (134) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 134 (compound_variable -> VARIABLE .)
    INCREMENT       reduce using rule 134 (compound_variable -> VARIABLE .)
    DECREMENT       reduce using rule 134 (compound_variable -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 134 (compound_variable -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 134 (compound_variable -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 134 (compound_variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 134 (compound_variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 134 (compound_variable -> VARIABLE .)
    ASSIGN          reduce using rule 134 (compound_variable -> VARIABLE .)
    INTE_DOT        reduce using rule 134 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 134 (compound_variable -> VARIABLE .)
    GREAT_THAN      reduce using rule 134 (compound_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 134 (compound_variable -> VARIABLE .)
    LESS_EQUAL      reduce using rule 134 (compound_variable -> VARIABLE .)
    GREAT_EQUAL     reduce using rule 134 (compound_variable -> VARIABLE .)
    NOT_EQUAL       reduce using rule 134 (compound_variable -> VARIABLE .)
    LEFT_LOGICAL    reduce using rule 134 (compound_variable -> VARIABLE .)
    RIGHT_LOGICAL   reduce using rule 134 (compound_variable -> VARIABLE .)
    AND             reduce using rule 134 (compound_variable -> VARIABLE .)
    OR              reduce using rule 134 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 134 (compound_variable -> VARIABLE .)
    DIVIDE          reduce using rule 134 (compound_variable -> VARIABLE .)
    PERCENT         reduce using rule 134 (compound_variable -> VARIABLE .)
    TIMES           reduce using rule 134 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 134 (compound_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 134 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 134 (compound_variable -> VARIABLE .)
    DDOT            reduce using rule 134 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 134 (compound_variable -> VARIABLE .)
    AS              reduce using rule 134 (compound_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 134 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 134 (compound_variable -> VARIABLE .)
    RKEY            reduce using rule 134 (compound_variable -> VARIABLE .)


state 52

    (1) main -> BEGIN_PROGRAM main_INNER END_PROGRAM .

    $end            reduce using rule 1 (main -> BEGIN_PROGRAM main_INNER END_PROGRAM .)


state 53

    (3) main_INNER -> inner_statement main_INNER .

    END_PROGRAM     reduce using rule 3 (main_INNER -> inner_statement main_INNER .)


state 54

    (138) function_declaration_statement -> FUNCTION fds_id . fds_parameter fds_statements
    (143) fds_parameter -> . LPAREN parameter_list RPAREN
    (144) fds_parameter -> . LPAREN RPAREN

    LPAREN          shift and go to state 138

    fds_parameter                  shift and go to state 137

state 55

    (141) fds_id -> AMPERSAND . ID

    ID              shift and go to state 139


state 56

    (142) fds_id -> ID .

    LPAREN          reduce using rule 142 (fds_id -> ID .)


state 57

    (37) statement -> expr SEMICOLON .

    FUNCTION        reduce using rule 37 (statement -> expr SEMICOLON .)
    GLOBAL          reduce using rule 37 (statement -> expr SEMICOLON .)
    WHILE           reduce using rule 37 (statement -> expr SEMICOLON .)
    DO              reduce using rule 37 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 37 (statement -> expr SEMICOLON .)
    FOREACH         reduce using rule 37 (statement -> expr SEMICOLON .)
    BREAK           reduce using rule 37 (statement -> expr SEMICOLON .)
    CONTINUE        reduce using rule 37 (statement -> expr SEMICOLON .)
    RETURN          reduce using rule 37 (statement -> expr SEMICOLON .)
    EXIT            reduce using rule 37 (statement -> expr SEMICOLON .)
    DIE             reduce using rule 37 (statement -> expr SEMICOLON .)
    INCREMENT       reduce using rule 37 (statement -> expr SEMICOLON .)
    DECREMENT       reduce using rule 37 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 37 (statement -> expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 37 (statement -> expr SEMICOLON .)
    TRUE            reduce using rule 37 (statement -> expr SEMICOLON .)
    FALSE           reduce using rule 37 (statement -> expr SEMICOLON .)
    IF              reduce using rule 37 (statement -> expr SEMICOLON .)
    ID              reduce using rule 37 (statement -> expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 37 (statement -> expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 37 (statement -> expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 37 (statement -> expr SEMICOLON .)
    DOLAR           reduce using rule 37 (statement -> expr SEMICOLON .)
    VARIABLE        reduce using rule 37 (statement -> expr SEMICOLON .)
    END_PROGRAM     reduce using rule 37 (statement -> expr SEMICOLON .)
    RKEY            reduce using rule 37 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 37 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 37 (statement -> expr SEMICOLON .)


state 58

    (46) statement -> exit_statement SEMICOLON .

    FUNCTION        reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    GLOBAL          reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    WHILE           reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    DO              reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    FOR             reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    FOREACH         reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    BREAK           reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    CONTINUE        reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    RETURN          reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    EXIT            reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    DIE             reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    INCREMENT       reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    DECREMENT       reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    LPAREN          reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    TRUE            reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    FALSE           reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    IF              reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    ID              reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    DOLAR           reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    VARIABLE        reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    RKEY            reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    ELSEIF          reduce using rule 46 (statement -> exit_statement SEMICOLON .)
    ELSE            reduce using rule 46 (statement -> exit_statement SEMICOLON .)


state 59

    (47) statement -> die_statement SEMICOLON .

    FUNCTION        reduce using rule 47 (statement -> die_statement SEMICOLON .)
    GLOBAL          reduce using rule 47 (statement -> die_statement SEMICOLON .)
    WHILE           reduce using rule 47 (statement -> die_statement SEMICOLON .)
    DO              reduce using rule 47 (statement -> die_statement SEMICOLON .)
    FOR             reduce using rule 47 (statement -> die_statement SEMICOLON .)
    FOREACH         reduce using rule 47 (statement -> die_statement SEMICOLON .)
    BREAK           reduce using rule 47 (statement -> die_statement SEMICOLON .)
    CONTINUE        reduce using rule 47 (statement -> die_statement SEMICOLON .)
    RETURN          reduce using rule 47 (statement -> die_statement SEMICOLON .)
    EXIT            reduce using rule 47 (statement -> die_statement SEMICOLON .)
    DIE             reduce using rule 47 (statement -> die_statement SEMICOLON .)
    INCREMENT       reduce using rule 47 (statement -> die_statement SEMICOLON .)
    DECREMENT       reduce using rule 47 (statement -> die_statement SEMICOLON .)
    LPAREN          reduce using rule 47 (statement -> die_statement SEMICOLON .)
    ARRAY_TYPE      reduce using rule 47 (statement -> die_statement SEMICOLON .)
    TRUE            reduce using rule 47 (statement -> die_statement SEMICOLON .)
    FALSE           reduce using rule 47 (statement -> die_statement SEMICOLON .)
    IF              reduce using rule 47 (statement -> die_statement SEMICOLON .)
    ID              reduce using rule 47 (statement -> die_statement SEMICOLON .)
    NUMBER_REAL     reduce using rule 47 (statement -> die_statement SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 47 (statement -> die_statement SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (statement -> die_statement SEMICOLON .)
    DOLAR           reduce using rule 47 (statement -> die_statement SEMICOLON .)
    VARIABLE        reduce using rule 47 (statement -> die_statement SEMICOLON .)
    END_PROGRAM     reduce using rule 47 (statement -> die_statement SEMICOLON .)
    RKEY            reduce using rule 47 (statement -> die_statement SEMICOLON .)
    ELSEIF          reduce using rule 47 (statement -> die_statement SEMICOLON .)
    ELSE            reduce using rule 47 (statement -> die_statement SEMICOLON .)


state 60

    (48) statement -> GLOBAL global_var . statement_COLON_GLOBAL SEMICOLON
    (49) statement -> GLOBAL global_var . SEMICOLON
    (77) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (78) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       shift and go to state 141
    COLON           shift and go to state 142

    statement_COLON_GLOBAL         shift and go to state 140

state 61

    (74) global_var -> VARIABLE .

    SEMICOLON       reduce using rule 74 (global_var -> VARIABLE .)
    COLON           reduce using rule 74 (global_var -> VARIABLE .)


state 62

    (75) global_var -> DOLAR . VARIABLE
    (76) global_var -> DOLAR . LKEY expr RKEY

    VARIABLE        shift and go to state 143
    LKEY            shift and go to state 144


state 63

    (9) expr -> expr1 expr2 .

    SEMICOLON       reduce using rule 9 (expr -> expr1 expr2 .)
    RPAREN          reduce using rule 9 (expr -> expr1 expr2 .)
    DDOT            reduce using rule 9 (expr -> expr1 expr2 .)
    COLON           reduce using rule 9 (expr -> expr1 expr2 .)
    AS              reduce using rule 9 (expr -> expr1 expr2 .)
    ATTR_ASSOC      reduce using rule 9 (expr -> expr1 expr2 .)
    RBRACKET        reduce using rule 9 (expr -> expr1 expr2 .)
    RKEY            reduce using rule 9 (expr -> expr1 expr2 .)


state 64

    (12) expr2 -> INTE_DOT . expr DDOT expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 145
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 65

    (13) expr2 -> comparission_operator . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 146
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 66

    (14) expr2 -> arithmetic_operator . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 147
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 67

    (117) comparission_operator -> EQUALS .

    INCREMENT       reduce using rule 117 (comparission_operator -> EQUALS .)
    DECREMENT       reduce using rule 117 (comparission_operator -> EQUALS .)
    LPAREN          reduce using rule 117 (comparission_operator -> EQUALS .)
    ARRAY_TYPE      reduce using rule 117 (comparission_operator -> EQUALS .)
    TRUE            reduce using rule 117 (comparission_operator -> EQUALS .)
    FALSE           reduce using rule 117 (comparission_operator -> EQUALS .)
    ID              reduce using rule 117 (comparission_operator -> EQUALS .)
    NUMBER_REAL     reduce using rule 117 (comparission_operator -> EQUALS .)
    NUMBER_INTEGER  reduce using rule 117 (comparission_operator -> EQUALS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 117 (comparission_operator -> EQUALS .)
    DOLAR           reduce using rule 117 (comparission_operator -> EQUALS .)
    VARIABLE        reduce using rule 117 (comparission_operator -> EQUALS .)


state 68

    (118) comparission_operator -> GREAT_THAN .

    INCREMENT       reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    DECREMENT       reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    LPAREN          reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    ARRAY_TYPE      reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    TRUE            reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    FALSE           reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    ID              reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    NUMBER_REAL     reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    NUMBER_INTEGER  reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    DOLAR           reduce using rule 118 (comparission_operator -> GREAT_THAN .)
    VARIABLE        reduce using rule 118 (comparission_operator -> GREAT_THAN .)


state 69

    (119) comparission_operator -> LESS_THAN .

    INCREMENT       reduce using rule 119 (comparission_operator -> LESS_THAN .)
    DECREMENT       reduce using rule 119 (comparission_operator -> LESS_THAN .)
    LPAREN          reduce using rule 119 (comparission_operator -> LESS_THAN .)
    ARRAY_TYPE      reduce using rule 119 (comparission_operator -> LESS_THAN .)
    TRUE            reduce using rule 119 (comparission_operator -> LESS_THAN .)
    FALSE           reduce using rule 119 (comparission_operator -> LESS_THAN .)
    ID              reduce using rule 119 (comparission_operator -> LESS_THAN .)
    NUMBER_REAL     reduce using rule 119 (comparission_operator -> LESS_THAN .)
    NUMBER_INTEGER  reduce using rule 119 (comparission_operator -> LESS_THAN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 119 (comparission_operator -> LESS_THAN .)
    DOLAR           reduce using rule 119 (comparission_operator -> LESS_THAN .)
    VARIABLE        reduce using rule 119 (comparission_operator -> LESS_THAN .)


state 70

    (120) comparission_operator -> LESS_EQUAL .

    INCREMENT       reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    DECREMENT       reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    LPAREN          reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    ARRAY_TYPE      reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    TRUE            reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    FALSE           reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    ID              reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    NUMBER_REAL     reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    NUMBER_INTEGER  reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    DOLAR           reduce using rule 120 (comparission_operator -> LESS_EQUAL .)
    VARIABLE        reduce using rule 120 (comparission_operator -> LESS_EQUAL .)


state 71

    (121) comparission_operator -> GREAT_EQUAL .

    INCREMENT       reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    DECREMENT       reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    LPAREN          reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    ARRAY_TYPE      reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    TRUE            reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    FALSE           reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    ID              reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_REAL     reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    DOLAR           reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)
    VARIABLE        reduce using rule 121 (comparission_operator -> GREAT_EQUAL .)


state 72

    (122) comparission_operator -> NOT_EQUAL .

    INCREMENT       reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    DECREMENT       reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    LPAREN          reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    ARRAY_TYPE      reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    TRUE            reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    FALSE           reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    ID              reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    NUMBER_REAL     reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    NUMBER_INTEGER  reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    DOLAR           reduce using rule 122 (comparission_operator -> NOT_EQUAL .)
    VARIABLE        reduce using rule 122 (comparission_operator -> NOT_EQUAL .)


state 73

    (123) comparission_operator -> LEFT_LOGICAL .

    INCREMENT       reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    DECREMENT       reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    LPAREN          reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    TRUE            reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    FALSE           reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    ID              reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_REAL     reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    DOLAR           reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)
    VARIABLE        reduce using rule 123 (comparission_operator -> LEFT_LOGICAL .)


state 74

    (124) comparission_operator -> RIGHT_LOGICAL .

    INCREMENT       reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    DECREMENT       reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    LPAREN          reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    ARRAY_TYPE      reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    TRUE            reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    FALSE           reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    ID              reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_REAL     reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    NUMBER_INTEGER  reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    CONSTANT_ENCAPSED_STRING reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    DOLAR           reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)
    VARIABLE        reduce using rule 124 (comparission_operator -> RIGHT_LOGICAL .)


state 75

    (125) comparission_operator -> AND .

    INCREMENT       reduce using rule 125 (comparission_operator -> AND .)
    DECREMENT       reduce using rule 125 (comparission_operator -> AND .)
    LPAREN          reduce using rule 125 (comparission_operator -> AND .)
    ARRAY_TYPE      reduce using rule 125 (comparission_operator -> AND .)
    TRUE            reduce using rule 125 (comparission_operator -> AND .)
    FALSE           reduce using rule 125 (comparission_operator -> AND .)
    ID              reduce using rule 125 (comparission_operator -> AND .)
    NUMBER_REAL     reduce using rule 125 (comparission_operator -> AND .)
    NUMBER_INTEGER  reduce using rule 125 (comparission_operator -> AND .)
    CONSTANT_ENCAPSED_STRING reduce using rule 125 (comparission_operator -> AND .)
    DOLAR           reduce using rule 125 (comparission_operator -> AND .)
    VARIABLE        reduce using rule 125 (comparission_operator -> AND .)


state 76

    (126) comparission_operator -> OR .

    INCREMENT       reduce using rule 126 (comparission_operator -> OR .)
    DECREMENT       reduce using rule 126 (comparission_operator -> OR .)
    LPAREN          reduce using rule 126 (comparission_operator -> OR .)
    ARRAY_TYPE      reduce using rule 126 (comparission_operator -> OR .)
    TRUE            reduce using rule 126 (comparission_operator -> OR .)
    FALSE           reduce using rule 126 (comparission_operator -> OR .)
    ID              reduce using rule 126 (comparission_operator -> OR .)
    NUMBER_REAL     reduce using rule 126 (comparission_operator -> OR .)
    NUMBER_INTEGER  reduce using rule 126 (comparission_operator -> OR .)
    CONSTANT_ENCAPSED_STRING reduce using rule 126 (comparission_operator -> OR .)
    DOLAR           reduce using rule 126 (comparission_operator -> OR .)
    VARIABLE        reduce using rule 126 (comparission_operator -> OR .)


state 77

    (112) arithmetic_operator -> PLUS .

    INCREMENT       reduce using rule 112 (arithmetic_operator -> PLUS .)
    DECREMENT       reduce using rule 112 (arithmetic_operator -> PLUS .)
    LPAREN          reduce using rule 112 (arithmetic_operator -> PLUS .)
    ARRAY_TYPE      reduce using rule 112 (arithmetic_operator -> PLUS .)
    TRUE            reduce using rule 112 (arithmetic_operator -> PLUS .)
    FALSE           reduce using rule 112 (arithmetic_operator -> PLUS .)
    ID              reduce using rule 112 (arithmetic_operator -> PLUS .)
    NUMBER_REAL     reduce using rule 112 (arithmetic_operator -> PLUS .)
    NUMBER_INTEGER  reduce using rule 112 (arithmetic_operator -> PLUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 112 (arithmetic_operator -> PLUS .)
    DOLAR           reduce using rule 112 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 112 (arithmetic_operator -> PLUS .)


state 78

    (113) arithmetic_operator -> DIVIDE .

    INCREMENT       reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    DECREMENT       reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    LPAREN          reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    ARRAY_TYPE      reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    TRUE            reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    FALSE           reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    ID              reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    NUMBER_REAL     reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    NUMBER_INTEGER  reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    DOLAR           reduce using rule 113 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 113 (arithmetic_operator -> DIVIDE .)


state 79

    (114) arithmetic_operator -> PERCENT .

    INCREMENT       reduce using rule 114 (arithmetic_operator -> PERCENT .)
    DECREMENT       reduce using rule 114 (arithmetic_operator -> PERCENT .)
    LPAREN          reduce using rule 114 (arithmetic_operator -> PERCENT .)
    ARRAY_TYPE      reduce using rule 114 (arithmetic_operator -> PERCENT .)
    TRUE            reduce using rule 114 (arithmetic_operator -> PERCENT .)
    FALSE           reduce using rule 114 (arithmetic_operator -> PERCENT .)
    ID              reduce using rule 114 (arithmetic_operator -> PERCENT .)
    NUMBER_REAL     reduce using rule 114 (arithmetic_operator -> PERCENT .)
    NUMBER_INTEGER  reduce using rule 114 (arithmetic_operator -> PERCENT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 114 (arithmetic_operator -> PERCENT .)
    DOLAR           reduce using rule 114 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 114 (arithmetic_operator -> PERCENT .)


state 80

    (115) arithmetic_operator -> TIMES .

    INCREMENT       reduce using rule 115 (arithmetic_operator -> TIMES .)
    DECREMENT       reduce using rule 115 (arithmetic_operator -> TIMES .)
    LPAREN          reduce using rule 115 (arithmetic_operator -> TIMES .)
    ARRAY_TYPE      reduce using rule 115 (arithmetic_operator -> TIMES .)
    TRUE            reduce using rule 115 (arithmetic_operator -> TIMES .)
    FALSE           reduce using rule 115 (arithmetic_operator -> TIMES .)
    ID              reduce using rule 115 (arithmetic_operator -> TIMES .)
    NUMBER_REAL     reduce using rule 115 (arithmetic_operator -> TIMES .)
    NUMBER_INTEGER  reduce using rule 115 (arithmetic_operator -> TIMES .)
    CONSTANT_ENCAPSED_STRING reduce using rule 115 (arithmetic_operator -> TIMES .)
    DOLAR           reduce using rule 115 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 115 (arithmetic_operator -> TIMES .)


state 81

    (116) arithmetic_operator -> MINUS .

    INCREMENT       reduce using rule 116 (arithmetic_operator -> MINUS .)
    DECREMENT       reduce using rule 116 (arithmetic_operator -> MINUS .)
    LPAREN          reduce using rule 116 (arithmetic_operator -> MINUS .)
    ARRAY_TYPE      reduce using rule 116 (arithmetic_operator -> MINUS .)
    TRUE            reduce using rule 116 (arithmetic_operator -> MINUS .)
    FALSE           reduce using rule 116 (arithmetic_operator -> MINUS .)
    ID              reduce using rule 116 (arithmetic_operator -> MINUS .)
    NUMBER_REAL     reduce using rule 116 (arithmetic_operator -> MINUS .)
    NUMBER_INTEGER  reduce using rule 116 (arithmetic_operator -> MINUS .)
    CONSTANT_ENCAPSED_STRING reduce using rule 116 (arithmetic_operator -> MINUS .)
    DOLAR           reduce using rule 116 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 116 (arithmetic_operator -> MINUS .)


state 82

    (50) if_statement -> statement_if if_statement_complement .

    FUNCTION        reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    GLOBAL          reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    WHILE           reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    DO              reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    FOR             reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    FOREACH         reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    BREAK           reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    CONTINUE        reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    RETURN          reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    EXIT            reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    DIE             reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    INCREMENT       reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    DECREMENT       reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    LPAREN          reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    ARRAY_TYPE      reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    TRUE            reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    FALSE           reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    IF              reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    ID              reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    NUMBER_REAL     reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    NUMBER_INTEGER  reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    DOLAR           reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    VARIABLE        reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    END_PROGRAM     reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    RKEY            reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    ELSEIF          reduce using rule 50 (if_statement -> statement_if if_statement_complement .)
    ELSE            reduce using rule 50 (if_statement -> statement_if if_statement_complement .)


state 83

    (52) if_statement_complement -> statement_elseif .

    FUNCTION        reduce using rule 52 (if_statement_complement -> statement_elseif .)
    GLOBAL          reduce using rule 52 (if_statement_complement -> statement_elseif .)
    WHILE           reduce using rule 52 (if_statement_complement -> statement_elseif .)
    DO              reduce using rule 52 (if_statement_complement -> statement_elseif .)
    FOR             reduce using rule 52 (if_statement_complement -> statement_elseif .)
    FOREACH         reduce using rule 52 (if_statement_complement -> statement_elseif .)
    BREAK           reduce using rule 52 (if_statement_complement -> statement_elseif .)
    CONTINUE        reduce using rule 52 (if_statement_complement -> statement_elseif .)
    RETURN          reduce using rule 52 (if_statement_complement -> statement_elseif .)
    EXIT            reduce using rule 52 (if_statement_complement -> statement_elseif .)
    DIE             reduce using rule 52 (if_statement_complement -> statement_elseif .)
    INCREMENT       reduce using rule 52 (if_statement_complement -> statement_elseif .)
    DECREMENT       reduce using rule 52 (if_statement_complement -> statement_elseif .)
    LPAREN          reduce using rule 52 (if_statement_complement -> statement_elseif .)
    ARRAY_TYPE      reduce using rule 52 (if_statement_complement -> statement_elseif .)
    TRUE            reduce using rule 52 (if_statement_complement -> statement_elseif .)
    FALSE           reduce using rule 52 (if_statement_complement -> statement_elseif .)
    IF              reduce using rule 52 (if_statement_complement -> statement_elseif .)
    ID              reduce using rule 52 (if_statement_complement -> statement_elseif .)
    NUMBER_REAL     reduce using rule 52 (if_statement_complement -> statement_elseif .)
    NUMBER_INTEGER  reduce using rule 52 (if_statement_complement -> statement_elseif .)
    CONSTANT_ENCAPSED_STRING reduce using rule 52 (if_statement_complement -> statement_elseif .)
    DOLAR           reduce using rule 52 (if_statement_complement -> statement_elseif .)
    VARIABLE        reduce using rule 52 (if_statement_complement -> statement_elseif .)
    END_PROGRAM     reduce using rule 52 (if_statement_complement -> statement_elseif .)
    RKEY            reduce using rule 52 (if_statement_complement -> statement_elseif .)
    ELSEIF          reduce using rule 52 (if_statement_complement -> statement_elseif .)
    ELSE            reduce using rule 52 (if_statement_complement -> statement_elseif .)


state 84

    (53) if_statement_complement -> statement_else .

    FUNCTION        reduce using rule 53 (if_statement_complement -> statement_else .)
    GLOBAL          reduce using rule 53 (if_statement_complement -> statement_else .)
    WHILE           reduce using rule 53 (if_statement_complement -> statement_else .)
    DO              reduce using rule 53 (if_statement_complement -> statement_else .)
    FOR             reduce using rule 53 (if_statement_complement -> statement_else .)
    FOREACH         reduce using rule 53 (if_statement_complement -> statement_else .)
    BREAK           reduce using rule 53 (if_statement_complement -> statement_else .)
    CONTINUE        reduce using rule 53 (if_statement_complement -> statement_else .)
    RETURN          reduce using rule 53 (if_statement_complement -> statement_else .)
    EXIT            reduce using rule 53 (if_statement_complement -> statement_else .)
    DIE             reduce using rule 53 (if_statement_complement -> statement_else .)
    INCREMENT       reduce using rule 53 (if_statement_complement -> statement_else .)
    DECREMENT       reduce using rule 53 (if_statement_complement -> statement_else .)
    LPAREN          reduce using rule 53 (if_statement_complement -> statement_else .)
    ARRAY_TYPE      reduce using rule 53 (if_statement_complement -> statement_else .)
    TRUE            reduce using rule 53 (if_statement_complement -> statement_else .)
    FALSE           reduce using rule 53 (if_statement_complement -> statement_else .)
    IF              reduce using rule 53 (if_statement_complement -> statement_else .)
    ID              reduce using rule 53 (if_statement_complement -> statement_else .)
    NUMBER_REAL     reduce using rule 53 (if_statement_complement -> statement_else .)
    NUMBER_INTEGER  reduce using rule 53 (if_statement_complement -> statement_else .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (if_statement_complement -> statement_else .)
    DOLAR           reduce using rule 53 (if_statement_complement -> statement_else .)
    VARIABLE        reduce using rule 53 (if_statement_complement -> statement_else .)
    END_PROGRAM     reduce using rule 53 (if_statement_complement -> statement_else .)
    RKEY            reduce using rule 53 (if_statement_complement -> statement_else .)
    ELSEIF          reduce using rule 53 (if_statement_complement -> statement_else .)
    ELSE            reduce using rule 53 (if_statement_complement -> statement_else .)


state 85

    (55) statement_elseif -> ELSEIF . expr_parentheses statement_BLOCK_OPT
    (81) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 88

    expr_parentheses               shift and go to state 148

state 86

    (56) statement_else -> ELSE . statement_BLOCK_OPT
    (178) statement_BLOCK_OPT -> . statement
    (179) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (180) statement_BLOCK_OPT -> . LKEY RKEY
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 91
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 149
    statement                      shift and go to state 90
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 87

    (57) while_statement -> WHILE expr_parentheses . statement_BLOCK_OPT
    (178) statement_BLOCK_OPT -> . statement
    (179) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (180) statement_BLOCK_OPT -> . LKEY RKEY
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 91
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 150
    statement                      shift and go to state 90
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 88

    (81) expr_parentheses -> LPAREN . expr RPAREN
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 151
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 89

    (58) do_statement -> DO statement_BLOCK_OPT . WHILE expr_parentheses SEMICOLON

    WHILE           shift and go to state 152


state 90

    (178) statement_BLOCK_OPT -> statement .

    WHILE           reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    FUNCTION        reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    GLOBAL          reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    DO              reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    FOR             reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    FOREACH         reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    BREAK           reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    CONTINUE        reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    RETURN          reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    EXIT            reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    DIE             reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    INCREMENT       reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    DECREMENT       reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    LPAREN          reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    ARRAY_TYPE      reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    TRUE            reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    FALSE           reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    IF              reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    ID              reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    NUMBER_REAL     reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    NUMBER_INTEGER  reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    DOLAR           reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    VARIABLE        reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    END_PROGRAM     reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    RKEY            reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    ELSEIF          reduce using rule 178 (statement_BLOCK_OPT -> statement .)
    ELSE            reduce using rule 178 (statement_BLOCK_OPT -> statement .)


state 91

    (179) statement_BLOCK_OPT -> LKEY . statement_MUL RKEY
    (180) statement_BLOCK_OPT -> LKEY . RKEY
    (174) statement_MUL -> . statement statement_MUL
    (175) statement_MUL -> . statement
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 154
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_MUL                  shift and go to state 153
    statement                      shift and go to state 155
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 92

    (65) for_statement -> FOR LPAREN . for_parameters RPAREN statement_BLOCK_OPT
    (66) for_parameters -> . SEMICOLON SEMICOLON
    (67) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON
    (68) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON
    (69) for_parameters -> . for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT
    (70) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON
    (71) for_parameters -> . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (72) for_parameters -> . SEMICOLON SEMICOLON for_expr_OPT
    (73) for_parameters -> . for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT
    (84) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (85) for_expr_OPT -> . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 157
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_parameters                 shift and go to state 156
    for_expr_OPT                   shift and go to state 158
    expr                           shift and go to state 159
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 93

    (23) expr1 -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 160


state 94

    (17) expr3 -> LPAREN type_cast_operator . RPAREN expr

    RPAREN          shift and go to state 161


state 95

    (97) type_cast_operator -> INT_TYPE .

    RPAREN          reduce using rule 97 (type_cast_operator -> INT_TYPE .)


state 96

    (98) type_cast_operator -> DOUBLE_TYPE .

    RPAREN          reduce using rule 98 (type_cast_operator -> DOUBLE_TYPE .)


state 97

    (99) type_cast_operator -> FLOAT_TYPE .

    RPAREN          reduce using rule 99 (type_cast_operator -> FLOAT_TYPE .)


state 98

    (100) type_cast_operator -> REAL_TYPE .

    RPAREN          reduce using rule 100 (type_cast_operator -> REAL_TYPE .)


state 99

    (101) type_cast_operator -> STRING_TYPE .

    RPAREN          reduce using rule 101 (type_cast_operator -> STRING_TYPE .)


state 100

    (102) type_cast_operator -> ARRAY_TYPE .
    (24) expr1 -> ARRAY_TYPE . array_declaration
    (35) array_declaration -> . LPAREN array_pair_list RPAREN
    (36) array_declaration -> . LPAREN RPAREN

    RPAREN          reduce using rule 102 (type_cast_operator -> ARRAY_TYPE .)
    LPAREN          shift and go to state 126

    array_declaration              shift and go to state 125

state 101

    (103) type_cast_operator -> BOOLEAN_TYPE .

    RPAREN          reduce using rule 103 (type_cast_operator -> BOOLEAN_TYPE .)


state 102

    (104) type_cast_operator -> BOOL_TYPE .

    RPAREN          reduce using rule 104 (type_cast_operator -> BOOL_TYPE .)


state 103

    (105) type_cast_operator -> UNSET .

    RPAREN          reduce using rule 105 (type_cast_operator -> UNSET .)


state 104

    (82) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> FOREACH LPAREN . expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 162
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 105

    (59) break_statement -> BREAK expr . SEMICOLON

    SEMICOLON       shift and go to state 163


state 106

    (60) break_statement -> BREAK SEMICOLON .

    FUNCTION        reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    GLOBAL          reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    EXIT            reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    DIE             reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    ARRAY_TYPE      reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    NUMBER_REAL     reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    DOLAR           reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    VARIABLE        reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    END_PROGRAM     reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    RKEY            reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    ELSEIF          reduce using rule 60 (break_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 60 (break_statement -> BREAK SEMICOLON .)


state 107

    (61) continue_statement -> CONTINUE expr . SEMICOLON

    SEMICOLON       shift and go to state 164


state 108

    (62) continue_statement -> CONTINUE SEMICOLON .

    FUNCTION        reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    EXIT            reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    INCREMENT       reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    DECREMENT       reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_REAL     reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    DOLAR           reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    VARIABLE        reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    END_PROGRAM     reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    RKEY            reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 62 (continue_statement -> CONTINUE SEMICOLON .)


state 109

    (63) return_statement -> RETURN expr . SEMICOLON

    SEMICOLON       shift and go to state 165


state 110

    (64) return_statement -> RETURN SEMICOLON .

    FUNCTION        reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    GLOBAL          reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    EXIT            reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    DIE             reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    INCREMENT       reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    DECREMENT       reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    ARRAY_TYPE      reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    NUMBER_REAL     reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    DOLAR           reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    END_PROGRAM     reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    RKEY            reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 64 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 64 (return_statement -> RETURN SEMICOLON .)


state 111

    (29) exit_statement -> EXIT exit_expr .

    SEMICOLON       reduce using rule 29 (exit_statement -> EXIT exit_expr .)


state 112

    (33) exit_expr -> LPAREN . expr RPAREN
    (34) exit_expr -> LPAREN . RPAREN
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 167
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 166
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 113

    (31) die_statement -> DIE exit_expr .

    SEMICOLON       reduce using rule 31 (die_statement -> DIE exit_expr .)


state 114

    (18) expr1 -> INCREMENT variable .

    INTE_DOT        reduce using rule 18 (expr1 -> INCREMENT variable .)
    EQUALS          reduce using rule 18 (expr1 -> INCREMENT variable .)
    GREAT_THAN      reduce using rule 18 (expr1 -> INCREMENT variable .)
    LESS_THAN       reduce using rule 18 (expr1 -> INCREMENT variable .)
    LESS_EQUAL      reduce using rule 18 (expr1 -> INCREMENT variable .)
    GREAT_EQUAL     reduce using rule 18 (expr1 -> INCREMENT variable .)
    NOT_EQUAL       reduce using rule 18 (expr1 -> INCREMENT variable .)
    LEFT_LOGICAL    reduce using rule 18 (expr1 -> INCREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 18 (expr1 -> INCREMENT variable .)
    AND             reduce using rule 18 (expr1 -> INCREMENT variable .)
    OR              reduce using rule 18 (expr1 -> INCREMENT variable .)
    PLUS            reduce using rule 18 (expr1 -> INCREMENT variable .)
    DIVIDE          reduce using rule 18 (expr1 -> INCREMENT variable .)
    PERCENT         reduce using rule 18 (expr1 -> INCREMENT variable .)
    TIMES           reduce using rule 18 (expr1 -> INCREMENT variable .)
    MINUS           reduce using rule 18 (expr1 -> INCREMENT variable .)
    SEMICOLON       reduce using rule 18 (expr1 -> INCREMENT variable .)
    RPAREN          reduce using rule 18 (expr1 -> INCREMENT variable .)
    DDOT            reduce using rule 18 (expr1 -> INCREMENT variable .)
    COLON           reduce using rule 18 (expr1 -> INCREMENT variable .)
    AS              reduce using rule 18 (expr1 -> INCREMENT variable .)
    ATTR_ASSOC      reduce using rule 18 (expr1 -> INCREMENT variable .)
    RBRACKET        reduce using rule 18 (expr1 -> INCREMENT variable .)
    RKEY            reduce using rule 18 (expr1 -> INCREMENT variable .)


state 115

    (19) expr1 -> variable INCREMENT .

    INTE_DOT        reduce using rule 19 (expr1 -> variable INCREMENT .)
    EQUALS          reduce using rule 19 (expr1 -> variable INCREMENT .)
    GREAT_THAN      reduce using rule 19 (expr1 -> variable INCREMENT .)
    LESS_THAN       reduce using rule 19 (expr1 -> variable INCREMENT .)
    LESS_EQUAL      reduce using rule 19 (expr1 -> variable INCREMENT .)
    GREAT_EQUAL     reduce using rule 19 (expr1 -> variable INCREMENT .)
    NOT_EQUAL       reduce using rule 19 (expr1 -> variable INCREMENT .)
    LEFT_LOGICAL    reduce using rule 19 (expr1 -> variable INCREMENT .)
    RIGHT_LOGICAL   reduce using rule 19 (expr1 -> variable INCREMENT .)
    AND             reduce using rule 19 (expr1 -> variable INCREMENT .)
    OR              reduce using rule 19 (expr1 -> variable INCREMENT .)
    PLUS            reduce using rule 19 (expr1 -> variable INCREMENT .)
    DIVIDE          reduce using rule 19 (expr1 -> variable INCREMENT .)
    PERCENT         reduce using rule 19 (expr1 -> variable INCREMENT .)
    TIMES           reduce using rule 19 (expr1 -> variable INCREMENT .)
    MINUS           reduce using rule 19 (expr1 -> variable INCREMENT .)
    SEMICOLON       reduce using rule 19 (expr1 -> variable INCREMENT .)
    RPAREN          reduce using rule 19 (expr1 -> variable INCREMENT .)
    DDOT            reduce using rule 19 (expr1 -> variable INCREMENT .)
    COLON           reduce using rule 19 (expr1 -> variable INCREMENT .)
    AS              reduce using rule 19 (expr1 -> variable INCREMENT .)
    ATTR_ASSOC      reduce using rule 19 (expr1 -> variable INCREMENT .)
    RBRACKET        reduce using rule 19 (expr1 -> variable INCREMENT .)
    RKEY            reduce using rule 19 (expr1 -> variable INCREMENT .)


state 116

    (21) expr1 -> variable DECREMENT .

    INTE_DOT        reduce using rule 21 (expr1 -> variable DECREMENT .)
    EQUALS          reduce using rule 21 (expr1 -> variable DECREMENT .)
    GREAT_THAN      reduce using rule 21 (expr1 -> variable DECREMENT .)
    LESS_THAN       reduce using rule 21 (expr1 -> variable DECREMENT .)
    LESS_EQUAL      reduce using rule 21 (expr1 -> variable DECREMENT .)
    GREAT_EQUAL     reduce using rule 21 (expr1 -> variable DECREMENT .)
    NOT_EQUAL       reduce using rule 21 (expr1 -> variable DECREMENT .)
    LEFT_LOGICAL    reduce using rule 21 (expr1 -> variable DECREMENT .)
    RIGHT_LOGICAL   reduce using rule 21 (expr1 -> variable DECREMENT .)
    AND             reduce using rule 21 (expr1 -> variable DECREMENT .)
    OR              reduce using rule 21 (expr1 -> variable DECREMENT .)
    PLUS            reduce using rule 21 (expr1 -> variable DECREMENT .)
    DIVIDE          reduce using rule 21 (expr1 -> variable DECREMENT .)
    PERCENT         reduce using rule 21 (expr1 -> variable DECREMENT .)
    TIMES           reduce using rule 21 (expr1 -> variable DECREMENT .)
    MINUS           reduce using rule 21 (expr1 -> variable DECREMENT .)
    SEMICOLON       reduce using rule 21 (expr1 -> variable DECREMENT .)
    RPAREN          reduce using rule 21 (expr1 -> variable DECREMENT .)
    DDOT            reduce using rule 21 (expr1 -> variable DECREMENT .)
    COLON           reduce using rule 21 (expr1 -> variable DECREMENT .)
    AS              reduce using rule 21 (expr1 -> variable DECREMENT .)
    ATTR_ASSOC      reduce using rule 21 (expr1 -> variable DECREMENT .)
    RBRACKET        reduce using rule 21 (expr1 -> variable DECREMENT .)
    RKEY            reduce using rule 21 (expr1 -> variable DECREMENT .)


state 117

    (15) expr3 -> variable assign_operator . expr
    (16) expr3 -> variable assign_operator . AMPERSAND expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 169
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 35
    expr                           shift and go to state 168
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 118

    (106) assign_operator -> ADD_ASSIGN .

    AMPERSAND       reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    INCREMENT       reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    DECREMENT       reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    TRUE            reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    FALSE           reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    ID              reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    NUMBER_REAL     reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    DOLAR           reduce using rule 106 (assign_operator -> ADD_ASSIGN .)
    VARIABLE        reduce using rule 106 (assign_operator -> ADD_ASSIGN .)


state 119

    (107) assign_operator -> SUB_ASSIGN .

    AMPERSAND       reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    INCREMENT       reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    DECREMENT       reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    ARRAY_TYPE      reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    TRUE            reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    FALSE           reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    ID              reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    NUMBER_REAL     reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    DOLAR           reduce using rule 107 (assign_operator -> SUB_ASSIGN .)
    VARIABLE        reduce using rule 107 (assign_operator -> SUB_ASSIGN .)


state 120

    (108) assign_operator -> MOD_ASSIGN .

    AMPERSAND       reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    INCREMENT       reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    DECREMENT       reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    ARRAY_TYPE      reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    TRUE            reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    FALSE           reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    ID              reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    NUMBER_REAL     reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    DOLAR           reduce using rule 108 (assign_operator -> MOD_ASSIGN .)
    VARIABLE        reduce using rule 108 (assign_operator -> MOD_ASSIGN .)


state 121

    (109) assign_operator -> PLUS_ASSIGN .

    AMPERSAND       reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    INCREMENT       reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    DECREMENT       reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    ARRAY_TYPE      reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    ID              reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_REAL     reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    DOLAR           reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 109 (assign_operator -> PLUS_ASSIGN .)


state 122

    (110) assign_operator -> DIVIDE_ASSIGN .

    AMPERSAND       reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    INCREMENT       reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    DECREMENT       reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    ARRAY_TYPE      reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    ID              reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_REAL     reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    NUMBER_INTEGER  reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    DOLAR           reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 110 (assign_operator -> DIVIDE_ASSIGN .)


state 123

    (111) assign_operator -> ASSIGN .

    AMPERSAND       reduce using rule 111 (assign_operator -> ASSIGN .)
    INCREMENT       reduce using rule 111 (assign_operator -> ASSIGN .)
    DECREMENT       reduce using rule 111 (assign_operator -> ASSIGN .)
    LPAREN          reduce using rule 111 (assign_operator -> ASSIGN .)
    ARRAY_TYPE      reduce using rule 111 (assign_operator -> ASSIGN .)
    TRUE            reduce using rule 111 (assign_operator -> ASSIGN .)
    FALSE           reduce using rule 111 (assign_operator -> ASSIGN .)
    ID              reduce using rule 111 (assign_operator -> ASSIGN .)
    NUMBER_REAL     reduce using rule 111 (assign_operator -> ASSIGN .)
    NUMBER_INTEGER  reduce using rule 111 (assign_operator -> ASSIGN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 111 (assign_operator -> ASSIGN .)
    DOLAR           reduce using rule 111 (assign_operator -> ASSIGN .)
    VARIABLE        reduce using rule 111 (assign_operator -> ASSIGN .)


state 124

    (20) expr1 -> DECREMENT variable .

    INTE_DOT        reduce using rule 20 (expr1 -> DECREMENT variable .)
    EQUALS          reduce using rule 20 (expr1 -> DECREMENT variable .)
    GREAT_THAN      reduce using rule 20 (expr1 -> DECREMENT variable .)
    LESS_THAN       reduce using rule 20 (expr1 -> DECREMENT variable .)
    LESS_EQUAL      reduce using rule 20 (expr1 -> DECREMENT variable .)
    GREAT_EQUAL     reduce using rule 20 (expr1 -> DECREMENT variable .)
    NOT_EQUAL       reduce using rule 20 (expr1 -> DECREMENT variable .)
    LEFT_LOGICAL    reduce using rule 20 (expr1 -> DECREMENT variable .)
    RIGHT_LOGICAL   reduce using rule 20 (expr1 -> DECREMENT variable .)
    AND             reduce using rule 20 (expr1 -> DECREMENT variable .)
    OR              reduce using rule 20 (expr1 -> DECREMENT variable .)
    PLUS            reduce using rule 20 (expr1 -> DECREMENT variable .)
    DIVIDE          reduce using rule 20 (expr1 -> DECREMENT variable .)
    PERCENT         reduce using rule 20 (expr1 -> DECREMENT variable .)
    TIMES           reduce using rule 20 (expr1 -> DECREMENT variable .)
    MINUS           reduce using rule 20 (expr1 -> DECREMENT variable .)
    SEMICOLON       reduce using rule 20 (expr1 -> DECREMENT variable .)
    RPAREN          reduce using rule 20 (expr1 -> DECREMENT variable .)
    DDOT            reduce using rule 20 (expr1 -> DECREMENT variable .)
    COLON           reduce using rule 20 (expr1 -> DECREMENT variable .)
    AS              reduce using rule 20 (expr1 -> DECREMENT variable .)
    ATTR_ASSOC      reduce using rule 20 (expr1 -> DECREMENT variable .)
    RBRACKET        reduce using rule 20 (expr1 -> DECREMENT variable .)
    RKEY            reduce using rule 20 (expr1 -> DECREMENT variable .)


state 125

    (24) expr1 -> ARRAY_TYPE array_declaration .

    INTE_DOT        reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    EQUALS          reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    GREAT_THAN      reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    LESS_THAN       reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    LESS_EQUAL      reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    GREAT_EQUAL     reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    NOT_EQUAL       reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    LEFT_LOGICAL    reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    RIGHT_LOGICAL   reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    AND             reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    OR              reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    PLUS            reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    DIVIDE          reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    PERCENT         reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    TIMES           reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    MINUS           reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    SEMICOLON       reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    RPAREN          reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    DDOT            reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    COLON           reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    AS              reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    ATTR_ASSOC      reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    RBRACKET        reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)
    RKEY            reduce using rule 24 (expr1 -> ARRAY_TYPE array_declaration .)


state 126

    (35) array_declaration -> LPAREN . array_pair_list RPAREN
    (36) array_declaration -> LPAREN . RPAREN
    (168) array_pair_list -> . array_pair array_pair_list_ARR_PAIR
    (169) array_pair_list -> . array_pair
    (170) array_pair -> . expr
    (171) array_pair -> . AMPERSAND variable
    (172) array_pair -> . expr ATTR_ASSOC expr
    (173) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 171
    AMPERSAND       shift and go to state 174
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    array_pair_list                shift and go to state 170
    array_pair                     shift and go to state 172
    expr                           shift and go to state 173
    variable                       shift and go to state 35
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 127

    (54) statement_if -> IF expr_parentheses . statement_BLOCK_OPT
    (178) statement_BLOCK_OPT -> . statement
    (179) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (180) statement_BLOCK_OPT -> . LKEY RKEY
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 91
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 175
    statement                      shift and go to state 90
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 128

    (131) variable -> simple_indirect_reference_DOLAR reference_variable .

    INCREMENT       reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DECREMENT       reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ADD_ASSIGN      reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    SUB_ASSIGN      reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    MOD_ASSIGN      reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS_ASSIGN     reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE_ASSIGN   reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ASSIGN          reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    INTE_DOT        reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    EQUALS          reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_THAN      reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_THAN       reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LESS_EQUAL      reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    GREAT_EQUAL     reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    NOT_EQUAL       reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    LEFT_LOGICAL    reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RIGHT_LOGICAL   reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    AND             reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    OR              reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PLUS            reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DIVIDE          reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    PERCENT         reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    TIMES           reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    MINUS           reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    SEMICOLON       reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RPAREN          reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    DDOT            reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    COLON           reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    AS              reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    ATTR_ASSOC      reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RBRACKET        reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)
    RKEY            reduce using rule 131 (variable -> simple_indirect_reference_DOLAR reference_variable .)


state 129

    (135) compound_variable -> DOLAR . LKEY expr RKEY

    LKEY            shift and go to state 136


state 130

    (86) function_call -> ID LPAREN . function_call_parameter_list RPAREN
    (87) function_call -> ID LPAREN . RPAREN
    (88) function_call_parameter_list -> . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (89) function_call_parameter_list -> . function_call_parameter
    (92) function_call_parameter -> . expr
    (93) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          shift and go to state 177
    AMPERSAND       shift and go to state 180
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    function_call_parameter_list   shift and go to state 176
    function_call_parameter        shift and go to state 178
    expr                           shift and go to state 179
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 131

    (132) reference_variable -> compound_variable reference_variable_SELECTOR .

    INCREMENT       reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    EQUALS          reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AND             reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    OR              reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PLUS            reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    PERCENT         reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    TIMES           reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    MINUS           reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RPAREN          reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    DDOT            reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    COLON           reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    AS              reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)
    RKEY            reduce using rule 132 (reference_variable -> compound_variable reference_variable_SELECTOR .)


state 132

    (183) reference_variable_SELECTOR -> selector . reference_variable_SELECTOR
    (184) reference_variable_SELECTOR -> selector .
    (183) reference_variable_SELECTOR -> . selector reference_variable_SELECTOR
    (184) reference_variable_SELECTOR -> . selector
    (136) selector -> . LBRACKET expr RBRACKET
    (137) selector -> . LBRACKET RBRACKET

    INCREMENT       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    DECREMENT       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    ADD_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    SUB_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    MOD_ASSIGN      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    PLUS_ASSIGN     reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    DIVIDE_ASSIGN   reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    ASSIGN          reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    INTE_DOT        reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    EQUALS          reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    GREAT_THAN      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    LESS_THAN       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    LESS_EQUAL      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    GREAT_EQUAL     reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    NOT_EQUAL       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    LEFT_LOGICAL    reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    RIGHT_LOGICAL   reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    AND             reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    OR              reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    PLUS            reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    DIVIDE          reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    PERCENT         reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    TIMES           reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    MINUS           reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    SEMICOLON       reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    RPAREN          reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    DDOT            reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    COLON           reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    AS              reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    ATTR_ASSOC      reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    RBRACKET        reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    RKEY            reduce using rule 184 (reference_variable_SELECTOR -> selector .)
    LBRACKET        shift and go to state 133

    selector                       shift and go to state 132
    reference_variable_SELECTOR    shift and go to state 181

state 133

    (136) selector -> LBRACKET . expr RBRACKET
    (137) selector -> LBRACKET . RBRACKET
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RBRACKET        shift and go to state 183
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 182
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 134

    (185) simple_indirect_reference_DOLAR -> DOLAR . simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> DOLAR .
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR

  ! shift/reduce conflict for DOLAR resolved as shift
    VARIABLE        reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR .)
    DOLAR           shift and go to state 134

  ! DOLAR           [ reduce using rule 186 (simple_indirect_reference_DOLAR -> DOLAR .) ]

    simple_indirect_reference_DOLAR shift and go to state 135

state 135

    (185) simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .

    VARIABLE        reduce using rule 185 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)
    DOLAR           reduce using rule 185 (simple_indirect_reference_DOLAR -> DOLAR simple_indirect_reference_DOLAR .)


state 136

    (135) compound_variable -> DOLAR LKEY . expr RKEY
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 184
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 137

    (138) function_declaration_statement -> FUNCTION fds_id fds_parameter . fds_statements
    (139) fds_statements -> . LKEY inner_statement_MUL RKEY
    (140) fds_statements -> . LKEY RKEY

    LKEY            shift and go to state 186

    fds_statements                 shift and go to state 185

state 138

    (143) fds_parameter -> LPAREN . parameter_list RPAREN
    (144) fds_parameter -> LPAREN . RPAREN
    (145) parameter_list -> . parameter parameter_list_COLON_PARAMETER
    (146) parameter_list -> . parameter
    (147) parameter -> . VARIABLE
    (148) parameter -> . parameter_prefix VARIABLE
    (149) parameter -> . VARIABLE ASSIGN static_scalar
    (150) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (151) parameter_prefix -> . parameter_type AMPERSAND
    (152) parameter_prefix -> . AMPERSAND
    (153) parameter_prefix -> . parameter_type
    (154) parameter_type -> . INT_TYPE
    (155) parameter_type -> . BOOLEAN_TYPE
    (156) parameter_type -> . STRING_TYPE
    (157) parameter_type -> . FLOAT_TYPE
    (158) parameter_type -> . ARRAY_TYPE
    (159) parameter_type -> . BOOL_TYPE
    (160) parameter_type -> . REAL_TYPE
    (161) parameter_type -> . DOUBLE_TYPE

    RPAREN          shift and go to state 188
    VARIABLE        shift and go to state 190
    AMPERSAND       shift and go to state 193
    INT_TYPE        shift and go to state 194
    BOOLEAN_TYPE    shift and go to state 195
    STRING_TYPE     shift and go to state 196
    FLOAT_TYPE      shift and go to state 197
    ARRAY_TYPE      shift and go to state 198
    BOOL_TYPE       shift and go to state 199
    REAL_TYPE       shift and go to state 200
    DOUBLE_TYPE     shift and go to state 201

    parameter_list                 shift and go to state 187
    parameter                      shift and go to state 189
    parameter_prefix               shift and go to state 191
    parameter_type                 shift and go to state 192

state 139

    (141) fds_id -> AMPERSAND ID .

    LPAREN          reduce using rule 141 (fds_id -> AMPERSAND ID .)


state 140

    (48) statement -> GLOBAL global_var statement_COLON_GLOBAL . SEMICOLON

    SEMICOLON       shift and go to state 202


state 141

    (49) statement -> GLOBAL global_var SEMICOLON .

    FUNCTION        reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    GLOBAL          reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    WHILE           reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    DO              reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    FOR             reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    FOREACH         reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    BREAK           reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    CONTINUE        reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    RETURN          reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    EXIT            reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    DIE             reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    INCREMENT       reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    DECREMENT       reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    LPAREN          reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    ARRAY_TYPE      reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    TRUE            reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    FALSE           reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    IF              reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    ID              reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_REAL     reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    DOLAR           reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    VARIABLE        reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    END_PROGRAM     reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    RKEY            reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    ELSEIF          reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)
    ELSE            reduce using rule 49 (statement -> GLOBAL global_var SEMICOLON .)


state 142

    (77) statement_COLON_GLOBAL -> COLON . global_var statement_COLON_GLOBAL
    (78) statement_COLON_GLOBAL -> COLON . global_var
    (74) global_var -> . VARIABLE
    (75) global_var -> . DOLAR VARIABLE
    (76) global_var -> . DOLAR LKEY expr RKEY

    VARIABLE        shift and go to state 61
    DOLAR           shift and go to state 62

    global_var                     shift and go to state 203

state 143

    (75) global_var -> DOLAR VARIABLE .

    SEMICOLON       reduce using rule 75 (global_var -> DOLAR VARIABLE .)
    COLON           reduce using rule 75 (global_var -> DOLAR VARIABLE .)


state 144

    (76) global_var -> DOLAR LKEY . expr RKEY
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 204
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 145

    (12) expr2 -> INTE_DOT expr . DDOT expr

    DDOT            shift and go to state 205


state 146

    (13) expr2 -> comparission_operator expr .

    SEMICOLON       reduce using rule 13 (expr2 -> comparission_operator expr .)
    RPAREN          reduce using rule 13 (expr2 -> comparission_operator expr .)
    DDOT            reduce using rule 13 (expr2 -> comparission_operator expr .)
    COLON           reduce using rule 13 (expr2 -> comparission_operator expr .)
    AS              reduce using rule 13 (expr2 -> comparission_operator expr .)
    ATTR_ASSOC      reduce using rule 13 (expr2 -> comparission_operator expr .)
    RBRACKET        reduce using rule 13 (expr2 -> comparission_operator expr .)
    RKEY            reduce using rule 13 (expr2 -> comparission_operator expr .)


state 147

    (14) expr2 -> arithmetic_operator expr .

    SEMICOLON       reduce using rule 14 (expr2 -> arithmetic_operator expr .)
    RPAREN          reduce using rule 14 (expr2 -> arithmetic_operator expr .)
    DDOT            reduce using rule 14 (expr2 -> arithmetic_operator expr .)
    COLON           reduce using rule 14 (expr2 -> arithmetic_operator expr .)
    AS              reduce using rule 14 (expr2 -> arithmetic_operator expr .)
    ATTR_ASSOC      reduce using rule 14 (expr2 -> arithmetic_operator expr .)
    RBRACKET        reduce using rule 14 (expr2 -> arithmetic_operator expr .)
    RKEY            reduce using rule 14 (expr2 -> arithmetic_operator expr .)


state 148

    (55) statement_elseif -> ELSEIF expr_parentheses . statement_BLOCK_OPT
    (178) statement_BLOCK_OPT -> . statement
    (179) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (180) statement_BLOCK_OPT -> . LKEY RKEY
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 91
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 206
    statement                      shift and go to state 90
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 149

    (56) statement_else -> ELSE statement_BLOCK_OPT .

    FUNCTION        reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    WHILE           reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    DO              reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOR             reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    FOREACH         reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    BREAK           reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    RETURN          reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    EXIT            reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    DIE             reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    LPAREN          reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    TRUE            reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    FALSE           reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    IF              reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    ID              reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    DOLAR           reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    RKEY            reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)
    ELSE            reduce using rule 56 (statement_else -> ELSE statement_BLOCK_OPT .)


state 150

    (57) while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 57 (while_statement -> WHILE expr_parentheses statement_BLOCK_OPT .)


state 151

    (81) expr_parentheses -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 207


state 152

    (58) do_statement -> DO statement_BLOCK_OPT WHILE . expr_parentheses SEMICOLON
    (81) expr_parentheses -> . LPAREN expr RPAREN

    LPAREN          shift and go to state 88

    expr_parentheses               shift and go to state 208

state 153

    (179) statement_BLOCK_OPT -> LKEY statement_MUL . RKEY

    RKEY            shift and go to state 209


state 154

    (180) statement_BLOCK_OPT -> LKEY RKEY .

    WHILE           reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    FUNCTION        reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    GLOBAL          reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    DO              reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOR             reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    FOREACH         reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    BREAK           reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONTINUE        reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    RETURN          reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    EXIT            reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    DIE             reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    INCREMENT       reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    DECREMENT       reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    LPAREN          reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    TRUE            reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    FALSE           reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    IF              reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    ID              reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    DOLAR           reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    VARIABLE        reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    RKEY            reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSEIF          reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)
    ELSE            reduce using rule 180 (statement_BLOCK_OPT -> LKEY RKEY .)


state 155

    (174) statement_MUL -> statement . statement_MUL
    (175) statement_MUL -> statement .
    (174) statement_MUL -> . statement statement_MUL
    (175) statement_MUL -> . statement
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 175 (statement_MUL -> statement .)
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement                      shift and go to state 155
    statement_MUL                  shift and go to state 210
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 156

    (65) for_statement -> FOR LPAREN for_parameters . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 211


state 157

    (66) for_parameters -> SEMICOLON . SEMICOLON
    (70) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON
    (71) for_parameters -> SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (72) for_parameters -> SEMICOLON . SEMICOLON for_expr_OPT
    (84) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (85) for_expr_OPT -> . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 212
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 213
    expr                           shift and go to state 159
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 158

    (67) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON
    (68) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON
    (69) for_parameters -> for_expr_OPT . SEMICOLON SEMICOLON for_expr_OPT
    (73) for_parameters -> for_expr_OPT . SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 214


state 159

    (84) for_expr_OPT -> expr . for_expr_COLON_EXPR
    (85) for_expr_OPT -> expr .
    (176) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (177) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 85 (for_expr_OPT -> expr .)
    RPAREN          reduce using rule 85 (for_expr_OPT -> expr .)
    COLON           shift and go to state 216

    for_expr_COLON_EXPR            shift and go to state 215

state 160

    (23) expr1 -> LPAREN expr RPAREN .

    INTE_DOT        reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    GREAT_THAN      reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    GREAT_EQUAL     reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    LEFT_LOGICAL    reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    RIGHT_LOGICAL   reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    AND             reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    OR              reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    PERCENT         reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    COLON           reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    AS              reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    ATTR_ASSOC      reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)
    RKEY            reduce using rule 23 (expr1 -> LPAREN expr RPAREN .)


state 161

    (17) expr3 -> LPAREN type_cast_operator RPAREN . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 217
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 162

    (82) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> FOREACH LPAREN expr . AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    AS              shift and go to state 218


state 163

    (59) break_statement -> BREAK expr SEMICOLON .

    FUNCTION        reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    GLOBAL          reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    WHILE           reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    DO              reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    FOR             reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    FOREACH         reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    BREAK           reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    CONTINUE        reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    RETURN          reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    EXIT            reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    DIE             reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    INCREMENT       reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    DECREMENT       reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    LPAREN          reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    TRUE            reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    FALSE           reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    IF              reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    ID              reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    DOLAR           reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    VARIABLE        reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    END_PROGRAM     reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    RKEY            reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    ELSEIF          reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)
    ELSE            reduce using rule 59 (break_statement -> BREAK expr SEMICOLON .)


state 164

    (61) continue_statement -> CONTINUE expr SEMICOLON .

    FUNCTION        reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    GLOBAL          reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    WHILE           reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    DO              reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOR             reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    FOREACH         reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    BREAK           reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONTINUE        reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    RETURN          reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    EXIT            reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    DIE             reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    INCREMENT       reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    DECREMENT       reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    LPAREN          reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    TRUE            reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    FALSE           reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    IF              reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    ID              reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    DOLAR           reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    VARIABLE        reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    END_PROGRAM     reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    RKEY            reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSEIF          reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)
    ELSE            reduce using rule 61 (continue_statement -> CONTINUE expr SEMICOLON .)


state 165

    (63) return_statement -> RETURN expr SEMICOLON .

    FUNCTION        reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    GLOBAL          reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    DO              reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    FOREACH         reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    BREAK           reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    CONTINUE        reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    EXIT            reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    DIE             reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    INCREMENT       reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    DECREMENT       reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    LPAREN          reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    ARRAY_TYPE      reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    TRUE            reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    FALSE           reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    IF              reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    ID              reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_REAL     reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    DOLAR           reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    VARIABLE        reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    END_PROGRAM     reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    RKEY            reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    ELSEIF          reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)
    ELSE            reduce using rule 63 (return_statement -> RETURN expr SEMICOLON .)


state 166

    (33) exit_expr -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 219


state 167

    (34) exit_expr -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 34 (exit_expr -> LPAREN RPAREN .)


state 168

    (15) expr3 -> variable assign_operator expr .

    SEMICOLON       reduce using rule 15 (expr3 -> variable assign_operator expr .)
    RPAREN          reduce using rule 15 (expr3 -> variable assign_operator expr .)
    DDOT            reduce using rule 15 (expr3 -> variable assign_operator expr .)
    COLON           reduce using rule 15 (expr3 -> variable assign_operator expr .)
    AS              reduce using rule 15 (expr3 -> variable assign_operator expr .)
    ATTR_ASSOC      reduce using rule 15 (expr3 -> variable assign_operator expr .)
    RBRACKET        reduce using rule 15 (expr3 -> variable assign_operator expr .)
    RKEY            reduce using rule 15 (expr3 -> variable assign_operator expr .)


state 169

    (16) expr3 -> variable assign_operator AMPERSAND . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 35
    expr                           shift and go to state 220
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 170

    (35) array_declaration -> LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 221


state 171

    (36) array_declaration -> LPAREN RPAREN .

    INTE_DOT        reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    EQUALS          reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    AND             reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    OR              reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    PLUS            reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    PERCENT         reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    TIMES           reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    MINUS           reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    DDOT            reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    RPAREN          reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    COLON           reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    AS              reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 36 (array_declaration -> LPAREN RPAREN .)
    RKEY            reduce using rule 36 (array_declaration -> LPAREN RPAREN .)


state 172

    (168) array_pair_list -> array_pair . array_pair_list_ARR_PAIR
    (169) array_pair_list -> array_pair .
    (187) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 169 (array_pair_list -> array_pair .)
    COLON           shift and go to state 223

    array_pair_list_ARR_PAIR       shift and go to state 222

state 173

    (170) array_pair -> expr .
    (172) array_pair -> expr . ATTR_ASSOC expr
    (173) array_pair -> expr . ATTR_ASSOC AMPERSAND variable

    COLON           reduce using rule 170 (array_pair -> expr .)
    RPAREN          reduce using rule 170 (array_pair -> expr .)
    ATTR_ASSOC      shift and go to state 224


state 174

    (171) array_pair -> AMPERSAND . variable
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 225
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 175

    (54) statement_if -> IF expr_parentheses statement_BLOCK_OPT .

    ELSEIF          reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FUNCTION        reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 54 (statement_if -> IF expr_parentheses statement_BLOCK_OPT .)


state 176

    (86) function_call -> ID LPAREN function_call_parameter_list . RPAREN

    RPAREN          shift and go to state 226


state 177

    (87) function_call -> ID LPAREN RPAREN .

    INTE_DOT        reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    GREAT_THAN      reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    GREAT_EQUAL     reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    LEFT_LOGICAL    reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    RIGHT_LOGICAL   reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    PERCENT         reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    DDOT            reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    AS              reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    ATTR_ASSOC      reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 87 (function_call -> ID LPAREN RPAREN .)
    RKEY            reduce using rule 87 (function_call -> ID LPAREN RPAREN .)


state 178

    (88) function_call_parameter_list -> function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (89) function_call_parameter_list -> function_call_parameter .
    (90) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (91) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 89 (function_call_parameter_list -> function_call_parameter .)
    COLON           shift and go to state 228

    fc_parameter_list_COLON_PARAMETER shift and go to state 227

state 179

    (92) function_call_parameter -> expr .

    COLON           reduce using rule 92 (function_call_parameter -> expr .)
    RPAREN          reduce using rule 92 (function_call_parameter -> expr .)


state 180

    (93) function_call_parameter -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 229


state 181

    (183) reference_variable_SELECTOR -> selector reference_variable_SELECTOR .

    INCREMENT       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DECREMENT       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ADD_ASSIGN      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SUB_ASSIGN      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MOD_ASSIGN      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS_ASSIGN     reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE_ASSIGN   reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ASSIGN          reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    INTE_DOT        reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    EQUALS          reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_THAN      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_THAN       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LESS_EQUAL      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    GREAT_EQUAL     reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    NOT_EQUAL       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    LEFT_LOGICAL    reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RIGHT_LOGICAL   reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AND             reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    OR              reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PLUS            reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DIVIDE          reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    PERCENT         reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    TIMES           reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    MINUS           reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    SEMICOLON       reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RPAREN          reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    DDOT            reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    COLON           reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    AS              reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    ATTR_ASSOC      reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RBRACKET        reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)
    RKEY            reduce using rule 183 (reference_variable_SELECTOR -> selector reference_variable_SELECTOR .)


state 182

    (136) selector -> LBRACKET expr . RBRACKET

    RBRACKET        shift and go to state 230


state 183

    (137) selector -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    ADD_ASSIGN      reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    SUB_ASSIGN      reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    MOD_ASSIGN      reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    PLUS_ASSIGN     reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    INTE_DOT        reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    EQUALS          reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    GREAT_THAN      reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    LESS_THAN       reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    LESS_EQUAL      reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    GREAT_EQUAL     reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    NOT_EQUAL       reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    LEFT_LOGICAL    reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    AND             reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    OR              reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    PERCENT         reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    DDOT            reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    COLON           reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    AS              reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    ATTR_ASSOC      reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 137 (selector -> LBRACKET RBRACKET .)
    RKEY            reduce using rule 137 (selector -> LBRACKET RBRACKET .)


state 184

    (135) compound_variable -> DOLAR LKEY expr . RKEY

    RKEY            shift and go to state 231


state 185

    (138) function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .

    FUNCTION        reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    GLOBAL          reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    WHILE           reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DO              reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOR             reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FOREACH         reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    BREAK           reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONTINUE        reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RETURN          reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    EXIT            reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DIE             reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    INCREMENT       reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DECREMENT       reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    LPAREN          reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ARRAY_TYPE      reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    TRUE            reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    FALSE           reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    IF              reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    ID              reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_REAL     reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    NUMBER_INTEGER  reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    CONSTANT_ENCAPSED_STRING reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    DOLAR           reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    VARIABLE        reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    END_PROGRAM     reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)
    RKEY            reduce using rule 138 (function_declaration_statement -> FUNCTION fds_id fds_parameter fds_statements .)


state 186

    (139) fds_statements -> LKEY . inner_statement_MUL RKEY
    (140) fds_statements -> LKEY . RKEY
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (138) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            shift and go to state 233
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement_MUL            shift and go to state 232
    inner_statement                shift and go to state 234
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 187

    (143) fds_parameter -> LPAREN parameter_list . RPAREN

    RPAREN          shift and go to state 235


state 188

    (144) fds_parameter -> LPAREN RPAREN .

    LKEY            reduce using rule 144 (fds_parameter -> LPAREN RPAREN .)


state 189

    (145) parameter_list -> parameter . parameter_list_COLON_PARAMETER
    (146) parameter_list -> parameter .
    (181) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (182) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 146 (parameter_list -> parameter .)
    COLON           shift and go to state 237

    parameter_list_COLON_PARAMETER shift and go to state 236

state 190

    (147) parameter -> VARIABLE .
    (149) parameter -> VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 147 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 147 (parameter -> VARIABLE .)
    ASSIGN          shift and go to state 238


state 191

    (148) parameter -> parameter_prefix . VARIABLE
    (150) parameter -> parameter_prefix . VARIABLE ASSIGN static_scalar

    VARIABLE        shift and go to state 239


state 192

    (151) parameter_prefix -> parameter_type . AMPERSAND
    (153) parameter_prefix -> parameter_type .

    AMPERSAND       shift and go to state 240
    VARIABLE        reduce using rule 153 (parameter_prefix -> parameter_type .)


state 193

    (152) parameter_prefix -> AMPERSAND .

    VARIABLE        reduce using rule 152 (parameter_prefix -> AMPERSAND .)


state 194

    (154) parameter_type -> INT_TYPE .

    AMPERSAND       reduce using rule 154 (parameter_type -> INT_TYPE .)
    VARIABLE        reduce using rule 154 (parameter_type -> INT_TYPE .)


state 195

    (155) parameter_type -> BOOLEAN_TYPE .

    AMPERSAND       reduce using rule 155 (parameter_type -> BOOLEAN_TYPE .)
    VARIABLE        reduce using rule 155 (parameter_type -> BOOLEAN_TYPE .)


state 196

    (156) parameter_type -> STRING_TYPE .

    AMPERSAND       reduce using rule 156 (parameter_type -> STRING_TYPE .)
    VARIABLE        reduce using rule 156 (parameter_type -> STRING_TYPE .)


state 197

    (157) parameter_type -> FLOAT_TYPE .

    AMPERSAND       reduce using rule 157 (parameter_type -> FLOAT_TYPE .)
    VARIABLE        reduce using rule 157 (parameter_type -> FLOAT_TYPE .)


state 198

    (158) parameter_type -> ARRAY_TYPE .

    AMPERSAND       reduce using rule 158 (parameter_type -> ARRAY_TYPE .)
    VARIABLE        reduce using rule 158 (parameter_type -> ARRAY_TYPE .)


state 199

    (159) parameter_type -> BOOL_TYPE .

    AMPERSAND       reduce using rule 159 (parameter_type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 159 (parameter_type -> BOOL_TYPE .)


state 200

    (160) parameter_type -> REAL_TYPE .

    AMPERSAND       reduce using rule 160 (parameter_type -> REAL_TYPE .)
    VARIABLE        reduce using rule 160 (parameter_type -> REAL_TYPE .)


state 201

    (161) parameter_type -> DOUBLE_TYPE .

    AMPERSAND       reduce using rule 161 (parameter_type -> DOUBLE_TYPE .)
    VARIABLE        reduce using rule 161 (parameter_type -> DOUBLE_TYPE .)


state 202

    (48) statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .

    FUNCTION        reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    GLOBAL          reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    WHILE           reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DO              reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOR             reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FOREACH         reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    BREAK           reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONTINUE        reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RETURN          reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    EXIT            reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DIE             reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    INCREMENT       reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DECREMENT       reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    LPAREN          reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ARRAY_TYPE      reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    TRUE            reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    FALSE           reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    IF              reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ID              reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_REAL     reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    DOLAR           reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    VARIABLE        reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    END_PROGRAM     reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    RKEY            reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSEIF          reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)
    ELSE            reduce using rule 48 (statement -> GLOBAL global_var statement_COLON_GLOBAL SEMICOLON .)


state 203

    (77) statement_COLON_GLOBAL -> COLON global_var . statement_COLON_GLOBAL
    (78) statement_COLON_GLOBAL -> COLON global_var .
    (77) statement_COLON_GLOBAL -> . COLON global_var statement_COLON_GLOBAL
    (78) statement_COLON_GLOBAL -> . COLON global_var

    SEMICOLON       reduce using rule 78 (statement_COLON_GLOBAL -> COLON global_var .)
    COLON           shift and go to state 142

    statement_COLON_GLOBAL         shift and go to state 241

state 204

    (76) global_var -> DOLAR LKEY expr . RKEY

    RKEY            shift and go to state 242


state 205

    (12) expr2 -> INTE_DOT expr DDOT . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 243
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 206

    (55) statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .

    FUNCTION        reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    WHILE           reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DO              reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOR             reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FOREACH         reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    BREAK           reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RETURN          reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    EXIT            reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DIE             reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    LPAREN          reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    TRUE            reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    FALSE           reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    IF              reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ID              reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    DOLAR           reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    RKEY            reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)
    ELSE            reduce using rule 55 (statement_elseif -> ELSEIF expr_parentheses statement_BLOCK_OPT .)


state 207

    (81) expr_parentheses -> LPAREN expr RPAREN .

    LKEY            reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    DO              reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    FOR             reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    FOREACH         reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    DIE             reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    ARRAY_TYPE      reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    IF              reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    ID              reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_REAL     reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    NUMBER_INTEGER  reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    CONSTANT_ENCAPSED_STRING reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    DOLAR           reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 81 (expr_parentheses -> LPAREN expr RPAREN .)


state 208

    (58) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses . SEMICOLON

    SEMICOLON       shift and go to state 244


state 209

    (179) statement_BLOCK_OPT -> LKEY statement_MUL RKEY .

    WHILE           reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FUNCTION        reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    GLOBAL          reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DO              reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOR             reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FOREACH         reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    BREAK           reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONTINUE        reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RETURN          reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    EXIT            reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DIE             reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    INCREMENT       reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DECREMENT       reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    LPAREN          reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    TRUE            reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    FALSE           reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    IF              reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ID              reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    DOLAR           reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    VARIABLE        reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    RKEY            reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSEIF          reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)
    ELSE            reduce using rule 179 (statement_BLOCK_OPT -> LKEY statement_MUL RKEY .)


state 210

    (174) statement_MUL -> statement statement_MUL .

    RKEY            reduce using rule 174 (statement_MUL -> statement statement_MUL .)


state 211

    (65) for_statement -> FOR LPAREN for_parameters RPAREN . statement_BLOCK_OPT
    (178) statement_BLOCK_OPT -> . statement
    (179) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (180) statement_BLOCK_OPT -> . LKEY RKEY
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 91
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    statement_BLOCK_OPT            shift and go to state 245
    statement                      shift and go to state 90
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 212

    (66) for_parameters -> SEMICOLON SEMICOLON .
    (72) for_parameters -> SEMICOLON SEMICOLON . for_expr_OPT
    (84) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (85) for_expr_OPT -> . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 66 (for_parameters -> SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 246
    expr                           shift and go to state 159
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 213

    (70) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON
    (71) for_parameters -> SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 247


state 214

    (67) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON
    (68) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON
    (69) for_parameters -> for_expr_OPT SEMICOLON . SEMICOLON for_expr_OPT
    (73) for_parameters -> for_expr_OPT SEMICOLON . for_expr_OPT SEMICOLON for_expr_OPT
    (84) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (85) for_expr_OPT -> . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    SEMICOLON       shift and go to state 249
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 248
    expr                           shift and go to state 159
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 215

    (84) for_expr_OPT -> expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 84 (for_expr_OPT -> expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 84 (for_expr_OPT -> expr for_expr_COLON_EXPR .)


state 216

    (176) for_expr_COLON_EXPR -> COLON . expr for_expr_COLON_EXPR
    (177) for_expr_COLON_EXPR -> COLON . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 250
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 217

    (17) expr3 -> LPAREN type_cast_operator RPAREN expr .

    SEMICOLON       reduce using rule 17 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RPAREN          reduce using rule 17 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    DDOT            reduce using rule 17 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    COLON           reduce using rule 17 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    AS              reduce using rule 17 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    ATTR_ASSOC      reduce using rule 17 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RBRACKET        reduce using rule 17 (expr3 -> LPAREN type_cast_operator RPAREN expr .)
    RKEY            reduce using rule 17 (expr3 -> LPAREN type_cast_operator RPAREN expr .)


state 218

    (82) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> FOREACH LPAREN expr AS . ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (79) ampersand_variable -> . AMPERSAND VARIABLE
    (80) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 252
    VARIABLE        shift and go to state 253

    ampersand_variable             shift and go to state 251

state 219

    (33) exit_expr -> LPAREN expr RPAREN .

    SEMICOLON       reduce using rule 33 (exit_expr -> LPAREN expr RPAREN .)


state 220

    (16) expr3 -> variable assign_operator AMPERSAND expr .

    SEMICOLON       reduce using rule 16 (expr3 -> variable assign_operator AMPERSAND expr .)
    RPAREN          reduce using rule 16 (expr3 -> variable assign_operator AMPERSAND expr .)
    DDOT            reduce using rule 16 (expr3 -> variable assign_operator AMPERSAND expr .)
    COLON           reduce using rule 16 (expr3 -> variable assign_operator AMPERSAND expr .)
    AS              reduce using rule 16 (expr3 -> variable assign_operator AMPERSAND expr .)
    ATTR_ASSOC      reduce using rule 16 (expr3 -> variable assign_operator AMPERSAND expr .)
    RBRACKET        reduce using rule 16 (expr3 -> variable assign_operator AMPERSAND expr .)
    RKEY            reduce using rule 16 (expr3 -> variable assign_operator AMPERSAND expr .)


state 221

    (35) array_declaration -> LPAREN array_pair_list RPAREN .

    INTE_DOT        reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    EQUALS          reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_THAN      reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_THAN       reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LESS_EQUAL      reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    GREAT_EQUAL     reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    NOT_EQUAL       reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DIVIDE          reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    PERCENT         reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    TIMES           reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    SEMICOLON       reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    DDOT            reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    ATTR_ASSOC      reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)
    RKEY            reduce using rule 35 (array_declaration -> LPAREN array_pair_list RPAREN .)


state 222

    (168) array_pair_list -> array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 168 (array_pair_list -> array_pair array_pair_list_ARR_PAIR .)


state 223

    (187) array_pair_list_ARR_PAIR -> COLON . array_pair array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> COLON . array_pair
    (170) array_pair -> . expr
    (171) array_pair -> . AMPERSAND variable
    (172) array_pair -> . expr ATTR_ASSOC expr
    (173) array_pair -> . expr ATTR_ASSOC AMPERSAND variable
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 174
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    array_pair                     shift and go to state 254
    expr                           shift and go to state 173
    variable                       shift and go to state 35
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 224

    (172) array_pair -> expr ATTR_ASSOC . expr
    (173) array_pair -> expr ATTR_ASSOC . AMPERSAND variable
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 256
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 255
    variable                       shift and go to state 35
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 225

    (171) array_pair -> AMPERSAND variable .

    COLON           reduce using rule 171 (array_pair -> AMPERSAND variable .)
    RPAREN          reduce using rule 171 (array_pair -> AMPERSAND variable .)


state 226

    (86) function_call -> ID LPAREN function_call_parameter_list RPAREN .

    INTE_DOT        reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_THAN      reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_THAN       reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LESS_EQUAL      reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    GREAT_EQUAL     reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    NOT_EQUAL       reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    LEFT_LOGICAL    reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RIGHT_LOGICAL   reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DIVIDE          reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    PERCENT         reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    TIMES           reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    SEMICOLON       reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    DDOT            reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    ATTR_ASSOC      reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)
    RKEY            reduce using rule 86 (function_call -> ID LPAREN function_call_parameter_list RPAREN .)


state 227

    (88) function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 88 (function_call_parameter_list -> function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 228

    (90) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter fc_parameter_list_COLON_PARAMETER
    (91) fc_parameter_list_COLON_PARAMETER -> COLON . function_call_parameter
    (92) function_call_parameter -> . expr
    (93) function_call_parameter -> . AMPERSAND VARIABLE
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    AMPERSAND       shift and go to state 180
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    function_call_parameter        shift and go to state 257
    expr                           shift and go to state 179
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 229

    (93) function_call_parameter -> AMPERSAND VARIABLE .

    COLON           reduce using rule 93 (function_call_parameter -> AMPERSAND VARIABLE .)
    RPAREN          reduce using rule 93 (function_call_parameter -> AMPERSAND VARIABLE .)


state 230

    (136) selector -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    ADD_ASSIGN      reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    SUB_ASSIGN      reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    MOD_ASSIGN      reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    PLUS_ASSIGN     reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    ASSIGN          reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    INTE_DOT        reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    GREAT_THAN      reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    LESS_EQUAL      reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    GREAT_EQUAL     reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    LEFT_LOGICAL    reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    RIGHT_LOGICAL   reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    PERCENT         reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    SEMICOLON       reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    DDOT            reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    COLON           reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    AS              reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    ATTR_ASSOC      reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)
    RKEY            reduce using rule 136 (selector -> LBRACKET expr RBRACKET .)


state 231

    (135) compound_variable -> DOLAR LKEY expr RKEY .

    LBRACKET        reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    INCREMENT       reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    DECREMENT       reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    ADD_ASSIGN      reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    SUB_ASSIGN      reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    MOD_ASSIGN      reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS_ASSIGN     reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE_ASSIGN   reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    ASSIGN          reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    INTE_DOT        reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    EQUALS          reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_THAN      reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_THAN       reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    LESS_EQUAL      reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    GREAT_EQUAL     reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    NOT_EQUAL       reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    LEFT_LOGICAL    reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    RIGHT_LOGICAL   reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    AND             reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    OR              reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    PLUS            reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    DIVIDE          reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    PERCENT         reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    TIMES           reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    MINUS           reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    SEMICOLON       reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    RPAREN          reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    DDOT            reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    AS              reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    ATTR_ASSOC      reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    RBRACKET        reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)
    RKEY            reduce using rule 135 (compound_variable -> DOLAR LKEY expr RKEY .)


state 232

    (139) fds_statements -> LKEY inner_statement_MUL . RKEY

    RKEY            shift and go to state 258


state 233

    (140) fds_statements -> LKEY RKEY .

    FUNCTION        reduce using rule 140 (fds_statements -> LKEY RKEY .)
    GLOBAL          reduce using rule 140 (fds_statements -> LKEY RKEY .)
    WHILE           reduce using rule 140 (fds_statements -> LKEY RKEY .)
    DO              reduce using rule 140 (fds_statements -> LKEY RKEY .)
    FOR             reduce using rule 140 (fds_statements -> LKEY RKEY .)
    FOREACH         reduce using rule 140 (fds_statements -> LKEY RKEY .)
    BREAK           reduce using rule 140 (fds_statements -> LKEY RKEY .)
    CONTINUE        reduce using rule 140 (fds_statements -> LKEY RKEY .)
    RETURN          reduce using rule 140 (fds_statements -> LKEY RKEY .)
    EXIT            reduce using rule 140 (fds_statements -> LKEY RKEY .)
    DIE             reduce using rule 140 (fds_statements -> LKEY RKEY .)
    INCREMENT       reduce using rule 140 (fds_statements -> LKEY RKEY .)
    DECREMENT       reduce using rule 140 (fds_statements -> LKEY RKEY .)
    LPAREN          reduce using rule 140 (fds_statements -> LKEY RKEY .)
    ARRAY_TYPE      reduce using rule 140 (fds_statements -> LKEY RKEY .)
    TRUE            reduce using rule 140 (fds_statements -> LKEY RKEY .)
    FALSE           reduce using rule 140 (fds_statements -> LKEY RKEY .)
    IF              reduce using rule 140 (fds_statements -> LKEY RKEY .)
    ID              reduce using rule 140 (fds_statements -> LKEY RKEY .)
    NUMBER_REAL     reduce using rule 140 (fds_statements -> LKEY RKEY .)
    NUMBER_INTEGER  reduce using rule 140 (fds_statements -> LKEY RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 140 (fds_statements -> LKEY RKEY .)
    DOLAR           reduce using rule 140 (fds_statements -> LKEY RKEY .)
    VARIABLE        reduce using rule 140 (fds_statements -> LKEY RKEY .)
    END_PROGRAM     reduce using rule 140 (fds_statements -> LKEY RKEY .)
    RKEY            reduce using rule 140 (fds_statements -> LKEY RKEY .)


state 234

    (7) inner_statement_MUL -> inner_statement . inner_statement_MUL
    (8) inner_statement_MUL -> inner_statement .
    (7) inner_statement_MUL -> . inner_statement inner_statement_MUL
    (8) inner_statement_MUL -> . inner_statement
    (5) inner_statement -> . function_declaration_statement
    (6) inner_statement -> . statement
    (138) function_declaration_statement -> . FUNCTION fds_id fds_parameter fds_statements
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RKEY            reduce using rule 8 (inner_statement_MUL -> inner_statement .)
    FUNCTION        shift and go to state 8
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    inner_statement                shift and go to state 234
    inner_statement_MUL            shift and go to state 259
    function_declaration_statement shift and go to state 6
    statement                      shift and go to state 7
    expr                           shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 235

    (143) fds_parameter -> LPAREN parameter_list RPAREN .

    LKEY            reduce using rule 143 (fds_parameter -> LPAREN parameter_list RPAREN .)


state 236

    (145) parameter_list -> parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 145 (parameter_list -> parameter parameter_list_COLON_PARAMETER .)


state 237

    (181) parameter_list_COLON_PARAMETER -> COLON . parameter parameter_list_COLON_PARAMETER
    (182) parameter_list_COLON_PARAMETER -> COLON . parameter
    (147) parameter -> . VARIABLE
    (148) parameter -> . parameter_prefix VARIABLE
    (149) parameter -> . VARIABLE ASSIGN static_scalar
    (150) parameter -> . parameter_prefix VARIABLE ASSIGN static_scalar
    (151) parameter_prefix -> . parameter_type AMPERSAND
    (152) parameter_prefix -> . AMPERSAND
    (153) parameter_prefix -> . parameter_type
    (154) parameter_type -> . INT_TYPE
    (155) parameter_type -> . BOOLEAN_TYPE
    (156) parameter_type -> . STRING_TYPE
    (157) parameter_type -> . FLOAT_TYPE
    (158) parameter_type -> . ARRAY_TYPE
    (159) parameter_type -> . BOOL_TYPE
    (160) parameter_type -> . REAL_TYPE
    (161) parameter_type -> . DOUBLE_TYPE

    VARIABLE        shift and go to state 190
    AMPERSAND       shift and go to state 193
    INT_TYPE        shift and go to state 194
    BOOLEAN_TYPE    shift and go to state 195
    STRING_TYPE     shift and go to state 196
    FLOAT_TYPE      shift and go to state 197
    ARRAY_TYPE      shift and go to state 198
    BOOL_TYPE       shift and go to state 199
    REAL_TYPE       shift and go to state 200
    DOUBLE_TYPE     shift and go to state 201

    parameter                      shift and go to state 260
    parameter_prefix               shift and go to state 191
    parameter_type                 shift and go to state 192

state 238

    (149) parameter -> VARIABLE ASSIGN . static_scalar
    (162) static_scalar -> . common_scalar
    (163) static_scalar -> . PLUS static_scalar
    (164) static_scalar -> . MINUS static_scalar
    (165) common_scalar -> . NUMBER_REAL
    (166) common_scalar -> . NUMBER_INTEGER
    (167) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 263
    MINUS           shift and go to state 264
    NUMBER_REAL     shift and go to state 265
    NUMBER_INTEGER  shift and go to state 266
    CONSTANT_ENCAPSED_STRING shift and go to state 267

    static_scalar                  shift and go to state 261
    common_scalar                  shift and go to state 262

state 239

    (148) parameter -> parameter_prefix VARIABLE .
    (150) parameter -> parameter_prefix VARIABLE . ASSIGN static_scalar

    COLON           reduce using rule 148 (parameter -> parameter_prefix VARIABLE .)
    RPAREN          reduce using rule 148 (parameter -> parameter_prefix VARIABLE .)
    ASSIGN          shift and go to state 268


state 240

    (151) parameter_prefix -> parameter_type AMPERSAND .

    VARIABLE        reduce using rule 151 (parameter_prefix -> parameter_type AMPERSAND .)


state 241

    (77) statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .

    SEMICOLON       reduce using rule 77 (statement_COLON_GLOBAL -> COLON global_var statement_COLON_GLOBAL .)


state 242

    (76) global_var -> DOLAR LKEY expr RKEY .

    SEMICOLON       reduce using rule 76 (global_var -> DOLAR LKEY expr RKEY .)
    COLON           reduce using rule 76 (global_var -> DOLAR LKEY expr RKEY .)


state 243

    (12) expr2 -> INTE_DOT expr DDOT expr .

    SEMICOLON       reduce using rule 12 (expr2 -> INTE_DOT expr DDOT expr .)
    RPAREN          reduce using rule 12 (expr2 -> INTE_DOT expr DDOT expr .)
    DDOT            reduce using rule 12 (expr2 -> INTE_DOT expr DDOT expr .)
    COLON           reduce using rule 12 (expr2 -> INTE_DOT expr DDOT expr .)
    AS              reduce using rule 12 (expr2 -> INTE_DOT expr DDOT expr .)
    ATTR_ASSOC      reduce using rule 12 (expr2 -> INTE_DOT expr DDOT expr .)
    RBRACKET        reduce using rule 12 (expr2 -> INTE_DOT expr DDOT expr .)
    RKEY            reduce using rule 12 (expr2 -> INTE_DOT expr DDOT expr .)


state 244

    (58) do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .

    FUNCTION        reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    GLOBAL          reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    WHILE           reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DO              reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOR             reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FOREACH         reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    BREAK           reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONTINUE        reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RETURN          reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    EXIT            reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DIE             reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    INCREMENT       reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DECREMENT       reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    LPAREN          reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ARRAY_TYPE      reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    TRUE            reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    FALSE           reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    IF              reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ID              reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_REAL     reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    NUMBER_INTEGER  reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    DOLAR           reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    VARIABLE        reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    END_PROGRAM     reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    RKEY            reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSEIF          reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)
    ELSE            reduce using rule 58 (do_statement -> DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON .)


state 245

    (65) for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 65 (for_statement -> FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT .)


state 246

    (72) for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 72 (for_parameters -> SEMICOLON SEMICOLON for_expr_OPT .)


state 247

    (70) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .
    (71) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (84) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (85) for_expr_OPT -> . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 70 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 269
    expr                           shift and go to state 159
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 248

    (68) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON
    (73) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT . SEMICOLON for_expr_OPT

    SEMICOLON       shift and go to state 270


state 249

    (67) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .
    (69) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON . for_expr_OPT
    (84) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (85) for_expr_OPT -> . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 67 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 271
    expr                           shift and go to state 159
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 250

    (176) for_expr_COLON_EXPR -> COLON expr . for_expr_COLON_EXPR
    (177) for_expr_COLON_EXPR -> COLON expr .
    (176) for_expr_COLON_EXPR -> . COLON expr for_expr_COLON_EXPR
    (177) for_expr_COLON_EXPR -> . COLON expr

    SEMICOLON       reduce using rule 177 (for_expr_COLON_EXPR -> COLON expr .)
    RPAREN          reduce using rule 177 (for_expr_COLON_EXPR -> COLON expr .)
    COLON           shift and go to state 216

    for_expr_COLON_EXPR            shift and go to state 272

state 251

    (82) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable . ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 273
    ATTR_ASSOC      shift and go to state 274


state 252

    (79) ampersand_variable -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 275


state 253

    (80) ampersand_variable -> VARIABLE .

    RPAREN          reduce using rule 80 (ampersand_variable -> VARIABLE .)
    ATTR_ASSOC      reduce using rule 80 (ampersand_variable -> VARIABLE .)


state 254

    (187) array_pair_list_ARR_PAIR -> COLON array_pair . array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> COLON array_pair .
    (187) array_pair_list_ARR_PAIR -> . COLON array_pair array_pair_list_ARR_PAIR
    (188) array_pair_list_ARR_PAIR -> . COLON array_pair

    RPAREN          reduce using rule 188 (array_pair_list_ARR_PAIR -> COLON array_pair .)
    COLON           shift and go to state 223

    array_pair_list_ARR_PAIR       shift and go to state 276

state 255

    (172) array_pair -> expr ATTR_ASSOC expr .

    COLON           reduce using rule 172 (array_pair -> expr ATTR_ASSOC expr .)
    RPAREN          reduce using rule 172 (array_pair -> expr ATTR_ASSOC expr .)


state 256

    (173) array_pair -> expr ATTR_ASSOC AMPERSAND . variable
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    variable                       shift and go to state 277
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 257

    (90) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter . fc_parameter_list_COLON_PARAMETER
    (91) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .
    (90) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter fc_parameter_list_COLON_PARAMETER
    (91) fc_parameter_list_COLON_PARAMETER -> . COLON function_call_parameter

    RPAREN          reduce using rule 91 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter .)
    COLON           shift and go to state 228

    fc_parameter_list_COLON_PARAMETER shift and go to state 278

state 258

    (139) fds_statements -> LKEY inner_statement_MUL RKEY .

    FUNCTION        reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    GLOBAL          reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    WHILE           reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DO              reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOR             reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FOREACH         reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    BREAK           reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONTINUE        reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RETURN          reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    EXIT            reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DIE             reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    INCREMENT       reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DECREMENT       reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    LPAREN          reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ARRAY_TYPE      reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    TRUE            reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    FALSE           reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    IF              reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    ID              reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_REAL     reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    NUMBER_INTEGER  reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    CONSTANT_ENCAPSED_STRING reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    DOLAR           reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    VARIABLE        reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    END_PROGRAM     reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)
    RKEY            reduce using rule 139 (fds_statements -> LKEY inner_statement_MUL RKEY .)


state 259

    (7) inner_statement_MUL -> inner_statement inner_statement_MUL .

    RKEY            reduce using rule 7 (inner_statement_MUL -> inner_statement inner_statement_MUL .)


state 260

    (181) parameter_list_COLON_PARAMETER -> COLON parameter . parameter_list_COLON_PARAMETER
    (182) parameter_list_COLON_PARAMETER -> COLON parameter .
    (181) parameter_list_COLON_PARAMETER -> . COLON parameter parameter_list_COLON_PARAMETER
    (182) parameter_list_COLON_PARAMETER -> . COLON parameter

    RPAREN          reduce using rule 182 (parameter_list_COLON_PARAMETER -> COLON parameter .)
    COLON           shift and go to state 237

    parameter_list_COLON_PARAMETER shift and go to state 279

state 261

    (149) parameter -> VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 149 (parameter -> VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 149 (parameter -> VARIABLE ASSIGN static_scalar .)


state 262

    (162) static_scalar -> common_scalar .

    COLON           reduce using rule 162 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 162 (static_scalar -> common_scalar .)


state 263

    (163) static_scalar -> PLUS . static_scalar
    (162) static_scalar -> . common_scalar
    (163) static_scalar -> . PLUS static_scalar
    (164) static_scalar -> . MINUS static_scalar
    (165) common_scalar -> . NUMBER_REAL
    (166) common_scalar -> . NUMBER_INTEGER
    (167) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 263
    MINUS           shift and go to state 264
    NUMBER_REAL     shift and go to state 265
    NUMBER_INTEGER  shift and go to state 266
    CONSTANT_ENCAPSED_STRING shift and go to state 267

    static_scalar                  shift and go to state 280
    common_scalar                  shift and go to state 262

state 264

    (164) static_scalar -> MINUS . static_scalar
    (162) static_scalar -> . common_scalar
    (163) static_scalar -> . PLUS static_scalar
    (164) static_scalar -> . MINUS static_scalar
    (165) common_scalar -> . NUMBER_REAL
    (166) common_scalar -> . NUMBER_INTEGER
    (167) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 263
    MINUS           shift and go to state 264
    NUMBER_REAL     shift and go to state 265
    NUMBER_INTEGER  shift and go to state 266
    CONSTANT_ENCAPSED_STRING shift and go to state 267

    static_scalar                  shift and go to state 281
    common_scalar                  shift and go to state 262

state 265

    (165) common_scalar -> NUMBER_REAL .

    COLON           reduce using rule 165 (common_scalar -> NUMBER_REAL .)
    RPAREN          reduce using rule 165 (common_scalar -> NUMBER_REAL .)


state 266

    (166) common_scalar -> NUMBER_INTEGER .

    COLON           reduce using rule 166 (common_scalar -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 166 (common_scalar -> NUMBER_INTEGER .)


state 267

    (167) common_scalar -> CONSTANT_ENCAPSED_STRING .

    COLON           reduce using rule 167 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 167 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 268

    (150) parameter -> parameter_prefix VARIABLE ASSIGN . static_scalar
    (162) static_scalar -> . common_scalar
    (163) static_scalar -> . PLUS static_scalar
    (164) static_scalar -> . MINUS static_scalar
    (165) common_scalar -> . NUMBER_REAL
    (166) common_scalar -> . NUMBER_INTEGER
    (167) common_scalar -> . CONSTANT_ENCAPSED_STRING

    PLUS            shift and go to state 263
    MINUS           shift and go to state 264
    NUMBER_REAL     shift and go to state 265
    NUMBER_INTEGER  shift and go to state 266
    CONSTANT_ENCAPSED_STRING shift and go to state 267

    static_scalar                  shift and go to state 282
    common_scalar                  shift and go to state 262

state 269

    (71) for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 71 (for_parameters -> SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 270

    (68) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .
    (73) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON . for_expr_OPT
    (84) for_expr_OPT -> . expr for_expr_COLON_EXPR
    (85) for_expr_OPT -> . expr
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    RPAREN          reduce using rule 68 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON .)
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    for_expr_OPT                   shift and go to state 283
    expr                           shift and go to state 159
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 271

    (69) for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 69 (for_parameters -> for_expr_OPT SEMICOLON SEMICOLON for_expr_OPT .)


state 272

    (176) for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .

    SEMICOLON       reduce using rule 176 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)
    RPAREN          reduce using rule 176 (for_expr_COLON_EXPR -> COLON expr for_expr_COLON_EXPR .)


state 273

    (82) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN . statement_BLOCK_OPT
    (178) statement_BLOCK_OPT -> . statement
    (179) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (180) statement_BLOCK_OPT -> . LKEY RKEY
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 91
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 284
    statement                      shift and go to state 90
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 274

    (83) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC . ampersand_variable RPAREN statement_BLOCK_OPT
    (79) ampersand_variable -> . AMPERSAND VARIABLE
    (80) ampersand_variable -> . VARIABLE

    AMPERSAND       shift and go to state 252
    VARIABLE        shift and go to state 253

    ampersand_variable             shift and go to state 285

state 275

    (79) ampersand_variable -> AMPERSAND VARIABLE .

    RPAREN          reduce using rule 79 (ampersand_variable -> AMPERSAND VARIABLE .)
    ATTR_ASSOC      reduce using rule 79 (ampersand_variable -> AMPERSAND VARIABLE .)


state 276

    (187) array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .

    RPAREN          reduce using rule 187 (array_pair_list_ARR_PAIR -> COLON array_pair array_pair_list_ARR_PAIR .)


state 277

    (173) array_pair -> expr ATTR_ASSOC AMPERSAND variable .

    COLON           reduce using rule 173 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)
    RPAREN          reduce using rule 173 (array_pair -> expr ATTR_ASSOC AMPERSAND variable .)


state 278

    (90) fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 90 (fc_parameter_list_COLON_PARAMETER -> COLON function_call_parameter fc_parameter_list_COLON_PARAMETER .)


state 279

    (181) parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .

    RPAREN          reduce using rule 181 (parameter_list_COLON_PARAMETER -> COLON parameter parameter_list_COLON_PARAMETER .)


state 280

    (163) static_scalar -> PLUS static_scalar .

    COLON           reduce using rule 163 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 163 (static_scalar -> PLUS static_scalar .)


state 281

    (164) static_scalar -> MINUS static_scalar .

    COLON           reduce using rule 164 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 164 (static_scalar -> MINUS static_scalar .)


state 282

    (150) parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .

    COLON           reduce using rule 150 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)
    RPAREN          reduce using rule 150 (parameter -> parameter_prefix VARIABLE ASSIGN static_scalar .)


state 283

    (73) for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .

    RPAREN          reduce using rule 73 (for_parameters -> for_expr_OPT SEMICOLON for_expr_OPT SEMICOLON for_expr_OPT .)


state 284

    (82) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 82 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT .)


state 285

    (83) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable . RPAREN statement_BLOCK_OPT

    RPAREN          shift and go to state 286


state 286

    (83) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN . statement_BLOCK_OPT
    (178) statement_BLOCK_OPT -> . statement
    (179) statement_BLOCK_OPT -> . LKEY statement_MUL RKEY
    (180) statement_BLOCK_OPT -> . LKEY RKEY
    (37) statement -> . expr SEMICOLON
    (38) statement -> . if_statement
    (39) statement -> . while_statement
    (40) statement -> . do_statement
    (41) statement -> . for_statement
    (42) statement -> . foreach_statement
    (43) statement -> . break_statement
    (44) statement -> . continue_statement
    (45) statement -> . return_statement
    (46) statement -> . exit_statement SEMICOLON
    (47) statement -> . die_statement SEMICOLON
    (48) statement -> . GLOBAL global_var statement_COLON_GLOBAL SEMICOLON
    (49) statement -> . GLOBAL global_var SEMICOLON
    (9) expr -> . expr1 expr2
    (10) expr -> . expr3
    (11) expr -> . expr1
    (50) if_statement -> . statement_if if_statement_complement
    (51) if_statement -> . statement_if
    (57) while_statement -> . WHILE expr_parentheses statement_BLOCK_OPT
    (58) do_statement -> . DO statement_BLOCK_OPT WHILE expr_parentheses SEMICOLON
    (65) for_statement -> . FOR LPAREN for_parameters RPAREN statement_BLOCK_OPT
    (82) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable RPAREN statement_BLOCK_OPT
    (83) foreach_statement -> . FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT
    (59) break_statement -> . BREAK expr SEMICOLON
    (60) break_statement -> . BREAK SEMICOLON
    (61) continue_statement -> . CONTINUE expr SEMICOLON
    (62) continue_statement -> . CONTINUE SEMICOLON
    (63) return_statement -> . RETURN expr SEMICOLON
    (64) return_statement -> . RETURN SEMICOLON
    (29) exit_statement -> . EXIT exit_expr
    (30) exit_statement -> . EXIT
    (31) die_statement -> . DIE exit_expr
    (32) die_statement -> . DIE
    (18) expr1 -> . INCREMENT variable
    (19) expr1 -> . variable INCREMENT
    (20) expr1 -> . DECREMENT variable
    (21) expr1 -> . variable DECREMENT
    (22) expr1 -> . variable
    (23) expr1 -> . LPAREN expr RPAREN
    (24) expr1 -> . ARRAY_TYPE array_declaration
    (25) expr1 -> . function_call
    (26) expr1 -> . scalar
    (27) expr1 -> . TRUE
    (28) expr1 -> . FALSE
    (15) expr3 -> . variable assign_operator expr
    (16) expr3 -> . variable assign_operator AMPERSAND expr
    (17) expr3 -> . LPAREN type_cast_operator RPAREN expr
    (54) statement_if -> . IF expr_parentheses statement_BLOCK_OPT
    (130) variable -> . reference_variable
    (131) variable -> . simple_indirect_reference_DOLAR reference_variable
    (86) function_call -> . ID LPAREN function_call_parameter_list RPAREN
    (87) function_call -> . ID LPAREN RPAREN
    (127) scalar -> . NUMBER_REAL
    (128) scalar -> . NUMBER_INTEGER
    (129) scalar -> . CONSTANT_ENCAPSED_STRING
    (132) reference_variable -> . compound_variable reference_variable_SELECTOR
    (133) reference_variable -> . compound_variable
    (185) simple_indirect_reference_DOLAR -> . DOLAR simple_indirect_reference_DOLAR
    (186) simple_indirect_reference_DOLAR -> . DOLAR
    (134) compound_variable -> . VARIABLE
    (135) compound_variable -> . DOLAR LKEY expr RKEY

    LKEY            shift and go to state 91
    GLOBAL          shift and go to state 20
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    FOR             shift and go to state 26
    FOREACH         shift and go to state 28
    BREAK           shift and go to state 29
    CONTINUE        shift and go to state 30
    RETURN          shift and go to state 31
    EXIT            shift and go to state 32
    DIE             shift and go to state 33
    INCREMENT       shift and go to state 34
    DECREMENT       shift and go to state 36
    LPAREN          shift and go to state 27
    ARRAY_TYPE      shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    IF              shift and go to state 42
    ID              shift and go to state 45
    NUMBER_REAL     shift and go to state 46
    NUMBER_INTEGER  shift and go to state 47
    CONSTANT_ENCAPSED_STRING shift and go to state 48
    DOLAR           shift and go to state 50
    VARIABLE        shift and go to state 51

    expr                           shift and go to state 9
    statement_BLOCK_OPT            shift and go to state 287
    statement                      shift and go to state 90
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    do_statement                   shift and go to state 12
    for_statement                  shift and go to state 13
    foreach_statement              shift and go to state 14
    break_statement                shift and go to state 15
    continue_statement             shift and go to state 16
    return_statement               shift and go to state 17
    exit_statement                 shift and go to state 18
    die_statement                  shift and go to state 19
    expr1                          shift and go to state 21
    expr3                          shift and go to state 22
    statement_if                   shift and go to state 23
    variable                       shift and go to state 35
    function_call                  shift and go to state 38
    scalar                         shift and go to state 39
    reference_variable             shift and go to state 43
    simple_indirect_reference_DOLAR shift and go to state 44
    compound_variable              shift and go to state 49

state 287

    (83) foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .

    FUNCTION        reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    GLOBAL          reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    WHILE           reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DO              reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOR             reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FOREACH         reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    BREAK           reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONTINUE        reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RETURN          reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    EXIT            reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DIE             reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    INCREMENT       reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DECREMENT       reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    LPAREN          reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ARRAY_TYPE      reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    TRUE            reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    FALSE           reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    IF              reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ID              reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_REAL     reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    NUMBER_INTEGER  reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    DOLAR           reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    VARIABLE        reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    END_PROGRAM     reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    RKEY            reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSEIF          reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)
    ELSE            reduce using rule 83 (foreach_statement -> FOREACH LPAREN expr AS ampersand_variable ATTR_ASSOC ampersand_variable RPAREN statement_BLOCK_OPT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 23 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 23 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 50 resolved as shift
WARNING: shift/reduce conflict for DOLAR in state 134 resolved as shift
